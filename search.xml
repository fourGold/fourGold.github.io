<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Kafka_运维与实战</title>
      <link href="2021/07/22/Kafka_%E8%BF%90%E7%BB%B4%E4%B8%8E%E5%AE%9E%E6%88%98/"/>
      <url>2021/07/22/Kafka_%E8%BF%90%E7%BB%B4%E4%B8%8E%E5%AE%9E%E6%88%98/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-Kafka运维命令"><a href="#0x0-Kafka运维命令" class="headerlink" title="0x0 Kafka运维命令"></a>0x0 Kafka运维命令</h1><h2 id="1-连接zk"><a href="#1-连接zk" class="headerlink" title="1.连接zk"></a>1.连接zk</h2><p>由于kafka的各种元数据都存储在zk，要连接kafka集群也要通过zk获取各个broker的ip端口然后连接broker。因此，大多数kafka自带的运维命令都要指定zk的地址，比如用kafka-topics列出所有topics：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-topics --zookeeper localhost:2181/kafka --list<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>--zookeeper</code>参数是必须指定的。另外，如果kafka集群启动的时候在配置文件中指定了namespace，记得要在zk的地址后面也要加上kafka所属的namespace。否则kafka就找不到kafka集群的相关元数据了。</p><p>由于kafka的元数据都存储在zk，因此掌握好如何查看zk的数据也是运维kafka集群的一个关键。</p><h3 id="zkCli-命令"><a href="#zkCli-命令" class="headerlink" title="zkCli 命令"></a>zkCli 命令</h3><p>zookeeper安装包一般都会提供zkCli命令来让用户连接zookeeper集群。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">./zkCli.sh -timeout <span class="token number">5000</span> -r -server ip:port<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>之后进入zk的交互界面，就可以输出相关命令查看zk的数据了。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看kafka集群下所有的brokers id列表</span><span class="token function">ls</span> /brokers/ids<span class="token comment"># 查看 1003 broker的信息</span>get /brokers/ids/1003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>其他zk交互界面的命令这里不多做介绍，zkCli的帮助文档已经写的很清楚了。</p><h2 id="2-topic-相关"><a href="#2-topic-相关" class="headerlink" title="2.topic 相关"></a>2.topic 相关</h2><p>kafka-topics可以进行和topics相关的一些操作。下面介绍一下如何运用该命令来操作kafka topics。</p><p>该命令最终是调用kafka源码中的TopicCommand类来实现的。</p><h3 id="生产与消费"><a href="#生产与消费" class="headerlink" title="生产与消费"></a>生产与消费</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看指定topic的详细信息</span>bin/kafka-topics.sh --zookeeper  hadoop102:2181/kafka --describe --topic <span class="token builtin class-name">test</span><span class="token comment">#往topic里生产数据</span>bin/kafka-console-producer.sh --broker-list hadoop102:9092 --topic <span class="token builtin class-name">test</span><span class="token comment">#消费topic</span>bin/kafka-console-consumer.sh --bootstrap-server hadoop102:9092 --from-beginning  --topic <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列出所有的topic-amp-获取命令帮助"><a href="#列出所有的topic-amp-获取命令帮助" class="headerlink" title="列出所有的topic &amp; 获取命令帮助"></a>列出所有的topic &amp; 获取命令帮助</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 列出帮助文档，英文好的同学基本看帮助文档就可以指定大概怎么使用该命令了</span>kafka-topics --help<span class="token comment"># 列出kafka集群下的所有topics，这里需要指定kafka机器元数据存储所在的zk机器地址，记得如果有namespace，要也加上，否则将连不上kafka集群</span> bin/kafka-topics.sh --zookeeper hadoop102:2181/kafka --list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="创建topic"><a href="#创建topic" class="headerlink" title="创建topic"></a>创建topic</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 创建一个topic为test的topic，并指定分区数为5，副本数为1。这里的副本数不能超过broker的数量，否则会报错</span>kafka-topics --topic timeTest --zookeeper localhost:2181/kafka --create --replication-factor <span class="token number">1</span> --partitions <span class="token number">5</span><span class="token comment"># 创建时指定副本在哪个broker上,多个partition之间用逗号分隔，副本之间用":"分割，第一个副本默认是leader</span>kafka-topics.sh --zookeeper <span class="token number">172.19</span>.0.5:2181 --topic lyt2 --create --replica-assignment <span class="token number">1001</span>:1002,1001:1002,1001:1002<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="列出所有topic的详情"><a href="#列出所有topic的详情" class="headerlink" title="列出所有topic的详情"></a>列出所有topic的详情</h3><p>通过 <code>--describe</code> 参数可以列出我们指定的topics详情，包括 partitions、leader、replicas、isr等。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-topics.sh --zookeeper localhost:2181/kafka --describe <span class="token builtin class-name">test</span> test_yangjb<span class="token comment"># 输出</span>Topic:test  PartitionCount:5    ReplicationFactor:3 Configs:    Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">0</span>    Leader: <span class="token number">1001</span>    Replicas: <span class="token number">1001,1002</span>,1003    Isr: <span class="token number">1002,1001</span>,1003    Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">1</span>    Leader: <span class="token number">1002</span>    Replicas: <span class="token number">1002,1003</span>,1001    Isr: <span class="token number">1002,1003</span>,1001    Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">2</span>    Leader: <span class="token number">1003</span>    Replicas: <span class="token number">1003,1001</span>,1002    Isr: <span class="token number">1002,1001</span>,1003    Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">3</span>    Leader: <span class="token number">1001</span>    Replicas: <span class="token number">1001,1003</span>,1002    Isr: <span class="token number">1002,1001</span>,1003    Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">4</span>    Leader: <span class="token number">1002</span>    Replicas: <span class="token number">1002,1001</span>,1003    Isr: <span class="token number">1002,1001</span>,1003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是一些 使用<code>—describe</code>时可以使用的其他参数</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 只列出修改了默认配置的那些topic。并可以查看修改了哪些topic配置</span>--topics-with-overrides<span class="token comment"># 列出那些目前没有leader的topic</span>--under-replicated-partitions<span class="token comment"># 列出那些正在同步的topic或者同步出现异常的topic</span>--under-replicated-partitions<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="删除topic"><a href="#删除topic" class="headerlink" title="删除topic"></a>删除topic</h3><p>注意，kafka删除topic是异步的，因此并不是命令返回了topic就已经被成功删除。而是等待后台的删除任务执行成功才真正删除该topic。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-topics --zookeeper localhost:2181/kafka --delete --topic yangjb_test<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改topic相关信息"><a href="#修改topic相关信息" class="headerlink" title="修改topic相关信息"></a>修改topic相关信息</h3><p>通过 <code>--alter</code> 参数可以修改topic的信息，能修改的信息包括 partition数量、replica分配情况、topic配置。如果要修改 partition数量时，修改的后的数量一定要比当前的数量大，否则会报错。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将partition数量修改成7个</span>kafka-topics --zookeeper localhost:2181/kafka --topic <span class="token builtin class-name">test</span> --alter --partitions <span class="token number">7</span><span class="token comment"># 通过 --replica-assignment 参数指定新增partition的副本分布情况</span><span class="token comment"># 如果原先的partition数量是3，那么新增的一个分区的副本分布应该在1002和1003</span>kafka-topics --zookeeper localhost:2181/kafka --topic <span class="token builtin class-name">test</span> -alter --partitions <span class="token number">4</span> --replica-assignment <span class="token number">1001</span>:1002,1001:1002,1001:1002,1002:1003<span class="token comment"># 修改topic test的配置 flush.ms =30000 。</span>kafka-topics --zookeeper localhost:2181/kafka  --topic <span class="token builtin class-name">test</span> --alter --config flush.ms<span class="token operator">=</span><span class="token number">30000</span><span class="token comment"># 删除topic test的 flush.ms 配置</span>kafka-topics --zookeeper localhost:2181/kafka  --topic <span class="token builtin class-name">test</span> --alter --delete-config flush.ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>注意，在后续的kafka版本中，关于topic的配置的修改删除可能会被移到kafka-configs.sh中</strong>。官方建议使用kafka-configs来修改topic的配置。</p><h2 id="3-分区副本重分配"><a href="#3-分区副本重分配" class="headerlink" title="3.分区副本重分配"></a>3.分区副本重分配</h2><p>在数据量大的情况下，各个broker上的数据量经常会不一致，有的broker上数据非常大，有的则很小，为了让数据更均匀的分布在各个broker，我们就要学会对topic的partion进行分区副本重分配。</p><p>首先建立一个json文件，用来描述如何分配分区副本。</p><p><code>assign.json</code>：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>  <span class="token string">"partitions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"topic"</span><span class="token builtin class-name">:</span> <span class="token string">"test"</span>,      <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,      <span class="token string">"replicas"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token number">1002</span>,        <span class="token number">1003</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>,    <span class="token punctuation">&#123;</span>      <span class="token string">"topic"</span><span class="token builtin class-name">:</span> <span class="token string">"test"</span>,      <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token number">2</span>,      <span class="token string">"replicas"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token number">1003</span>,        <span class="token number">1002</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>,  <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件中只要指定要重新分配副本的分区号就可以，不需要列出所有分区。</p><h3 id="提交分区副本重分配任务："><a href="#提交分区副本重分配任务：" class="headerlink" title="提交分区副本重分配任务："></a>提交分区副本重分配任务：</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># --execute 参数表示执行</span>kafka-reassign-partitions --zookeeper localhost:2181/kafka --reassignment-json-file assign.json --execute<span class="token comment"># --verify 参数表示查看分区副本重分配任务的执行状态</span>kafka-reassign-partitions --zookeeper localhost:2181/kafka --reassignment-json-file assign.json --verify<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="让系统自动帮我们生成重分配json文件："><a href="#让系统自动帮我们生成重分配json文件：" class="headerlink" title="让系统自动帮我们生成重分配json文件："></a>让系统自动帮我们生成重分配json文件：</h3><p>执行命令之前需要建立一个json文件，告诉系统要重分配哪些分区:</p><p><code>gen.json</code>:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>  <span class="token string">"topics"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"topic"</span><span class="token builtin class-name">:</span> <span class="token string">"foo"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>,  <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接着执行命令</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># --generate 表示生成重分配的json文件</span><span class="token comment"># --topics-to-move-json-file 指定要重分配哪些topic</span><span class="token comment"># --broker-list 表示要分配到哪些broker上去</span>kafka-reassign-partitions --zookeeper localhost:2181/kafka --generate --topics-to-move-json-file gen.json --broker-list <span class="token number">1001,1002</span>,1003<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他参数"><a href="#其他参数" class="headerlink" title="其他参数"></a>其他参数</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 指定重分配时，在一个broker上，各个日志目录之间复制数据的阈值，最低要求 1 KB/s</span><span class="token comment"># 如果重分配任务正在进行，第二次执行会修改原来设置的阈值</span>--replica-alter-log-dirs<span class="token comment"># 指定重分配时，在不同broker之间传输数据的阈值，最低要求 1 KB/s</span><span class="token comment"># 如果重分配任务正在进行，第二次执行会修改原来设置的阈值</span>--throttle<span class="token comment"># 等待重分配任务开始的超时时间</span>--timeout<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="分区副本重分配过程"><a href="#分区副本重分配过程" class="headerlink" title="分区副本重分配过程"></a>分区副本重分配过程</h3><p>详情可以看kafka源码的<code>KafkaController#onPartitionReassignment()</code>的方法注解。</p><p>RAR = Reassigned replicas，目标要分配的副本情况<br> OAR = Original list of replicas for partition，原先的副本分配情况<br> AR = current assigned replicas，当前的副本分配情况</p><ol><li>更新zk处的partition副本配置：AR=RAR+OAR</li><li>向所有RAR+OAR的副本发送元数据更新请求</li><li>将新增的那部分的副本状态设置为NewReplica。也就是 RAR-OAR 那部分副本</li><li>等待所有的副本和leader保持同步。也就是抱着RAR+OAR的副本都在isr中了</li><li>将所有在RAR中的副本状态都设置为OnlineReplica</li><li>在内存中先将AR=RAR</li><li>如果leader不在RAR中，就需要重新竞选leader。采用ReassignedPartitionLeaderSelector选举</li><li>将所有准备移除的副本状态设置为OfflineReplica。也就是OAR-RAR的那部分副本。这时partition的isr会收缩</li><li>将所有准备移除的副本状态设置为NonExistentReplica。这时所在的分区副本数据会被删除。</li><li>将内存中的AR更新到zk</li><li>更新zk的/admin/reassign_partitions路径，移除这个partition</li><li>发送新的元数据到各个broker上</li></ol><p>假设当前有OAR = {1, 2, 3}， RAR = {4,5,6}，在进行partition reaassigned的过程中会发生如下变化</p><table><thead><tr><th>AR</th><th>leader/isr</th><th>步骤</th></tr></thead><tbody><tr><td>{1,2,3}</td><td>1/{1,2,3}</td><td>初始状态</td></tr><tr><td>{1,2,3,4,5,6}</td><td>1/{1,2,3,4,5,6}</td><td>步骤2</td></tr><tr><td>{1,2,3,4,5,6}</td><td>1/{1,2,3,4,5,6}</td><td>步骤4</td></tr><tr><td>{1,2,3,4,5,6}</td><td>4/{1,2,3,4,5,6}</td><td>步骤7</td></tr><tr><td>{1,2,3,4,5,6}</td><td>4/{1,2,3,4,5,6}</td><td>步骤8</td></tr><tr><td>{4,5,6}</td><td>4/{4,5,6}</td><td>步骤10</td></tr></tbody></table><h2 id="4-删除某个partition的数据"><a href="#4-删除某个partition的数据" class="headerlink" title="4.删除某个partition的数据"></a>4.删除某个partition的数据</h2><p>使用kafka-delete-records命令可以删除指定topic-partition在指定offset之前的所有数据。</p><p>该命令是kafka在0.11版本之后才支持的。</p><p>首先需要编写删除offset描述json文件：</p><p>delete.json</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>  <span class="token string">"partitions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"topic"</span><span class="token builtin class-name">:</span> <span class="token string">"test"</span>,      <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,      <span class="token string">"offset"</span><span class="token builtin class-name">:</span> <span class="token number">24</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span>,  <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面的json文件表示删除topic是test的0号parition的24之前的所有offset，也就是1-23这些offset的数据都会被删除掉。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-delete-records --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --offset-json-file delete.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="5-全局-amp-topic配置修改"><a href="#5-全局-amp-topic配置修改" class="headerlink" title="5.全局&amp;topic配置修改"></a>5.全局&amp;topic配置修改</h2><p>通过<code>kafka-configs</code>命令，我们可以修改broker的配置，以及topic的配置、client和user的配置。</p><h3 id="配置更新原理"><a href="#配置更新原理" class="headerlink" title="配置更新原理"></a>配置更新原理</h3><p>kafka-configs命令修改配置后会被写到对应的zookeeper的节点上持久化，之后kafka集群重启后还会加载这些配置，并覆盖配置文件的那些配置。也就是说，如果在此处设置了某个配置项，之后在配置文件中对这个配置项的改动都不会起作用，因为被覆盖了。</p><p>用该命令修改了配置后，可以在zk的节点下看到对应的配置内容。</p><p>节点目录一般是 <code>/config/entityType/entityName</code>,entityType可以是brokers、topics、users、clients。entityName表示具体的名称，比如broker的id，topic的名称等。</p><p>比如要看0号broker修改过的配置项，可以在zk交互界面中输入</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># /kafka 是命名空间</span>get /kafka/config/brokers/0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="修改broker配置"><a href="#修改broker配置" class="headerlink" title="修改broker配置"></a>修改broker配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将0号broker的配置 log.cleaner.backoff.ms修改成1000,flush.ms 也修改成1000</span><span class="token comment"># --alter 表示要修改配置项</span><span class="token comment"># --add-config 后面跟着要修改的配置项</span>kafka-configs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --entity-type brokers --entity-name <span class="token number">0</span> --add-config log.cleaner.backoff.ms<span class="token operator">=</span><span class="token number">1000</span>,flush.ms<span class="token operator">=</span><span class="token number">1000</span> --alter<span class="token comment"># 删除0号broker 对 log.cleaner.backoff.ms的配置</span>kafka-configs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --entity-type brokers --entity-name <span class="token number">0</span> --delete-config log.cleaner.backoff.ms --alter<span class="token comment"># 列出0号broker修改过的配置项</span>kafka-configs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --entity-type brokers --entity-name <span class="token number">0</span> --describe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改topic的配置"><a href="#修改topic的配置" class="headerlink" title="修改topic的配置"></a>修改topic的配置</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 将test这个topic的 delete.retention.ms修改成1000,flush.ms 也修改成1000</span>kafka-configs --zookeeper <span class="token number">127.0</span>.0.1:2181/kafka --entity-type topics --entity-name <span class="token builtin class-name">test</span> --add-config delete.retention.ms<span class="token operator">=</span><span class="token number">1000</span>,flush.ms<span class="token operator">=</span><span class="token number">1000</span> --alter<span class="token comment"># 删除test这个topic的 delete.retention.ms和flush.ms配置项</span>kafka-configs --zookeeper <span class="token number">127.0</span>.0.1:2181/kafka --entity-type topics --entity-name <span class="token builtin class-name">test</span> --delete-config delete.retention.ms,flush.ms --alter<span class="token comment"># 列出 test这个topic修改过的配置项</span>kafka-configs --zookeeper <span class="token number">127.0</span>.0.1:2181/kafka --entity-type topics --entity-name <span class="token builtin class-name">test</span> --describe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="修改client的配置"><a href="#修改client的配置" class="headerlink" title="修改client的配置"></a>修改client的配置</h3><p>这里的client是指客户端，也就是produer或者consumer。客户端支持修改的配置有</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 请求限制</span>request_percentage<span class="token comment"># 推送消息时的流量控制</span>producer_byte_rate<span class="token comment"># 消费时的流量控制</span>consumer_byte_rate<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过指定clientId我们可以控制指定客户端的配置，从而控制他们的流量不会超过我们设定的值</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 设置 客户端id 为test的 producer_byte_rate和consumer_byte_rate为1024</span>kafka-configs --zookeeper <span class="token number">127.0</span>.0.1:2181/kafka --alter --add-config <span class="token string">'producer_byte_rate=1024,consumer_byte_rate=1024'</span> --entity-type clients --entity-name <span class="token builtin class-name">test</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-查看broker上磁盘的使用情况"><a href="#6-查看broker上磁盘的使用情况" class="headerlink" title="6.查看broker上磁盘的使用情况"></a>6.查看broker上磁盘的使用情况</h2><p><strong>在0.11版本中</strong>，新增一个命令<code>kafka-log-dirs</code>可以查看broker的磁盘使用情况。</p><p>该命令可以从两个维度观察磁盘的使用情况，一个是指定broker id，查看该broker的数据目录的各个topic parition的占用大小。还可以直接指定topic，查看这些topic的partition在各个broker上的使用情况。甚至可以两个过滤条件一起用，同时指定brokerId和topic。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment"># 查看0、1号broker上各个topic partition的磁盘使用情况</span>kafka-log-dirs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --broker-list <span class="token number">0,1</span> --describe<span class="token comment"># 查看topic:test 在各个broker上的磁盘使用情况</span>kafka-log-dirs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --topic-list <span class="token builtin class-name">test</span> --describe<span class="token comment"># 查看topic test 在0号broker上的磁盘使用情况</span>kafka-log-dirs --bootstrap-server <span class="token number">127.0</span>.0.1:9092 --topic-list <span class="token builtin class-name">test</span> --broker-list <span class="token number">0</span> --describe<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出示例：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>  <span class="token string">"version"</span><span class="token builtin class-name">:</span> <span class="token number">1</span>,  <span class="token string">"brokers"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"broker"</span><span class="token builtin class-name">:</span> <span class="token number">1001</span>,      <span class="token string">"logDirs"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string">"logDir"</span><span class="token builtin class-name">:</span> <span class="token string">"/kafka/kafka-logs-7da01186c90a"</span>,          <span class="token string">"error"</span><span class="token builtin class-name">:</span> null,          <span class="token string">"partitions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>            <span class="token punctuation">&#123;</span>              <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token string">"test-4"</span>,              <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"offsetLag"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"isFuture"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>,            <span class="token punctuation">&#123;</span>              <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token string">"test-0"</span>,              <span class="token string">"size"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"offsetLag"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>,              <span class="token string">"isFuture"</span><span class="token builtin class-name">:</span> <span class="token boolean">false</span>            <span class="token punctuation">&#125;</span>          <span class="token punctuation">]</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-使用kafka-preferred-replica-election进行leader选举"><a href="#7-使用kafka-preferred-replica-election进行leader选举" class="headerlink" title="7.使用kafka-preferred-replica-election进行leader选举"></a>7.使用kafka-preferred-replica-election进行leader选举</h2><p>当我们查看某个topic partition时，会输出该partiton replica的列表，其中replica列表的第一个replica被kafka称为preferred replica。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Topic: <span class="token builtin class-name">test</span> Partition: <span class="token number">0</span>    Leader: <span class="token number">1002</span>    Replicas: <span class="token number">1001,1002</span>,1003    Isr: <span class="token number">1002,1001</span>,1003<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>上面的test partition-0中，1001就是那个preferred replica。在大多情况下，preferred replica一般就是leader，但是有些情况可能不是。因此，kafka提供了kafka-preferred-replica-election来将preferred replica选举成leader。</p><p>首先我们需要编辑prefered.json 文件：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">&#123;</span>  <span class="token string">"partitions"</span><span class="token builtin class-name">:</span> <span class="token punctuation">[</span>    <span class="token punctuation">&#123;</span>      <span class="token string">"topic"</span><span class="token builtin class-name">:</span> <span class="token string">"test"</span>,      <span class="token string">"partition"</span><span class="token builtin class-name">:</span> <span class="token number">0</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>该文件告诉工具我们要对topic test的partition-0进行preferred选举:</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-preferred-replica-election --zookeeper <span class="token number">127.0</span>.0.1:2181 --path-to-json-file prefered.json<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="8-声明-转载来源"><a href="#8-声明-转载来源" class="headerlink" title="8.声明:转载来源"></a>8.声明:<a href="https://www.jianshu.com/p/77b72fc36ad9">转载来源</a></h2><h1 id="0x1-Kafka-eagle监控"><a href="#0x1-Kafka-eagle监控" class="headerlink" title="0x1 Kafka eagle监控"></a>0x1 Kafka eagle监控</h1><h2 id="1-Kafka-Eagle如何安装？"><a href="#1-Kafka-Eagle如何安装？" class="headerlink" title="1.Kafka Eagle如何安装？"></a>1.Kafka Eagle如何安装？</h2><p>Kafka Eagle安装部署非常方便，可以从<a href="http://www.kafka-eagle.org/">官网</a>下载最新版本进行安装，或者从Github下载最新的Release源代码进行编译安装。</p><p>修改kafka内部配置</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /kafka/bin/kafka-server-start.sh<span class="token comment">#----------------需要修改内容---------</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"x<span class="token variable">$KAFKA_HEAP_OPTS</span>"</span> <span class="token operator">=</span> <span class="token string">"x"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">"-Xmx1G -Xms1G"</span><span class="token keyword">fi</span><span class="token comment">#----------------修改内容-------------</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"x<span class="token variable">$KAFKA_HEAP_OPTS</span>"</span> <span class="token operator">=</span> <span class="token string">"x"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms2G -Xmx2G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70"</span>    <span class="token builtin class-name">export</span> <span class="token assign-left variable">JMX_PORT</span><span class="token operator">=</span><span class="token string">"9999"</span>    <span class="token comment">#export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>例如，从官网下载Kafka Eagle安装包，按如下命令操作即可：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压安装包在software里面</span><span class="token function">tar</span> -zxvf kafka-eagle-v1.4.2-bin.tar.gz<span class="token comment">#进入文件,然后进行解压至</span><span class="token function">tar</span> -zxvf kafka-eagle-web-1.4.5-bin.tar.gz -C /opt/module/<span class="token comment">#修改名称</span><span class="token function">mv</span> kafka-eagle-web-1.4.5/ eagle<span class="token comment">#给ke.sh添加权限</span><span class="token function">chmod</span> u+x ke.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>配置环境变量</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 配置JAVA_HOME和KE_HOME：</span><span class="token attr-name">vi</span> <span class="token attr-value">~/.bash_profile</span><span class="token attr-name">export</span> <span class="token attr-value">JAVA_HOME=/hadoop/jdk8</span><span class="token attr-name">export</span> <span class="token attr-value">KE_HOME=/hadoop/kafka-eagle</span><span class="token attr-name">export</span> <span class="token attr-value">PATH=$PATH:$JAVA_HOME/bin:$KE_HOME/bin</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>修改<strong>conf/system-config.properties</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">######################################</span><span class="token comment"># 设置Kafka多集群，这里只需要设置Zookeeper,</span><span class="token comment"># 系统会自动识别Kafka Broker</span><span class="token comment">######################################</span><span class="token comment"># kafka.eagle.zk.cluster.alias=cluster1</span><span class="token comment"># cluster1.zk.list=127.0.0.1:2181</span><span class="token comment"># cluster2.zk.list=127.0.0.1:2181/plain</span><span class="token comment"># cluster3.zk.list=127.0.0.1:2181/scram</span><span class="token comment"># cluster4.zk.list=vmn4:2181</span><span class="token comment">#--</span><span class="token attr-name">kafka.eagle.zk.cluster.alias</span><span class="token punctuation">=</span><span class="token attr-value">cluster1</span><span class="token attr-name">cluster1.zk.list</span><span class="token punctuation">=</span><span class="token attr-value">hadoop102:2181,hadoop103:2181,hadoop104:2181/kafka</span><span class="token comment">#--</span><span class="token comment">######################################</span><span class="token comment"># Zookeeper线程池最大连接数</span><span class="token comment">######################################</span><span class="token attr-name">kafka.zk.limit.size</span><span class="token punctuation">=</span><span class="token attr-value">25</span><span class="token comment">######################################</span><span class="token comment"># Kafka Eagle的页面访问端口</span><span class="token comment">######################################</span><span class="token attr-name">kafka.eagle.webui.port</span><span class="token punctuation">=</span><span class="token attr-value">8048</span><span class="token comment">######################################</span><span class="token comment"># 存储消费信息的类型，一般在0.9版本之前，消费</span><span class="token comment"># 信息会默认存储在Zookeeper中，所以存储类型</span><span class="token comment"># 设置zookeeper即可，如果是在0.10版本之后，</span><span class="token comment"># 消费者信息默认存储在Kafka中，所以存储类型</span><span class="token comment"># 设置为kafka。而且，在使用消费者API时，尽量</span><span class="token comment"># 客户端Kafka API版本和Kafka服务端的版本保持</span><span class="token comment"># 一致性。</span><span class="token comment">######################################</span><span class="token attr-name">cluster1.kafka.eagle.offset.storage</span><span class="token punctuation">=</span><span class="token attr-value">kafka</span><span class="token comment">#cluster2.kafka.eagle.offset.storage=kafka</span><span class="token comment">#cluster3.kafka.eagle.offset.storage=kafka</span><span class="token comment">#cluster4.kafka.eagle.offset.storage=kafka</span><span class="token comment">######################################</span><span class="token comment"># 开启性能监控，数据默认保留30天</span><span class="token comment">######################################</span><span class="token attr-name">kafka.eagle.metrics.charts</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">kafka.eagle.metrics.retain</span><span class="token punctuation">=</span><span class="token attr-value">30</span><span class="token comment">######################################</span><span class="token comment"># KSQL查询Topic数据默认是最新的5000条，如果</span><span class="token comment"># 在使用KSQL查询的过程中出现异常，可以将下面</span><span class="token comment"># 的false属性修改为true，Kafka Eagle会在</span><span class="token comment"># 系统中自动修复错误。</span><span class="token comment">######################################</span><span class="token attr-name">kafka.eagle.sql.topic.records.max</span><span class="token punctuation">=</span><span class="token attr-value">5000</span><span class="token attr-name">kafka.eagle.sql.fix.error</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token comment">######################################</span><span class="token comment"># 删除Kafka Topic时需要输入删除密钥，由</span><span class="token comment"># 管理员执行</span><span class="token comment">######################################</span><span class="token attr-name">kafka.eagle.topic.token</span><span class="token punctuation">=</span><span class="token attr-value">keadmin</span><span class="token comment">######################################</span><span class="token comment"># 开启Kafka ACL特性，例如SCRAM或者PLAIN，</span><span class="token comment"># 一般生产环境会使用SCRAM来做ACL，应为SCRAM</span><span class="token comment"># 可以动态创建和管理用户。</span><span class="token comment">######################################</span><span class="token attr-name">cluster1.kafka.eagle.sasl.enable</span><span class="token punctuation">=</span><span class="token attr-value">false</span><span class="token attr-name">cluster1.kafka.eagle.sasl.protocol</span><span class="token punctuation">=</span><span class="token attr-value">SASL_PLAINTEXT</span><span class="token attr-name">cluster1.kafka.eagle.sasl.mechanism</span><span class="token punctuation">=</span><span class="token attr-value">SCRAM-SHA-256</span><span class="token attr-name">cluster1.kafka.eagle.sasl.jaas.config</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.security.scram.ScramLoginModule required username="admin" password="admin-secret";</span><span class="token attr-name">cluster1.kafka.eagle.sasl.client.id</span><span class="token punctuation">=</span><span class="token attr-name">cluster2.kafka.eagle.sasl.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token attr-name">cluster2.kafka.eagle.sasl.protocol</span><span class="token punctuation">=</span><span class="token attr-value">SASL_PLAINTEXT</span><span class="token attr-name">cluster2.kafka.eagle.sasl.mechanism</span><span class="token punctuation">=</span><span class="token attr-value">PLAIN</span><span class="token attr-name">cluster2.kafka.eagle.sasl.jaas.config</span><span class="token punctuation">=</span><span class="token attr-value">org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="admin-secret";</span><span class="token attr-name">cluster2.kafka.eagle.sasl.client.id</span><span class="token punctuation">=</span><span class="token comment">######################################</span><span class="token comment"># 存储Kafka Eagle元数据信息的数据库，目前支持</span><span class="token comment"># MySQL和Sqlite，默认使用Sqlite进行存储</span><span class="token comment">######################################</span><span class="token comment"># kafka.eagle.driver=com.mysql.jdbc.Driver</span><span class="token comment"># kafka.eagle.url=jdbc:mysql://127.0.0.1:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><span class="token comment"># kafka.eagle.username=root</span><span class="token comment"># kafka.eagle.password=123456</span><span class="token comment">#kafka.eagle.driver=org.sqlite.JDBC</span><span class="token comment">#kafka.eagle.url=jdbc:sqlite:/Users/dengjie/webserver/hadoop/sqlite/ke.db</span><span class="token comment">#kafka.eagle.username=root</span><span class="token comment">#kafka.eagle.password=root</span><span class="token attr-name">kafka.eagle.driver</span><span class="token punctuation">=</span><span class="token attr-value">com.mysql.jdbc.Driver</span><span class="token attr-name">kafka.eagle.url</span><span class="token punctuation">=</span><span class="token attr-value">jdbc:mysql://hadoop102:3306/ke?useUnicode=true&amp;characterEncoding=UTF-8&amp;zeroDateTimeBehavior=convertToNull</span><span class="token attr-name">kafka.eagle.username</span><span class="token punctuation">=</span><span class="token attr-value">root</span><span class="token attr-name">kafka.eagle.password</span><span class="token punctuation">=</span><span class="token attr-value">123456</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 启动Kafka Eagle系统，执行如下命令：</span>ke.sh start<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>同时，我们还可以执行其他的命令，参数如下：</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 查看Kafka Eagle运行状态</span>ke.sh status<span class="token comment"># 停止Kafka Eagle</span>ke.sh stop<span class="token comment"># 查看Kafka Eagle GC情况</span>ke.sh gc<span class="token comment"># 查看Kafka Eagle服务器资源占用情况，例如TCP、句柄等</span>ke.sh stats<span class="token comment"># 查看Kafka Eagle版本号</span>ke.sh version<span class="token comment"># 查看Kafka Eagle服务器上JDK的编码情况（如果JDK编码不是UTF-8，可能会有异常出现，执行如下命令，根据提示来修复JDK编码问题）</span>ke.sh jdk<span class="token comment"># 查看Kafka Eagle中是否存在某个类（如果需要精确，类名前面可以加上包名）</span>ke.sh <span class="token function">find</span> <span class="token punctuation">[</span>ClassName<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-总结"><a href="#2-总结" class="headerlink" title="2.总结"></a>2.总结</h2><p>总的来说，Kafka Eagle提供了简单、易用的页面，部署方便。同时，提供非常详细的<a href="https://docs.kafka-eagle.org/">操作手册</a>，根据官网提供的操作手册来安装Kafka Eagle，一般都可以正常使用。另外，有时候可能会在日志中发现一些连接超时或是空指针异常，对于这类问题，首先需要检测Kafka集群的各个Broker节点JMX_PORT是否开启（这个Kafka默认是不开启），然后就是空指针异常问题，这类问题通常发生在Kafka集群配置了ACL，这就需要认真检测Kafka Eagle配置文件中ACL信息是否正确（比如设置的用户名和密码是否正确，以及用户是否拥有访问Topic的权限等）</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">..</span>.<span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"x<span class="token variable">$KAFKA_HEAP_OPTS</span>"</span> <span class="token operator">=</span> <span class="token string">"x"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">export</span> <span class="token assign-left variable">KAFKA_HEAP_OPTS</span><span class="token operator">=</span><span class="token string">"-server -Xms8G -Xmx8G -XX:PermSize=128m -XX:+UseG1GC -XX:MaxGCPauseMillis=200 -XX:ParallelGCThreads=8 -XX:ConcGCThreads=5 -XX:InitiatingHeapOccupancyPercent=70"</span>    <span class="token comment"># 开启JMX_PORT端口，端口开启后，Kafka Eagle系统会自动感知获取</span>    <span class="token builtin class-name">export</span> <span class="token assign-left variable">JMX_PORT</span><span class="token operator">=</span><span class="token string">"9999"</span>    <span class="token comment"># 注释脚本中默认的信息</span>    <span class="token comment"># export KAFKA_HEAP_OPTS="-Xmx1G -Xms1G"</span><span class="token keyword">fi</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果大家对Kafka Eagle感兴趣，可以关注一波。后续，在Github上笔者也会公布每个版本的开发计划，修复大家在issues上面提的需求和问题，将Kafka Eagle建设的更加完善、易用。</p><p>Kafka Eagle源代码地址：<a href="https://github.com/smartloli/kafka-eagle">https://github.com/smartloli/kafka-eagle</a></p><h1 id="0x3-Kafka遇见的问题"><a href="#0x3-Kafka遇见的问题" class="headerlink" title="0x3 Kafka遇见的问题"></a>0x3 Kafka遇见的问题</h1><h2 id="1-生产错误"><a href="#1-生产错误" class="headerlink" title="1.生产错误"></a>1.生产错误</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token number">2021</span>-01-11 08:50:00,535<span class="token punctuation">]</span> WARN <span class="token punctuation">[</span>Producer <span class="token assign-left variable">clientId</span><span class="token operator">=</span>console-producer<span class="token punctuation">]</span> Error <span class="token keyword">while</span> fetching metadata with correlation <span class="token function">id</span> <span class="token number">3</span> <span class="token builtin class-name">:</span> <span class="token punctuation">&#123;</span>testTopc1<span class="token operator">=</span>LEADER_NOT_AVAILABLE<span class="token punctuation">&#125;</span> <span class="token punctuation">(</span>org.apache.kafka.clients.NetworkClient<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vi</span> config/server.properties<span class="token function">add</span> below line:<span class="token comment">#添加以下行:</span><span class="token assign-left variable">listeners</span><span class="token operator">=</span>PLAINTEXT://localhost:9092<span class="token comment">#No need to change the advertised.listeners as it picks up the value from std listener property. 不需要更改 advertised.listeners，因为它从 std listener 属性获取值</span><span class="token comment">#Hostname and port the broker will advertise to producers and consumers. If not set,</span><span class="token comment">#代理将向生产者和消费者发布广告的 Hostname 和 port,</span><span class="token comment">#it uses the value for "listeners" if configured 如果配置，它将使用“ listeners”的值</span><span class="token comment">#Otherwise, it will use the value returned from java.net.InetAddress.getCanonicalHostName().</span>stop the Kafka broker:bin/kafka-server-stop.shrestart broker:bin/kafka-server-start.sh -daemon config/server.properties<span class="token comment">#and now you should not see any issues.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-listen介绍"><a href="#2-listen介绍" class="headerlink" title="2.listen介绍"></a>2.listen介绍</h2><p>那么先看看文字类描述：</p><ul><li><code>listeners</code>: 学名叫监听器，其实就是告诉外部连接者要通过什么协议访问指定主机名和端口开放的 <code>Kafka</code> 服务。</li><li><code>advertised.listeners</code>：和 <code>listeners</code> 相比多了个 <code>advertised</code>。<code>Advertised</code> 的含义表示宣称的、公布的，就是说这组监听器是 <code>Broker</code> 用于对外发布的。</li></ul><p>比如说：</p><pre class="line-numbers language-none"><code class="language-none">listeners: INSIDE:&#x2F;&#x2F;172.17.0.10:9092,OUTSIDE:&#x2F;&#x2F;172.17.0.10:9094advertised_listeners: INSIDE:&#x2F;&#x2F;172.17.0.10:9092,OUTSIDE:&#x2F;&#x2F;&lt;公网 ip&gt;:端口kafka_listener_security_protocol_map: &quot;INSIDE:SASL_PLAINTEXT,OUTSIDE:SASL_PLAINTEXT&quot;kafka_inter_broker_listener_name: &quot;INSIDE&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>advertised_listeners</code> 监听器会注册在 <code>zookeeper</code> 中；</p><p>当我们对 <code>172.17.0.10:9092</code> 请求建立连接，<code>kafka</code> 服务器会通过 <code>zookeeper</code> 中注册的监听器，找到 <code>INSIDE</code> 监听器，然后通过 <code>listeners</code> 中找到对应的 通讯 <code>ip</code> 和 端口；</p><p>同理，当我们对 <code>&lt;公网 ip&gt;:端口</code> 请求建立连接，<code>kafka</code> 服务器会通过 <code>zookeeper</code> 中注册的监听器，找到 <code>OUTSIDE</code> 监听器，然后通过 <code>listeners</code> 中找到对应的 通讯 <code>ip</code> 和 端口 <code>172.17.0.10:9094</code>；</p><p>总结：<code>advertised_listeners</code> 是对外暴露的服务端口，真正建立连接用的是 <code>listeners</code>。</p><h3 id="什么场景用到"><a href="#什么场景用到" class="headerlink" title="什么场景用到"></a>什么场景用到</h3><h3 id="只有内网"><a href="#只有内网" class="headerlink" title="只有内网"></a>只有内网</h3><p>比如在公司搭建的 <code>kafka</code> 集群，只有内网中的服务可以用，这种情况下，只需要用 <code>listeners</code> 就行</p><pre class="line-numbers language-none"><code class="language-none">listeners: &lt;协议名称&gt;:&#x2F;&#x2F;&lt;内网ip&gt;:&lt;端口&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>例如：</p><pre class="line-numbers language-none"><code class="language-none">listeners: SASL_PLAINTEXT:&#x2F;&#x2F;192.168.0.4:9092<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="内外网"><a href="#内外网" class="headerlink" title="内外网"></a>内外网</h3><p>在 <code>docker</code> 中或者 在类似阿里云主机上部署 <code>kafka</code> 集群，这种情况下是 需要用到 <code>advertised_listeners</code>。</p><p>以 <code>docker</code> 为例：</p><pre class="line-numbers language-none"><code class="language-none">listeners: INSIDE:&#x2F;&#x2F;0.0.0.0:9092,OUTSIDE:&#x2F;&#x2F;0.0.0.0:9094advertised_listeners: INSIDE:&#x2F;&#x2F;localhost:9092,OUTSIDE:&#x2F;&#x2F;&lt;宿主机ip&gt;:&lt;宿主机暴露的端口&gt;kafka_listener_security_protocol_map: &quot;INSIDE:SASL_PLAINTEXT,OUTSIDE:SASL_PLAINTEXT&quot;kafka_inter_broker_listener_name: &quot;INSIDE&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://segmentfault.com/t/kafka">kafka</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/27/HBase%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/27/HBase%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<hr><p>title; Hbase的学习笔记(中间板)<br>date:2020-11-23</p><hr><h2 id="1-HBase"><a href="#1-HBase" class="headerlink" title="1. HBase"></a>1. HBase</h2><h3 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h3><p>分布式的Mysql数据库</p><p>NoSQL关系型数据库</p><p>多维数据库</p><p>列族 列族不是越多越好 Column Family</p><p>列族分文件夹</p><p>Row Key –&gt; 主键</p><p>根据列切分成store</p><p>行切分成region(一个region包含多个store)</p><p>修改即是插入,更新数据主要是根据时间戳</p><p>TimeStamp</p><p>truncate  清空表的数据</p><p>Name Space == database (default: hbase default)</p><p>Table</p><p>Row</p><p>Column</p><p>Time Stamp</p><p>Cell</p><p>Column Qualifier（列限定符）</p><p>内部inner outer</p><p>Cell (rowkey column Family column Qualifier time Stamp)</p><h3 id="1-2-基本架构"><a href="#1-2-基本架构" class="headerlink" title="1.2 基本架构"></a>1.2 基本架构</h3><p>Master/Zookeeper/Master</p><h3 id="RegionServer的作用-DML"><a href="#RegionServer的作用-DML" class="headerlink" title="RegionServer的作用(DML)"></a>RegionServer的作用(DML)</h3><p>HLog(WAL)</p><p>edits(HDFS)</p><p>binLog()</p><p>Data:get,put,delete</p><p>Region:splitRegion compactRegion</p><h3 id="Matser-表的增删改查DDL-存在单点故障"><a href="#Matser-表的增删改查DDL-存在单点故障" class="headerlink" title="Matser(表的增删改查DDL)(存在单点故障)"></a>Matser(表的增删改查DDL)(存在单点故障)</h3><p>Table:create delete alter</p><p>RegionServer:分配region 监控regionServer</p><p>HBase依赖于ZooKeeper</p><p>数据在HDFS中</p><h3 id="行存储"><a href="#行存储" class="headerlink" title="行存储"></a>行存储</h3><p>Row Key  Column Family Column Qualifier TimeStamp Type Value</p><p>row_key1 personal_info name t1 put value</p><h3 id="1-3-shell"><a href="#1-3-shell" class="headerlink" title="1.3 shell"></a>1.3 shell</h3><h4 id="DDL"><a href="#DDL" class="headerlink" title="DDL"></a>DDL</h4><pre class="line-numbers language-ruby" data-language="ruby"><code class="language-ruby">create <span class="token string">'atguigu:test'</span> <span class="token punctuation">,</span><span class="token string">'info'</span>listdescribe <span class="token string">'atguigu:test'</span>create <span class="token string">'atguigu:test'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token constant">NAME</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token constant">VERSIONS</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token comment">#指定多列族</span>create <span class="token string">'atguigu:test3'</span><span class="token punctuation">,</span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token string">'msg'</span>list_namespace_tables <span class="token string">'default'</span>create <span class="token string">'student'</span><span class="token punctuation">,</span> <span class="token string">'info'</span><span class="token comment">#不指定默认default</span>describe atguigu<span class="token symbol">:test</span>alter <span class="token string">'atguigu:test'</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token constant">NAME</span><span class="token operator">=</span><span class="token operator">></span><span class="token string">'info'</span><span class="token punctuation">,</span><span class="token constant">VERSIONS</span><span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span><span class="token punctuation">&#125;</span>drop <span class="token string">'atguigu:test3'</span><span class="token comment">#会报错</span>disable <span class="token string">'atguigu:test3'</span> <span class="token comment">#让test3表下线</span>drop <span class="token string">'atguigu:test3'</span>list_namespace_tables <span class="token string">'atguigu'</span>disable_all <span class="token string">'atguigu:.*'</span> <span class="token comment">#将所有表下线</span>drop_namespace <span class="token string">'atguigu'</span>list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="DML"><a href="#DML" class="headerlink" title="DML"></a>DML</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">put &#39;student&#39;,1001,&#39;info:name&#39;,&#39;张三&#39;scan &#39;student&#39;put &#39;student&#39;,1001,&#39;info:age&#39;,23put &#39;student&#39;,1001,&#39;indo:email&#39;,&#39;zs@atguigu.com&#39;put &#39;student&#39;,1002,&#39;info:name&#39;,&#39;张三&#39;scan &#39;student&#39;put &#39;student&#39;,1002,&#39;info:age&#39;,23put &#39;student&#39;,1002,&#39;info:address&#39;,&#39;sh&#39;#更新put &#39;student&#39;,1001,&#39;info:email&#39;,&#39;zs@qq.com&#39;scan &#39;student&#39;,&#123;RAW&#x3D;&gt;true,VERSIONS&#x3D;&gt;3&#125;#版本是保留时间戳最近的三个版本put &#39;student&#39;,1003,&#39;info:name&#39;,&#39;wangwu&#39;put &#39;student&#39;,1003,&#39;info:email&#39;,&#39;ww@qq.com&#39;scan &#39;student&#39;,&#123;STARTROW&#x3D;&gt;&#39;1001&#39;,STOPROW&#x3D;&gt;&#39;1003&#39;&#125;#1001-1002 左闭区间右开区间#getget &#39;student&#39;,&#39;1001&#39;,&#39;info:email&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除操作"><a href="#删除操作" class="headerlink" title="删除操作"></a>删除操作</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">delete &#39;student&#39;,&#39;1001&#39;,&#39;info:email&#39;#删除最新的版本,但是可以查到上一个版本deleteall &#39;student&#39;,&#39;1001&#39;,&#39;info:email&#39;#全部删除 #type&#x3D;DeleteColumndeleteall &#39;student&#39;,&#39;1001&#39;#DeleteFamily<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数据存在于HDFS上</p><p>truncate删除表,创建空的新表</p><h3 id="1-4-HBase进阶架构"><a href="#1-4-HBase进阶架构" class="headerlink" title="1.4 HBase进阶架构"></a>1.4 HBase进阶架构</h3><p>MemStore —写缓存. flush之后才会生成storefile</p><p>WAL记录操作日志—预写日志</p><p>BlockCache 读缓存</p><h3 id="1-5-读数据流程与写数据流程"><a href="#1-5-读数据流程与写数据流程" class="headerlink" title="1.5 读数据流程与写数据流程"></a>1.5 读数据流程与写数据流程</h3><h3 id="1-6-合并"><a href="#1-6-合并" class="headerlink" title="1.6 合并"></a>1.6 合并</h3><p>轻量级不会轻易删除,不能保证所有操作都包含</p><p>合并若干个邻近的小文件</p><h3 id="1-7-API操作三句话"><a href="#1-7-API操作三句话" class="headerlink" title="1.7 API操作三句话"></a>1.7 API操作三句话</h3><p>connection</p><h2 id="2-复习"><a href="#2-复习" class="headerlink" title="2. 复习"></a>2. 复习</h2><p>列族相当于动态链</p><p>垂直切分</p><p>每个region包含多个列族</p><p>物理存储结构按照cell</p><p>通过row_key+列族+列名+时间戳+type</p><p>按照字典的顺序进行排序</p><p>删除,新增都是新增</p><p>name space</p><p>table 字段可以动态的,按需指定</p><p>row</p><p>2.架构与API</p><h3 id="2-1-regionServer"><a href="#2-1-regionServer" class="headerlink" title="2.1 regionServer"></a>2.1 regionServer</h3><p>增删改查</p><p>spiltregion</p><p>compactregion</p><h3 id="2-2-Master"><a href="#2-2-Master" class="headerlink" title="2.2 Master"></a>2.2 Master</h3><p>创建表</p><h4 id="元数据表保存在zk里"><a href="#元数据表保存在zk里" class="headerlink" title="==元数据表保存在zk里=="></a>==元数据表保存在zk里==</h4><p>HDFS的源数据表/元数据表</p><p>region的范围</p><p>region里包含store</p><p>分配region</p><p>master配置高可用</p><h3 id="2-3-操作"><a href="#2-3-操作" class="headerlink" title="2.3 操作"></a>2.3 操作</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create &#39;student&#39;,&#39;info&#39;put &#39;student&#39;,&#39;1001&#39;,&#39;info:sex&#39;,&#39;male&#39;scan &#39;student&#39;scan &#39;student&#39;,(STARTROW&#x3D;&gt;&#39;1001&#39;,STOPROW&#x3D;&gt;&#39;1001&#39;)describe &#39;student&#39;#列族,versionput &#39;student&#39;,&#39;1001&#39;,&#39;info:name&#39;,&#39;Nick&#39;get#查询一条get &#39;student&#39;,&#39;1001&#39;get &#39;student&#39;,&#39;1001,&#39;info:sex&#39;delete &#39;student&#39;,&#39;1002&#39;,&#39;info:sex&#39;#删除新版本deleteall &#39;student&#39;,&#39;1001&#39;#删除所有版本truncate &#39;student&#39;#先disable,在truncatedisable &#39;student&#39;drop &#39;student&#39;alter &#39;student&#39;,&#123;NAME&#x3D;&gt;&#39;info&#39;,VERSIONS&#x3D;&gt;3&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-详细架构"><a href="#2-4-详细架构" class="headerlink" title="2.4 详细架构"></a>2.4 详细架构</h3><p>block cache 读缓存,缓存查出来的数据</p><p>WAL 预写日志 write ahead log</p><p>StoreFile – flush(HDFS)(配置文件配置)</p><p>在Store里有MemStore 写缓存,达到阈值后flush</p><h3 id="2-5-写数据流程"><a href="#2-5-写数据流程" class="headerlink" title="2.5 写数据流程"></a>2.5 写数据流程</h3><p>put /table/rowkey/CF/column</p><p>CF column family 列族</p><p>请求meta表所在的regionServer的哪一个(meta表是什么东西)</p><p>meta:hadoop102</p><p>请求我们需要的meta表所在regionServer</p><p>然后client先缓存到meta cache(客户端缓存.存储元数据信息)</p><p>对103发送put请求</p><p>先写到103regionServer的预写日志</p><p>然后写到写缓存里.(算是写数据已经写完了)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">--zookeeperHBase./meta-region-server//存储元数据表在哪里机器上scan <span class="token string">'hbase:meta'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Region Server’</p><h3 id="2-6-读数据"><a href="#2-6-读数据" class="headerlink" title="2.6 读数据"></a>2.6 读数据</h3><p>读写数据,请求zookeeper获得的meta表regionserver的位置</p><p>三个都查询.综合查询(block cache,memstore,Hfile)</p><h3 id="2-7-Storefile的合并"><a href="#2-7-Storefile的合并" class="headerlink" title="2.7 Storefile的合并"></a>2.7 Storefile的合并</h3><p>小合并,.不删除</p><p>大合并</p><h2 id="3-API"><a href="#3-API" class="headerlink" title="3. API"></a>3. API</h2><h3 id="3-1-API操作"><a href="#3-1-API操作" class="headerlink" title="3.1 API操作"></a>3.1 API操作</h3><h3 id="1-API操作"><a href="#1-API操作" class="headerlink" title="1.API操作"></a>1.API操作</h3><h4 id="依赖排除"><a href="#依赖排除" class="headerlink" title="依赖排除"></a>依赖排除</h4><p><img src="HBase%E6%80%BB%E7%BB%93.assets/1602468166022.png" alt="1602468166022"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">conf<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-作业"><a href="#3-2-作业" class="headerlink" title="3.2 作业"></a>3.2 作业</h3><p>JDBC复习</p><p>API操作复习</p><h3 id="3-3-HBase优化"><a href="#3-3-HBase优化" class="headerlink" title="3.3 HBase优化"></a>3.3 HBase优化</h3><p>每一个region维护者一个startRow与endRowKey</p><p>如果加入的数据符合某个region维护的rowKey范围,则该数据交给这个region维护,name依照这个原则,我们可以将数据所要投放的分区提前大致的规划好,以提高HBase的性能</p><p>Phoenix JDBC</p><h3 id="3-4-复习API操作-重点"><a href="#3-4-复习API操作-重点" class="headerlink" title="3.4 复习API操作+==重点==+"></a>3.4 复习API操作+==重点==+</h3><h4 id="1-gt-环境准备"><a href="#1-gt-环境准备" class="headerlink" title="1&gt;环境准备"></a>1&gt;环境准备</h4><h4 id="2-gt-操作"><a href="#2-gt-操作" class="headerlink" title="2&gt;操作"></a>2&gt;操作</h4><p>三遍复习 训练HBase</p><p>预分区</p><h2 id="4-Phoenix"><a href="#4-Phoenix" class="headerlink" title="4. Phoenix"></a>4. Phoenix</h2><p>启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">sqlline.py hadoop105,hadoop106,hadoop107:2181<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-1-使用Phoenix语法"><a href="#4-1-使用Phoenix语法" class="headerlink" title="4.1 使用Phoenix语法"></a>4.1 使用Phoenix语法</h3><p>thin client</p><p>连客户端/多一个query server</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">--查询list namespacecreate schema test;#报错.mapping<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="HBase%E6%80%BB%E7%BB%93.assets/1602555420741.png" alt="1602555420741"></p><p>修改配置,创建映射,否则报错</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>phoenix.schema.isNamespaceMappingEnabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">#创建表</span><span class="token keyword">create</span> <span class="token keyword">table</span> student <span class="token punctuation">(</span>id <span class="token keyword">varchar</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>                      name <span class="token keyword">varchar</span><span class="token punctuation">,</span>                      addr <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">upsert <span class="token keyword">into</span> student <span class="token keyword">values</span><span class="token punctuation">(</span><span class="token string">'1001'</span><span class="token punctuation">,</span><span class="token string">'zhangsan'</span><span class="token punctuation">,</span><span class="token string">'beijing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-Phoenix重点说明-SHELL"><a href="#4-2-Phoenix重点说明-SHELL" class="headerlink" title="4.2 Phoenix重点说明 + SHELL"></a>4.2 Phoenix重点说明 + SHELL</h3><p>phoenix把字段进行编码,为了减少内存空间,</p><p>phoenix把字段进行编码,为了减少内存空间,</p><p>column_encoded_bytes = 0;使用这个配置可以不让Phoenix把字段进行编码</p><p>不想使用大写,就使用双引号括起来</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">delete</span> <span class="token keyword">from</span> student <span class="token keyword">where</span> id <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span>scan <span class="token string">'TEST:STUDENT'</span> &#123;RAW<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">true</span>&#125;<span class="token comment">--查看历史版本/包括删除信息</span>scan <span class="token string">'TEST:STUDENT'</span> &#123;RAW<span class="token operator">=</span><span class="token operator">></span><span class="token boolean">true</span><span class="token punctuation">,</span>VERSIONS<span class="token operator">=</span><span class="token operator">></span><span class="token number">3</span>&#125;<span class="token keyword">drop</span> <span class="token keyword">table</span> <span class="token string">"student2"</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><h3 id="4-3-表的映射"><a href="#4-3-表的映射" class="headerlink" title="4.3 表的映射"></a>4.3 表的映射</h3><p>视图映射</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">create</span> <span class="token keyword">view</span> <span class="token string">"test"</span><span class="token punctuation">(</span>id <span class="token keyword">varchar</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span><span class="token string">"info1"</span><span class="token punctuation">.</span><span class="token string">"name"</span> <span class="token keyword">varchar</span><span class="token punctuation">,</span> <span class="token string">"info2"</span><span class="token punctuation">.</span><span class="token string">"address"</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">drop</span> <span class="token keyword">view</span> <span class="token string">"test"</span><span class="token comment">#指定命名空间需要 student.test 使用表名</span><span class="token keyword">create</span> <span class="token keyword">view</span> <span class="token string">"student"</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span><span class="token keyword">varchar</span> <span class="token keyword">primary</span> <span class="token keyword">key</span><span class="token punctuation">,</span>                      <span class="token string">"info"</span><span class="token punctuation">.</span><span class="token string">"name"</span> <span class="token keyword">varchar</span><span class="token punctuation">,</span>                      <span class="token string">"info"</span><span class="token punctuation">.</span><span class="token string">"age"</span> <span class="token keyword">varchar</span><span class="token punctuation">)</span><span class="token keyword">use</span> <span class="token keyword">default</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">put &#39;student&#39;,&#39;1001&#39;,&#39;info:age&#39;,&#39;23&#39;column_ecoded_bytes&#x3D;0;select from student;upsert into &#39;student&#39; values(&quot;1002&quot;,&quot;lisi&quot;,&quot;24&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-4-JDBC操作"><a href="#4-4-JDBC操作" class="headerlink" title="4.4 JDBC操作"></a>4.4 JDBC操作</h3><p>导入依赖</p><h2 id="5-复习"><a href="#5-复习" class="headerlink" title="5 复习"></a>5 复习</h2><p>Phoenix容易集成</p><table><thead><tr><th></th><th></th><th></th></tr></thead><tbody><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><p>RegionServer</p><p>映射</p><p>JDBC连接</p><p>关键问题</p><p>HBase​ : meta表</p><p>对于一张表来说存储的是三条数据</p><p>加入你要寻找Table1的RowKey</p><p>meta表</p><table><thead><tr><th>Table</th><th>Region</th><th>RowKey</th><th>Server</th></tr></thead><tbody><tr><td>Table1</td><td>Region1</td><td>0</td><td>hadoop105</td></tr><tr><td>Table1</td><td>Region2</td><td>1000</td><td>hadoop105</td></tr><tr><td>Tabel1</td><td>Region3</td><td>2000</td><td>hadoop106</td></tr><tr><td>Table2</td><td>Region1</td><td>aaaaaaa</td><td>hadoop105</td></tr><tr><td>Table2</td><td>Region2</td><td>bbbbbb</td><td>hadoop106</td></tr><tr><td>Table2</td><td>Region3</td><td>cccccccc</td><td>hadoop107</td></tr><tr><td>Table3</td><td>Region1</td><td></td><td></td></tr><tr><td>…</td><td>…</td><td></td><td></td></tr></tbody></table><p>数据先写到WAL在写入MemoStore</p><p>WAL还没有同步到HDFS</p><p>写入到MemoStore</p><p>同步</p><p>同步不完成 回滚</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="2021/01/27/Flink07_TableAPI%E4%B8%8EFlinkSQL/"/>
      <url>2021/01/27/Flink07_TableAPI%E4%B8%8EFlinkSQL/</url>
      
        <content type="html"><![CDATA[<p>Table API 和 Flink SQL</p><h1 id="第一章-整体介绍"><a href="#第一章-整体介绍" class="headerlink" title="第一章 整体介绍"></a>第一章 整体介绍</h1><h2 id="1-1-什么是-Table-API-和-Flink-SQL"><a href="#1-1-什么是-Table-API-和-Flink-SQL" class="headerlink" title="1.1 什么是 Table API 和 Flink SQL"></a>1.1 什么是 Table API 和 Flink SQL</h2><p>Flink本身是批流统一的处理框架，所以Table API和SQL，就是批流统一的上层处理API。</p><p>目前功能尚未完善，处于活跃的开发阶段。</p><p>Table API是一套内嵌在Java和Scala语言中的查询API，它允许我们以非常直观的方式，组合来自一些关系运算符的查询（比如select、filter和join）。</p><p>而对于Flink SQL，就是直接可以在代码中写SQL，来实现一些查询（Query）操作。Flink的SQL支持，基于实现了SQL标准的Apache Calcite（Apache开源SQL解析工具）。</p><p>无论输入是批输入还是流式输入，在这两套API中，指定的查询都具有相同的语义，得到相同的结果。</p><h2 id="1-2-需要引入的依赖"><a href="#1-2-需要引入的依赖" class="headerlink" title="1.2 需要引入的依赖"></a>1.2 需要引入的依赖</h2><p>Table API和SQL需要引入的依赖有两个：planner和bridge。</p><p>&lt;**dependency**&gt;<br>   &lt;**groupId**&gt;org.apache.flink&lt;/**groupId**&gt;<br>   &lt;**artifactId**&gt;flink-table-planner_2.12&lt;/**artifactId**&gt;<br>   &lt;**version**&gt;1.10.1&lt;/**version**&gt;<br> &lt;/**dependency**&gt;</p><p>&lt;**dependency**&gt;<br>   &lt;**groupId**&gt;org.apache.flink&lt;/**groupId**&gt;<br>   &lt;**artifactId**&gt;flink-table-api-java-bridge_2.12&lt;/**artifactId**&gt;<br>   &lt;**version**&gt;1.10.1&lt;/**version**&gt;<br> &lt;/**dependency**&gt;</p><p>flink-table-planner：planner计划器，是table API最主要的部分，提供了运行时环境和生成程序执行计划的planner；</p><p>flink-table-api-scala-bridge, flink-table-api-java-bridge：bridge桥接器，主要负责table API和 DataStream/DataSet API的连接支持，按照语言分java和scala。</p><p>这里的两个依赖，是IDE环境下运行需要添加的；如果是生产环境，lib目录下默认已经有了planner，就只需要有bridge就可以了。</p><p>当然，如果想使用用户自定义函数，或是跟kafka做连接，需要有一个SQL client，这个包含在flink-table-common里。</p><h3 id="1-2-1-牛刀小试"><a href="#1-2-1-牛刀小试" class="headerlink" title="1.2.1 牛刀小试"></a>1.2.1 牛刀小试</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.DataStreamSource;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test01 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**获取执行环境并设置并行度 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);          <em>//2.**读取文本数据创建流 *      DataStreamSource<String>  readTextFile = env.readTextFile(*</em>“sensor”<strong>);          *//3.<strong>将每一行数据转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = readTextFile.map(line -&gt; {         String[] fields =  line.split(</strong>“,”<strong>);         **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));       });          <em>//4.<strong>创建</strong>TableAPI**执行环境 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create</em>(env);          <em>//5.**从流中创建表 *      Table table =  tableEnv.fromDataStream(sensorDataStream);          *//6.**转换数据 *      *//6.1</em> <em>使用<strong>TableAPI</strong>转换数据 *      Table result =  table.select(*</em>“id,temp”<strong>).filter(</strong>“id =  ‘sensor_1’”<strong>);          <em>//6.2</em> *使用<strong>FlinkSQL</strong>转换数据 *      tableEnv.createTemporaryView(</strong>“sensor”<strong>,  sensorDataStream);       Table sqlResult =  tableEnv.sqlQuery(</strong>“select id,temp from sensor where  id=’sensor_1’”<strong>);          <em>//7.**转换为流输出数据 *      tableEnv.toAppendStream(result,  Row.*</em>class</strong>).print(<strong>“result”</strong>);         tableEnv.toAppendStream(sqlResult, Row.<strong>class</strong>).print(<strong>“sql”</strong>);          *//8.**启动任务 *      env.execute();     }      }  </p><h2 id="1-3-两种planner（old-amp-blink）的区别"><a href="#1-3-两种planner（old-amp-blink）的区别" class="headerlink" title="1.3 两种planner（old &amp; blink）的区别"></a>1.3 两种planner（old &amp; blink）的区别</h2><p>\1. 批流统一：Blink将批处理作业，视为流式处理的特殊情况。所以，blink不支持表和DataSet之间的转换，批处理作业将不转换为DataSet应用程序，而是跟流处理一样，转换为DataStream程序来处理。</p><p>\2. 因为批流统一，Blink planner也不支持BatchTableSource，而使用有界的StreamTableSource代替。</p><p>\3. Blink planner只支持全新的目录，不支持已弃用的ExternalCatalog。</p><p>\4. 旧planner和Blink planner的FilterableTableSource实现不兼容。旧的planner会把PlannerExpressions下推到filterableTableSource中，而blink planner则会把Expressions下推。</p><p>\5. 基于字符串的键值配置选项仅适用于Blink planner。</p><p>\6. PlannerConfig在两个planner中的实现不同。</p><p>\7. Blink planner会将多个sink优化在一个DAG中（仅在TableEnvironment上受支持，而在StreamTableEnvironment上不受支持）。而旧planner的优化总是将每一个sink放在一个新的DAG中，其中所有DAG彼此独立。</p><p>\8. 旧的planner不支持目录统计，而Blink planner支持。</p><p>\9. 使用Blink所需依赖</p><p>  &lt;**dependency**&gt;     &lt;**groupId**&gt;org.apache.flink&lt;/**groupId**&gt;     &lt;**artifactId**&gt;flink-table-planner-blink_2.12&lt;/**artifactId**&gt;     &lt;**version**&gt;1.10.1&lt;/**version**&gt;   &lt;/**dependency**&gt;  </p><h1 id="第二章-API调用"><a href="#第二章-API调用" class="headerlink" title="第二章 API调用"></a>第二章 API调用</h1><h2 id="2-1-基本程序结构"><a href="#2-1-基本程序结构" class="headerlink" title="2.1 基本程序结构"></a>2.1 基本程序结构</h2><p>Table API 和 SQL 的程序结构，与流式处理的程序结构类似；也可以近似地认为有这么几步：首先创建执行环境，然后定义source、transform和sink。</p><p>具体操作流程如下：</p><p>StreamTableEnvironment tableEnv = …   <em>//</em> <em>创建表的执行环境<br>\</em> <em>//</em> <em>创建一张表，用于读取数据<br>\</em> tableEnv.connect(…).createTemporaryTable(<strong>“inputTable”</strong>);<br> <em>//</em> <em>注册一张表，用于把计算结果输出<br>\</em> tableEnv.connect(…).createTemporaryTable(<strong>“outputTable”</strong>);<br> <em>//</em> <em>通过</em> <em>Table API</em> <em>查询算子，得到一张结果表<br>\</em> Table result = tableEnv.from(<strong>“inputTable”</strong>).select(…);<br> <em>//</em> <em>通过</em> <em>SQL**查询语句，得到一张结果表<br>\</em> Table sqlResult = tableEnv.sqlQuery(<strong>“SELECT … FROM inputTable …”</strong>);<br> <em>//</em> <em>将结果表写入输出表中<br>\</em> result.insertInto(<strong>“outputTable”</strong>);</p><h2 id="2-2-创建表环境"><a href="#2-2-创建表环境" class="headerlink" title="2.2 创建表环境"></a>2.2 创建表环境</h2><p>创建表环境最简单的方式，就是基于流处理执行环境，调create方法直接创建：</p><p>StreamTableEnvironment tableEnv = StreamTableEnvironment.<em>create</em>(env);</p><p>表环境（TableEnvironment）是flink中集成Table API &amp; SQL的核心概念。它负责:</p><p>l 注册catalog</p><p>l 在内部 catalog 中注册表</p><p>l 执行 SQL 查询</p><p>l 注册用户自定义函数</p><p>l 将 DataStream 或 DataSet 转换为表</p><p>l 保存对 ExecutionEnvironment 或 StreamExecutionEnvironment 的引用</p><p>在创建TableEnv的时候，可以多传入一个EnvironmentSettings或者TableConfig参数，可以用来配置 TableEnvironment的一些特性。比如：</p><p>配置老版本的流式查询（Flink-Streaming-Query）：</p><p>EnvironmentSettings settings = EnvironmentSettings.<em>newInstance</em>()<br>  .useOldPlanner()   <em>//</em> <em>使用老版本**planner<br>\</em>  .inStreamingMode()  <em>//</em> <em>流处理模式<br>\</em>  .build();<br> StreamTableEnvironment tableEnv = StreamTableEnvironment.<em>create</em>(env, settings);</p><p>基于老版本的批处理环境（Flink-Batch-Query）：</p><p>ExecutionEnvironment batchEnv = ExecutionEnvironment.<em>getExecutionEnvironment;</em></p><p>BatchTableEnvironment batchTableEnv = BatchTableEnvironment.<em>create</em>(batchEnv);</p><p>基于blink版本的流处理环境（Blink-Streaming-Query）：</p><p>EnvironmentSettings bsSettings = EnvironmentSettings.<em>newInstance</em>()</p><p>.useBlinkPlanner()</p><p>.inStreamingMode()</p><p>.build();<br> StreamTableEnvironment bsTableEnv = StreamTableEnvironment.<em>create</em>(env, bsSettings);</p><p>基于blink版本的批处理环境（Blink-Batch-Query）：</p><p>EnvironmentSettings bbSettings = EnvironmentSettings.<em>newInstance</em>()</p><p>.useBlinkPlanner()</p><p>.inBatchMode()</p><p>.build();<br> TableEnvironment bbTableEnv = TableEnvironment.<em>create</em>(bbSettings);</p><h2 id="2-3-在Catalog中注册表"><a href="#2-3-在Catalog中注册表" class="headerlink" title="2.3 在Catalog中注册表"></a>2.3 在Catalog中注册表</h2><h3 id="2-3-1-表（Table）的概念"><a href="#2-3-1-表（Table）的概念" class="headerlink" title="2.3.1 表（Table）的概念"></a>2.3.1 表（Table）的概念</h3><p>TableEnvironment可以注册目录Catalog，并可以基于Catalog注册表。它会维护一个Catalog-Table表之间的map。</p><p>表（Table）是由一个“标识符”来指定的，由3部分组成：Catalog名、数据库（database）名和对象名（表名）。如果没有指定目录或数据库，就使用当前的默认值。</p><p>表可以是常规的（Table，表），或者虚拟的（View，视图）。</p><p>常规表（Table）一般可以用来描述外部数据，比如文件、数据库表或消息队列的数据，也可以直接从 DataStream转换而来。</p><p>视图可以从现有的表中创建，通常是table API或者SQL查询的一个结果。</p><h3 id="2-3-2-读取文件数据（Csv格式）"><a href="#2-3-2-读取文件数据（Csv格式）" class="headerlink" title="2.3.2 读取文件数据（Csv格式）"></a>2.3.2 读取文件数据（Csv格式）</h3><p>连接外部系统在Catalog中注册表，直接调用tableEnv.connect()就可以，里面参数要传入一个ConnectorDescriptor，也就是connector描述器。对于文件系统的connector而言，flink内部已经提供了，就叫做FileSystem()。</p><p>代码如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.FileSystem;   <strong>import</strong> org.apache.flink.table.descriptors.OldCsv;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test02 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**获取执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();          <em>//2.**设置并行度 *      env.setParallelism(1);          *//3.**创建 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create</em>(env);          <em>//4.**读取文件数据创建表 *      tableEnv.connect(*</em>new** FileSystem().path(<strong>“input/sensor.txt”</strong>))           .withFormat(<strong>new</strong> OldCsv())           .withSchema(<strong>new</strong> Schema().field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())               .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>())               .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>()))           .createTemporaryTable(<strong>“inputTable”</strong>);          <em>//5.<strong>执行</strong>SQL**查询数据 *      Table table =  tableEnv.sqlQuery(*</em>“select id,temp from inputTable where  id=’sensor_1’”<strong>);          <em>//6.**将表转换为追加流并打印 *      tableEnv.toAppendStream(table,  Row.*</em>class</strong>).print();          *//7.**执行任务 *      env.execute();     }      }  </p><p>这是旧版本的csv格式描述器。由于它是非标的，跟外部系统对接并不通用，所以将被弃用，以后会被一个符合RFC-4180标准的新format描述器取代。新的描述器就叫Csv()，但flink没有直接提供，需要引入依赖flink-csv：</p><p>&lt;**dependency**&gt;<br>   &lt;**groupId**&gt;org.apache.flink&lt;/**groupId**&gt;<br>   &lt;**artifactId**&gt;flink-csv&lt;/**artifactId**&gt;<br>   &lt;**version**&gt;1.10.1&lt;/**version**&gt;<br> &lt;/**dependency**&gt;</p><p>代码非常类似，只需要把withFormat里的OldCsv改成Csv就可以了。</p><h3 id="2-3-3-读取Kafka数据"><a href="#2-3-3-读取Kafka数据" class="headerlink" title="2.3.3 读取Kafka数据"></a>2.3.3 读取Kafka数据</h3><p>kafka的连接器flink-kafka-connector中，1.10版本的已经提供了Table API的支持。我们可以在 connect方法中直接传入一个叫做Kafka的类，这就是kafka连接器的描述器ConnectorDescriptor。</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.Csv;   <strong>import</strong> org.apache.flink.table.descriptors.Kafka;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test03 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>定义</strong>Kafka**连接描述器 *      Kafka kafka = *</em>new** Kafka()           .version(<strong>“0.11”</strong>)           .topic(<strong>“test”</strong>)           .property(<strong>“bootstrap.servers”</strong>, <strong>“hadoop102:9092”</strong>);          <em>//3.<strong>定义表的</strong>Schema**信息 *      Schema schema = *</em>new** Schema()           .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())           .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>())           .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>());          <em>//4.<strong>读取</strong>Kafka**数据创建临时表 *      tableEnv.connect(kafka).withFormat(*</em>new** Csv()).withSchema(schema).createTemporaryTable(<strong>“KafkaTable”</strong>);          <em>//5.<strong>执行</strong>SQL**查询数据 *      Table table =  tableEnv.sqlQuery(*</em>“select id,temp from KafkaTable where  id=’sensor_1’”<strong>);          <em>//6.**将表转换为追加流进行打印 *      tableEnv.toAppendStream(table,  Row.*</em>class</strong>).print();          *//7.**执行任务 *      env.execute();        }      }  </p><p>当然也可以连接到ElasticSearch、MySql、HBase、Hive等外部系统，实现方式基本上是类似的。</p><h2 id="2-4-表的查询"><a href="#2-4-表的查询" class="headerlink" title="2.4 表的查询"></a>2.4 表的查询</h2><p>利用外部系统的连接器connector，我们可以读写数据，并在环境的Catalog中注册表。接下来就可以对表做查询转换了。</p><p>Flink给我们提供了两种查询方式：Table API和 SQL。</p><h3 id="2-4-1-Table-API的调用"><a href="#2-4-1-Table-API的调用" class="headerlink" title="2.4.1 Table API的调用"></a>2.4.1 Table API的调用</h3><p>Table API是集成在Scala和Java语言内的查询API。与SQL不同，Table API的查询不会用字符串表示，而是在宿主语言中一步一步调用完成的。</p><p>Table API基于代表一张“表”的Table类，并提供一整套操作处理的方法API。这些方法会返回一个新的Table对象，这个对象就表示对输入表应用转换操作的结果。有些关系型转换操作，可以由多个方法调用组成，构成链式调用结构。例如table.select(…).filter(…)，其中select（…）表示选择表中指定的字段，filter(…)表示筛选条件。</p><p>代码中的实现如下：</p><p>Table sensorTable = tableEnv.from(<strong>“inputTable”</strong>);</p><p>Table resultTable = senorTable</p><p>.select(<strong>“id, temperature”</strong>)</p><p>.filter(<strong>“id =’sensor_1’”</strong>);</p><h3 id="2-4-2-SQL查询"><a href="#2-4-2-SQL查询" class="headerlink" title="2.4.2 SQL查询"></a>2.4.2 SQL查询</h3><p>Flink的SQL集成，基于的是ApacheCalcite，它实现了SQL标准。在Flink中，用常规字符串来定义SQL查询语句。SQL 查询的结果，是一个新的 Table。</p><p>代码实现如下：</p><p>Table resultSqlTable = tableEnv.sqlQuery(<strong>“select id, temperature from inputTable where id =’sensor_1’”</strong>);</p><p>当然，也可以加上聚合操作，比如我们统计每个sensor温度数据出现的个数，做个count统计：</p><p>Table aggResultTable = sensorTable</p><p>.groupBy(<strong>“id”</strong>)</p><p>.select(<strong>“id</strong>, <strong>id</strong>.count as <strong>count”</strong>);</p><p>SQL的实现：</p><p>Table aggResultSqlTable = tableEnv.sqlQuery(<strong>“select id, count(id) as cnt from inputTable group by id”</strong>);</p><h2 id="2-5-将DataStream-转换成表"><a href="#2-5-将DataStream-转换成表" class="headerlink" title="2.5 将DataStream 转换成表"></a>2.5 将DataStream 转换成表</h2><p>Flink允许我们把Table和DataStream做转换：我们可以基于一个DataStream，先流式地读取数据源，然后map成POJO，再把它转成Table。Table的列字段（column fields），就是POJO里的字段，这样就不用再麻烦地定义schema了。</p><h3 id="2-5-1-代码表达"><a href="#2-5-1-代码表达" class="headerlink" title="2.5.1 代码表达"></a>2.5.1 代码表达</h3><p>代码中实现非常简单，直接用tableEnv.fromDataStream()就可以了。默认转换后的 Table schema 和 DataStream 中的字段定义一一对应，也可以单独指定出来。</p><p>这就允许我们更换字段的顺序、重命名，或者只选取某些字段出来，相当于做了一次map操作（或者Table API的 select操作）。</p><p>代码具体如下：</p><pre class="line-numbers language-none"><code class="language-none">DataStream&lt;String&gt; inputStream &#x3D; env.readTextFile(&quot;sensor.txt&quot;);DataStream&lt;SensorReading&gt; dataStream &#x3D; inputStream        .map( line -&gt; &#123;            String[] fields &#x3D; line.split(&quot;,&quot;);            return new SensorReading(fields[0], new Long(fields[1]), new Double(fields[2]));        &#125; );<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Table sensorTable = tableEnv.fromDataStream(dataStream, <strong>“id, timestamp.rowtime as ts, temperature”</strong>);</p><h3 id="2-5-2-数据类型与-Table-schema的对应"><a href="#2-5-2-数据类型与-Table-schema的对应" class="headerlink" title="2.5.2 数据类型与 Table schema的对应"></a>2.5.2 数据类型与 Table schema的对应</h3><p>在上节的例子中，DataStream 中的数据类型，与表的 Schema 之间的对应关系，是按照类中的字段名来对应的（name-based mapping），所以还可以用as做重命名。</p><p>基于名称的对应：</p><p>Table sensorTable = tableEnv.fromDataStream(dataStream, <strong>“timestamp</strong> as <strong>ts</strong>, <strong>id</strong> as <strong>myId</strong>, <strong>temperature”</strong>);</p><p>Flink的DataStream和 DataSet API支持多种类型。</p><p>组合类型，比如元组（内置Scala和Java元组）、POJO、Scala case类和Flink的Row类型等，允许具有多个字段的嵌套数据结构，这些字段可以在Table的表达式中访问。其他类型，则被视为原子类型。</p><h2 id="2-6-创建临时视图（Temporary-View）"><a href="#2-6-创建临时视图（Temporary-View）" class="headerlink" title="2.6. 创建临时视图（Temporary View）"></a>2.6. 创建临时视图（Temporary View）</h2><p>创建临时视图的第一种方式，就是直接从DataStream转换而来。同样，可以直接对应字段转换；也可以在转换的时候，指定相应的字段。</p><p>代码如下：</p><p>tableEnv.createTemporaryView(<strong>“sensorView”</strong>, dataStream);<br> tableEnv.createTemporaryView(<strong>“sensorView”</strong>, dataStream, <strong>“id</strong>, <strong>temperature</strong>, <strong>timestamp</strong> as <strong>ts”</strong>);</p><p>另外，当然还可以基于Table创建视图：</p><p>tableEnv.createTemporaryView(<strong>“sensorView”</strong>, sensorTable);</p><p>View和Table的Schema完全相同。事实上，在Table API中，可以认为View和Table是等价的。</p><h2 id="2-7-输出表"><a href="#2-7-输出表" class="headerlink" title="2.7. 输出表"></a>2.7. 输出表</h2><p>表的输出，是通过将数据写入 TableSink 来实现的。TableSink 是一个通用接口，可以支持不同的文件格式、存储数据库和消息队列。</p><p>具体实现，输出表最直接的方法，就是通过 Table.insertInto() 方法将一个 Table 写入注册过的 TableSink 中。</p><h3 id="2-7-1-将表转换成DataStream打印"><a href="#2-7-1-将表转换成DataStream打印" class="headerlink" title="2.7.1 将表转换成DataStream打印"></a>2.7.1 将表转换成DataStream打印</h3><p>表可以转换为DataStream或DataSet。这样，自定义流处理或批处理程序就可以继续在 Table API或SQL查询的结果上运行了。</p><p>将表转换为DataStream或DataSet时，需要指定生成的数据类型，即要将表的每一行转换成的数据类型。通常，最方便的转换类型就是Row。当然，因为结果的所有字段类型都是明确的，我们也经常会用元组类型来表示。</p><p>代码实现如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.FileSystem;   <strong>import</strong> org.apache.flink.table.descriptors.OldCsv;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;      <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test04 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {       StreamExecutionEnvironment env  = StreamExecutionEnvironment.<em>getExecutionEnvironment</em>();       env.setParallelism(1);          <em>//1.</em> <em>创建表环境 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create</em>(env);          <em>//2.</em> <em>连接外部系统，读取数据，创建表 *      *//2.1</em> <em>读取文件 *      String filePath  = *</em>“D:<strong><strong>\</strong></strong>Projects*<strong><em>\*</em></strong>BigData*<strong><em>\*</em></strong>FlinkTurtorial*<strong><em>\*</em></strong>src*<strong><em>\*</em></strong>main*<strong><em>\*</em></strong>resources*<strong><em>\*</em></strong>sensor.txt”<strong>;       tableEnv.connect(**new</strong> FileSystem().path(filePath))           .withFormat(<strong>new</strong> OldCsv())           .withSchema(               <strong>new</strong> Schema()                   .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())                   .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>())                   .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>())           )           .createTemporaryTable(<strong>“inputTable”</strong>);          <em>//3.</em> <em>查询转换 *      *//3.1</em> <em>简单查询 *      *//3.1.1 Table API *      Table inputTable =  tableEnv.from(*</em>“inputTable”<strong>);       Table resultTable =  inputTable.select(</strong>“id, tem”<strong>)           .filter(</strong>“id ===  ‘sensor_1’”<strong>);          *//3.1.2 SQL *      Table  resultSqlTable = tableEnv.sqlQuery(</strong>“select id,  temperature from inputTable where id = ‘sensor_1’”<strong>);          <em>//3.2</em> *聚合统计 *      *//3.2.1 Table API *      Table aggTable =  inputTable           .groupBy(</strong>“id”<strong>)           .select(</strong>“id,  id.count as count”<strong>);                *//3.2.2 SQL *      Table aggSqlTable =  tableEnv.sqlQuery(</strong>“select id, count(id) as ct from  inputTable group by id”<strong>);          <em>// 4.</em> <em>转换成流打印输出 *      tableEnv.toAppendStream(resultTable,  Row.*</em>class</strong>).print(<strong>“result”</strong>);         tableEnv.toAppendStream(resultSqlTable, Row.<strong>class</strong>).print(<strong>“resultSQL”</strong>);       tableEnv.toRetractStream(aggTable, Row.<strong>class</strong>).print(<strong>“agg”</strong>);       tableEnv.toRetractStream(aggSqlTable,  Row.<strong>class</strong>).print(<strong>“aggSQL”</strong>);          env.execute();     }   }  </p><p>表作为流式查询的结果，是动态更新的。所以，将这种动态查询转换成的数据流，同样需要对表的更新操作进行编码，进而有不同的转换模式。</p><p>Table API中表到DataStream有两种模式：</p><p>l 追加模式（Append Mode）</p><p>用于表只会被插入（Insert）操作更改的场景。</p><p>l 撤回模式（Retract Mode）</p><p>用于任何场景。有些类似于更新模式中Retract模式，它只有Insert和Delete两类操作。</p><p>得到的数据会增加一个Boolean类型的标识位（返回的第一个字段），用它来表示到底是新增的数据（Insert），还是被删除的数据（老数据， Delete）。</p><p>所以，没有经过groupby之类聚合操作，可以直接用 toAppendStream 来转换；而如果经过了聚合，有更新操作，一般就必须用 toRetractDstream。</p><h3 id="2-7-2-输出到文件"><a href="#2-7-2-输出到文件" class="headerlink" title="2.7.2 输出到文件"></a>2.7.2 输出到文件</h3><p>代码如下：</p><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.DataStreamSource;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.Csv;   <strong>import</strong> org.apache.flink.table.descriptors.FileSystem;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;      <strong>public class</strong> FlinkSQL_Test05 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**获取执行环境并设置并行度 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);          <em>//2.**读取文本数据创建流 *      DataStreamSource<String>  readTextFile = env.readTextFile(*</em>“sensor”<strong>);          *//3.<strong>将每一行数据转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = readTextFile.map(line -&gt; {         String[] fields =  line.split(</strong>“,”<strong>);         **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));       });          <em>//4.<strong>创建</strong>TableAPI**执行环境 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create</em>(env);          <em>//5.**从流中创建表 *      Table table =  tableEnv.fromDataStream(sensorDataStream);          *//6.**转换数据 *      Table result =  table.select(*</em>“id,temperature”<strong>).filter(</strong>“id =  ‘sensor_1’”<strong>);          <em>//7.**将数据写入本地文件系统 *      tableEnv.connect(           *</em>new</strong> FileSystem().path(<strong>“output/out.txt”</strong>)) <em>//**定义文件系统连接,文件不能存在 *          .withFormat(*</em>new** Csv()) <em>//</em> <em>定义格式化方法，<strong>Csv</strong>格式 *          .withSchema(*</em>new** Schema()               .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())               .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>())           ) <em>//</em> <em>定义表结构 *          .createTemporaryTable(*</em>“outputTable”<strong>); <em>//</em> *创建临时表    *      tableEnv.insertInto(</strong>“outputTable”*<em>, result);          <em>//8.</em></em>执行任务 *      env.execute();        }   }  </p><h3 id="2-7-3-更新模式（Update-Mode）"><a href="#2-7-3-更新模式（Update-Mode）" class="headerlink" title="2.7.3 更新模式（Update Mode）"></a>2.7.3 更新模式（Update Mode）</h3><p>在流处理过程中，表的处理并不像传统定义的那样简单。</p><p>对于流式查询（Streaming Queries），需要声明如何在（动态）表和外部连接器之间执行转换。与外部系统交换的消息类型，由<strong>更新模式</strong>（update mode）指定。</p><p>Flink Table API中的更新模式有以下三种：</p><h4 id="1）追加模式（Append-Mode）"><a href="#1）追加模式（Append-Mode）" class="headerlink" title="1）追加模式（Append Mode）"></a>1）追加模式（Append Mode）</h4><p>在追加模式下，表（动态表）和外部连接器只交换插入（Insert）消息。</p><h4 id="2）撤回模式（Retract-Mode）"><a href="#2）撤回模式（Retract-Mode）" class="headerlink" title="2）撤回模式（Retract Mode）"></a>2）撤回模式（Retract Mode）</h4><p>在撤回模式下，表和外部连接器交换的是：添加（Add）和撤回（Retract）消息。</p><p>l 插入（Insert）会被编码为添加消息；</p><p>l 删除（Delete）则编码为撤回消息；</p><p>l 更新（Update）则会编码为，已更新行（上一行）的撤回消息，和更新行（新行）的添加消息。</p><p>在此模式下，不能定义key，这一点跟upsert模式完全不同。</p><h4 id="3）Upsert（更新插入）模式"><a href="#3）Upsert（更新插入）模式" class="headerlink" title="3）Upsert（更新插入）模式"></a>3）Upsert（更新插入）模式</h4><p>在Upsert模式下，动态表和外部连接器交换Upsert和Delete消息。</p><p>这个模式需要一个唯一的key，通过这个key可以传递更新消息。为了正确应用消息，外部连接器需要知道这个唯一key的属性。</p><p>l 插入（Insert）和更新（Update）都被编码为Upsert消息；</p><p>l 删除（Delete）编码为Delete信息。</p><p>这种模式和Retract模式的主要区别在于，Update操作是用单个消息编码的，所以效率会更高。</p><h3 id="2-7-4-输出到Kafka"><a href="#2-7-4-输出到Kafka" class="headerlink" title="2.7.4 输出到Kafka"></a>2.7.4 输出到Kafka</h3><p>除了输出到文件，也可以输出到Kafka。我们可以结合前面Kafka作为输入数据，构建数据管道，kafka进，kafka出。</p><p>代码如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.Csv;   <strong>import</strong> org.apache.flink.table.descriptors.Kafka;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test06 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>定义</strong>Kafka**输入描述器 *      Kafka kafkaInput  = *</em>new** Kafka()           .version(<strong>“0.11”</strong>)           .topic(<strong>“test”</strong>)           .property(<strong>“bootstrap.servers”</strong>, <strong>“hadoop102:9092”</strong>);       Schema schemaInput = <strong>new</strong> Schema()           .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())           .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>())           .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>());          <em>//3.<strong>读取</strong>Kafka**数据创建临时表 *      tableEnv.connect(kafkaInput).withFormat(*</em>new** Csv()).withSchema(schemaInput).createTemporaryTable(<strong>“KafkaInput”</strong>);          <em>//4.<strong>执行</strong>SQL**查询数据 *      Table table =  tableEnv.sqlQuery(*</em>“select id,temp from KafkaInput where  id=’sensor_1’”<strong>);          <em>//5.<strong>定义</strong>Kafka**输出连接器 *      Kafka  kafkaOutPut = *</em>new</strong> Kafka()           .version(<strong>“0.11”</strong>)           .topic(<strong>“sinkTest”</strong>)            .property(<strong>“bootstrap.servers”</strong>, <strong>“hadoop102:9092”</strong>);       Schema schemaOutPut = <strong>new</strong> Schema()           .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())           .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>());         tableEnv.connect(kafkaOutPut).withFormat(<strong>new</strong> Csv()).withSchema(schemaOutPut).createTemporaryTable(<strong>“KafkaOutPut”</strong>);          <em>//6.<strong>将数据输出到</strong>Kafka**的另一个主题 *      tableEnv.insertInto(*</em>“KafkaOutPut”*<em>, table);          <em>//7.</em></em>执行任务 *      env.execute();        }      }  </p><h3 id="2-7-5-输出到ElasticSearch"><a href="#2-7-5-输出到ElasticSearch" class="headerlink" title="2.7.5 输出到ElasticSearch"></a>2.7.5 输出到ElasticSearch</h3><p>ElasticSearch的connector可以在upsert（update+insert，更新插入）模式下操作，这样就可以使用Query定义的键（key）与外部系统交换UPSERT/DELETE消息。</p><p>另外，对于“仅追加”（append-only）的查询，connector还可以在append 模式下操作，这样就可以与外部系统只交换insert消息。</p><p>es目前支持的数据格式，只有Json，而flink本身并没有对应的支持，所以还需要引入依赖：</p><p>&lt;**dependency**&gt;<br>   &lt;**groupId**&gt;org.apache.flink&lt;/**groupId**&gt;<br>   &lt;**artifactId**&gt;flink-json&lt;/**artifactId**&gt;<br>   &lt;**version**&gt;1.10.1&lt;/**version**&gt;<br> &lt;/**dependency**&gt;</p><p>代码实现如下：</p><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.DataStreamSource;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.Elasticsearch;   <strong>import</strong> org.apache.flink.table.descriptors.FormatDescriptor;   <strong>import</strong> org.apache.flink.table.descriptors.Json;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;      <strong>import</strong> java.util.Map;      <strong>public class</strong> FlinkSQL_Test07 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**获取执行环境并设置并行度 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);          <em>//2.**读取文本数据创建流 *      DataStreamSource<String>  readTextFile = env.readTextFile(*</em>“sensor”<strong>);          *//3.<strong>将每一行数据转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = readTextFile.map(line -&gt; {         String[] fields =  line.split(</strong>“,”<strong>);         **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));       });          <em>//4.<strong>创建</strong>TableAPI**执行环境 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create</em>(env);          <em>//5.**从流中创建表 *      Table table =  tableEnv.fromDataStream(sensorDataStream);          *//6.**转换数据 *      tableEnv.createTemporaryView(*</em>“sensor”<strong>, table);       Table sqlQuery =  tableEnv.sqlQuery(</strong>“select id,count(id) as ct from sensor  group by id”<strong>);          <em>//7.<strong>构建</strong>Es**连接器 *      tableEnv.connect(*</em>new</strong> Elasticsearch()           .host(<strong>“hadoop102”</strong>, 9200, <strong>“http”</strong>)           .version(<strong>“6”</strong>)           .index(<strong>“flink_index”</strong>)           .documentType(<strong>“_doc”</strong>))           .inUpsertMode()           .withFormat(<strong>new</strong> Json())           .withSchema(<strong>new</strong> Schema()               .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())               .field(<strong>“ct”</strong>, DataTypes.<em>BIGINT</em>()))           .createTemporaryTable(<strong>“EsIndex”</strong>);          <em>//8.<strong>将数据写入</strong>ES *      tableEnv.insertInto(*</em>“EsIndex”*<em>, sqlQuery);          <em>//9.</em></em>开启任务 *      env.execute();        }      }  </p><h3 id="2-7-6-输出到MySql"><a href="#2-7-6-输出到MySql" class="headerlink" title="2.7.6 输出到MySql"></a>2.7.6 输出到MySql</h3><p>Flink专门为Table API的jdbc连接提供了flink-jdbc连接器，我们需要先引入依赖：</p> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-jdbc_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>jdbc连接的代码实现比较特殊，因为没有对应的java/scala类实现ConnectorDescriptor，所以不能直接tableEnv.connect()。不过Flink SQL留下了执行DDL的接口：tableEnv.sqlUpdate()。</p><p>对于jdbc的创建表操作，天生就适合直接写DDL来实现，所以我们的代码可以这样写：</p> <pre class="line-numbers language-java" data-language="java"><code class="language-java">impor com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>bean<span class="token punctuation">.</span><span class="token class-name">SensorReading</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">Table</span><span class="token punctuation">;</span>   <span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>table<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span></span><span class="token class-name">StreamTableEnvironment</span><span class="token punctuation">;</span>      <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlinkSQL_Test08</span> <span class="token punctuation">&#123;</span> <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span>  args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>          <span class="token operator">*</span><span class="token comment">//1.**获取执行环境并设置并行度 *      </span>    <span class="token class-name">StreamExecutionEnvironment</span>  env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span>*getExecutionEnvironment<span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token comment">//2.**读取文本数据创建流 *      DataStreamSource&lt;String>  readTextFile = env.readTextFile(**"sensor"**);          *//3.**将每一行数据转换为**JavaBean *      </span>    <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span>  sensorDataStream <span class="token operator">=</span> readTextFile<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>line <span class="token operator">-></span> <span class="token punctuation">&#123;</span>         <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span>  line<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token string">","</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token operator">*</span><span class="token operator">*</span><span class="token keyword">return</span> <span class="token keyword">new</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>*parseLong<span class="token operator">*</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span>*parseDouble<span class="token operator">*</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token comment">//4.**创建**TableAPI**执行环境 *      StreamTableEnvironment  tableEnv = StreamTableEnvironment.*create*(env);          *//5.**从流中创建表 *     </span>    <span class="token class-name">Table</span> table <span class="token operator">=</span>  tableEnv<span class="token punctuation">.</span><span class="token function">fromDataStream</span><span class="token punctuation">(</span>sensorDataStream<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token comment">//6.**转换数据 *      </span>    tableEnv<span class="token punctuation">.</span><span class="token function">createTemporaryView</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token string">"sensor"</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">,</span> table<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">Table</span> sqlQuery <span class="token operator">=</span>  tableEnv<span class="token punctuation">.</span><span class="token function">sqlQuery</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token operator">*</span><span class="token string">"select id,count(\*) as ct from sensor  group by id"</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token comment">//7.**定义**MySQL**连接器 *      </span>    <span class="token class-name">String</span> sinkDDL <span class="token operator">=</span>  <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"create table jdbcOutputTable ("</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">" id  varchar(20) not null, "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">" ct bigint  not null "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">") with  ("</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.type' = 'jdbc', "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.url' = 'jdbc:mysql://hadoop102:3306/test', "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.table' = 'sensor_count', "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.driver' = 'com.mysql.jdbc.Driver', "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.username' = 'root', "</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token operator">+</span>           <span class="token operator">*</span><span class="token operator">*</span><span class="token string">"  'connector.password' = '000000' )"</span><span class="token operator">*</span><span class="token operator">*</span><span class="token punctuation">;</span>       tableEnv<span class="token punctuation">.</span><span class="token function">sqlUpdate</span><span class="token punctuation">(</span>sinkDDL<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token operator">*</span><span class="token comment">//8.**将数据写入**MySQL *      sqlQuery.insertInto(**"jdbcOutputTable"**);           *//9.**执行任务 *      env.execute();        &#125;   &#125;  </span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-8-Query的解释和执行"><a href="#2-8-Query的解释和执行" class="headerlink" title="2.8 Query的解释和执行"></a>2.8 Query的解释和执行</h2><p>Table API提供了一种机制来解释（Explain）计算表的逻辑和优化查询计划。这是通过TableEnvironment.explain（table）方法或TableEnvironment.explain（）方法完成的。</p><p>explain方法会返回一个字符串，描述三个计划：</p><p>未优化的逻辑查询计划</p><p>优化后的逻辑查询计划</p><p>实际执行计划</p><p>我们可以在代码中查看执行计划：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> explaination <span class="token operator">=</span> tableEnv<span class="token punctuation">.</span><span class="token function">explain</span><span class="token punctuation">(</span>resultTable<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>explaination<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Query的解释和执行过程，老planner和blink planner大体是一致的，又有所不同。整体来讲，Query都会表示成一个逻辑查询计划，然后分两步解释：</p><ol><li><p>优化查询计划</p></li><li><p>解释成 DataStream 或者 DataSet程序</p></li></ol><p>而Blink版本是批流统一的，所以所有的Query，只会被解释成DataStream程序；另外在批处理环境TableEnvironment下，Blink版本要到tableEnv.execute()执行调用才开始解释。</p><h1 id="第三章-流处理中的特殊概念"><a href="#第三章-流处理中的特殊概念" class="headerlink" title="第三章 流处理中的特殊概念"></a>第三章 流处理中的特殊概念</h1><p>Table API和SQL，本质上还是基于关系型表的操作方式；而关系型表、关系代数，以及SQL本身，一般是有界的，更适合批处理的场景。这就导致在进行流处理的过程中，理解会稍微复杂一些，需要引入一些特殊概念。</p><h2 id="3-1-流处理和关系代数（表，及SQL）的区别"><a href="#3-1-流处理和关系代数（表，及SQL）的区别" class="headerlink" title="3.1 流处理和关系代数（表，及SQL）的区别"></a>3.1 流处理和关系代数（表，及SQL）的区别</h2><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image002.jpg" alt="img"></p><p>可以看到，其实关系代数（主要就是指关系型数据库中的表）和SQL，主要就是针对批处理的，这和流处理有天生的隔阂。</p><h2 id="3-2-动态表（Dynamic-Tables）"><a href="#3-2-动态表（Dynamic-Tables）" class="headerlink" title="3.2 动态表（Dynamic Tables）"></a>3.2 动态表（Dynamic Tables）</h2><p>因为流处理面对的数据，是连续不断的，这和我们熟悉的关系型数据库中保存的“表”完全不同。所以，如果我们把流数据转换成Table，然后执行类似于table的select操作，结果就不是一成不变的，而是随着新数据的到来，会不停更新。</p><p>我们可以随着新数据的到来，不停地在之前的基础上更新结果。这样得到的表，在Flink Table API概念里，就叫做“<strong>动态表</strong>”（Dynamic Tables）。</p><p>动态表是Flink对流数据的Table API和SQL支持的核心概念。与表示批处理数据的静态表不同，动态表是随时间变化的。动态表可以像静态的批处理表一样进行查询，查询一个动态表会产生持续查询（Continuous Query）。</p><p>连续查询永远不会终止，并会生成另一个动态表。查询（Query）会不断更新其动态结果表，以反映其动态输入表上的更改。</p><h2 id="3-3-流式持续查询的过程"><a href="#3-3-流式持续查询的过程" class="headerlink" title="3.3 流式持续查询的过程"></a>3.3 流式持续查询的过程</h2><p>下图显示了流、动态表和连续查询的关系：</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image004.jpg" alt="img"></p><p>流式持续查询的过程为：</p><p>\1. 流被转换为动态表。</p><p>\2. 对动态表计算连续查询，生成新的动态表。</p><p>\3. 生成的动态表被转换回流。</p><h3 id="3-3-1-将流转换成表（Table）"><a href="#3-3-1-将流转换成表（Table）" class="headerlink" title="3.3.1 将流转换成表（Table）"></a>3.3.1 将流转换成表（Table）</h3><p>为了处理带有关系查询的流，必须先将其转换为表。</p><p>从概念上讲，流的每个数据记录，都被解释为对结果表的插入（Insert）修改。因为流式持续不断的，而且之前的输出结果无法改变。本质上，我们其实是从一个、只有插入操作的changelog（更新日志）流，来构建一个表。</p><p>为了更好地说明动态表和持续查询的概念，我们来举一个具体的例子。</p><p>比如，我们现在的输入数据，就是用户在网站上的访问行为，数据类型（Schema）如下：</p><p>[</p><p> user: VARCHAR,  // 用户名</p><p> cTime: TIMESTAMP, // 访问某个URL的时间戳</p><p> url:  VARCHAR   // 用户访问的URL</p><p>]</p><p>下图显示了如何将访问URL事件流，或者叫点击事件流（左侧）转换为表（右侧）。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image006.jpg" alt="img"></p><p>随着插入更多的访问事件流记录，生成的表将不断增长。</p><h3 id="3-3-2-持续查询（Continuous-Query）"><a href="#3-3-2-持续查询（Continuous-Query）" class="headerlink" title="3.3.2 持续查询（Continuous Query）"></a>3.3.2 持续查询（Continuous Query）</h3><p>持续查询，会在动态表上做计算处理，并作为结果生成新的动态表。与批处理查询不同，连续查询从不终止，并根据输入表上的更新更新其结果表。</p><p>在任何时间点，连续查询的结果在语义上，等同于在输入表的快照上，以批处理模式执行的同一查询的结果。</p><p>在下面的示例中，我们展示了对点击事件流中的一个持续查询。</p><p>这个Query很简单，是一个分组聚合做count统计的查询。它将用户字段上的clicks表分组，并统计访问的url数。图中显示了随着时间的推移，当clicks表被其他行更新时如何计算查询。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image008.jpg" alt="img"></p><h3 id="3-3-3-将动态表转换成流"><a href="#3-3-3-将动态表转换成流" class="headerlink" title="3.3.3 将动态表转换成流"></a>3.3.3 将动态表转换成流</h3><p>与常规的数据库表一样，动态表可以通过插入（Insert）、更新（Update）和删除（Delete）更改，进行持续的修改。将动态表转换为流或将其写入外部系统时，需要对这些更改进行编码。Flink的Table API和SQL支持三种方式对动态表的更改进行编码：</p><h4 id="1）仅追加（Append-only）流"><a href="#1）仅追加（Append-only）流" class="headerlink" title="1）仅追加（Append-only）流"></a>1）仅追加（Append-only）流</h4><p>仅通过插入（Insert）更改，来修改的动态表，可以直接转换为“仅追加”流。这个流中发出的数据，就是动态表中新增的每一行。</p><h4 id="2）撤回（Retract）流"><a href="#2）撤回（Retract）流" class="headerlink" title="2）撤回（Retract）流"></a>2）撤回（Retract）流</h4><p>Retract流是包含两类消息的流，添加（Add）消息和撤回（Retract）消息。</p><p>动态表通过将INSERT 编码为add消息、DELETE 编码为retract消息、UPDATE编码为被更改行（前一行）的retract消息和更新后行（新行）的add消息，转换为retract流。</p><p>下图显示了将动态表转换为Retract流的过程。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image010.jpg" alt="img"></p><h4 id="3）Upsert（更新插入）流"><a href="#3）Upsert（更新插入）流" class="headerlink" title="3）Upsert（更新插入）流"></a>3）Upsert（更新插入）流</h4><p>Upsert流包含两种类型的消息：Upsert消息和delete消息。转换为upsert流的动态表，需要有唯一的键（key）。</p><p>通过将INSERT和UPDATE更改编码为upsert消息，将DELETE更改编码为DELETE消息，就可以将具有唯一键（Unique Key）的动态表转换为流。</p><p>下图显示了将动态表转换为upsert流的过程。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image012.jpg" alt="img"></p><p>这些概念我们之前都已提到过。需要注意的是，在代码里将动态表转换为DataStream时，仅支持Append和Retract流。而向外部系统输出动态表的TableSink接口，则可以有不同的实现，比如之前我们讲到的ES，就可以有Upsert模式。</p><h2 id="3-4-时间特性"><a href="#3-4-时间特性" class="headerlink" title="3.4 时间特性"></a>3.4 时间特性</h2><p>基于时间的操作（比如Table API和SQL中窗口操作），需要定义相关的时间语义和时间数据来源的信息。所以，Table可以提供一个逻辑上的时间字段，用于在表处理程序中，指示时间和访问相应的时间戳。</p><p>时间属性，可以是每个表schema的一部分。一旦定义了时间属性，它就可以作为一个字段引用，并且可以在基于时间的操作中使用。</p><p>时间属性的行为类似于常规时间戳，可以访问，并且进行计算。</p><h3 id="3-4-1-处理时间（Processing-Time）"><a href="#3-4-1-处理时间（Processing-Time）" class="headerlink" title="3.4.1 处理时间（Processing Time）"></a>3.4.1 处理时间（Processing Time）</h3><p>处理时间语义下，允许表处理程序根据机器的本地时间生成结果。它是时间的最简单概念。它既不需要提取时间戳，也不需要生成watermark。</p><p>定义处理时间属性有三种方法：在DataStream转化时直接指定；在定义Table Schema时指定；在创建表的DDL中指定。</p><h4 id="1）DataStream转化成Table时指定"><a href="#1）DataStream转化成Table时指定" class="headerlink" title="1）DataStream转化成Table时指定"></a>1）DataStream转化成Table时指定</h4><p>由DataStream转换成表时，可以在后面指定字段名来定义Schema。在定义Schema期间，可以使用.proctime，定义处理时间字段。</p><p>注意，这个proctime属性只能通过附加逻辑字段，来扩展物理schema。因此，只能在schema定义的末尾定义它。</p><p>代码如下：</p><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;      <strong>public class</strong> FlinkSQL_Test09 {        <strong>public static void</strong> main(String[]  args) {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)           .map(line -&gt; {             String[] fields =  line.split(</strong>“,”<strong>);             **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *        Table table = tableEnv.fromDataStream(sensorDataStream,  *</em>“id, ts, temp,** <strong>pt.proctime**</strong>“*<em>);          <em>//4.</em></em>打印<strong>schema</strong>信息 *      table.printSchema();        }      }  </p><h4 id="2）定义Table-Schema时指定"><a href="#2）定义Table-Schema时指定" class="headerlink" title="2）定义Table Schema时指定"></a>2）定义Table Schema时指定</h4><p>这种方法其实也很简单，只要在定义Schema的时候，加上一个新的字段，并指定成proctime就可以了。</p><p>代码如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.FileSystem;   <strong>import</strong> org.apache.flink.table.descriptors.OldCsv;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;      <strong>public class</strong> FlinkSQL_Test10 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.**创建文件连接器 *      tableEnv.connect(*</em>new** FileSystem().path(<strong>“sensor”</strong>))           .withSchema(<strong>new</strong> Schema()               .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())               .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>())               .field(<strong>“temp”</strong>, DataTypes.<em>DOUBLE</em>())                .field(<strong>“pt”</strong>,  DataTypes.<em>TIMESTAMP</em>(3)).proctime())           .withFormat(<strong>new</strong> OldCsv())           .createTemporaryTable(<strong>“fileInput”</strong>);          <em>//3.<strong>打印</strong>schema**信息 *      Table table =  tableEnv.from(*</em>“fileInput”**);       table.printSchema();        }      }  </p><h4 id="3）创建表的DDL中指定"><a href="#3）创建表的DDL中指定" class="headerlink" title="3）创建表的DDL中指定"></a>3）创建表的DDL中指定</h4><p>在创建表的DDL中，增加一个字段并指定成proctime，也可以指定当前的时间字段。</p><p>代码如下：</p><p>注意：运行这段DDL，必须使用Blink Planner。</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.EnvironmentSettings;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;      <strong>public class</strong> FlinkSQL_Test11 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       EnvironmentSettings  blinkStreamSettings = EnvironmentSettings.<em>newInstance</em>()           .useBlinkPlanner()           .inStreamingMode()           .build();       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env, blinkStreamSettings);          <em>//2.**创建文件连接器 *      String sinkDDL =  *</em>“create table dataTable (“** +           <strong>“ id  varchar(20) not null, “</strong> +           <strong>“ ts  bigint, “</strong> +           <strong>“ temp  double, “</strong> +           <strong>“ pt AS  PROCTIME() “</strong> +           <strong>“) with  (“</strong> +           <strong>“  ‘connector.type’ = ‘filesystem’, “</strong> +           <strong>“  ‘connector.path’ = ‘sensor’, “</strong> +           <strong>“  ‘format.type’ = ‘csv’)”</strong>;       tableEnv.sqlUpdate(sinkDDL);          <em>//3.<strong>打印</strong>schema**信息 *      Table table =  tableEnv.from(*</em>“dataTable”**);       table.printSchema();        }      }  </p><h3 id="3-4-2-事件时间（Event-Time）"><a href="#3-4-2-事件时间（Event-Time）" class="headerlink" title="3.4.2 事件时间（Event Time）"></a>3.4.2 事件时间（Event Time）</h3><p>事件时间语义，允许表处理程序根据每个记录中包含的时间生成结果。这样即使在有乱序事件或者延迟事件时，也可以获得正确的结果。</p><p>为了处理无序事件，并区分流中的准时和迟到事件；Flink需要从事件数据中，提取时间戳，并用来推进事件时间的进展（watermark）。</p><h4 id="1）DataStream转化成Table时指定-1"><a href="#1）DataStream转化成Table时指定-1" class="headerlink" title="1）DataStream转化成Table时指定"></a>1）DataStream转化成Table时指定</h4><p>在DataStream转换成Table，schema的定义期间，使用.rowtime可以定义事件时间属性。注意，必须在转换的数据流中分配时间戳和watermark。</p><p>在将数据流转换为表时，有两种定义时间属性的方法。根据指定的.rowtime字段名是否存在于数据流的架构中，timestamp字段可以：</p><p>l 作为新字段追加到schema</p><p>l 替换现有字段</p><p>在这两种情况下，定义的事件时间戳字段，都将保存DataStream中事件时间戳的值。</p><p>代码如下：</p><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.TimeCharacteristic;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;   <strong>import</strong> org.apache.flink.streaming.api.windowing.time.Time;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;      <strong>public class</strong> FlinkSQL_Test12 {        <strong>public static void</strong> main(String[]  args) {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       env.setStreamTimeCharacteristic(TimeCharacteristic.<strong><em>EventTime\</em></strong>);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)             .assignTimestampsAndWatermarks(**new</strong> BoundedOutOfOrdernessTimestampExtractor<String>(Time.<em>seconds</em>(1)) {             @Override             <strong>public long</strong> extractTimestamp(String  element) {               <strong>return</strong> Long.<em>parseLong</em>(element.split(<strong>“,”</strong>)[1]) * 1000L;             }           })           .map(line -&gt; {             String[] fields =  line.split(<strong>“,”</strong>);             <strong>return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  rt.rowtime”*<em>);          <em>//4.</em></em>打印<strong>schema</strong>信息 *      table.printSchema();        }      }  </p><h4 id="2）定义Table-Schema时指定-1"><a href="#2）定义Table-Schema时指定-1" class="headerlink" title="2）定义Table Schema时指定"></a>2）定义Table Schema时指定</h4><p>这种方法只要在定义Schema的时候，将事件时间字段，并指定成rowtime就可以了。</p><p>代码如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.DataTypes;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.table.descriptors.Csv;   <strong>import</strong> org.apache.flink.table.descriptors.FileSystem;   <strong>import</strong> org.apache.flink.table.descriptors.Rowtime;   <strong>import</strong> org.apache.flink.table.descriptors.Schema;      <strong>public class</strong> FlinkSQL_Test13 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);  env.setStreamTimeCharacteristic(TimeCharacteristic.EventTime);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.**创建文件连接器 *      tableEnv.connect(*</em>new** FileSystem().path(<strong>“sensor”</strong>))           .withSchema(<strong>new</strong> Schema()               .field(<strong>“id”</strong>, DataTypes.<em>STRING</em>())               .field(<strong>“ts”</strong>, DataTypes.<em>BIGINT</em>()).rowtime(<strong>new</strong> Rowtime()                     .timestampsFromField(<strong>“ts”</strong>)  <em>//</em> <em>从字段中提取时间戳 *                  .watermarksPeriodicBounded(1000)  *// watermark<strong>延迟</strong>1**秒 *              )               .field(*</em>“temp”<strong>, DataTypes.<em>DOUBLE</em>())           )           .withFormat(**new</strong> Csv())           .createTemporaryTable(<strong>“fileInput”</strong>);          <em>//3.<strong>打印</strong>schema**信息 *      Table table =  tableEnv.from(*</em>“fileInput”**);       table.printSchema();        }      }  </p><h4 id="3）创建表的DDL中指定-1"><a href="#3）创建表的DDL中指定-1" class="headerlink" title="3）创建表的DDL中指定"></a>3）创建表的DDL中指定</h4><p>事件时间属性，是使用CREATE TABLE DDL中的WARDMARK语句定义的。watermark语句，定义现有事件时间字段上的watermark生成表达式，该表达式将事件时间字段标记为事件时间属性。</p><p>代码如下：</p><p>  <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.EnvironmentSettings;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;      <strong>public class</strong> FlinkSQL_Test14 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       EnvironmentSettings  blinkStreamSettings = EnvironmentSettings.<em>newInstance</em>()           .useBlinkPlanner()           .inStreamingMode()           .build();       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env, blinkStreamSettings);          <em>//2.**创建文件连接器 *      String sinkDDL =  *</em>“create table dataTable (“** +           <strong>“ id  varchar(20) not null, “</strong> +           <strong>“ ts  bigint, “</strong> +           <strong>“ temp  double, “</strong> +           <strong>“ rt AS  TO_TIMESTAMP( FROM_UNIXTIME(ts) ), “</strong> +           <strong>“ watermark  for rt as rt - interval ‘1’ second”</strong> +           <strong>“) with  (“</strong> +           <strong>“  ‘connector.type’ = ‘filesystem’, “</strong> +           <strong>“  ‘connector.path’ = ‘sensor’, “</strong> +           <strong>“  ‘format.type’ = ‘csv’)”</strong>;       tableEnv.sqlUpdate(sinkDDL);          <em>//3.<strong>打印</strong>schema**信息 *      Table table =  tableEnv.from(*</em>“dataTable”**);       table.printSchema();        }      }  </p><p>这里<em>FROM_UNIXTIME</em>是系统内置的时间函数，用来将一个整数（秒数）转换成“YYYY-MM-DD hh:mm:ss”格式（默认，也可以作为第二个String参数传入）的日期时间字符串（date time string）；然后再用<em>TO_TIMESTAMP</em>将其转换成Timestamp。</p><h1 id="第四章-窗口（Windows）"><a href="#第四章-窗口（Windows）" class="headerlink" title="第四章 窗口（Windows）"></a>第四章 窗口（Windows）</h1><p>时间语义，要配合窗口操作才能发挥作用。最主要的用途，当然就是开窗口、根据时间段做计算了。下面我们就来看看Table API和SQL中，怎么利用时间字段做窗口操作。</p><p>在Table API和SQL中，主要有两种窗口：Group Windows和Over Windows</p><h2 id="4-1-Group-Windows"><a href="#4-1-Group-Windows" class="headerlink" title="4.1 Group Windows"></a>4.1 Group Windows</h2><p>分组窗口（Group Windows）会根据时间或行计数间隔，将行聚合到有限的组（Group）中，并对每个组的数据执行一次聚合函数。</p><p>Table API中的Group Windows都是使用.window（w:GroupWindow）子句定义的，并且必须由as子句指定一个别名。为了按窗口对表进行分组，窗口的别名必须在group by子句中，像常规的分组字段一样引用。</p><p>Table <em>table</em> = input<br>  .window([w: GroupWindow] as <strong>“w”</strong>) <em>//</em> <em>定义窗口，别名</em> <em>w<br>\</em>  .groupBy(<strong>“w</strong>, <strong>a”</strong>) <em>//</em> <em>以属性<strong>a</strong>和窗口<strong>w</strong>作为分组的**key<br>\</em>  .select(<strong>“a</strong>, <strong>b</strong>.sum*<em>“**) <em>//</em> <em>聚合字段</em></em>b*<em>的值，求和</em></p><p>或者，还可以把窗口的相关信息，作为字段添加到结果表中：</p><p>Table <em>table</em> = input<br>  .window([w: GroupWindow] as <strong>“w”</strong>) *<br>*  .groupBy(<strong>“w</strong>, <strong>a”</strong>) </p><p> .select(<strong>“a</strong>, <strong>w</strong>.start, <strong>w</strong>.end, <strong>w</strong>.rowtime, <strong>b</strong>.count**”**)</p><p>Table API提供了一组具有特定语义的预定义Window类，这些类会被转换为底层DataStream或DataSet的窗口操作。</p><p>Table API支持的窗口定义，和我们熟悉的一样，主要也是三种：滚动（Tumbling）、滑动（Sliding）和会话（Session）。</p><h3 id="4-1-1-滚动窗口TableAPI方式"><a href="#4-1-1-滚动窗口TableAPI方式" class="headerlink" title="4.1.1 滚动窗口TableAPI方式"></a>4.1.1 滚动窗口TableAPI方式</h3><p>滚动窗口（Tumbling windows）要用Tumble类来定义，另外还有三个方法：</p><p>l over：定义窗口长度</p><p>l on：用来分组（按时间间隔）或者排序（按行数）的时间字段</p><p>l as：别名，必须出现在后面的groupBy中</p><p>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Tumbling Event-time Window.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))&#x2F;&#x2F; Tumbling Processing-time Window.window(Tumble.over(&quot;10.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))&#x2F;&#x2F; Tumbling Row-count Window.window(Tumble.over(&quot;10.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-2-滑动窗口TableAPI方式"><a href="#4-1-2-滑动窗口TableAPI方式" class="headerlink" title="4.1.2 滑动窗口TableAPI方式"></a>4.1.2 滑动窗口TableAPI方式</h3><p>滑动窗口（Sliding windows）要用Slide类来定义，另外还有四个方法：</p><p>l over：定义窗口长度</p><p>l every：定义滑动步长</p><p>l on：用来分组（按时间间隔）或者排序（按行数）的时间字段</p><p>l as：别名，必须出现在后面的groupBy中</p><p>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Sliding Event-time Window.window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))&#x2F;&#x2F; Sliding Processing-time window .window(Slide.over(&quot;10.minutes&quot;).every(&quot;5.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))&#x2F;&#x2F; Sliding Row-count window.window(Slide.over(&quot;10.rows&quot;).every(&quot;5.rows&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-3-会话窗口TableAPI方式"><a href="#4-1-3-会话窗口TableAPI方式" class="headerlink" title="4.1.3 会话窗口TableAPI方式"></a>4.1.3 会话窗口TableAPI方式</h3><p>会话窗口（Session windows）要用Session类来定义，另外还有三个方法：</p><p>l withGap：会话时间间隔</p><p>l on：用来分组（按时间间隔）或者排序（按行数）的时间字段</p><p>l as：别名，必须出现在后面的groupBy中</p><p>代码如下：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Session Event-time Window.window(Session.withGap.(&quot;10.minutes&quot;).on(&quot;rowtime&quot;).as(&quot;w&quot;))&#x2F;&#x2F; Session Processing-time Window.window(Session.withGap.(&quot;10.minutes&quot;).on(&quot;proctime&quot;).as(&quot;w&quot;))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-1-4-FlinkSQL方式"><a href="#4-1-4-FlinkSQL方式" class="headerlink" title="4.1.4 FlinkSQL方式"></a>4.1.4 FlinkSQL方式</h3><p>我们已经了解了在Table API里window的调用方式，同样，我们也可以在SQL中直接加入窗口的定义和使用。Group Windows在SQL查询的Group BY子句中定义。与使用常规GROUP BY子句的查询一样，使用GROUP BY子句的查询会计算每个组的单个结果行。</p><p>SQL支持以下Group窗口函数:</p><p>l TUMBLE(time_attr, interval)</p><p>定义一个滚动窗口，第一个参数是时间字段，第二个参数是窗口长度。</p><p>l HOP(time_attr, interval, interval)</p><p>定义一个滑动窗口，第一个参数是时间字段，第二个参数是窗口滑动步长，第三个是窗口长度。</p><p>l SESSION(time_attr, interval)</p><p>定义一个会话窗口，第一个参数是时间字段，第二个参数是窗口间隔（Gap）。</p><p>另外还有一些辅助函数，可以用来选择Group Window的开始和结束时间戳，以及时间属性。</p><p>这里只写TUMBLE_<em>，滑动和会话窗口是类似的（HOP_</em>，SESSION_*）。</p><pre class="line-numbers language-none"><code class="language-none">l &#96;&#96;TUMBLE_START(time_attr, interval)l &#96;&#96;TUMBLE_END(time_attr, interval)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>l TUMBLE_ROWTIME(time_attr, interval)</p><p>l TUMBLE_PROCTIME(time_attr, interval)</p><h2 id="4-2-Group-Windows案例实操"><a href="#4-2-Group-Windows案例实操" class="headerlink" title="4.2 Group Windows案例实操"></a>4.2 Group Windows案例实操</h2><h3 id="4-2-1-滚动窗口（时间）"><a href="#4-2-1-滚动窗口（时间）" class="headerlink" title="4.2.1 滚动窗口（时间）"></a>4.2.1 滚动窗口（时间）</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.TimeCharacteristic;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.Tumble;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test15 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)           .map(line -&gt; {             String[] fields =  line.split(</strong>“,”<strong>);             **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  pt.proctime”<strong>);          <em>//4.TableAPI**实现滚动时间窗口 *      Table  tableResult = table  .window(Tumble.*over</em>(</strong>“10.seconds”<strong>).on(</strong>“pt”<strong>).as(</strong>“tw”<strong>))           .groupBy(</strong>“tw,id”<strong>)           .select(</strong>“id,  id.count as ct, temp.avg as avgTemp, tw.end”<strong>);          *//5.SQL<strong>实现滚动时间窗口</strong> *      tableEnv.createTemporaryView(</strong>“sensor”<strong>,table);       Table sqlResult =  tableEnv.sqlQuery(</strong>“select id ,count(id) ct,  avg(temp),tumble_end(pt,interval ‘10’ second) “** +           <strong>“ from  sensor group by id,tumble(pt,interval ‘10’ second)”</strong>);          <em>//6.**打印数据 *      tableEnv.toAppendStream(tableResult,  Row.*</em>class*<em>).print(<strong>“tableResult”</strong>);         tableEnv.toAppendStream(sqlResult, Row.<strong>class</strong>).print(<strong>“sqlResult”</strong>);          <em>//7.</em></em>开启任务 *      env.execute();        }      }  </p><h3 id="4-2-2-滑动窗口（时间）"><a href="#4-2-2-滑动窗口（时间）" class="headerlink" title="4.2.2 滑动窗口（时间）"></a>4.2.2 滑动窗口（时间）</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.TimeCharacteristic;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;   <strong>import</strong> org.apache.flink.streaming.api.windowing.time.Time;   <strong>import</strong> org.apache.flink.table.api.Slide;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test16 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);         env.setStreamTimeCharacteristic(TimeCharacteristic.<strong><em>EventTime\</em></strong>);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)             .assignTimestampsAndWatermarks(**new</strong> BoundedOutOfOrdernessTimestampExtractor<String>(Time.<em>seconds</em>(1)) {             @Override             <strong>public long</strong> extractTimestamp(String  element) {               <strong>return</strong> Long.<em>parseLong</em>(element.split(<strong>“,”</strong>)[1]) * 1000L;             }           })           .map(line -&gt; {              String[] fields = line.split(<strong>“,”</strong>);             <strong>return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  rt.rowtime”<strong>);          <em>//4.TableAPI**实现滑动时间窗口 *      Table  tableResult = table  .window(Slide.*over</em>(</strong>“15.second”<strong>).every(</strong>“5.second”<strong>).on(</strong>“rt”<strong>).as(</strong>“tw”<strong>))           .groupBy(</strong>“tw,id”<strong>)           .select(</strong>“id,  id.count as ct, temp.avg as avgTemp, tw.end”<strong>);          *//5.SQL<strong>实现滑动时间窗口</strong> *      tableEnv.createTemporaryView(</strong>“sensor”<strong>,table);       Table sqlResult =  tableEnv.sqlQuery(</strong>“select id ,count(id) ct, avg(temp)  “** +           <strong>“ from  sensor group by id,hop(rt,interval ‘5’ second,interval ‘15’ second)”</strong>);          <em>//6.**打印数据 *      tableEnv.toAppendStream(tableResult,  Row.*</em>class*<em>).print(<strong>“tableResult”</strong>);       tableEnv.toAppendStream(sqlResult,  Row.<strong>class</strong>).print(<strong>“sqlResult”</strong>);          <em>//7.</em></em>开启任务 *      env.execute();        }      }  </p><h3 id="4-2-3-会话窗口（时间）"><a href="#4-2-3-会话窗口（时间）" class="headerlink" title="4.2.3 会话窗口（时间）"></a>4.2.3 会话窗口（时间）</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.TimeCharacteristic;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;   <strong>import</strong> org.apache.flink.streaming.api.windowing.time.Time;   <strong>import</strong> org.apache.flink.table.api.Session;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.Tumble;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test17 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);         env.setStreamTimeCharacteristic(TimeCharacteristic.<strong><em>EventTime\</em></strong>);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)           .assignTimestampsAndWatermarks(**new</strong> BoundedOutOfOrdernessTimestampExtractor<String>(Time.<em>seconds</em>(1)) {             @Override             <strong>public long</strong> extractTimestamp(String  element) {               <strong>return</strong> Long.<em>parseLong</em>(element.split(<strong>“,”</strong>)[1]) * 1000L;             }           })           .map(line -&gt; {             String[] fields =  line.split(<strong>“,”</strong>);             <strong>return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  rt.rowtime”<strong>);          <em>//4.TableAPI**实现会话窗口 *      Table  tableResult = table.window(Session.*withGap</em>(</strong>“5.seconds”<strong>).on(</strong>“rt”<strong>).as(</strong>“tw”<strong>))           .groupBy(</strong>“tw,id”<strong>)           .select(</strong>“id,  id.count as ct, temp.avg as avgTemp, tw.end”<strong>);          *//5.SQL<strong>实现会话窗口</strong> *      tableEnv.createTemporaryView(</strong>“sensor”<strong>,table);       Table sqlResult =  tableEnv.sqlQuery(</strong>“select id ,count(id) ct, avg(temp)  “** +           <strong>“ from  sensor group by id,session(rt,interval ‘5’ second)”</strong>);          <em>//6.**打印数据 *      tableEnv.toAppendStream(tableResult,  Row.*</em>class*<em>).print(<strong>“tableResult”</strong>);         tableEnv.toAppendStream(sqlResult, Row.<strong>class</strong>).print(<strong>“sqlResult”</strong>);          <em>//7.</em></em>开启任务 *      env.execute();        }      }  </p><h3 id="4-2-4-滚动窗口（计数）"><a href="#4-2-4-滚动窗口（计数）" class="headerlink" title="4.2.4 滚动窗口（计数）"></a>4.2.4 滚动窗口（计数）</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.Tumble;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test18 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)           .map(line -&gt; {             String[] fields =  line.split(</strong>“,”<strong>);             **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  pt.proctime”<strong>);          <em>//4.TableAPI**实现滚动计数窗口 *      Table  tableResult = table.window(Tumble.*over</em>(</strong>“5.rows”<strong>).on(</strong>“pt”<strong>).as(</strong>“tw”<strong>))           .groupBy(</strong>“tw,id”<strong>)           .select(</strong>“id,  id.count as ct, temp.avg as avgTemp”<strong>);          <em>//5.**打印数据 *      tableEnv.toAppendStream(tableResult,  Row.*</em>class</strong>).print(<strong>“tableResult”</strong>);          *//6.**开启任务 *      env.execute();        }      }  </p><h3 id="4-2-5-滑动窗口（计数）"><a href="#4-2-5-滑动窗口（计数）" class="headerlink" title="4.2.5 滑动窗口（计数）"></a>4.2.5 滑动窗口（计数）</h3><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.table.api.Slide;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.Tumble;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test19 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)            .map(line -&gt; {             String[] fields =  line.split(</strong>“,”<strong>);             **return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  pt.proctime”<strong>);          <em>//4.TableAPI**实现滑动计数窗口 *      Table  tableResult = table.window(Slide.*over</em>(</strong>“5.rows”<strong>).every(</strong>“2.rows”<strong>).on(</strong>“pt”<strong>).as(</strong>“tw”<strong>))           .groupBy(</strong>“tw,id”<strong>)           .select(</strong>“id,  id.count as ct, temp.avg as avgTemp”<strong>);          <em>//5.**打印数据 *      tableEnv.toAppendStream(tableResult,  Row.*</em>class</strong>).print(<strong>“tableResult”</strong>);          *//6.**开启任务 *      env.execute();        }      }  </p><h2 id="4-3-Over-Windows"><a href="#4-3-Over-Windows" class="headerlink" title="4.3 Over Windows"></a>4.3 Over Windows</h2><h3 id="4-3-2-FlinkSQL方式"><a href="#4-3-2-FlinkSQL方式" class="headerlink" title="4.3.2 FlinkSQL方式"></a>4.3.2 FlinkSQL方式</h3><p>由于Over本来就是SQL内置支持的语法，所以这在SQL中属于基本的聚合操作。所有聚合必须在同一窗口上定义，也就是说，必须是相同的分区、排序和范围。目前仅支持在当前行范围之前的窗口（无边界和有边界）。</p><p>代码如下：</p><p><strong>SELECT</strong> <strong>COUNT</strong>(amount) OVER (</p><p> PARTITION <strong>BY</strong> <strong>user</strong></p><p> <strong>ORDER</strong> <strong>BY</strong> proctime</p><p> <strong>ROWS</strong> <strong>BETWEEN</strong> 2 PRECEDING <strong>AND</strong> <strong>CURRENT</strong> <strong>ROW</strong>)</p><p><strong>FROM</strong> Orders</p><p><em>//</em> <em>也可以做多个聚合</em></p><p><strong>SELECT</strong> <strong>COUNT</strong>(amount) OVER w, <strong>SUM</strong>(amount) OVER w</p><p><strong>FROM</strong> Orders</p><p>WINDOW w <strong>AS</strong> (</p><p> PARTITION <strong>BY</strong> <strong>user</strong></p><p> <strong>ORDER</strong> <strong>BY</strong> proctime</p><p> <strong>ROWS</strong> <strong>BETWEEN</strong> 2 PRECEDING <strong>AND</strong> <strong>CURRENT</strong> <strong>ROW</strong>)</p><h3 id="4-3-1-TableAPI方式"><a href="#4-3-1-TableAPI方式" class="headerlink" title="4.3.1 TableAPI方式"></a>4.3.1 TableAPI方式</h3><p>Over window聚合是标准SQL中已有的（Over子句），可以在查询的SELECT子句中定义。Over window 聚合，会针对每个输入行，计算相邻行范围内的聚合。Over windows</p><p>使用.window（w:overwindows*）子句定义，并在select（）方法中通过别名来引用。</p><p>比如这样：</p><p>Table <em>table</em> = input<br>  .window([w: OverWindow] as <strong>“w”</strong>)<br>  .select(<strong>“a</strong>, <strong>b</strong>.sum over <strong>w</strong>, <strong>c</strong>.min over <strong>w”</strong>)</p><p>Table API提供了Over类，来配置Over窗口的属性。可以在事件时间或处理时间，以及指定为时间间隔、或行计数的范围内，定义Over windows。</p><p>无界的over window是使用常量指定的。也就是说，时间间隔要指定UNBOUNDED_RANGE，或者行计数间隔要指定UNBOUNDED_ROW。而有界的over window是用间隔的大小指定的。</p><p>实际代码应用如下：</p><p>1） 无界的 over window</p><p><em>//</em> <em>无界的事件时间</em> <em>over window<br>\</em> .window(Over.[<em>partitionBy</em>(<strong>“a”</strong>)].orderBy(<strong>“rowtime”</strong>).preceding.[(UNBOUNDED_RANGE)].as(<strong>“w”</strong>))<br> <em>//</em> <em>无界的处理时间</em> <em>over window<br>\</em> .window(Over.[<em>partitionBy</em>(<strong>“a”</strong>)].orderBy(<strong>“proctime”</strong>).preceding.[(UNBOUNDED_RANGE)].as(<strong>“w”</strong>))<br> <em>//</em> <em>无界的事件时间</em> <em>Row-count over window<br>\</em> .window(Over.[<em>partitionBy</em>(<strong>“a”</strong>)].orderBy(<strong>“rowtime”</strong>).[preceding.[(UNBOUNDED_ROW)].as(<strong>“w”</strong>))<br> <em>//**无界的处理时间</em> <em>Row-count over window<br>\</em> .window(Over.[<em>partitionBy</em>(<strong>“a”</strong>)].orderBy(<strong>“proctime”</strong>).preceding.[(UNBOUNDED_ROW)].as(<strong>“w”</strong>))</p><p>2） 有界的over window</p><p><em>//</em> <em>有界的事件时间</em> <em>over window<br>\</em> .window(Over.<em>partitionBy</em>(<strong>“a”</strong>).orderBy(<strong>“rowtime”</strong>).preceding(<strong>“1.minutes”</strong>).as(<strong>“w”</strong>))<br> <em>//</em> <em>有界的处理时间</em> <em>over window<br>\</em> .window(Over.<em>partitionBy</em>(<strong>“a”</strong>).orderBy(<strong>“proctime”</strong>).preceding(<strong>“1.minutes”</strong>).as(<strong>“w”</strong>))<br> <em>//</em> <em>有界的事件时间</em> <em>Row-count over window<br>\</em> .window(Over.<em>partitionBy</em>(<strong>“a”</strong>).orderBy(<strong>“rowtime”</strong>).preceding(<strong>“10.rows”</strong>).as(<strong>“w”</strong>))<br> <em>//</em> <em>有界的处理时间</em> <em>Row-count over window<br>\</em> .window(Over.<em>partitionBy</em>(<strong>“a”</strong>).orderBy(<strong>“procime”</strong>).preceding(<strong>“10.rows”</strong>).as(<strong>“w”</strong>))</p><h2 id="4-4-Over-Windows案例实操"><a href="#4-4-Over-Windows案例实操" class="headerlink" title="4.4 Over Windows案例实操"></a>4.4 Over Windows案例实操</h2><p>  <strong>import</strong> com.atguigu.bean.SensorReading;   <strong>import</strong> org.apache.flink.streaming.api.TimeCharacteristic;   <strong>import</strong> org.apache.flink.streaming.api.datastream.SingleOutputStreamOperator;   <strong>import</strong> org.apache.flink.streaming.api.environment.StreamExecutionEnvironment;   <strong>import</strong> org.apache.flink.streaming.api.functions.timestamps.BoundedOutOfOrdernessTimestampExtractor;   <strong>import</strong> org.apache.flink.streaming.api.windowing.time.Time;   <strong>import</strong> org.apache.flink.table.api.Over;   <strong>import</strong> org.apache.flink.table.api.Table;   <strong>import</strong> org.apache.flink.table.api.java.StreamTableEnvironment;   <strong>import</strong> org.apache.flink.types.Row;      <strong>public class</strong> FlinkSQL_Test28 {        <strong>public static void</strong> main(String[]  args) <strong>throws</strong> Exception {          <em>//1.**创建执行环境 *      StreamExecutionEnvironment  env = StreamExecutionEnvironment.*getExecutionEnvironment</em>();       env.setParallelism(1);         env.setStreamTimeCharacteristic(TimeCharacteristic.<strong><em>EventTime\</em></strong>);       StreamTableEnvironment tableEnv  = StreamTableEnvironment.<em>create</em>(env);          <em>//2.<strong>读取端口数据创建流并转换为</strong>JavaBean *      SingleOutputStreamOperator<SensorReading>  sensorDataStream = env.socketTextStream(*</em>“hadoop102”<strong>, 7777)             .assignTimestampsAndWatermarks(**new</strong> BoundedOutOfOrdernessTimestampExtractor<String>(Time.<em>seconds</em>(1)) {             @Override             <strong>public long</strong> extractTimestamp(String  element) {               <strong>return</strong> Long.<em>parseLong</em>(element.split(<strong>“,”</strong>)[1]) * 1000L;             }           })           .map(line -&gt; {              String[] fields = line.split(<strong>“,”</strong>);             <strong>return new</strong> SensorReading(fields[0], Long.<em>parseLong</em>(fields[1]), Double.<em>parseDouble</em>(fields[2]));           });          <em>//3.<strong>将流转换为</strong>Table,**并设定处理时间语义 *      Table table =  tableEnv.fromDataStream(sensorDataStream, *</em>“id, ts, temp,  rt.rowtime”<strong>);          <em>//4.TableAPI<strong>实现</strong>over**窗口 *      Table  tableResult = table.window(Over.*partitionBy</em>(</strong>“id”<strong>).orderBy(</strong>“rt”<strong>).preceding(</strong>“1.rows”<strong>).as(</strong>“w”<strong>))           .select(</strong>“id, id.count  over w as ct, temp.avg over w as avgTemp”<strong>);          *//5.SQL *      tableEnv.createTemporaryView(</strong>“sensor”<strong>,table);       Table sqlResult =  tableEnv.sqlQuery(</strong>“select id ,count(id) over w as ct,  avg(temp) over w”** +           <strong>“ from  sensor window w as (partition by id order by rt rows between 1 preceding and  current row)”</strong>);          <em>//6.**打印数据 *      tableEnv.toRetractStream(tableResult,  Row.*</em>class*<em>).print(<strong>“tableResult”</strong>);         tableEnv.toRetractStream(sqlResult, Row.<strong>class</strong>).print(<strong>“sqlResult”</strong>);          <em>//7.</em></em>开启任务 *      env.execute();        }      }  </p><h1 id="第五章-函数（Functions）"><a href="#第五章-函数（Functions）" class="headerlink" title="第五章 函数（Functions）"></a>第五章 函数（Functions）</h1><p>Flink Table 和 SQL内置了很多SQL中支持的函数；如果有无法满足的需要，则可以实现用户自定义的函数（UDF）来解决。</p><h2 id="5-1-系统内置函数"><a href="#5-1-系统内置函数" class="headerlink" title="5.1 系统内置函数"></a>5.1 系统内置函数</h2><p>Flink Table API 和 SQL为用户提供了一组用于数据转换的内置函数。SQL中支持的很多函数，Table API和SQL都已经做了实现，其它还在快速开发扩展中。</p><p>以下是一些典型函数的举例，全部的内置函数，可以参考官网介绍。</p><p>l 比较函数</p><p>SQL：</p><p>value1 = value2</p><p>value1 &gt; value2</p><p>Table API：</p><p>ANY1 === ANY2</p><p>ANY1 &gt; ANY2</p><p>l 逻辑函数</p><p>SQL：</p><p>boolean1 OR boolean2</p><p>boolean IS FALSE</p><p>NOT boolean</p><p>Table API：</p><p>BOOLEAN1 || BOOLEAN2</p><p>BOOLEAN.isFalse</p><p>!BOOLEAN</p><p>l 算术函数</p><p>SQL：</p><p>numeric1 + numeric2</p><p>POWER(numeric1, numeric2)</p><p>Table API：</p><p>NUMERIC1 + NUMERIC2</p><p>NUMERIC1.power(NUMERIC2)</p><p>l 字符串函数</p><p>SQL：</p><p>string1 || string2</p><p>UPPER(string)</p><p>CHAR_LENGTH(string)</p><p>Table API：</p><p>STRING1 + STRING2</p><p>STRING.upperCase()</p><p>STRING.charLength()</p><p>l 时间函数</p><p>SQL：</p><p>DATE string</p><p>TIMESTAMP string</p><p>CURRENT_TIME</p><p>INTERVAL string range</p><p>Table API：</p><p>STRING.toDate</p><p>STRING.toTimestamp</p><p>currentTime()</p><p>NUMERIC.days</p><p>NUMERIC.minutes</p><p>l 聚合函数</p><p>SQL：</p><p>COUNT(*)</p><p>SUM([ ALL | DISTINCT ] expression)</p><p>RANK()</p><p>ROW_NUMBER()</p><p>Table API：</p><p>FIELD.count</p><p>FIELD.sum0  </p><h2 id="5-2-UDF"><a href="#5-2-UDF" class="headerlink" title="5.2 UDF"></a>5.2 UDF</h2><p>用户定义函数（User-defined Functions，UDF）是一个重要的特性，因为它们显著地扩展了查询（Query）的表达能力。一些系统内置函数无法解决的需求，我们可以用UDF来自定义实现。</p><h3 id="5-2-1-注册用户自定义函数UDF"><a href="#5-2-1-注册用户自定义函数UDF" class="headerlink" title="5.2.1 注册用户自定义函数UDF"></a>5.2.1 注册用户自定义函数UDF</h3><p>在大多数情况下，用户定义的函数必须先注册，然后才能在查询中使用。不需要专门为Scala 的Table API注册函数。</p><p>函数通过调用registerFunction()方法在TableEnvironment中注册。当用户定义的函数被注册时，它被插入到TableEnvironment的函数目录中，这样Table API或SQL解析器就可以识别并正确地解释它。</p><h3 id="5-2-2-标量函数（Scalar-Functions）"><a href="#5-2-2-标量函数（Scalar-Functions）" class="headerlink" title="5.2.2 标量函数（Scalar Functions）"></a>5.2.2 标量函数（Scalar Functions）</h3><p>用户定义的标量函数，可以将0、1或多个标量值，映射到新的标量值。</p><p>为了定义标量函数，必须在org.apache.flink.table.functions中扩展基类Scalar Function，并实现（一个或多个）求值（evaluation，eval）方法。标量函数的行为由求值方法决定，求值方法必须公开声明并命名为eval（直接def声明，没有override）。求值方法的参数类型和返回类型，确定了标量函数的参数和返回类型。</p><p>在下面的代码中，我们定义自己的HashCode函数，在TableEnvironment中注册它，并在查询中调用它。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 自定义一个标量函数public static class HashCode extends ScalarFunction &#123;    private int factor &#x3D; 13;    public HashCode(int factor) &#123;        this.factor &#x3D; factor;    &#125;    public int eval(String s) &#123;        return s.hashCode() * factor;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主函数中调用，计算sensor id的哈希值（前面部分照抄，流环境、表环境、读取source、建表）：</p><p><strong>public static void</strong> main(String[] args) <strong>throws</strong> Exception {<br>   <em>// 1.</em> <em>创建环境<br>\</em>   StreamExecutionEnvironment env = StreamExecutionEnvironment.<em>getExecutionEnvironment</em>();<br>   env.setParallelism(1);</p><p>   StreamTableEnvironment tableEnv = StreamTableEnvironment.<em>create</em>(env);</p><p>   <em>// 2.</em> <em>读取文件，得到</em> <em>DataStream<br>\</em>   String filePath = <strong>“sensor”</strong>;</p><p>   DataStream<String> inputStream = env.readTextFile(filePath);</p><p>   <em>// 3.</em> <em>转换成</em> <em>Java Bean<strong>，并指定</strong>timestamp<strong>和</strong>watermark<br>\</em>   DataStream<SensorReading> dataStream = inputStream<br>       .map( line -&gt; {<br>         String[] fields = line.split(<strong>“,”</strong>);<br>         <strong>return new</strong> SensorReading(fields[0], <strong>new</strong> Long(fields[1]), <strong>new</strong> Double(fields[2]));<br>       } );</p><p>   <em>// 4.</em> <em>将</em> <em>DataStream</em> <em>转换为</em> <em>Table<br>\</em>   Table sensorTable = tableEnv.fromDataStream(dataStream, <strong>“id, timestamp as ts, temperature”</strong>);</p><p>   <em>// 5.</em> <em>调用自定义<strong>hash</strong>函数，对<strong>id</strong>进行<strong>hash</strong>运算<br>\</em>   HashCode hashCode = <strong>new</strong> HashCode(23);<br>   tableEnv.registerFunction(<strong>“hashCode”</strong>, hashCode);<br>   Table resultTable = sensorTable<br>       .select(<strong>“id, ts, hashCode(id)”</strong>);</p><p>   <em>//  sql<br>\</em>   tableEnv.createTemporaryView(<strong>“sensor”</strong>, sensorTable);<br>   Table resultSqlTable = tableEnv.sqlQuery(<strong>“select id, ts, hashCode(id) from sensor”</strong>);</p><p>   tableEnv.toAppendStream(resultTable, Row.<strong>class</strong>).print(<strong>“result”</strong>);<br>   tableEnv.toRetractStream(resultSqlTable, Row.<strong>class</strong>).print(<strong>“sql”</strong>);</p><p>   env.execute(<strong>“scalar function test”</strong>);<br> }</p><h3 id="5-2-3-表函数（Table-Functions）"><a href="#5-2-3-表函数（Table-Functions）" class="headerlink" title="5.2.3 表函数（Table Functions）"></a>5.2.3 表函数（Table Functions）</h3><p>与用户定义的标量函数类似，用户定义的表函数，可以将0、1或多个标量值作为输入参数；与标量函数不同的是，它可以返回任意数量的行作为输出，而不是单个值。</p><p>为了定义一个表函数，必须扩展org.apache.flink.table.functions中的基类TableFunction并实现（一个或多个）求值方法。表函数的行为由其求值方法决定，求值方法必须是public的，并命名为eval。求值方法的参数类型，决定表函数的所有有效参数。</p><p>返回表的类型由TableFunction的泛型类型确定。求值方法使用protected collect（T）方法发出输出行。</p><p>在Table API中，Table函数需要与.joinLateral或.leftOuterJoinLateral一起使用。</p><p>joinLateral算子，会将外部表中的每一行，与表函数（TableFunction，算子的参数是它的表达式）计算得到的所有行连接起来。</p><p>而leftOuterJoinLateral算子，则是左外连接，它同样会将外部表中的每一行与表函数计算生成的所有行连接起来；并且，对于表函数返回的是空表的外部行，也要保留下来。</p><p>在SQL中，则需要使用Lateral Table（<TableFunction>），或者带有ON TRUE条件的左连接。</p><p>下面的代码中，我们将定义一个表函数，在表环境中注册它，并在查询中调用它。</p><p>自定义TableFunction：</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 自定义TableFunctionpublic static class Split extends TableFunction&lt;Tuple2&lt;String, Integer&gt;&gt; &#123;    private String separator &#x3D; &quot;,&quot;;    public Split(String separator) &#123;        this.separator &#x3D; separator;    &#125;    &#x2F;&#x2F; 类似flatmap，没有返回值    public void eval(String str) &#123;        for (String s : str.split(separator)) &#123;            collect(new Tuple2&lt;String, Integer&gt;(s, s.length()));        &#125;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来，就是在代码中调用。首先是Table API的方式：</p><p>Split split = <strong>new</strong> Split(<strong>“_”</strong>);<br> tableEnv.registerFunction(<strong>“split”</strong>, split);<br> Table resultTable = sensorTable<br>     .joinLateral( <strong>“split(id) as (word, length)”</strong>)<br>     .select(<strong>“id, ts, word, length”</strong>);</p><p>然后是SQL的方式：</p><p>tableEnv.createTemporaryView(<strong>“sensor”</strong>, sensorTable);<br> Table resultSqlTable = tableEnv.sqlQuery(<strong>“select id, ts, word, length “</strong> +<br>     <strong>“from sensor, lateral table( split(id) ) as splitId(word, length)”</strong>);</p><h3 id="5-2-4-聚合函数（Aggregate-Functions）"><a href="#5-2-4-聚合函数（Aggregate-Functions）" class="headerlink" title="5.2.4 聚合函数（Aggregate Functions）"></a>5.2.4 聚合函数（Aggregate Functions）</h3><p>用户自定义聚合函数（User-Defined Aggregate Functions，UDAGGs）可以把一个表中的数据，聚合成一个标量值。用户定义的聚合函数，是通过继承AggregateFunction抽象类实现的。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image014.jpg" alt="img"></p><p>上图中显示了一个聚合的例子。</p><p>假设现在有一张表，包含了各种饮料的数据。该表由三列（id、name和price）、五行组成数据。现在我们需要找到表中所有饮料的最高价格，即执行max（）聚合，结果将是一个数值。</p><p>AggregateFunction的工作原理如下。</p><p>l 首先，它需要一个累加器，用来保存聚合中间结果的数据结构（状态）。可以通过调用AggregateFunction的createAccumulator（）方法创建空累加器。</p><p>l 随后，对每个输入行调用函数的accumulate（）方法来更新累加器。</p><p>l 处理完所有行后，将调用函数的getValue（）方法来计算并返回最终结果。</p><p>AggregationFunction要求必须实现的方法：</p><p>l createAccumulator()</p><p>l accumulate()</p><p>l getValue()</p><p>除了上述方法之外，还有一些可选择实现的方法。其中一些方法，可以让系统执行查询更有效率，而另一些方法，对于某些场景是必需的。例如，如果聚合函数应用在会话窗口（session group window）的上下文中，则merge（）方法是必需的。</p><p>l retract() </p><p>l merge() </p><p>l resetAccumulator()</p><p>接下来我们写一个自定义AggregateFunction，计算一下每个sensor的平均温度值。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 定义AggregateFunction的Accumulatorpublic static class AvgTempAcc &#123;    double sum &#x3D; 0.0;    int count &#x3D; 0;&#125;&#x2F;&#x2F; 自定义一个聚合函数，求每个传感器的平均温度值，保存状态(tempSum, tempCount)public static class AvgTemp extends AggregateFunction&lt;Double, AvgTempAcc&gt;&#123;    @Override    public Double getValue(AvgTempAcc accumulator) &#123;        return accumulator.sum &#x2F; accumulator.count;    &#125;    @Override    public AvgTempAcc createAccumulator() &#123;        return new AvgTempAcc();    &#125;    &#x2F;&#x2F; 实现一个具体的处理计算函数，accumulate    public void accumulate( AvgTempAcc accumulator, Double temp) &#123;        accumulator.sum +&#x3D; temp;        accumulator.count +&#x3D; 1;    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以在代码中调用了。</p><p><em>//</em> <em>创建一个聚合函数实例<br>\</em> AvgTemp avgTemp = <strong>new</strong> AvgTemp();</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; Table API的调用 tableEnv.registerFunction(&quot;avgTemp&quot;, avgTemp);Table resultTable &#x3D; sensorTable        .groupBy(&quot;id&quot;)        .aggregate(&quot;avgTemp(temperature) as avgTemp&quot;)        .select(&quot;id, avgTemp&quot;);&#x2F;&#x2F; sqltableEnv.createTemporaryView(&quot;sensor&quot;, sensorTable);Table resultSqlTable &#x3D; tableEnv.sqlQuery(&quot;select id, avgTemp(temperature) &quot; +        &quot;from sensor group by id&quot;);tableEnv.toRetractStream(resultTable, Row.class).print(&quot;result&quot;);tableEnv.toRetractStream(resultSqlTable, Row.class).print(&quot;sql&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-5-表聚合函数（Table-Aggregate-Functions）"><a href="#5-2-5-表聚合函数（Table-Aggregate-Functions）" class="headerlink" title="5.2.5 表聚合函数（Table Aggregate Functions）"></a>5.2.5 表聚合函数（Table Aggregate Functions）</h3><p>用户定义的表聚合函数（User-Defined Table Aggregate Functions，UDTAGGs），可以把一个表中数据，聚合为具有多行和多列的结果表。这跟AggregateFunction非常类似，只是之前聚合结果是一个标量值，现在变成了一张表。</p><p><img src="C:/Users/89388/AppData/Local/Temp/msohtmlclip1/01/clip_image016.jpg" alt="img"></p><p>比如现在我们需要找到表中所有饮料的前2个最高价格，即执行top2（）表聚合。我们需要检查5行中的每一行，得到的结果将是一个具有排序后前2个值的表。</p><p>用户定义的表聚合函数，是通过继承TableAggregateFunction抽象类来实现的。</p><p>TableAggregateFunction的工作原理如下。</p><p>l 首先，它同样需要一个累加器（Accumulator），它是保存聚合中间结果的数据结构。通过调用TableAggregateFunction的createAccumulator（）方法可以创建空累加器。</p><p>l 随后，对每个输入行调用函数的accumulate（）方法来更新累加器。</p><p>l 处理完所有行后，将调用函数的emitValue（）方法来计算并返回最终结果。</p><p>AggregationFunction要求必须实现的方法：</p><p>l createAccumulator()</p><p>l accumulate()</p><p>除了上述方法之外，还有一些可选择实现的方法。</p><pre class="line-numbers language-none"><code class="language-none">l &#96;&#96;retract() l &#96;&#96;merge() l &#96;&#96;resetAccumulator() l &#96;&#96;emitValue()&#96;&#96; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>l <code>emitUpdateWithRetract()</code></p><p>接下来我们写一个自定义TableAggregateFunction，用来提取每个sensor最高的两个温度值。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 先定义一个 Accumulatorpublic static class Top2TempAcc &#123;    double highestTemp &#x3D; Double.MIN_VALUE;    double secondHighestTemp &#x3D; Double.MIN_VALUE;&#125;&#x2F;&#x2F; 自定义表聚合函数public static class Top2Temp extends TableAggregateFunction&lt;Tuple2&lt;Double, Integer&gt;, Top2TempAcc&gt; &#123;    @Override    public Top2TempAcc createAccumulator() &#123;        return new Top2TempAcc();    &#125;    &#x2F;&#x2F; 实现计算聚合结果的函数accumulate    public void accumulate(Top2TempAcc acc, Double temp) &#123;        if (temp &gt; acc.highestTemp) &#123;            acc.secondHighestTemp &#x3D; acc.highestTemp;            acc.highestTemp &#x3D; temp;        &#125; else if (temp &gt; acc.secondHighestTemp) &#123;            acc.secondHighestTemp &#x3D; temp;        &#125;    &#125;    &#x2F;&#x2F; 实现一个输出结果的方法，最终处理完表中所有数据时调用    public void emitValue(Top2TempAcc acc, Collector&lt;Tuple2&lt;Double, Integer&gt;&gt; out) &#123;        out.collect(new Tuple2&lt;&gt;(acc.highestTemp, 1));        out.collect(new Tuple2&lt;&gt;(acc.secondHighestTemp, 2));    &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>接下来就可以在代码中调用了。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;&#x2F; 创建一个表聚合函数实例Top2Temp top2Temp &#x3D; new Top2Temp();tableEnv.registerFunction(&quot;top2Temp&quot;, top2Temp);Table resultTable &#x3D; sensorTable        .groupBy(&quot;id&quot;)        .flatAggregate(&quot;top2Temp(temperature) as (temp, rank)&quot;)        .select(&quot;id, temp, rank&quot;);tableEnv.toRetractStream(resultTable, Row.class).print(&quot;result&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink06_容错与检查点算法</title>
      <link href="2021/01/12/Flink06_%E5%AE%B9%E9%94%99%E4%B8%8E%E6%A3%80%E6%9F%A5%E7%82%B9%E7%AE%97%E6%B3%95/"/>
      <url>2021/01/12/Flink06_%E5%AE%B9%E9%94%99%E4%B8%8E%E6%A3%80%E6%9F%A5%E7%82%B9%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-Flink的容错机制"><a href="#0x0-Flink的容错机制" class="headerlink" title="0x0 Flink的容错机制"></a>0x0 Flink的容错机制</h1><h2 id="1-一致性检查点-checkpoint"><a href="#1-一致性检查点-checkpoint" class="headerlink" title="1.一致性检查点(checkpoint)"></a>1.一致性检查点(checkpoint)</h2><p><img src="https://i.loli.net/2020/12/15/63OYw4Qk5yniuFc.png" alt="一致性检查点"></p><p>图为一个计算流,计算根据流中的数据将其中的奇数与偶数进行分流统计</p><p>Flink故障恢复机制的核心,就是应用状态的一致性检查点</p><p>有状态流应用的一致性检查点,其实就是所有任务的状态，在某个时间点的一份拷贝（一份快照)</p><p>这个时间点，应该是所有任务都恰好处理完一个相同的输入数据的时候</p><p>jobManager发起的检查点命令</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简而言之:如图所示,当输入Source为5时,此时下阶段的sum_odd已经计算完毕(1+3+5=9),sum_even也已经计算完毕(2+4=6),然后此时任务统一全部完成,然后CheckPoint只会存储当前时间节点的数据(5,6,9),因为当前时间节点恰好关于5的所有数据计算完毕.</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="2-从检查点恢复状态"><a href="#2-从检查点恢复状态" class="headerlink" title="2.从检查点恢复状态"></a>2.从检查点恢复状态</h2><p><img src="https://i.loli.net/2020/12/15/Ra5I8udNQhmjsyZ.png" alt="image-20201215183931945"></p><p>在执行流应用程序期间，Flink 会定期保存状态的一致检查点</p><p>如果发生故障， Flink 将会使用最近的检查点来一致恢复应用程序的状态，并重新启动处理流程</p><h3 id="2-1从检查点恢复具体流程"><a href="#2-1从检查点恢复具体流程" class="headerlink" title="2.1从检查点恢复具体流程"></a>2.1从检查点恢复具体流程</h3><ol><li>遇到故障之后，第一步就是重启应用</li><li>第二步是从 checkpoint 中读取状态，将状态重置,从检查点重新启动应用程序后，其内部状态与检查点完成时的状态完全相同</li><li>第三步：开始消费并处理检查点到发生故障之间的所有数据,这种检查点的保存和恢复机制可以为应用程序状态提供“精确一次”（exactly-once）的一致性，因为所有算子都会保存检查点并恢复其所有状态，这样一来所有的输入流就都会被重置到检查点完成时的位置</li></ol><h2 id="3-Flink检查点算法"><a href="#3-Flink检查点算法" class="headerlink" title="3.Flink检查点算法"></a>3.Flink检查点算法</h2><ol><li>基于<strong>Chandy-Lamport</strong>算法的分布式快照 barrier 对齐</li><li>核心:将检查点的保存和数据处理分离开,不暂停整个应用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//API</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlinkCheckPoint</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span>            <span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设定没10s做一次检查点</span>        env<span class="token punctuation">.</span><span class="token function">enableCheckpointing</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-1术语解释"><a href="#3-1术语解释" class="headerlink" title="3.1术语解释"></a>3.1术语解释</h3><h4 id="检查点分界线（Checkpoint-Barrier"><a href="#检查点分界线（Checkpoint-Barrier" class="headerlink" title="检查点分界线（Checkpoint Barrier)"></a>检查点分界线（Checkpoint Barrier)</h4><p>Flink的检查点算法用到了一种称为分界线（barrier）的特殊数据形式，用来把一条流上数据按照不同的检查点分开<br>插入分界线之前到来的数据导致的状态更改，都会被包含在当前分界线所属的检查点中<br>而基于分界线之后的数据导致的所有更改，就会被包含在之后的检查点中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//简而言之:barrier本身是一种插入到流中的特殊标记数据,用于标记不同检查点所包含的数据范围</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2检查点算法工作流程"><a href="#3-2检查点算法工作流程" class="headerlink" title="3.2检查点算法工作流程"></a>3.2检查点算法工作流程</h3><ol><li><p>JobManager 会向每个 source 任务发送一条带有新检查点 ID(检查点的批次号) 的消息，通过这种方式来启动检查点</p><p><img src="https://i.loli.net/2020/12/15/mlW3vRun5JN21jH.png" alt="JobManager初始化检查点"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如图所示:JobManager向两个Source分别发送了第二批检查点启动的命令(蓝色三角符号)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol><li>数据源将它们的状态写入检查点，并发出一个检查点 barrier`</li></ol><p>状态后端在状态存入检查点之后，会返回通知给 source 任务，source 任务就会向 JobManager 确认检查点完成</p><p><img src="https://i.loli.net/2020/12/15/dZHJSknIWgEuFDy.png" alt="接受barrier存储后广播检查点"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//当source端受到barrier时,会将自己的状态备份,然后往下游SubTask进行广播</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>分界线对齐：barrier 向下游传递，sum 任务会等待所有输入分区的 barrier 到达</p><p>对于barrier已经到达的分区，继续到达的数据会被缓存</p><p>而barrier尚未到达的分区，数据会被正常处理</p><p><img src="https://i.loli.net/2020/12/15/L4cNvVk9yKGew28.png" alt="下游广播处理"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//barrier往下游广播,但是下游必须等待多个上游的barrier全部到齐之后才会触发状态备份</span><span class="token comment">//由于延迟原因,如图,&lt;蓝色三角barrier2>为蓝色数流的barrier,但是在其在达到Sum even之后,(蓝色圆圈4)会先于&lt;橙色三角barrier2>到达,因为SumEven中的barrier没有全部到齐,所以为防止(蓝色圆圈4)参与数据计算,算法会先让其进入缓存,等到barrier全部到齐备份之后再进行计算.(保证Sum even(8),Sum odd(8),备份成功)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>向下游转发检查点 barrier 后，任务继续正常的数据处理</p><p><img src="https://i.loli.net/2020/12/15/QmcLoptZJPjsI1U.png" alt="3488落盘完毕"></p></li><li><p>Sink 任务向 JobManager 确认状态保存到 checkpoint 完毕</p><p>当所有任务都确认已成功将状态保存到检查点时，检查点就真正完成了</p><p><img src="https://i.loli.net/2020/12/15/dhcnDB41eUm8QHL.png" alt="确认成功保存好检查点"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//如何 sink处理完毕后将barrier发送给JobManager表示一个检查点保存成功</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-保存点-SavePoints-实战–0x2"><a href="#4-保存点-SavePoints-实战–0x2" class="headerlink" title="4.保存点(SavePoints)(实战–0x2)"></a>4.保存点(SavePoints)(实战–0x2)</h2></li></ol><p>Flink 还提供了可以自定义的镜像保存功能，就是保存点（savepoints）</p><p>原则上，创建保存点使用的算法与检查点完全相同，因此保存点可以认为就是具有一些额外元数据的检查点</p><p>Flink不会自动创建保存点，因此用户（或者外部调度程序）必须明确地触发创建操作 </p><p>保存点是一个强大的功能。</p><p>除了故障恢复外，保存点可以用于：有计划的手动备份，更新应用程序，版本迁移，暂停和重启应用，等等</p><p>SavePoint手动存盘</p><h2 id="5-如何使用SavePoints"><a href="#5-如何使用SavePoints" class="headerlink" title="5.如何使用SavePoints"></a>5.如何使用SavePoints</h2><p>参考:</p><p><a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/ops/state/savepoints.html">https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/ops/state/savepoints.html</a></p><h1 id="0x1-Flink的状态一致性"><a href="#0x1-Flink的状态一致性" class="headerlink" title="0x1 Flink的状态一致性"></a>0x1 Flink的状态一致性</h1><h2 id="1-状态一致性概念"><a href="#1-状态一致性概念" class="headerlink" title="1.状态一致性概念"></a>1.状态一致性概念</h2><p>有状态的流处理，内部每个算子任务都可以有自己的状态</p><p>对于流处理器内部来说，所谓的状态一致性，其实就是我们所说的计算结果要保证准确。</p><p>一条数据不应该丢失，也不应该重复计算</p><p>在遇到故障时可以恢复状态，恢复以后的重新计算，结果应该也是完全正确的。</p><h2 id="2-状态一致性分类"><a href="#2-状态一致性分类" class="headerlink" title="2.状态一致性分类"></a>2.状态一致性分类</h2><h3 id="2-1-AT-MOST-ONCE（最多一次）"><a href="#2-1-AT-MOST-ONCE（最多一次）" class="headerlink" title="2.1 AT-MOST-ONCE（最多一次）"></a>2.1 AT-MOST-ONCE（最多一次）</h3><p>当任务故障时，最简单的做法是什么都不干，既不恢复丢失的状态，也不重播丢失的数据。At-most-once 语义的含义是最多处理一次事件。</p><h3 id="2-2-AT-LEAST-ONCE（至少一次）"><a href="#2-2-AT-LEAST-ONCE（至少一次）" class="headerlink" title="2.2 AT-LEAST-ONCE（至少一次）"></a>2.2 AT-LEAST-ONCE（至少一次）</h3><p>在大多数的真实应用场景，我们希望不丢失事件。这种类型的保障称为 at-least-once，意思是所有的事件都得到了处理，而一些事件还可能被处理多次。</p><h3 id="2-3-EXACTLY-ONCE（精确一次）"><a href="#2-3-EXACTLY-ONCE（精确一次）" class="headerlink" title="2.3 EXACTLY-ONCE（精确一次）"></a>2.3 EXACTLY-ONCE（精确一次）</h3><p>恰好处理一次是最严格的保证，也是最难实现的。恰好处理一次语义不仅仅意味着没有事件丢失，还意味着针对每一个数据，内部状态仅仅更新一次。</p><h2 id="3-一致性检查点-CheckPoint"><a href="#3-一致性检查点-CheckPoint" class="headerlink" title="3.一致性检查点(CheckPoint)"></a>3.一致性检查点(CheckPoint)</h2><p>Flink 使用了一种轻量级快照机制 —— 检查点（checkpoint）来保证 exactly-once 语义</p><p>有状态流应用的一致检查点，其实就是：所有任务的状态，在某个时间点的一份拷贝（一份快照）。而这个时间点，应该是所有任务都恰好处理完一个相同的输入数据的时候。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//前文提及:检查点的拷贝使用特殊算法进行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>应用状态的一致检查点，是 Flink 故障恢复机制的==核心==</p><h2 id="4-端对端-end-to-end-状态的一致性"><a href="#4-端对端-end-to-end-状态的一致性" class="headerlink" title="4.端对端(end-to-end)状态的一致性"></a>4.端对端(end-to-end)状态的一致性</h2><p>目前我们看到的一致性保证都是由流处理器实现的，也就是说都是在 Flink 流处理器内部保证的；</p><p>而在真实应用中，流处理应用除了流处理器以外还包含了数据源（例如 Kafka）和输出到持久化系统</p><p>端到端的一致性保证，意味着结果的正确性贯穿了整个流处理应用的始终；</p><p>每一个组件都保证了它自己的一致性</p><p>整个端到端的一致性级别取决于所有组件中一致性最弱的组件</p><h2 id="5-端到端-exactly-once"><a href="#5-端到端-exactly-once" class="headerlink" title="5.端到端 exactly-once"></a>5.端到端 exactly-once</h2><p>Flink内部保证:checkpoint</p><p>source 端: 可重设数据的读取位置</p><p>sink 端 —— 从故障恢复时，数据不会重复写入外部系统,幂等写入,事务写入</p><h3 id="5-1幂等写入"><a href="#5-1幂等写入" class="headerlink" title="5.1幂等写入"></a>5.1幂等写入</h3><p>所谓幂等操作，是说一个操作，可以重复执行很多次，但只导致一次结果更改，也就是说，后面再重复执行就不起作用了</p><p>求n次导数依然是不变的<br>$$<br>(e^x)^n=e^x<br>$$<br><img src="https://i.loli.net/2020/12/15/VM2JtULAcjonbmv.png" alt="幂等性写入"></p><h3 id="5-2事务写入（Transactional-Writes）"><a href="#5-2事务写入（Transactional-Writes）" class="headerlink" title="5.2事务写入（Transactional Writes）"></a>5.2事务写入（Transactional Writes）</h3><p>事务（Transaction）</p><p>应用程序中一系列严密的操作，所有操作必须成功完成，否则在每个操作中所作的所有更改都会被撤消</p><p>具有原子性：一个事务中的一系列的操作要么全部成功，要么一个都不做</p><p>实现思想：构建的事务对应着 checkpoint，等到 checkpoint 真正完成的时候，才把所有对应的结果写入 sink 系统中</p><p>实现方式 ==预写日志==    ==两阶段提交==</p><h4 id="5-2-1-预写日志（Write-Ahead-Log，WAL）"><a href="#5-2-1-预写日志（Write-Ahead-Log，WAL）" class="headerlink" title="5.2.1 预写日志（Write-Ahead-Log，WAL）"></a>5.2.1 预写日志（Write-Ahead-Log，WAL）</h4><p>把结果数据先当成状态保存，然后在收到 checkpoint 完成的通知时，一次性写入 sink 系统</p><p>简单易于实现，由于数据提前在状态后端中做了缓存，所以无论什么 sink 系统，都能用这种方式一批搞定</p><p>DataStream API 提供了一个模板类：GenericWriteAheadSink，来实现这种事务性 sink</p><p>**缺点:**降低效率,变成批处理,降低实时性,外部系统没有事务控制,写到一半事务出错</p><h4 id="5-2-2-两阶段提交（Two-Phase-Commit，2PC）"><a href="#5-2-2-两阶段提交（Two-Phase-Commit，2PC）" class="headerlink" title="5.2.2 两阶段提交（Two-Phase-Commit，2PC）"></a>5.2.2 两阶段提交（Two-Phase-Commit，2PC）</h4><p>对于每个 checkpoint，sink 任务会启动一个事务，并将接下来所有接收的数据添加到事务里</p><p>然后将这些数据写入外部 sink 系统，但不提交它们 —— 这时只是“预提交”</p><p>当它收到 checkpoint 完成的通知时，它才正式提交事务，实现结果的真正写入</p><p>这种方式真正实现了 exactly-once，它需要一个提供事务支持的外部 sink 系统。Flink 提供了 TwoPhaseCommitSinkFunction 接口。</p><p><strong>要求</strong></p><p>外部 sink 系统必须提供事务支持，或者 sink 任务必须能够模拟外部系统上的事务</p><p>在 checkpoint 的间隔期间里，必须能够开启一个事务并接受数据写入</p><p>在收到 checkpoint 完成的通知之前，事务必须是“等待提交”的状态。在故障恢复的情况下，这可能需要一些时间。如果这个时候sink系统关闭事务（例如超时了），那么未提交的数据就会丢失</p><p>sink 任务必须能够在进程失败后恢复事务</p><p>提交事务必须是幂等操作</p><h2 id="6-Flink-Kafka-端到端状态一致性的保证"><a href="#6-Flink-Kafka-端到端状态一致性的保证" class="headerlink" title="6.Flink+Kafka 端到端状态一致性的保证"></a>6.Flink+Kafka 端到端状态一致性的保证</h2><p>内部 —— 利用 checkpoint 机制，把状态存盘，发生故障的时候可以恢复，保证内部的状态一致性</p><p>source —— kafka consumer 作为 source，可以将偏移量保存下来，如果后续任务出现了故障，恢复的时候可以由连接器重置偏移量，重新消费数据，保证一致性</p><p>sink —— kafka producer 作为sink，采用两阶段提交 sink，需要实现一个 TwoPhaseCommitSinkFunction</p><h2 id="7-Exactly-once-两阶段提交"><a href="#7-Exactly-once-两阶段提交" class="headerlink" title="7.Exactly-once 两阶段提交"></a>7.Exactly-once 两阶段提交</h2><p>JobManager 协调各个 TaskManager 进行 checkpoint 存储</p><p>checkpoint保存在 StateBackend中，默认StateBackend是内存级的，也可以改为文件级的进行持久化保存</p><p><img src="https://i.loli.net/2020/12/15/WoceEvtA3pUXfGb.png" alt="两步提交1"></p><p>当 checkpoint 启动时，JobManager 会将检查点分界线（barrier）注入数据流</p><p>barrier会在算子间传递下去</p><p><img src="https://i.loli.net/2020/12/15/cZ2yX4GjrgmhR5k.png" alt="两步提交2"></p><p>每个算子会对当前的状态做个快照，保存到状态后端</p><p>checkpoint 机制可以保证内部的状态一致性</p><p><img src="https://i.loli.net/2020/12/15/3k9oQFNMnVp4KCT.png" alt="两步提交4"></p><p>每个内部的 transform 任务遇到 barrier 时，都会把状态存到 checkpoint 里</p><p>sink 任务首先把数据写入外部 kafka，这些数据都属于预提交的事务；遇到 barrier 时，把状态保存到状态后端，并开启新的预提交事务</p><p><img src="https://i.loli.net/2020/12/15/nmC7hDvwBi3tUFK.png" alt="两步提交5"></p><p>当所有算子任务的快照完成，也就是这次的 checkpoint 完成时，JobManager 会向所有任务发通知，确认这次 checkpoint 完成</p><p>sink 任务收到确认通知，正式提交之前的事务，kafka 中未确认数据改为“已确认”</p><p><img src="https://i.loli.net/2020/12/15/1imRY5G8V72gEbl.png" alt="两步消费5"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span><span class="token comment">//第一条数据来了之后，开启一个 kafka 的事务（transaction），正常写入 kafka 分区日志但标记为未提交，这就是“预提交”</span><span class="token number">2.</span><span class="token comment">//jobmanager 触发 checkpoint 操作，barrier 从 source 开始向下传递，遇到 barrier 的算子将状态存入状态后端，并通知 jobmanager</span><span class="token number">3.</span><span class="token comment">//sink 连接器收到 barrier，保存当前状态，存入 checkpoint，通知 jobmanager，并开启下一阶段的事务，用于提交下个检查点的数据</span><span class="token number">4.</span><span class="token comment">//jobmanager 收到所有任务的通知，发出确认信息，表示 checkpoint 完成</span><span class="token number">5.</span><span class="token comment">//sink 任务收到 jobmanager 的确认信息，正式提交这段时间的数据</span><span class="token number">6.</span><span class="token comment">//外部kafka关闭事务，提交的数据可以正常消费了。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>两阶段提交的网络超时配置问题讨论:</strong></p><p>事务的超时时间</p><p>checkpoint超时时间</p><p>需要将checkpoint的超时时间小于为事务的超时时间</p><p>即使checkpoint挂了,事务回滚</p><h2 id="8-源码寻找kafka-sink的两阶段提交"><a href="#8-源码寻找kafka-sink的两阶段提交" class="headerlink" title="8.源码寻找kafka sink的两阶段提交"></a>8.源码寻找kafka sink的两阶段提交</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//API</span>sensorDS<span class="token punctuation">.</span><span class="token function">addSink</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaProducer011</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>    <span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">,</span>     <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>     properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//source</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FlinkKafkaProducer011</span><span class="token generics"><span class="token punctuation">&lt;</span>IN<span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">TwoPhaseCommitSinkFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span>     <span class="token comment">//继承两阶段提交</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//source</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">notifyCheckpointComplete</span><span class="token punctuation">(</span><span class="token keyword">long</span> checkpointId<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//there is exactly one transaction from the latest checkpoint that was triggered and completed. That should be the common case.</span><span class="token comment">//Simply commit that transaction in that case.</span><span class="token comment">//checkPoint完成时调用提交第二步</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x2-Flink的SavePoints实操"><a href="#0x2-Flink的SavePoints实操" class="headerlink" title="0x2 Flink的SavePoints实操"></a>0x2 Flink的SavePoints实操</h1><p>首先查看配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>user@hadoop<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /opt/moudle/flink/conf/fink-conf.yaml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#==============================================================================</span><span class="token comment"># Fault tolerance and checkpointing</span><span class="token comment">#==============================================================================</span><span class="token comment"># The backend that will be used to store operator state checkpoints if</span><span class="token comment"># checkpointing is enabled.</span><span class="token comment"># 支持的文件系统 rockdb可以是一个本地文件系统或者HDFS路径(k-v),基于磁盘</span><span class="token comment"># 效率很高 管理对外内存 使用闪存</span><span class="token comment"># Supported backends are 'jobmanager', 'filesystem', 'rocksdb', or the</span><span class="token comment"># &lt;class-name-of-factory>.</span><span class="token comment">#</span><span class="token comment"># state.backend: filesystem</span><span class="token comment"># Directory for checkpoints filesystem, when using any of the default bundled</span><span class="token comment"># state backends.</span><span class="token comment"># checkPoint会保存我们的状态,假如我们的任务挂掉,会自己重启,手动kill,checkpoint会自己删掉</span><span class="token comment"># 自己重启会从这里进行读取</span><span class="token comment"># state.checkpoints.dir: hdfs://namenode-host:port/flink-checkpoints</span><span class="token comment"># Default target directory for savepoints, optional.</span><span class="token comment"># 设置用于手动恢复的savePoint地址</span><span class="token comment"># state.savepoints.dir: hdfs://namenode-host:port/flink-checkpoints</span><span class="token comment"># Flag to enable/disable incremental checkpoints for backends that</span><span class="token comment"># support incremental checkpoints (like the RocksDB state backend). </span><span class="token comment">#</span><span class="token comment"># state.backend.incremental: false</span><span class="token comment"># The failover strategy, i.e., how the job computation recovers from task failures.</span><span class="token comment"># Only restart tasks that may have been affected by the task failure, which typically includes</span><span class="token comment"># downstream tasks and potentially upstream tasks if their produced data is no longer available for consumption.</span>jobmanager.execution.failover-strategy: region<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">bin<span class="token operator">/</span>flink svaepoint jobid hdfs<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token comment">//保存检查点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="1-State与CK的配置"><a href="#1-State与CK的配置" class="headerlink" title="1.State与CK的配置"></a>1.State与CK的配置</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>checkpoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>restartstrategy<span class="token punctuation">.</span></span><span class="token class-name">RestartStrategies</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>contrib<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>state<span class="token punctuation">.</span></span><span class="token class-name">RocksDBStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span></span><span class="token class-name">FsStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>memory<span class="token punctuation">.</span></span><span class="token class-name">MemoryStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">CheckpointingMode</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-19 9:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink03_State_Set</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 设置状态后端</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MemoryStateBackend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:8020/flink/flinkCk"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RocksDBStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:8020/flink/flinkCK"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 设置CK</span>        env<span class="token punctuation">.</span><span class="token function">enableCheckpointing</span><span class="token punctuation">(</span><span class="token number">10000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置ck模式</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCheckpointingMode</span><span class="token punctuation">(</span><span class="token class-name">CheckpointingMode</span><span class="token punctuation">.</span>EXACTLY_ONCE<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//两次ck时间间隔</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCheckpointInterval</span><span class="token punctuation">(</span><span class="token number">500L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置ck超时时间</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCheckpointTimeout</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置同时最多有多少个CK任务</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMaxConcurrentCheckpoints</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置两个任务的最小间隔时间 头跟尾</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setMinPauseBetweenCheckpoints</span><span class="token punctuation">(</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ck重试次数</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTolerableCheckpointFailureNumber</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置是够倾向于使用checkPoint回复</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setPreferCheckpointForRecovery</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 重启策略 固定延迟 重启三次. 5秒重启一次</span>        env<span class="token punctuation">.</span><span class="token function">setRestartStrategy</span><span class="token punctuation">(</span><span class="token class-name">RestartStrategies</span><span class="token punctuation">.</span><span class="token function">fixedDelayRestart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//失败率重启策略 每隔50秒内重启3次, 每次与每次之间的间隔3秒</span>        env<span class="token punctuation">.</span><span class="token function">setRestartStrategy</span><span class="token punctuation">(</span><span class="token class-name">RestartStrategies</span><span class="token punctuation">.</span><span class="token function">failureRateRestart</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">minutes</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-测试案例"><a href="#2-测试案例" class="headerlink" title="2.测试案例"></a>2.测试案例</h2><p><strong>计算wordcount</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>checkpoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">Flat3Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span></span><span class="token class-name">FsStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">ProcessFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-19 9:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink04_State_CheckPoint_Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:8020/flink/ck"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">enableCheckpointing</span><span class="token punctuation">(</span><span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置不自动删除CK</span>       env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableExternalizedCheckpoints</span><span class="token punctuation">(</span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">.</span><span class="token class-name">ExternalizedCheckpointCleanup</span><span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 读取端口数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> socketTextStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 处理数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> process <span class="token operator">=</span> socketTextStream<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印数据</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 执行环境</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyProcessMap</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>field<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-打包-并上传到集群"><a href="#3-打包-并上传到集群" class="headerlink" title="3.打包,并上传到集群"></a>3.打包,并上传到集群</h2><p>1.将外部module依赖排除</p><p>2.打包上传flink/jars</p><h2 id="4-测试提交任务"><a href="#4-测试提交任务" class="headerlink" title="4.测试提交任务"></a>4.测试提交任务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-yqu hive <span class="token punctuation">\</span>-c com.ecust.checkpoint.Flink04_State_CheckPoint_Test <span class="token punctuation">\</span>jars/flink-state-cktest.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-将程序中添加UID"><a href="#5-将程序中添加UID" class="headerlink" title="5.将程序中添加UID"></a>5.将程序中添加UID</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>checkpoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">Flat3Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span></span><span class="token class-name">FsStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">ProcessFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-19 9:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink04_State_CheckPoint_Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:8020/flink/ck"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">enableCheckpointing</span><span class="token punctuation">(</span><span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置不自动删除CK</span>    env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableExternalizedCheckpoints</span><span class="token punctuation">(</span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">.</span><span class="token class-name">ExternalizedCheckpointCleanup</span><span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 读取端口数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"source-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 处理数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> process <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"process-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"sum-3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印数据</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 执行环境</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyProcessMap</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>field<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-提交UID程序"><a href="#6-提交UID程序" class="headerlink" title="6.提交UID程序"></a>6.提交UID程序</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.checkpoint.Flink04_State_CheckPoint_Test <span class="token punctuation">\</span>jars/flink-state-uidtest.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-触发savepoint"><a href="#7-触发savepoint" class="headerlink" title="7.触发savepoint"></a>7.触发savepoint</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink savepoint 1b5e52b1918314b1de6027821a9010ac hdfs://hadoop102:8020/savepoint/ -yid application_1610958550227_0004<span class="token comment"># jobid 地址 appid</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="8-使用savepoint重启任务"><a href="#8-使用savepoint重启任务" class="headerlink" title="8.使用savepoint重启任务"></a>8.使用savepoint重启任务</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run -s hdfs://hadoop102:8020/savepoint/savepoint-1b5e52-ae6ffd50e8b6 <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-yqu hive <span class="token punctuation">\</span>-c com.ecust.checkpoint.Flink04_State_CheckPoint_Test <span class="token punctuation">\</span>./jars/flink-state-uidtest.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="9-修改代码准备升级"><a href="#9-修改代码准备升级" class="headerlink" title="9.修改代码准备升级"></a>9.修改代码准备升级</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>checkpoint</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>commons<span class="token punctuation">.</span>collections<span class="token punctuation">.</span>map<span class="token punctuation">.</span></span><span class="token class-name">Flat3Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>runtime<span class="token punctuation">.</span>state<span class="token punctuation">.</span>filesystem<span class="token punctuation">.</span></span><span class="token class-name">FsStateBackend</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">ProcessFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-19 9:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink04_State_CheckPoint_Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://hadoop102:8020/flink/ck"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">enableCheckpointing</span><span class="token punctuation">(</span><span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//设置不自动删除CK</span>        env<span class="token punctuation">.</span><span class="token function">getCheckpointConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enableExternalizedCheckpoints</span><span class="token punctuation">(</span><span class="token class-name">CheckpointConfig</span><span class="token punctuation">.</span><span class="token class-name">ExternalizedCheckpointCleanup</span><span class="token punctuation">.</span>RETAIN_ON_CANCELLATION<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 读取端口数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"source-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 处理数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> process <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyProcessMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"process-2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result0 <span class="token operator">=</span> process<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"sum-3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 update 升级处理数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">)</span> result0<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> stringIntegerTuple2<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> stringIntegerTuple2<span class="token punctuation">.</span>f0 <span class="token operator">+</span> <span class="token string">"总数为:"</span> <span class="token operator">+</span> stringIntegerTuple2<span class="token punctuation">.</span>f1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">uid</span><span class="token punctuation">(</span><span class="token string">"mapper-4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印数据</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 执行环境</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyProcessMap</span> <span class="token keyword">extends</span> <span class="token class-name">ProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">String</span> value<span class="token punctuation">,</span> <span class="token class-name">Context</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> field <span class="token operator">:</span> fields<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                out<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>field<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>打包上传</p><h2 id="10-从savepoint启动并切换jar包"><a href="#10-从savepoint启动并切换jar包" class="headerlink" title="10.从savepoint启动并切换jar包"></a>10.从savepoint启动并切换jar包</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run -s hdfs://hadoop102:8020/savepoint/savepoint-1b5e52-ae6ffd50e8b6 <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.checkpoint.Flink04_State_CheckPoint_Test <span class="token punctuation">\</span>./jars/flink-state-update.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x3-Flink的CheckPoint实操"><a href="#0x3-Flink的CheckPoint实操" class="headerlink" title="0x3 Flink的CheckPoint实操"></a>0x3 Flink的CheckPoint实操</h1><p>由于我们已经在程序设置好了</p><p>注意</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run -s hdfs://hadoop102:8020/flink/ck/3f3bafadf4fe7dc6ca1dcf9768d71233/chk-346 <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-yqu hive <span class="token punctuation">\</span>-c com.ecust.checkpoint.Flink04_State_CheckPoint_Test <span class="token punctuation">\</span>./jars/flink-state-update.jar<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hadoop下的存储格式LZO</title>
      <link href="2021/01/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Hadoop%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/"/>
      <url>2021/01/04/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3Hadoop%E4%B8%8B%E7%9A%84%E6%95%B0%E6%8D%AE%E5%AD%98%E5%82%A8%E6%A0%BC%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop下的数据存储格式LZO"><a href="#Hadoop下的数据存储格式LZO" class="headerlink" title="Hadoop下的数据存储格式LZO"></a>Hadoop下的数据存储格式LZO</h1><h2 id="0x1-为什么要使用压缩技术"><a href="#0x1-为什么要使用压缩技术" class="headerlink" title="0x1 为什么要使用压缩技术?"></a>0x1 为什么要使用压缩技术?</h2><p>压缩技术能够有效减少底层存储系统(HDFS)读写字节数. 压缩提高了网络带宽和磁盘空间的效率</p><p>MR中的场景 (I/O,网络数据传输,Shuffle,Merge)</p><p>用CPU换I/O</p><h2 id="0x2-流行压缩技术1-Snappy"><a href="#0x2-流行压缩技术1-Snappy" class="headerlink" title="0x2 流行压缩技术1-Snappy"></a>0x2 流行压缩技术1-Snappy</h2><p>高速压缩速度,合理的压缩率</p><p>性能最高,但是不支持切片(split)</p><h2 id="0x3-流行压缩技术2-Lzo-在这里重点说明"><a href="#0x3-流行压缩技术2-Lzo-在这里重点说明" class="headerlink" title="0x3 流行压缩技术2-Lzo[在这里重点说明]"></a>0x3 流行压缩技术2-Lzo[在这里重点说明]</h2><h3 id="3-1-概要"><a href="#3-1-概要" class="headerlink" title="3.1 概要"></a>3.1 概要</h3><p>Hadoop体系下支持Lzo,需要安装</p><p>特点: 压缩/解压速度比较快,支持split</p><h3 id="3-2-详解"><a href="#3-2-详解" class="headerlink" title="3.2 详解"></a>3.2 详解</h3><p>优点:压缩/解压缩速度也比较快,合理的压缩率,支持split,是Hadoop中比较流行的压缩格式,可以再Linux中安装lzop命令,使用方便</p><p>缺点:压缩率比Gzip要低一些,Hadoop本身不支持,需要安装;在应用中对Lzo格式的文件需要做一些特殊处理(为了支持Split需要建立索引,还需要指定InputFormat为Lzo格式.</p><p>应用场景:一个很大的文本文件,压缩之后还大于200M以上的可以考虑,而且单个文件越大,lzo优点越明显.</p><p>看到这里肯定冒出几个问题</p><h4 id="3-2-1-LZO的压缩速度快-快多少呢-如何跟其他的压缩格式相比"><a href="#3-2-1-LZO的压缩速度快-快多少呢-如何跟其他的压缩格式相比" class="headerlink" title="3.2.1 LZO的压缩速度快,快多少呢,如何跟其他的压缩格式相比?"></a>3.2.1 LZO的压缩速度快,快多少呢,如何跟其他的压缩格式相比?</h4><p>直接上数据</p><table><thead><tr><th>压缩格式</th><th>算法</th><th>文件扩展名</th><th>是否可切分</th></tr></thead><tbody><tr><td>DEFLATE</td><td>DEFLATE</td><td>.deflate</td><td>否</td></tr><tr><td>Gzip</td><td>DEFLATE</td><td>.gz</td><td>否</td></tr><tr><td>bzip2</td><td>bzip2</td><td>.bz2</td><td>是</td></tr><tr><td>==LZO==</td><td>LZO</td><td>.lzo</td><td>是</td></tr><tr><td>Snappy</td><td>Snappy</td><td>.snappy</td><td>否</td></tr></tbody></table><p>为了支持多种压缩/解压缩算法，Hadoop引入了编码/解码器，如下表所示：</p><table><thead><tr><th>压缩格式</th><th>对应的编码/解码器</th></tr></thead><tbody><tr><td>DEFLATE</td><td>org.apache.hadoop.io.compress.DefaultCodec</td></tr><tr><td>gzip</td><td>org.apache.hadoop.io.compress.GzipCodec</td></tr><tr><td>bzip2</td><td>org.apache.hadoop.io.compress.BZip2Codec</td></tr><tr><td>LZO</td><td>com.hadoop.compression.lzo.LzopCodec</td></tr><tr><td>Snappy</td><td>org.apache.hadoop.io.compress.SnappyCodec</td></tr></tbody></table><p>压缩性能的比较：</p><table><thead><tr><th>压缩算法</th><th>原始文件大小</th><th>压缩文件大小</th><th>压缩速度</th><th>解压速度</th></tr></thead><tbody><tr><td>gzip</td><td>8.3GB</td><td>1.8GB</td><td>17.5MB/s</td><td>58MB/s</td></tr><tr><td>bzip2</td><td>8.3GB</td><td>1.1GB</td><td>2.4MB/s</td><td>9.5MB/s</td></tr><tr><td>LZO</td><td>8.3GB</td><td>2.9GB</td><td>49.3MB/s</td><td>74.6MB/s</td></tr></tbody></table><h4 id="3-2-2-LZO的比较好用-在大数据体系中哪些地方可以使用-如何使用"><a href="#3-2-2-LZO的比较好用-在大数据体系中哪些地方可以使用-如何使用" class="headerlink" title="3.2.2 LZO的比较好用,在大数据体系中哪些地方可以使用,如何使用?"></a>3.2.2 LZO的比较好用,在大数据体系中哪些地方可以使用,如何使用?</h4><p>1.Hive建表中可以直接导入HDFS中lzo格式的数据(要想走计算引擎需要增加索引)</p><p>2.Flume采集可以直接转换采集格式放入HDFS(hdfs sink)</p><p>参数在这里不多赘余,上链接</p><blockquote><p><a href="https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LZO#space-menu-link-content">https://cwiki.apache.org/confluence/display/Hive/LanguageManual+LZO#space-menu-link-content</a></p></blockquote><h4 id="3-2-3-LZO为什么靠什么进行切片-为什么切片后能够被Driver进行Split-精"><a href="#3-2-3-LZO为什么靠什么进行切片-为什么切片后能够被Driver进行Split-精" class="headerlink" title="3.2.3 LZO为什么靠什么进行切片,为什么切片后能够被Driver进行Split[精]"></a>3.2.3 LZO为什么靠什么进行切片,为什么切片后能够被Driver进行Split[精]</h4><h2 id="0x4-文件存储格式-列存储的两种"><a href="#0x4-文件存储格式-列存储的两种" class="headerlink" title="0x4 文件存储格式(列存储的两种)"></a>0x4 文件存储格式(列存储的两种)</h2><p>(TEXTFILE 、SEQUENCEFILE、ORC、PARQUET)</p><p>行存储跟列存储 Row layout/Column layout</p><h3 id="4-1-ORC"><a href="#4-1-ORC" class="headerlink" title="4.1 ORC"></a>4.1 ORC</h3><p>Orc (Optimized Row Columnar)是Hive 0.11版里引入的新的存储格式。如下图所示可以看到每个Orc文件由1个或多个stripe组成，每个stripe一般为HDFS的块大小，每一个stripe包含多条记录，这些记录按照列进行独立存储，对应到Parquet中的row group的概念。每个Stripe里有三部分组成，分别是Index Data，Row Data，Stripe Footer</p><h3 id="4-2-Parquent"><a href="#4-2-Parquent" class="headerlink" title="4.2 Parquent"></a>4.2 Parquent</h3><p>Parquet文件是以二进制方式存储的，所以是不可以直接读取的，文件中包括该文件的数据和元数据，因此Parquet格式文件是自解析的。</p><p>（1）行组(Row Group)：每一个行组包含一定的行数，在一个HDFS文件中至少存储一个行组，类似于orc的stripe的概念。</p><p>（2）列块(Column Chunk)：在一个行组中每一列保存在一个列块中，行组中的所有列连续的存储在这个行组文件中。一个列块中的值都是相同类型的，不同的列块可能使用不同的算法进行压缩。</p><p>（3）页(Page)：每一个列块划分为多个页，一个页是最小的编码的单位，在同一个列块的不同页可能使用不同的编码方式。</p><p>通常情况下，在存储Parquet数据的时候会按照Block大小设置行组的大小，由于一般情况下每一个Mapper任务处理数据的最小单位是一个Block，这样可以把每一个行组由一个Mapper任务处理，增大任务执行并行度。Parquet文件的格式。</p>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> lzo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_累加器与分区器</title>
      <link href="2021/01/04/%E7%B4%AF%E5%8A%A0%E5%99%A8%E4%B8%8E%E5%88%86%E5%8C%BA%E5%99%A8%E6%80%BB%E7%BB%93/"/>
      <url>2021/01/04/%E7%B4%AF%E5%8A%A0%E5%99%A8%E4%B8%8E%E5%88%86%E5%8C%BA%E5%99%A8%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="0x1-Long累加器的使用"><a href="#0x1-Long累加器的使用" class="headerlink" title="0x1 Long累加器的使用"></a>0x1 Long累加器的使用</h1><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object selfAccumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;accumulator&quot;))    val word: RDD[String] &#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;word.txt&quot;)    val words &#x3D; word.flatMap(_.split(&quot; &quot;))    val accumulator: LongAccumulator &#x3D; sc.longAccumulator&#x2F;&#x2F;定义数字累加器    words.foreach&#123;      case &quot;hello&quot; &#x3D;&gt; accumulator.add(1)      case _ &#x3D;&gt;    &#125;    println(&quot;hello:&quot;+accumulator.value)&#x2F;&#x2F;注意输出为accumulator的值  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x2-自定义分区器"><a href="#0x2-自定义分区器" class="headerlink" title="0x2 自定义分区器"></a>0x2 自定义分区器</h1><h2 id="1-HashPartitioner"><a href="#1-HashPartitioner" class="headerlink" title="1.HashPartitioner"></a>1.HashPartitioner</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1: RDD[(String, Int)] &#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用hash分区器    val rdd2: RDD[(String, Int)] &#x3D; rdd1.partitionBy(new HashPartitioner(3))    rdd2.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-RangePartitioner"><a href="#2-RangePartitioner" class="headerlink" title="2.RangePartitioner"></a>2.RangePartitioner</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1&#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用rangePartitioner    val value &#x3D; new RangePartitioner[String, Int](2, rdd1.sample(false, 0.5))    &#x2F;&#x2F;range分区器的使用,要定义泛型,传递分区,传递sample    &#x2F;&#x2F;首先要传递一个分区,传递一个    rdd1.partitionBy(value)    rdd1.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-自定义分区"><a href="#3-自定义分区" class="headerlink" title="3.自定义分区"></a>3.自定义分区</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">case class MyPartitioner(numPartition:Int) extends Partitioner &#123;    override def numPartitions: Int &#x3D; numPartition    override def getPartition(key: Any): Int &#x3D; (math.random() * numPartition).toInt&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1&#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用rangePartitioner    val value &#x3D; new RangePartitioner[String, Int](2, rdd1.sample(false, 0.5))    &#x2F;&#x2F;range分区器的使用,要定义泛型,传递分区,传递sample    &#x2F;&#x2F;首先要传递一个分区,传递一个    val value1: RDD[(String, Int)] &#x3D; rdd1.partitionBy(MyPartitioner(2))    value1.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x3-自定义累加器"><a href="#0x3-自定义累加器" class="headerlink" title="0x3 自定义累加器"></a>0x3 自定义累加器</h1><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package test.longAccumulatorimport org.apache.spark.rdd.RDDimport org.apache.spark.util.&#123;AccumulatorV2, LongAccumulator&#125;import org.apache.spark.&#123;SparkConf, SparkContext&#125;import scala.collection.mutable&#x2F;** * @create 2020-10-31 11:21 *&#x2F;object selfAccumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;accumulator&quot;))    val word: RDD[String] &#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;word.txt&quot;)    val words &#x3D; word.flatMap(_.split(&quot; &quot;))    val accumulator: LongAccumulator &#x3D; sc.longAccumulator&#x2F;&#x2F;定义数字累加器    words.foreach&#123;      case &quot;hello&quot; &#x3D;&gt; accumulator.add(1)      case _ &#x3D;&gt;    &#125;    println(&quot;hello:&quot;+accumulator.value)&#x2F;&#x2F;注意输出为accumulator的值    println(&quot;--------------------------------------------------&quot;)  &#125;&#125;&#x2F;&#x2F;自定义累加器&#x2F;&#x2F;1.要继承的类为AccumulatorV2&#x2F;&#x2F;2.要注意描写泛型&#x2F;&#x2F;3.注意使用一种集合来累加class WCAccumulator extends AccumulatorV2[String,mutable.Map[String,Int]] &#123;  private val map &#x3D; mutable.Map.empty[String, Int]  &#x2F;&#x2F;如何理解Map.empty的创建map的方法&#x2F;&#x2F;创建空集合  &#x2F;&#x2F;传递一个你决定为空的方法  override def isZero: Boolean &#x3D; map.isEmpty  &#x2F;&#x2F;传递一个复制的方法  override def copy(): AccumulatorV2[String, mutable.Map[String, Int]] &#x3D; &#123;    val accumulator:WCAccumulator &#x3D; new WCAccumulator    accumulator.map ++&#x3D; this.map&#x2F;&#x2F;如何理解this?    accumulator&#x2F;&#x2F;传递回  &#125;  override def reset(): Unit &#x3D; map.clear()  override def add(v: String): Unit &#x3D; map.update(v,map.getOrElse(v,0)+1)  override def merge(other: AccumulatorV2[String, mutable.Map[String, Int]]): Unit &#x3D;    other.value.foreach&#123;&#x2F;&#x2F;传入的是每个key的值得键值对      case (word,count) &#x3D;&gt;        map.update(word,map.getOrElse(word,0)+count)&#x2F;&#x2F;累加器核心2    &#125;  override def value: mutable.Map[String, Int] &#x3D; map&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SubmitSource</title>
      <link href="2021/01/04/Spark_SubmitSource/"/>
      <url>2021/01/04/Spark_SubmitSource/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Yarn-Client提交源码"><a href="#1-Yarn-Client提交源码" class="headerlink" title="1.Yarn Client提交源码"></a>1.Yarn Client提交源码</h1><p>爱护生命,少肝源码!</p><h2 id="1-任务的提交"><a href="#1-任务的提交" class="headerlink" title="1.任务的提交"></a>1.任务的提交</h2><p>==程序起点==</p><p>spark-submit.cmd</p><p>==脚本启动==</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">bin&#x2F;spark-submit--class WordCount--master yarn--deploy-mode cluster.&#x2F;wordCount.jar.&#x2F;input .&#x2F;output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-SparkSubmit"><a href="#2-SparkSubmit" class="headerlink" title="2.SparkSubmit"></a>2.SparkSubmit</h2><h4 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">spark-submit --class org.apache.spark.examples.SparkPi --master local[2] ..&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.12-3.0.0.jar 10<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="java-p"><a href="#java-p" class="headerlink" title="java -p"></a>java -p</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">&quot;Java\jdk1.8.0_131\bin\java&quot; -cp &quot;C:\spark-3.0.0-bin-hadoop3.2\bin\..\conf\;\spark-3.0.0-bin-hadoop3.2\bin\..\jars\*&quot; -Xmx1g org.apache.spark.deploy.SparkSubmit --master local[2] --class org.apache.spark.examples.SparkPi ..&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.12-3.0.0.jar 10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>java -cp 等同于classpath</p><p>启动submit的main方法</p><ol><li>java -cp </li><li>开启JVM虚拟机 </li><li>开启Process（SparkSubmit)</li><li>程序入口SparkSubmit.main</li></ol><p>org.apache.spark.deploy.SparkSubmit，找到SparkSubmit的伴生对象，并找到main方法</p><h4 id="main"><a href="#main" class="headerlink" title="main"></a>main</h4><p><em>org/apache/spark/deploy/SparkSubmit.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">override def main(args: Array[String]): Unit &#x3D; &#123;    val submit &#x3D; new SparkSubmit() &#123;      self &#x3D;&gt;      override protected def parseArguments(args: Array[String]): SparkSubmitArguments &#x3D; &#123;new SparkSubmitArguments(args) &#123;...&#125;&#125;&#x2F;&#x2F;在主程序中new一个用于解析参数方法的的对象        ...&#x2F;&#x2F;日志方法    submit.doSubmit(args)&#x2F;&#x2F;调用doSubmit方法  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="doSubmit"><a href="#doSubmit" class="headerlink" title="doSubmit"></a>doSubmit</h4><p><em>org/apache/spark/deploy/SparkSubmit.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">def doSubmit(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F; Initialize logging if it hasn&#39;t been done yet. Keep track of whether logging needs to    &#x2F;&#x2F; be reset before the application starts.    ...    val appArgs &#x3D; parseArguments(args)&#x2F;&#x2F;在doSubmit中调用解析参数方法-----------------&gt;parseArguments, appArgs为被解析出来的封装的参数   ...    appArgs.action match &#123;&#x2F;&#x2F;使用解析出来的参数appArgs判断参数信息的action字段      case SparkSubmitAction.SUBMIT &#x3D;&gt; submit(appArgs, uninitLog)&#x2F;&#x2F;----------------&gt;submit      case SparkSubmitAction.KILL &#x3D;&gt; kill(appArgs)      case SparkSubmitAction.REQUEST_STATUS &#x3D;&gt; requestStatus(appArgs)      case SparkSubmitAction.PRINT_VERSION &#x3D;&gt; printVersion()    &#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-parseArguments"><a href="#doSubmit-parseArguments" class="headerlink" title="doSubmit/parseArguments"></a>doSubmit/parseArguments</h3><p><em>org/apache/spark/deploy/SparkSubmit.scala</em> </p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">protected def parseArguments(args: Array[String]): SparkSubmitArguments &#x3D; &#123;    new SparkSubmitArguments(args)  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-parseArguments-SparkSubmitArguments"><a href="#doSubmit-parseArguments-SparkSubmitArguments" class="headerlink" title="doSubmit/parseArguments/SparkSubmitArguments"></a>doSubmit/parseArguments/SparkSubmitArguments</h3><p><em>org/apache/spark/deploy/SparkSubmitArguments.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[deploy] class SparkSubmitArguments(args: Seq[String], env: Map[String, String] &#x3D; sys.env)  extends SparkSubmitArgumentsParser with Logging &#123;  var master: String &#x3D; null  var deployMode: String &#x3D; null  var executorMemory: String &#x3D; null  var executorCores: String &#x3D; null  ...&#x2F;&#x2F;各种参数  &#x2F;** Default properties present in the currently defined defaults file. *&#x2F;  lazy val defaultSparkProperties: HashMap[String, String] &#x3D; &#123;    val defaultProperties &#x3D; new HashMap[String, String]()    ...    &#125;    defaultProperties&#x2F;&#x2F;使用HashMap存储配置参数  &#125;&#x2F;&#x2F; Set parameters from command line arguments  parse(args.asJava)&#x2F;&#x2F;解析参数----------------------------&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-parseArguments-SparkSubmitArguments-parse"><a href="#doSubmit-parseArguments-SparkSubmitArguments-parse" class="headerlink" title="doSubmit/parseArguments/SparkSubmitArguments/parse"></a>doSubmit/parseArguments/SparkSubmitArguments/parse</h3><p><em>org\apache\spark\launcher\SparkSubmitOptionParser.class</em></p><p>==疑问==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">protected final void parse(List&lt;String&gt; args) &#123;&#x2F;&#x2F;传入配置String        Pattern eqSeparatedOpt &#x3D; Pattern.compile(&quot;(--[^&#x3D;]+)&#x3D;(.+)&quot;);        int idx &#x3D; false;        int idx;        for(idx &#x3D; 0; idx &lt; args.size(); ++idx) &#123;            String arg &#x3D; (String)args.get(idx);            String value &#x3D; null;            Matcher m &#x3D; eqSeparatedOpt.matcher(arg);            ...                    value &#x3D; (String)args.get(idx);&#125;                if (!this.handle(name, value)) &#123;break;&#125;&#x2F;&#x2F;----------------------&gt;            &#125; else &#123;...&#125;        &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-parseArguments-SparkSubmitArguments-parse-handle"><a href="#doSubmit-parseArguments-SparkSubmitArguments-parse-handle" class="headerlink" title="doSubmit/parseArguments/SparkSubmitArguments/parse/handle"></a>doSubmit/parseArguments/SparkSubmitArguments/parse/handle</h3><p><em>org/apache/spark/deploy/SparkSubmitArguments.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">override protected def handle(opt: String, value: String): Boolean &#x3D; &#123;    opt match &#123;      case NAME &#x3D;&gt;        name &#x3D; value      case MASTER &#x3D;&gt;        master &#x3D; value     ...      case DEPLOY_MODE &#x3D;&gt;        if (value !&#x3D; &quot;client&quot; &amp;&amp; value !&#x3D; &quot;cluster&quot;) &#123;          error(&quot;--deploy-mode must be either \&quot;client\&quot; or \&quot;cluster\&quot;&quot;)        &#125;        deployMode &#x3D; value      case NUM_EXECUTORS &#x3D;&gt;        numExecutors &#x3D; value      case TOTAL_EXECUTOR_CORES &#x3D;&gt;        totalExecutorCores &#x3D; value      case EXECUTOR_CORES &#x3D;&gt;        executorCores &#x3D; value      case EXECUTOR_MEMORY &#x3D;&gt;        executorMemory &#x3D; value      case DRIVER_MEMORY &#x3D;&gt;        driverMemory &#x3D; value      case DRIVER_CORES &#x3D;&gt;        driverCores &#x3D; value      ...    &#125;&#x2F;&#x2F;各种配置信息判断    action !&#x3D; SparkSubmitAction.PRINT_VERSION  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-submit"><a href="#doSubmit-submit" class="headerlink" title="doSubmit/submit"></a>doSubmit/submit</h3><p><em>org/apache/spark/deploy/SparkSubmit.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private def submit(args: SparkSubmitArguments, uninitLog: Boolean): Unit &#x3D; &#123;    def doRunMain(): Unit &#x3D; &#123;      if (args.proxyUser !&#x3D; null) &#123;        val proxyUser &#x3D; UserGroupInformation.createProxyUser(args.proxyUser,          UserGroupInformation.getCurrentUser())        try &#123;          proxyUser.doAs(new PrivilegedExceptionAction[Unit]() &#123;            override def run(): Unit &#x3D; &#123;              runMain(args, uninitLog)&#x2F;&#x2F;-------------------------------&gt;            &#125;          &#125;)        &#125; catch &#123;...&#125;      &#125; else &#123;        runMain(args, uninitLog)&#x2F;&#x2F;---------------------------------&gt;      &#125;    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-submit-doRunMain-runMain"><a href="#doSubmit-submit-doRunMain-runMain" class="headerlink" title="doSubmit/submit/doRunMain/runMain"></a>doSubmit/submit/doRunMain/runMain</h3><p><em>org/apache/spark/deploy/SparkSubmit.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;**   * Run the main method of the child class using the submit arguments.   * 启动main程序的启动子类   * This runs in two steps. First, we prepare the launch environment by setting up   * the appropriate classpath, system properties, and application arguments for   * running the child main class based on the cluster manager and the deploy mode.   * Second, we use this launch environment to invoke the main method of the child   * main class.   * 激活启动子类   * Note that this main class will not be the one provided by the user if we&#39;re   * running cluster deploy mode or python applications.   *&#x2F;  private def runMain(args: SparkSubmitArguments, uninitLog: Boolean): Unit &#x3D; &#123;    val (childArgs, childClasspath, sparkConf, childMainClass) &#x3D; prepareSubmitEnvironment(args)&#x2F;&#x2F;------------------------------&gt;准备环境    ...&#x2F;&#x2F;日志相关    val loader &#x3D; getSubmitClassLoader(sparkConf)    for (jar &lt;- childClasspath) &#123;      addJarToClasspath(jar, loader)    &#125;    var mainClass: Class[_] &#x3D; null    try &#123;      mainClass &#x3D; Utils.classForName(childMainClass)&#x2F;&#x2F;使用反射将子启动类变为主启动类    &#125; catch &#123;...&#125;    val app: SparkApplication &#x3D; if (classOf[SparkApplication].isAssignableFrom(mainClass)) &#123;      mainClass.getConstructor().newInstance().asInstanceOf[SparkApplication]    &#125; else &#123;&#x2F;&#x2F;使用反射创建      new JavaMainApplication(mainClass)&#x2F;&#x2F;创建YarnClusterApplication    &#125;    @tailrec    def findCause(t: Throwable): Throwable &#x3D; t match &#123;      case e: UndeclaredThrowableException &#x3D;&gt;        if (e.getCause() !&#x3D; null) findCause(e.getCause()) else e      case e: InvocationTargetException &#x3D;&gt;        if (e.getCause() !&#x3D; null) findCause(e.getCause()) else e      case e: Throwable &#x3D;&gt;        e    &#125;    try &#123;      app.start(childArgs.toArray, sparkConf)&#x2F;&#x2F;启动YarnClusterApplication        &#x2F;&#x2F;----------------------------------&gt;    &#125; catch &#123;...&#125;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-submit-doRunMain-runMain-prepareSubmitEnvironment"><a href="#doSubmit-submit-doRunMain-runMain-prepareSubmitEnvironment" class="headerlink" title="doSubmit/submit/doRunMain/runMain/prepareSubmitEnvironment"></a>doSubmit/submit/doRunMain/runMain/prepareSubmitEnvironment</h3><p><em>org/apache/spark/deploy/SparkSubmit.scala</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[deploy] def prepareSubmitEnvironment(      args: SparkSubmitArguments,      conf: Option[HadoopConfiguration] &#x3D; None)      : (Seq[String], Seq[String], SparkConf, String) &#x3D; &#123;    &#x2F;&#x2F; Return values    val childArgs &#x3D; new ArrayBuffer[String]()    val childClasspath &#x3D; new ArrayBuffer[String]()    val sparkConf &#x3D; args.toSparkConf()    var childMainClass &#x3D; &quot;&quot;    &#x2F;&#x2F; Set the cluster manager    val clusterManager: Int &#x3D; args.master match &#123;      case &quot;yarn&quot; &#x3D;&gt; YARN&#x2F;&#x2F;判断环境为yarn环境------------------------&gt;      case m if m.startsWith(&quot;spark&quot;) &#x3D;&gt; STANDALONE      case m if m.startsWith(&quot;mesos&quot;) &#x3D;&gt; MESOS      case m if m.startsWith(&quot;k8s&quot;) &#x3D;&gt; KUBERNETES      case m if m.startsWith(&quot;local&quot;) &#x3D;&gt; LOCAL      case _ &#x3D;&gt;        error(&quot;Master must either be yarn or start with spark, mesos, k8s, or local&quot;)        -1    &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="doSubmit-submit-doRunMain-runMain-start"><a href="#doSubmit-submit-doRunMain-runMain-start" class="headerlink" title="doSubmit/submit/doRunMain/runMain/start"></a>doSubmit/submit/doRunMain/runMain/start</h3><p>org/apache/spark/deploy/SparkApplication.scala</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[spark] trait SparkApplication &#123;  def start(args: Array[String], conf: SparkConf): Unit&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>启动CtrL+H查看继承树</p><p><img src="Spark%E5%86%85%E6%A0%B8_%E6%80%BB%E7%BB%93.assets/1606639008096.png" alt="继承树"></p><p>Yarn源码文件结构</p><p><img src="Spark%E5%86%85%E6%A0%B8_%E6%80%BB%E7%BB%93.assets/1606638669349.png" alt="Yarn"></p><h3 id="Client-start"><a href="#Client-start" class="headerlink" title="Client/start"></a>Client/start</h3><p><em>org/apache/spark/deploy/yarn/Client.scala</em></p><p><em>org.apache.spark.deploy.yarn.YarnClusterApplication</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[spark] class YarnClusterApplication extends SparkApplication &#123;  override def start(args: Array[String], conf: SparkConf): Unit &#x3D; &#123;    &#x2F;&#x2F; SparkSubmit would use yarn cache to distribute files &amp; jars in yarn mode,    &#x2F;&#x2F; so remove them from sparkConf here for yarn mode.    conf.remove(JARS)    conf.remove(FILES)    new Client(new ClientArguments(args), conf, null).run()&#x2F;&#x2F;---------------------------&gt;  &#125;&#x2F;&#x2F;---------------&gt;Client    &#x2F;&#x2F;--------------&gt;ClientArguments&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Client-ClientArguments"><a href="#Client-ClientArguments" class="headerlink" title="Client/ClientArguments"></a>Client/ClientArguments</h3><p>org/apache/spark/deploy/yarn/ClientArguments.scala</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[spark] class ClientArguments(args: Array[String]) &#123;  var userJar: String &#x3D; null  var userClass: String &#x3D; null  var primaryPyFile: String &#x3D; null  var primaryRFile: String &#x3D; null  var userArgs: ArrayBuffer[String] &#x3D; new ArrayBuffer[String]()  parseArgs(args.toList)&#x2F;&#x2F;-----------------------&gt;  private def parseArgs(inputArgs: List[String]): Unit &#x3D; &#123;&#x2F;&#x2F;&lt;---------------------    var args &#x3D; inputArgs    while (!args.isEmpty) &#123;      args match &#123;        case (&quot;--jar&quot;) :: value :: tail &#x3D;&gt;          userJar &#x3D; value          args &#x3D; tail        case (&quot;--class&quot;) :: value :: tail &#x3D;&gt;          userClass &#x3D; value          args &#x3D; tail        ....      &#125;    &#125;   ...  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="YarnClient-createYarnClient"><a href="#YarnClient-createYarnClient" class="headerlink" title="YarnClient.createYarnClient"></a>YarnClient.createYarnClient</h3><p><em>org/apache/spark/deploy/yarn/Client.scala/YarnClient.createYarnClient</em></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private[spark] class Client(    val args: ClientArguments,    val sparkConf: SparkConf,    val rpcEnv: RpcEnv)  extends Logging &#123;  import Client._  import YarnSparkHadoopUtil._      &#x2F;&#x2F;创建YARN客户端  private val yarnClient &#x3D; YarnClient.createYarnClient&#x2F;&#x2F;-----------------&gt;YarnClient      ....  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-ApplicationMaster任务"><a href="#2-ApplicationMaster任务" class="headerlink" title="2.ApplicationMaster任务"></a>2.ApplicationMaster任务</h2><h3 id="ApplicationMaster-main"><a href="#ApplicationMaster-main" class="headerlink" title="ApplicationMaster/main"></a>ApplicationMaster/main</h3><p><em>org.apache.spark.deploy.yarn.ApplicationMaster</em></p><h1 id="2-Spark提交流程"><a href="#2-Spark提交流程" class="headerlink" title="2.Spark提交流程"></a>2.Spark提交流程</h1>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SparkStreaming_Case</title>
      <link href="2021/01/04/Spark_SparkStreaming_Practice/"/>
      <url>2021/01/04/Spark_SparkStreaming_Practice/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkStreaming-Case-总结"><a href="#SparkStreaming-Case-总结" class="headerlink" title="SparkStreaming_Case_总结"></a>SparkStreaming_Case_总结</h1><p>工具类是必须要学习记忆的</p><p>同时要按照工业化流程写程序</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BC%81%E4%B8%9A%E7%BA%A7%E6%96%87%E4%BB%B6%E5%BB%BA%E6%A1%A3.png" alt="企业化程序思路"></p><h2 id="1-配置文件"><a href="#1-配置文件" class="headerlink" title="1.配置文件"></a>1.配置文件</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">#JDBC配置jdbc.datasource.size&#x3D;10jdbc.url&#x3D;jdbc:mysql:&#x2F;&#x2F;hadoop102:3306&#x2F;spark_2020?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;rewriteBatchedStatements&#x3D;truejdbc.user&#x3D;rootjdbc.password&#x3D;123456# Kafka配置kafka.broker.list&#x3D;hadoop102:9092,hadoop103:9092,hadoop104:9092kafka.topic&#x3D;testTopic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-工具类"><a href="#2-工具类" class="headerlink" title="2.工具类"></a>2.工具类</h2><h3 id="2-1JDBC工具类"><a href="#2-1JDBC工具类" class="headerlink" title="2.1JDBC工具类"></a>2.1JDBC工具类</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.utilsimport java.sql.&#123;Connection, PreparedStatement, ResultSet&#125;import java.util.Propertiesimport com.alibaba.druid.pool.DruidDataSourceFactoryimport javax.sql.DataSource&#x2F;** * @author Jinxin Li * @create 2020-11-25 19:49 *&#x2F;object JDBCUtil &#123;  &#x2F;&#x2F;初始化连接池  val dataSource: DataSource &#x3D; init()  &#x2F;&#x2F;初始化连接池方法  def init() &#x3D; &#123;    val properties &#x3D; new Properties()    val config: Properties &#x3D; PropertiesUtil.load(&quot;config.properties&quot;)    properties.setProperty(&quot;driverClassName&quot;, &quot;com.mysql.jdbc.Driver&quot;)    properties.setProperty(&quot;url&quot;, config.getProperty(&quot;jdbc.url&quot;))    properties.setProperty(&quot;username&quot;, config.getProperty(&quot;jdbc.user&quot;))    properties.setProperty(&quot;password&quot;, config.getProperty(&quot;jdbc.password&quot;))    properties.setProperty(&quot;maxActive&quot;, config.getProperty(&quot;jdbc.datasource.size&quot;))    &#x2F;&#x2F;使用Druid创建数据库连接池    val source: DataSource &#x3D; DruidDataSourceFactory.createDataSource(properties)    source  &#125;  &#x2F;&#x2F;获取MySQL连接  def getConnection: Connection &#x3D; &#123;    dataSource.getConnection  &#125;  &#x2F;&#x2F;执行SQL语句,单条数据插入  def executeUpdate(connection: Connection, sql: String, params: Array[Any]): Int &#x3D; &#123;    var rtn &#x3D; 0    var pstmt: PreparedStatement &#x3D; null    try &#123;      connection.setAutoCommit(false)      pstmt &#x3D; connection.prepareStatement(sql)      if (params !&#x3D; null &amp;&amp; params.length &gt; 0) &#123;        for (i &lt;- params.indices) &#123;          pstmt.setObject(i + 1, params(i))        &#125;      &#125;      rtn &#x3D; pstmt.executeUpdate()      connection.commit()      pstmt.close()    &#125; catch &#123;      case e: Exception &#x3D;&gt; e.printStackTrace()    &#125;    rtn  &#125;  &#x2F;&#x2F;判断一条数据是否存在  def isExist(connection: Connection, sql: String, params: Array[Any]): Boolean &#x3D; &#123;    var flag: Boolean &#x3D; false    var pstmt: PreparedStatement &#x3D; null    try &#123;      pstmt &#x3D; connection.prepareStatement(sql)      for (i &lt;- params.indices) &#123;        pstmt.setObject(i + 1, params(i))      &#125;      flag &#x3D; pstmt.executeQuery().next()      pstmt.close()    &#125; catch &#123;      case e: Exception &#x3D;&gt; e.printStackTrace()    &#125;    flag  &#125;  &#x2F;&#x2F;获取MySQL的一条数据  def getDataFromMysql(connection: Connection, sql: String, params: Array[Any]): Long &#x3D; &#123;    var result: Long &#x3D; 0L    var pstmt: PreparedStatement &#x3D; null    try &#123;      pstmt &#x3D; connection.prepareStatement(sql)      for (i &lt;- params.indices) &#123;        pstmt.setObject(i + 1, params(i))      &#125;      val resultSet: ResultSet &#x3D; pstmt.executeQuery()      while (resultSet.next()) &#123;        result &#x3D; resultSet.getLong(1)      &#125;      resultSet.close()      pstmt.close()    &#125; catch &#123;      case e: Exception &#x3D;&gt; e.printStackTrace()    &#125;    result  &#125;  &#x2F;&#x2F;主方法,用于测试上述方法  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;1 获取连接    val connection: Connection &#x3D; getConnection    &#x2F;&#x2F;2 预编译SQL    val statement: PreparedStatement &#x3D; connection.prepareStatement(&quot;select * from user_ad_count where userid &#x3D; ?&quot;)    &#x2F;&#x2F;3 传输参数    statement.setObject(1, &quot;a&quot;)    &#x2F;&#x2F;4 执行sql    val resultSet: ResultSet &#x3D; statement.executeQuery()    &#x2F;&#x2F;5 获取数据    while (resultSet.next()) &#123;      println(&quot;111:&quot; + resultSet.getString(1))    &#125;    &#x2F;&#x2F;6 关闭资源    resultSet.close()    statement.close()    connection.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2Kafka工具类"><a href="#2-2Kafka工具类" class="headerlink" title="2.2Kafka工具类"></a>2.2Kafka工具类</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.utilsimport org.apache.kafka.clients.consumer.ConsumerRecordimport org.apache.kafka.common.serialization.StringDeserializerimport org.apache.spark.streaming.StreamingContextimport org.apache.spark.streaming.dstream.InputDStreamimport org.apache.spark.streaming.kafka010.&#123;ConsumerStrategies, KafkaUtils, LocationStrategies&#125;&#x2F;** * @author Jinxin Li * @create 2020-11-25 19:28 *&#x2F;object MyKafkaUtil &#123;  &#x2F;&#x2F;创建配置对象]  private val properties &#x3D; PropertiesUtil.load(&quot;config.properties&quot;)  &#x2F;&#x2F;用于初始化链接到集群的地址  private val brokers: String &#x3D; properties.getProperty(&quot;kafka.broker.list&quot;) &#x2F;&#x2F;用于后面设置brokers使用  &#x2F;&#x2F;创建DStream,返回接受的数  def getKafkaStream(topic: String, ssc: StreamingContext) &#x3D; &#123;    val kafkaPara &#x3D; Map(&#x2F;&#x2F;      &quot;bootstrap.servers&quot; -&gt; brokers,&#x2F;&#x2F;      &quot;key.deserializer&quot; -&gt; classOf[StringDeserializer],&#x2F;&#x2F;      &quot;value.deserializer&quot; -&gt; classOf[StringDeserializer],&#x2F;&#x2F;      &quot;group.id&quot; -&gt; &quot;commerce-consumer-group&quot; &#x2F;&#x2F;定义消费者组      &quot;bootstrap.servers&quot; -&gt; brokers,      &quot;key.deserializer&quot; -&gt; classOf[StringDeserializer],      &quot;value.deserializer&quot; -&gt; classOf[StringDeserializer],      &quot;group.id&quot; -&gt; &quot;commerce-consumer-group&quot; &#x2F;&#x2F;消费者组    )    val kafkaDStream: InputDStream[ConsumerRecord[String, String]] &#x3D; KafkaUtils.createDirectStream[String, String](      ssc,      LocationStrategies.PreferConsistent,      ConsumerStrategies.Subscribe[String,String](Array(topic), kafkaPara))    kafkaDStream  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3配置文件工具类"><a href="#2-3配置文件工具类" class="headerlink" title="2.3配置文件工具类"></a>2.3配置文件工具类</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.utilsimport java.io.InputStreamReaderimport java.util.Properties&#x2F;** * @author Jinxin Li * @create 2020-11-25 19:15 *&#x2F;object PropertiesUtil &#123;  def main(args: Array[String]): Unit &#x3D; &#123;  &#125;  def load(name:String)&#x3D;&#123;    val properties &#x3D; new Properties()    properties.load(new InputStreamReader(Thread.currentThread().getContextClassLoader.getResourceAsStream(name)))    properties  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-日志生成与按比重随机数"><a href="#3-日志生成与按比重随机数" class="headerlink" title="3.日志生成与按比重随机数"></a>3.日志生成与按比重随机数</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.dataproductionimport java.util.Propertiesimport com.atguigu.utils.PropertiesUtilimport org.apache.kafka.clients.producer.&#123;KafkaProducer, ProducerConfig, ProducerRecord&#125;import scala.collection.mutable.ArrayBufferimport scala.util.Random&#x2F;** * @author Jinxin Li * @create 2020-11-25 19:24 *&#x2F;&#x2F;&#x2F;作用两秒往kafka里创建一个数据&#x2F;&#x2F;城市信息表： city_id :城市id  city_name：城市名称   area：城市所在大区case class CityInfo(city_id: Long, city_name: String, area: String)object MockerRealTime &#123;  &#x2F;**   * 模拟的数据   * 格式 ：timestamp area city userid adid   * 某个时间点 某个地区 某个城市 某个用户 某个广告   * 1604229363531 华北 北京 3 3   *&#x2F;  def generateMockData(): Array[String] &#x3D; &#123;    val array: ArrayBuffer[String] &#x3D; ArrayBuffer[String]()    val CityRandomOpt &#x3D; RandomOptions(      RanOpt(CityInfo(1, &quot;北京&quot;, &quot;华北&quot;), 30),      RanOpt(CityInfo(2, &quot;上海&quot;, &quot;华东&quot;), 30),      RanOpt(CityInfo(3, &quot;广州&quot;, &quot;华南&quot;), 10),      RanOpt(CityInfo(4, &quot;深圳&quot;, &quot;华南&quot;), 20),      RanOpt(CityInfo(5, &quot;天津&quot;, &quot;华北&quot;), 10)    )    val random &#x3D; new Random()    &#x2F;&#x2F; 模拟实时数据：    &#x2F;&#x2F; timestamp province city userid adid    for (i &lt;- 0 to 50) &#123;      val timestamp: Long &#x3D; System.currentTimeMillis()      val cityInfo: CityInfo &#x3D; CityRandomOpt.getRandomOpt      val city: String &#x3D; cityInfo.city_name      val area: String &#x3D; cityInfo.area      val adid: Int &#x3D; 1 + random.nextInt(6)      val userid: Int &#x3D; 1 + random.nextInt(6)      &#x2F;&#x2F; 拼接实时数据: 某个时间点 某个地区 某个城市 某个用户 某个广告      array +&#x3D; timestamp + &quot; &quot; + area + &quot; &quot; + city + &quot; &quot; + userid + &quot; &quot; + adid    &#125;    array.toArray  &#125;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F; 获取配置文件config.properties中的Kafka配置参数    val config: Properties &#x3D; PropertiesUtil.load(&quot;config.properties&quot;)    val brokers: String &#x3D; config.getProperty(&quot;kafka.broker.list&quot;)    val topic: String &#x3D; config.getProperty(&quot;kafka.topic&quot;)    &#x2F;&#x2F; 创建配置对象    val prop &#x3D; new Properties()    &#x2F;&#x2F; 添加配置    prop.put(ProducerConfig.BOOTSTRAP_SERVERS_CONFIG, brokers)    prop.put(ProducerConfig.KEY_SERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;)    prop.put(ProducerConfig.VALUE_SERIALIZER_CLASS_CONFIG, &quot;org.apache.kafka.common.serialization.StringSerializer&quot;)    &#x2F;&#x2F; 根据配置创建Kafka生产者    val kafkaProducer: KafkaProducer[String, String] &#x3D; new KafkaProducer[String, String](prop)    while (true) &#123;      &#x2F;&#x2F; 随机产生实时数据并通过Kafka生产者发送到Kafka集群中      for (line &lt;- generateMockData()) &#123;        kafkaProducer.send(new ProducerRecord[String, String](topic, line))        println(line)      &#125;      Thread.sleep(2000)    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.dataproductionimport scala.collection.mutable.ListBufferimport scala.util.Random&#x2F;** * @author Jinxin Li * @create 2020-11-25 19:23 *&#x2F;&#x2F;&#x2F; value值出现的比例，例如：(男，8) (女:2)case class RanOpt[T](value: T, weight: Int)object RandomOptions &#123;  def apply[T](opts: RanOpt[T]*): RandomOptions[T] &#x3D; &#123;    val randomOptions &#x3D; new RandomOptions[T]()    for (opt &lt;- opts) &#123;      &#x2F;&#x2F; 累积总的权重： 8 + 2      randomOptions.totalWeight +&#x3D; opt.weight      &#x2F;&#x2F; 根据每个元素的自己的权重，向buffer中存储数据。权重越多存储的越多      for (i &lt;- 1 to opt.weight) &#123;        &#x2F;&#x2F; 男 男 男 男 男 男 男 男 女 女        randomOptions.optsBuffer +&#x3D; opt.value      &#125;    &#125;    randomOptions  &#125;  def main(args: Array[String]): Unit &#x3D; &#123;    for (i &lt;- 1 to 10) &#123;      println(RandomOptions(RanOpt(&quot;男&quot;, 8), RanOpt(&quot;女&quot;, 2)).getRandomOpt)    &#125;  &#125;&#125;class RandomOptions[T](opts: RanOpt[T]*) &#123;  var totalWeight &#x3D; 0  var optsBuffer &#x3D; new ListBuffer[T]  def getRandomOpt: T &#x3D; &#123;    &#x2F;&#x2F; 随机选择：0-9    val randomNum: Int &#x3D; new Random().nextInt(totalWeight)    &#x2F;&#x2F; 根据随机数，作为角标取数    optsBuffer(randomNum)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-黑名单业务"><a href="#4-黑名单业务" class="headerlink" title="4.黑名单业务"></a>4.黑名单业务</h2><p>实现实时的动态黑名单机制：将每天对某个广告点击超过30次的用户拉黑。</p><p>注：黑名单保存到MySQL中。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.appimport java.util.Propertiesimport com.atguigu.handler.BlackListHandlerimport com.atguigu.utils.&#123;MyKafkaUtil, PropertiesUtil&#125;import org.apache.kafka.clients.consumer.ConsumerRecordimport org.apache.spark.SparkConfimport org.apache.spark.streaming.dstream.&#123;DStream, InputDStream&#125;import org.apache.spark.streaming.&#123;Seconds, StreamingContext&#125;&#x2F;** * @author Jinxin Li * @create 2020-11-25 20:42 *&#x2F;object RealTimeApp &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;RealTimeApp &quot;).setMaster(&quot;local[*]&quot;)    &#x2F;&#x2F;2.创建StreamingContext    val ssc &#x3D; new StreamingContext(sparkConf, Seconds(3))&#x2F;&#x2F;    val topic &#x3D; PropertiesUtil.load(&quot;config.perproties&quot;).getProperty(&quot;kafka.topic&quot;)    val properties: Properties &#x3D; PropertiesUtil.load(&quot;config.properties&quot;)    val topic: String &#x3D; properties.getProperty(&quot;kafka.topic&quot;)    &#x2F;&#x2F;从kafka中读取数据    val kafkaDStream: InputDStream[ConsumerRecord[String, String]] &#x3D; MyKafkaUtil.getKafkaStream(topic, ssc)    &#x2F;&#x2F;将从kafka独处的数据转换为样例类对象    val adsLogDStream: DStream[Ads_log] &#x3D; kafkaDStream.map(      record &#x3D;&gt; &#123;        &#x2F;&#x2F;kafka得到的是kv值,注意先取出v值        val line: String &#x3D; record.value()        &#x2F;&#x2F;拿出字段信息        val info: Array[String] &#x3D; line.split(&quot; &quot;)        &#x2F;&#x2F;使用伴生对象的apply方法直接包装对象并返回        Ads_log(info(0).toLong, info(1), info(2), info(3), info(4))      &#125;    )    &#x2F;&#x2F;-----------------------------------------------------------    &#x2F;&#x2F;现在已经万事具备,开始处理需求    &#x2F;&#x2F;需求1 BlackListHandler广告黑名单业务,    &#x2F;&#x2F; 将实现实时的动态黑名单机制：将每天对某个广告点击超过30次的用户拉黑。    val filterAdsLogDStream: DStream[Ads_log] &#x3D; BlackListHandler.filterByBlackList(adsLogDStream)    BlackListHandler.addBlackList(filterAdsLogDStream)    filterAdsLogDStream.cache()    filterAdsLogDStream.count().print()    &#x2F;&#x2F;启动任务    ssc.start()    ssc.awaitTermination()  &#125;&#125;&#x2F;&#x2F; 创建数据的样例类对象&#x2F;&#x2F; 时间 地区 城市 用户id 广告idcase class Ads_log(timestamp: Long, area: String, city: String, userid: String, adid: String)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.handlerimport java.sql.Connectionimport java.text.SimpleDateFormatimport java.util.Dateimport com.atguigu.app.Ads_logimport com.atguigu.utils.JDBCUtilimport org.apache.spark.streaming.dstream.DStream&#x2F;** * @author Jinxin Li * @create 2020-11-25 20:39 *&#x2F;object BlackListHandler &#123;  &#x2F;&#x2F;实现实时的动态黑名单机制：将每天对某个广告点击超过30次的用户拉黑。  &#x2F;&#x2F;注：黑名单保存到MySQL中。  private val sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;)  def addBlackList(filterAdsLogDStream: DStream[Ads_log]) &#x3D; &#123;    val dtAreaCityUserAdDStream: DStream[((String, String, String), Long)] &#x3D; filterAdsLogDStream.map &#123;      case adsLog &#x3D;&gt; &#123;        val dt: String &#x3D; sdf.format(new Date(adsLog.timestamp))        ((dt, adsLog.userid, adsLog.adid), 1L)      &#125;    &#125;.reduceByKey(_ + _)    &#x2F;&#x2F;写出    dtAreaCityUserAdDStream.foreachRDD(      &#x2F;&#x2F;先把流中的foreachRDD写出,然后分流写出      rdd&#x3D;&gt;rdd.foreachPartition(        iter&#x3D;&gt;&#123;          val connection: Connection &#x3D; JDBCUtil.getConnection          iter.foreach&#123;            case ((dt,userid,adid),count)&#x3D;&gt;              JDBCUtil.executeUpdate(                connection,                &quot;&quot;&quot;                  |insert into user_ad_count (dt,userid,adid,count)                  |values (?,?,?,?)                  |on duplicate key                  |update count &#x3D; count + ?                  |&quot;&quot;&quot;.stripMargin,Array(dt,userid,adid,count,count)              )              val ct: Long &#x3D; JDBCUtil.getDataFromMysql(                connection,                &quot;&quot;&quot;                  |select count from user_ad_count where dt&#x3D;? and userid&#x3D;? and adid&#x3D;?                  |&quot;&quot;&quot;.stripMargin,Array(dt,userid,adid)              )              &#x2F;&#x2F;如果大于30就加入黑名单              if (ct&gt;&#x3D;30)&#123;                JDBCUtil.executeUpdate(                  connection,                  &quot;&quot;&quot;                    |insert into black_list (userid)                    |values (?)                    |on duplicate key                    |update userid&#x3D;?                    |&quot;&quot;&quot;.stripMargin,Array(userid,userid)                )              &#125;          &#125;          connection.close()        &#125;      )    )  &#125;  def filterByBlackList(adsLogDStream: DStream[Ads_log]): DStream[Ads_log] &#x3D; &#123;    adsLogDStream.filter(      adsLog&#x3D;&gt;&#123;        &#x2F;&#x2F;获取连接        val connection: Connection &#x3D; JDBCUtil.getConnection        val bool: Boolean &#x3D; JDBCUtil.isExist(          connection,          &quot;&quot;&quot;            |select * from black_list where userid&#x3D;?            |&quot;&quot;&quot;.stripMargin, Array(adsLog.userid)        )        connection.close()        !bool      &#125;    )  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-统计点击总流量"><a href="#5-统计点击总流量" class="headerlink" title="5.统计点击总流量"></a>5.统计点击总流量</h2><p>描述：实时统计每天各地区各城市各广告的点击总流量，并将其存入MySQL。</p><p>注意connection与connection.close要同时写</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF1.png" alt="connection报错"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF2.png" alt="报错信息"></p><p><img src="SparkStreaming_Case_%E6%80%BB%E7%BB%93.assets/1606325292658.png" alt="1606325292658"></p><p><img src="SparkStreaming_Case_%E6%80%BB%E7%BB%93.assets/1606325343070.png" alt="1606325343070"></p><p>功能:DateAreaCityAdCountHandler</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.handlerimport java.sql.Connectionimport java.text.SimpleDateFormatimport java.util.Dateimport com.atguigu.app.Ads_logimport com.atguigu.utils.JDBCUtilimport org.apache.spark.streaming.dstream.DStream&#x2F;** * @author Jinxin Li * @create 2020-11-25 23:58 * 统计每天各大区各个城市广告点击总数并保存至MySQL中 *&#x2F;object DateAreaCityAdCountHandler &#123;  private val sdf &#x3D; new SimpleDateFormat(&quot;yyyy-MM-dd&quot;)  def saveDateAreaCityAdCountToMysql(filterAdsLogDStream: DStream[Ads_log]) &#x3D; &#123;    val dateAreaCityAdToCount&#x3D; filterAdsLogDStream.map(ads_log &#x3D;&gt; &#123;      &#x2F;&#x2F;a.格式化为日期字符串      val dt: String &#x3D; sdf.format(new Date(ads_log.timestamp))      &#x2F;&#x2F;b.组合,返回      ((dt, ads_log.area, ads_log.city, ads_log.adid), 1L)    &#125;).reduceByKey(_ + _)    dateAreaCityAdToCount.foreachRDD(      &#x2F;&#x2F;分配处理,是指遥控在executor进行执行      rdd&#x3D;&gt;&#123;        rdd.foreachPartition(          iter&#x3D;&gt;&#123;            val connection: Connection &#x3D; JDBCUtil.getConnection            iter.foreach &#123;              case ((dt, area, city, adid), ct) &#x3D;&gt;                JDBCUtil.executeUpdate(                  connection,                  &quot;&quot;&quot;                    |INSERT INTO area_city_ad_count (dt)                    |VALUES(?)                    &quot;&quot;&quot;.stripMargin,                  Array(dt)                )            &#125;            connection.close()          &#125;)      &#125;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-统计两分钟内广告点击量"><a href="#6-统计两分钟内广告点击量" class="headerlink" title="6.统计两分钟内广告点击量"></a>6.统计两分钟内广告点击量</h2><p>LastHourAdCountHandler</p><p>说明：实际测试时，为了节省时间，统计的是2分钟内广告点击量</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.atguigu.handlerimport java.text.SimpleDateFormatimport java.util.Dateimport com.atguigu.app.Ads_logimport org.apache.spark.streaming.Minutesimport org.apache.spark.streaming.dstream.DStreamobject LastHourAdCountHandler &#123;  &#x2F;&#x2F;时间格式化对象  private val sdf: SimpleDateFormat &#x3D; new SimpleDateFormat(&quot;HH:mm&quot;)  &#x2F;&#x2F; 过滤后的数据集，统计最近一小时(2分钟)广告分时点击总数  def getAdHourMintToCount(filterAdsLogDStream: DStream[Ads_log]): DStream[(String, List[(String, Long)])] &#x3D; &#123;    &#x2F;&#x2F;1.开窗 &#x3D;&gt; 时间间隔为1个小时 window()    val windowAdsLogDStream: DStream[Ads_log] &#x3D; filterAdsLogDStream.window(Minutes(2))    &#x2F;&#x2F;2.转换数据结构 ads_log &#x3D;&gt;((adid,hm),1L) map()    val adHmToOneDStream: DStream[((String, String), Long)] &#x3D; windowAdsLogDStream.map(adsLog &#x3D;&gt; &#123;      val hm: String &#x3D; sdf.format(new Date(adsLog.timestamp))      ((adsLog.adid, hm), 1L)    &#125;)    &#x2F;&#x2F;3.统计总数 ((adid,hm),1L)&#x3D;&gt;((adid,hm),sum) reduceBykey(_+_)    val adHmToCountDStream: DStream[((String, String), Long)] &#x3D; adHmToOneDStream.reduceByKey(_ + _)    &#x2F;&#x2F;4.转换数据结构 ((adid,hm),sum)&#x3D;&gt;(adid,(hm,sum)) map()    val adToHmCountDStream: DStream[(String, (String, Long))] &#x3D; adHmToCountDStream.map &#123; case ((adid, hm), count) &#x3D;&gt;      (adid, (hm, count))    &#125;    &#x2F;&#x2F;5.按照adid分组 (adid,(hm,sum))&#x3D;&gt;(adid,Iter[(hm,sum),...]) groupByKey    adToHmCountDStream      .groupByKey()      .mapValues(iter &#x3D;&gt; iter.toList.sortWith(_._1 &lt; _._1))  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sparkStreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SparkStreaming</title>
      <link href="2021/01/04/Spark_SparkStreaming/"/>
      <url>2021/01/04/Spark_SparkStreaming/</url>
      
        <content type="html"><![CDATA[<p>云盘：<a href="mailto:&#109;&#x69;&#97;&#111;&#x63;&#x68;&#117;&#x61;&#x6e;&#104;&#97;&#x69;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;">&#109;&#x69;&#97;&#111;&#x63;&#x68;&#117;&#x61;&#x6e;&#104;&#97;&#x69;&#x40;&#49;&#54;&#x33;&#x2e;&#x63;&#111;&#109;</a><br>暗号：大海哥最帅</p><hr><h1 id="一-概述"><a href="#一-概述" class="headerlink" title="一 概述"></a>一 概述</h1><h2 id="1-Spark架构"><a href="#1-Spark架构" class="headerlink" title="1.Spark架构"></a>1.Spark架构</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Spark%E7%BB%93%E6%9E%84.png" alt="SparkStreaming整体架构图"></p><h2 id="2-DStream是什么"><a href="#2-DStream是什么" class="headerlink" title="2.DStream是什么?"></a>2.DStream是什么?</h2><p>每个时间区间收到的数据作为RDD存在</p><p>实时的封装</p><h2 id="3-背压机制"><a href="#3-背压机制" class="headerlink" title="3.背压机制"></a>3.背压机制</h2><p>可以自动调节receiver的接受速率</p><p>通过属性“spark.streaming.backpressure.enabled”来控制是否启用backpressure机制，默认值false，即不启用。</p><h1 id="二-DSteam入门"><a href="#二-DSteam入门" class="headerlink" title="二 DSteam入门"></a>二 DSteam入门</h1><h2 id="1-wordCount"><a href="#1-wordCount" class="headerlink" title="1.wordCount"></a>1.wordCount</h2><p>需求：使用netcat工具向9999端口不断的发送数据，通过SparkStreaming读取端口数据并统计不同单词出现的次数</p><h3 id="1-1使用netcat作为源头wordcount"><a href="#1-1使用netcat作为源头wordcount" class="headerlink" title="1.1使用netcat作为源头wordcount"></a>1.1使用netcat作为源头wordcount</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object WordCount &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;sparkStreaming&quot;)    &#x2F;&#x2F;初始化配置信息    val ssc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;接收数据    val line: ReceiverInputDStream[String] &#x3D; ssc.socketTextStream(&quot;hadoop102&quot;, 9999)    &#x2F;&#x2F;处理    val wordToSumStream: DStream[(String, Int)] &#x3D; line.flatMap(_.split(&quot; &quot;)).map((_, 1)).reduceByKey(_ + _)    wordToSumStream.print()    ssc.start()    ssc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="1-2使用队列源计算wordcount"><a href="#1-2使用队列源计算wordcount" class="headerlink" title="1.2使用队列源计算wordcount"></a>1.2使用队列源计算wordcount</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object queuePractice &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;opt&quot;)    val ssc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;创建RDD队列    val rddQueue &#x3D; new mutable.Queue[RDD[Int]]()    &#x2F;&#x2F;创建queueInputDsteam    val value: InputDStream[Int] &#x3D; ssc.queueStream(rddQueue, oneAtATime &#x3D; false)    val result: DStream[Int] &#x3D; value.reduce(_ + _)    &#x2F;&#x2F;打印结果    result.print()    ssc.start()    for (i &lt;- 1 to 5)&#123;      rddQueue +&#x3D; ssc.sparkContext.makeRDD(1 to 5)      Thread.sleep((2000))    &#125;    ssc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-自定义数据源"><a href="#2-自定义数据源" class="headerlink" title="2.自定义数据源"></a>2.自定义数据源</h2><h3 id="2-1自定义数据源receiver"><a href="#2-1自定义数据源receiver" class="headerlink" title="2.1自定义数据源receiver"></a>2.1自定义数据源receiver</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">class defReceiver(host:String,port:Int) extends Receiver[String](StorageLevel.MEMORY_ONLY)&#123;  override def onStart(): Unit &#x3D; &#123;    new Thread(&quot;Socket Receiver&quot;)&#123;      override def run(): Unit &#x3D; &#123;receive()&#125;    &#125;.start()  &#125;  def receive(): Unit &#x3D; &#123;    val socket &#x3D; new Socket(host, port)    &#x2F;&#x2F;创建一个bufferReader    val reader &#x3D; new BufferedReader(new InputStreamReader(socket.getInputStream, StandardCharsets.UTF_8))    &#x2F;&#x2F;读取数据    var input: String &#x3D; reader.readLine()    &#x2F;&#x2F;当receiver没有关闭并且输入数据不为空,则循环发送数据给spark    while(!isStopped()&amp;&amp;input !&#x3D;null)&#123;      store(input)      input&#x3D; reader.readLine()    &#125;    &#x2F;&#x2F;如果循环结束,则关闭资源    reader.close()    socket.close()    &#x2F;&#x2F;重启    restart(&quot;restart&quot;)  &#125;  override def onStop(): Unit &#x3D; &#123;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2自定数据源的使用"><a href="#2-2自定数据源的使用" class="headerlink" title="2.2自定数据源的使用"></a>2.2自定数据源的使用</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object defSource &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;opt&quot;)    val ssc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;创建自动receiver的Streaming    val lineDStream: ReceiverInputDStream[String] &#x3D; ssc.receiverStream(new defReceiver(&quot;hadoop102&quot;, 9999))    &#x2F;&#x2F;将每一行数据做切分,形成一个个单词    val result: DStream[(String, Int)] &#x3D; lineDStream.flatMap(_.split(&quot; &quot;)).map((_, 1)).reduceByKey(_ + _)    result.print()    &#x2F;&#x2F;启动并且阻塞    ssc.start()    ssc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-kafka数据源"><a href="#3-kafka数据源" class="headerlink" title="3.kafka数据源"></a>3.kafka数据源</h2><p>Kafka数据源在SparkStreaming中存在两种API,一种是ReceiverAPI,另一种是DirectAPI</p><p>ReceiverAPI已经弃用</p><p><strong>DirectAPI</strong>:是由计算的Executor来主动消费Kafka的数据,速度由自身控制</p><h3 id="3-1kafka的命令行代码"><a href="#3-1kafka的命令行代码" class="headerlink" title="3.1kafka的命令行代码"></a>3.1kafka的命令行代码</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看消费topicbin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181&#x2F;kafka -list#创建kafka的topicbin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181&#x2F;kafka  --create --replication-factor 1 --partitions 2 --topic testTopic#查看Topic详情bin&#x2F;kafka-topics.sh --zookeeper hadoop102:2181&#x2F;kafka \--describe --topic testTopic#创建生产者bin&#x2F;kafka-console-producer.sh \--broker-list hadoop102:9092 --topic testTopic#创建消费者[atguigu@hadoop102 kafka]$ bin&#x2F;kafka-console-consumer.sh \--bootstrap-server hadoop102:9092 --from-beginning --topic testTopic#查看_consumer_offsets主题中存储的offsetbin&#x2F;kafka-consumer-groups.sh --bootstrap-server hadoop102:9092 --describe --group atguiguGroup#如何查看消费者组的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2使用kafka源来流数据wordcount处理"><a href="#3-2使用kafka源来流数据wordcount处理" class="headerlink" title="3.2使用kafka源来流数据wordcount处理"></a>3.2使用kafka源来流数据wordcount处理</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkStreaming_DirectAuto &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;配置参数,为map    &#x2F;&#x2F;3.定义Kafka参数：kafka集群地址、消费者组名称、key序列化、value序列化    val kafkaPara: Map[String, Object] &#x3D; Map[String, Object](      ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG -&gt; &quot;hadoop102:9092,hadoop103:9092,hadoop104:9092&quot;,      ConsumerConfig.GROUP_ID_CONFIG -&gt; &quot;atguiguGroup&quot;,      ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG -&gt; &quot;org.apache.kafka.common.serialization.StringDeserializer&quot;,      ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG -&gt; classOf[StringDeserializer]    )    &#x2F;&#x2F;使用DirectAPI创建DStream    val kafkaToDStream: InputDStream[ConsumerRecord[String, String]] &#x3D; KafkaUtils.createDirectStream(scc,      LocationStrategies.PreferConsistent,      ConsumerStrategies.Subscribe[String, String](Set(&quot;testTopic&quot;), kafkaPara))    &#x2F;&#x2F;处理数据    kafkaToDStream.map(record&#x3D;&gt;record.value())      .flatMap(_.split(&quot; &quot;))      .map((_,1))      .reduceByKey(_+_)      .print()    &#x2F;&#x2F;关闭并堵塞    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="三-DStream转换"><a href="#三-DStream转换" class="headerlink" title="三 DStream转换"></a>三 DStream转换</h1><p>DStream上的操作与RDD的类似，分为转换和输出两种，此外转换操作中还有一些比较特殊的原语，如：updateStateByKey()、transform()以及各种Window相关的原语。</p><h2 id="3-1无状态转换"><a href="#3-1无状态转换" class="headerlink" title="3.1无状态转换"></a>3.1无状态转换</h2><p>transfrom()是在Driver端开始执行的</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;DStream其实就是内部封装了一个RDD,因此object SparkStreaming_Transform &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;初始化配置    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;接受参数    val rDStream: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    &#x2F;&#x2F;使用transform可以将DStream转换成rdd    println(&quot;主程序执行&quot;+Thread.currentThread().getName)&#x2F;&#x2F;JobGenerator Driver    rDStream.transform(rdd&#x3D;&gt;&#123;      println(&quot;transform执行位置&quot;+Thread.currentThread().getName)      rdd.flatMap(line&#x3D;&gt;line.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_)&#125;).print()    &#x2F;&#x2F;关闭并堵塞    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-2有状态转换"><a href="#3-2有状态转换" class="headerlink" title="3.2有状态转换"></a>3.2有状态转换</h2><p>有状态转化操作：计算当前批次RDD时，需要用到历史RDD的数据。</p><h3 id="1-UpdateStateByKey"><a href="#1-UpdateStateByKey" class="headerlink" title="(1)UpdateStateByKey()"></a>(1)UpdateStateByKey()</h3><p>参数中需要传递一个函数,在函数内部根据需求对==当前数据==与==历史数据==进行整合</p><p>需求:使用UpdateStateByKey计算WordCount</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;** * @author Jinxin Li * @create 2020-11-24 18:24 * 通过累积历史状态做的实时的wordcount *&#x2F;object sparkStreaming_updateStateByKey &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;这里只会相加key相同的数值,因为是reduce,key相同进来,只要设定value的方法即可    &#x2F;&#x2F; 定义更新状态方法，参数seq为当前批次单词次数，state为以往批次单词次数    val updateFunc &#x3D; (seq:Seq[Int],state:Option[Int])&#x3D;&gt;&#123;      &#x2F;&#x2F;当前批次      val currentCount &#x3D; seq.sum      &#x2F;&#x2F;历史批次      val previousCount &#x3D;  state.getOrElse(0)      &#x2F;&#x2F;总的数据累加      Some(currentCount+previousCount)    &#125;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    scc.checkpoint(&quot;.&#x2F;SparkStreaming&#x2F;ck&quot;)&#x2F;&#x2F;设定存储点,默认的计算与历史相关的都要设定检查点    val reDStream: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    val KvDStream: DStream[(String, Int)] &#x3D; reDStream.flatMap(_.split(&quot; &quot;)).map((_, 1))    KvDStream.updateStateByKey[Int](      updateFunc,      new HashPartitioner(2)).print()    &#x2F;&#x2F;关闭并堵塞    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>缺点**</strong></p><p>这种UpdateStateByKey在企业中几乎不用,因为存在很多缺点</p><ol><li>使用checkPoint检查点存储记录历史会产生大量的小文件</li></ol><p><img src="../../../MY_POSTS/images/1606214937943.png" alt="1606214937943"></p><ol start="2"><li>当前线程关闭后,下次开启重新开始累积</li><li>即使重新开始累积,但是checkpoint会记录最后一次时间戳，再次启动的时候会把间隔时间的周期再执行一次,容易导致启动卡死</li></ol><h3 id="2-WindowOperations"><a href="#2-WindowOperations" class="headerlink" title="(2)WindowOperations"></a>(2)WindowOperations</h3><p>Window Operations可以设置窗口的大小和滑动窗口的间隔来动态的获取当前Streaming的允许状态。所有基于窗口的操作都需要两个参数，分别为窗口时长以及滑动步长。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E7%AA%97%E5%8F%A3%E5%87%BD%E6%95%B0%E6%93%8D%E4%BD%9C.png" alt="窗口函数操作"></p><p><strong>需求</strong></p><p>基本语法：window(windowLength, slideInterval): 基于对源DStream窗化的批次进行计算返回一个新的DStream。</p><p>需求：统计WordCount:3秒一个批次，窗口12秒，滑步6秒。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkStreaming_window &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;这里只会相加key相同的数值,因为是reduce,key相同进来,只要设定value的方法即可    &#x2F;&#x2F; 定义更新状态方法，参数seq为当前批次单词次数，state为以往批次单词次数    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    scc.checkpoint(&quot;.&#x2F;SparkStreaming&#x2F;ck&quot;)&#x2F;&#x2F;设定存储点,默认的计算与历史相关的都要设定检查点    val reDStream: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    val lineToTuples: DStream[(String, Int)] &#x3D; reDStream.flatMap(_.split(&quot; &quot;)).map((_, 1))    &#x2F;&#x2F;设定窗口,3秒一个批次,窗口持续12秒,步长6秒    val windowDStream: DStream[(String, Int)] &#x3D; lineToTuples.window(Seconds(12), Seconds(6))    windowDStream.reduceByKey(_+_).print()    &#x2F;&#x2F;关闭并堵塞    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E7%AA%97%E5%8F%A3%E8%AE%A1%E7%AE%97%E6%B5%81%E7%A8%8B.png" alt="窗口计算流程图"></p><h3 id="3-reduceByKeyAndWindow"><a href="#3-reduceByKeyAndWindow" class="headerlink" title="(3)reduceByKeyAndWindow"></a>(3)reduceByKeyAndWindow</h3><p>reduceByKeyAndWindow(func, windowLength, slideInterval,[numTasks])：</p><p>当在一个(K,V)对的DStream上调用此函数，会返回一个新(K,V)对的DStream，此处通过对滑动窗口中批次数据使用reduce函数来整合每个key的value值。</p><p>这个是window程序的简化版</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkStreaming_reduceByKeyAndWindow &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;初始化配置    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;接受参数    val line: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    val tuplesDStream: DStream[(String, Int)] &#x3D; line.flatMap(_.split(&quot; &quot;)).map((_, 1))    tuplesDStream.reduceByKeyAndWindow(      (a:Int,b:Int)&#x3D;&gt;a+b,&#x2F;&#x2F;这里要表明类型      Seconds(6),      Seconds(12)    ).print()    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-reduceByKeyAndWindow（反向Reduce）"><a href="#4-reduceByKeyAndWindow（反向Reduce）" class="headerlink" title="(4)reduceByKeyAndWindow（反向Reduce）"></a>(4)reduceByKeyAndWindow（反向Reduce）</h3><p>reduceByKeyAndWindow(func, invFunc, windowLength, slideInterval,[numTasks])</p><p>这个是上一个函数的升级版</p><p>通过一个减法,减少统计窗口之间的重复部分</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkStreaming_reduceByKeyAndWindow_reduce &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;初始化配置    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;接受参数    scc.checkpoint(&quot;.&#x2F;ck&quot;)    val line: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    val tuplesDStream: DStream[(String, Int)] &#x3D; line.flatMap(_.split(&quot; &quot;)).map((_, 1))    tuplesDStream.reduceByKeyAndWindow(      (a:Int,b:Int)&#x3D;&gt;a+b,&#x2F;&#x2F;这里要表明类型      (x:Int,y:Int)&#x3D;&gt;x-y,      Seconds(12),&#x2F;&#x2F;这个是窗口间隔      Seconds(6),&#x2F;&#x2F;这个是滑动距离      new HashPartitioner(2),      (x:(String, Int)) &#x3D;&gt; x._2 &gt; 0&#x2F;&#x2F;过滤小于0值    ).print()    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3其他操作"><a href="#3-3其他操作" class="headerlink" title="3.3其他操作"></a>3.3其他操作</h2><p>（1）countByWindow(windowLength, slideInterval): 返回一个滑动窗口计数流中的元素个数；</p><p>（2）reduceByWindow(func, windowLength, slideInterval): 通过使用自定义函数整合滑动区间流元素来创建一个新的单元素流；</p><h1 id="五-DSteam输出"><a href="#五-DSteam输出" class="headerlink" title="五 DSteam输出"></a>五 DSteam输出</h1><p>企业中常用以下方法进行DSteam输出</p><p>print()：在运行流程序的驱动结点上打印DStream中每一批次数据的最开始10个元素。这用于开发和调试。</p><p>foreachRDD(func)：这是最通用的输出操作，函数func用于产生DStream的每一个RDD。其中参数传入的函数func应该实现将每一个RDD中数据推送到外部系统，如将RDD存入文件或者写入数据库。</p><p>在企业开发中通常采用foreachRDD()，它用来对DStream中的RDD进行任意计算。这和transform()有些类似，都可以让我们访问任意RDD。在foreachRDD()中，可以重用我们在Spark中实现的所有行动操作。比如，常见的用例之一是把数据写到如MySQL的外部数据库中</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkStreaming_output &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;初始化配置    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;KakfaSource&quot;).setMaster(&quot;local[*]&quot;)    val scc &#x3D; new StreamingContext(sparkConf, Seconds(3))    &#x2F;&#x2F;接受参数    scc.checkpoint(&quot;.&#x2F;ck&quot;)    val line: ReceiverInputDStream[String] &#x3D; scc.socketTextStream(&quot;hadoop102&quot;, 9999)    val tuplesDStream: DStream[(String, Int)] &#x3D; line.flatMap(_.split(&quot; &quot;)).map((_, 1))    &#x2F;&#x2F;tuplesDStream.foreachRDD(rdd&#x3D;&gt;rdd.collect().foreach(println))    &#x2F;&#x2F;常规这样输出是一条一条的输出,但是常规不适合这样操作    tuplesDStream.foreachRDD(rdd&#x3D;&gt;rdd.foreachPartition &#123;      println(Thread.currentThread().getName&#x2F;&#x2F;需要注意的是,转换输出也是在Driver端执行的      item &#x3D;&gt; item.foreach(println)    &#125;)    scc.start()    scc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>（1）连接不能写在Driver层面（序列化）</p><p>（2）如果写在foreach则每个RDD中的每一条数据都创建，得不偿失；</p><p>（3）增加foreachPartition，在分区创建（获取）。还是在Driver端进行?</p><h1 id="六-优雅的关闭"><a href="#六-优雅的关闭" class="headerlink" title="六 优雅的关闭"></a>六 优雅的关闭</h1><p>使用外部文件系统来控制内部程序关闭</p><p>使用object</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object close2 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val properties &#x3D; new Properties()    val config &#x3D; PropertiesUtil.load(&quot;config.properties&quot;)    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;sparkStreaming&quot;).setMaster(&quot;local[*]&quot;)      .set(&quot;spark.streaming.stopGracefullyOnShutdown&quot;, config.getProperty(&quot;spark.streaming.stopGracefullyOnShutdown&quot;))    val ssc &#x3D; new StreamingContext(sparkConf, Seconds(3))    val lineDStream: ReceiverInputDStream[String] &#x3D; ssc.socketTextStream(&quot;hadoop102&quot;, 9999)    lineDStream.flatMap(_.split(&quot; &quot;)).map((_,1)).reduceByKey(_+_).print()    new Thread(new StopMonitor(ssc)).start()    &#x2F;&#x2F;关闭    ssc.start()    ssc.awaitTermination()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关闭object</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">class StopMonitor(ssc: StreamingContext) extends Runnable&#123;  override def run(): Unit &#x3D; &#123;    &#x2F;&#x2F;获得文件系统    val fileSystem: FileSystem &#x3D; FileSystem.get(new URI(&quot;hdfs:&#x2F;&#x2F;hadoop102:8020&quot;), new Configuration(), &quot;atguigu&quot;)    &#x2F;&#x2F;循环监测    while (true)&#123;      val bool: Boolean &#x3D; fileSystem.exists(new Path(&quot;hdfs:&#x2F;&#x2F;hadoop102:8020&#x2F;stopSpark&quot;))      Thread.sleep(5000)      &#x2F;&#x2F;判断      if (bool)&#123;        val state: StreamingContextState &#x3D; ssc.getState()        if (state&#x3D;&#x3D;StreamingContextState.ACTIVE)&#123;          ssc.stop(stopSparkContext &#x3D; true,stopGracefully &#x3D; true)          System.exit(0)        &#125;      &#125;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sparkstreaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SparkCore</title>
      <link href="2021/01/03/Spark_SparkCore/"/>
      <url>2021/01/03/Spark_SparkCore/</url>
      
        <content type="html"><![CDATA[<h1 id="0x1-spark概述"><a href="#0x1-spark概述" class="headerlink" title="0x1 spark概述"></a>0x1 spark概述</h1><h2 id="1-历史"><a href="#1-历史" class="headerlink" title="1.历史"></a>1.历史</h2><p>在之前的学习中，Hadoop的MapReduce是大家广为熟知的计算框架，那为什么咱们还要学习新的计算框架Spark呢，这里就不得不提到Spark和Hadoop的关系。</p><p>首先从时间节点上来看:</p><p>Hadoop</p><ol><li>2006年1月，Doug Cutting加入Yahoo，领导Hadoop的开发</li><li>2008年1月，Hadoop成为Apache顶级项目</li><li>2011年1.0正式发布</li><li>2012年3月稳定版发布</li><li>2013年10月发布2.X (Yarn)版本</li></ol><p>Spark</p><ol><li>2009年，Spark诞生于伯克利大学的AMPLab实验室</li><li>2010年，伯克利大学正式开源了Spark项目</li><li>2013年6月，Spark成为了Apache基金会下的项目</li><li>2014年2月，Spark以飞快的速度成为了Apache的顶级项目</li><li>2015年至今，Spark变得愈发火爆，大量的国内公司开始重点部署或者使用Spark</li></ol><h2 id="2-Spark核心模块"><a href="#2-Spark核心模块" class="headerlink" title="2.Spark核心模块"></a>2.Spark核心模块</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Spark%E6%A0%B8%E5%BF%83%E6%A8%A1%E5%9D%97.png" alt="spark核心模块"></p><p><strong>Spark Core</strong></p><p>Spark Core中提供了Spark最基础与最核心的功能，Spark其他的功能如：Spark SQL，Spark Streaming，GraphX, MLlib都是在Spark Core的基础上进行扩展的</p><p><strong>Spark SQL</strong></p><p>Spark SQL是Spark用来操作结构化数据的组件。通过Spark SQL，用户可以使用SQL或者Apache Hive版本的SQL方言（HQL）来查询数据。</p><p><strong>Spark Streaming</strong></p><p>Spark Streaming是Spark平台上针对实时数据进行流式计算的组件，提供了丰富的处理数据流的API。</p><p><strong>Spark MLlib</strong></p><p>MLlib是Spark提供的一个机器学习算法库。MLlib不仅提供了模型评估、数据导入等额外的功能，还提供了一些更底层的机器学习原语。</p><p><strong>Spark GraphX</strong></p><p>GraphX是Spark面向图计算提供的框架与算法库。</p><h2 id="3-入门wordCount"><a href="#3-入门wordCount" class="headerlink" title="3.入门wordCount"></a>3.入门wordCount</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">object wordCountTest &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;spark标准获取流程    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;wordCount&quot;).setMaster(&quot;local[1]&quot;)    val sc &#x3D; new SparkContext(sparkConf)    &#x2F;&#x2F;创建RDD,使用textFile的方式创建RDD    val line: RDD[String] &#x3D; sc.textFile(&quot;.&#x2F;word.txt&quot;, 1)    val result: RDD[(String, Int)] &#x3D; line.flatMap(_.split(&quot; &quot;)).map((_, 1)).reduceByKey(_ + _)    &#x2F;&#x2F;打印    result.collect().foreach(println)    sc.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-spark运行模式"><a href="#4-spark运行模式" class="headerlink" title="4.spark运行模式"></a>4.spark运行模式</h2><table><thead><tr><th>Spark运行环境</th><th>用法</th></tr></thead><tbody><tr><td>Local模式</td><td>测试</td></tr><tr><td>Standalone模式</td><td>独立部署Matser-Worker<br/>自身提供计算资源,降低了耦合性</td></tr><tr><td>Yarn模式</td><td>提供集群模式</td></tr><tr><td>K8S模式</td><td></td></tr><tr><td>Mesos模式</td><td>Twitter</td></tr><tr><td>Windows模式</td><td></td></tr></tbody></table><h2 id="5-spark端口号"><a href="#5-spark端口号" class="headerlink" title="5.spark端口号"></a>5.spark端口号</h2><table><thead><tr><th>Spark端口号</th><th>详解</th><th>Hadoop</th></tr></thead><tbody><tr><td>内部通信:==7077==</td><td>Spark Master内部通信服务端口号</td><td>8020/9000</td></tr><tr><td>Master资源监控:8080/改==8989==</td><td>Standalone模式下，Spark Master Web端口号</td><td>9870</td></tr><tr><td>Spark-Shell监控:==4040==</td><td>Spark查看当前Spark-shell运行任务情况端口号</td><td></td></tr><tr><td>Spark使用HDFS端口:==8020==</td><td></td><td></td></tr><tr><td>历史服务器UI端口:==18080==</td><td>Spark历史服务器端口号</td><td>19888</td></tr><tr><td>Yarn:==8088==</td><td>Hadoop YARN任务运行情况查看端口号</td><td>8088</td></tr></tbody></table><h2 id="6-Spark运行组件"><a href="#6-Spark运行组件" class="headerlink" title="6.Spark运行组件"></a>6.Spark运行组件</h2><p>Spark框架的核心是一个计算引擎，整体来说，它采用了标准 master-slave 的结构。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Spark%E8%BF%90%E8%A1%8C%E7%BB%84%E4%BB%B6.png" alt="Spark运行组件"></p><h3 id="6-1Spark-Executor"><a href="#6-1Spark-Executor" class="headerlink" title="6.1Spark Executor"></a>6.1Spark Executor</h3><p>集群中运行在==工作节点（Worker）中的一个JVM进程==，是整个集群中的专门用于计算的节点。在提交应用中，可以提供参数指定计算节点的个数，以及对应的资源。这里的资源一般指的是工作节点Executor的内存大小和使用的虚拟CPU核（Core）数量。</p><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>–num-executors</td><td>配置Executor的数量</td></tr><tr><td>–executor-memory</td><td>配置每个Executor的内存大小</td></tr><tr><td>–executor-cores</td><td>配置每个Executor的虚拟CPU   core数量</td></tr><tr><td></td><td>Executor如果是3核,设备是单核,模拟的多线程操作,其实是并发操作</td></tr></tbody></table><h3 id="6-2并行与并发"><a href="#6-2并行与并发" class="headerlink" title="6.2并行与并发"></a>6.2并行与并发</h3><p>我们会给Executor分配虚拟的核心数量,如果核心不够会触发多线程操作,并发</p><p>如果核心够用,则进行并行操作,可以进行配置</p><h3 id="6-3有向无环图"><a href="#6-3有向无环图" class="headerlink" title="6.3有向无环图"></a>6.3有向无环图</h3><p>表示一种依赖关系,依赖关系形成的拓扑图形称为DAG,有向无环图</p><pre class="mermaid">graph LRA-->BB-->CB-->DD--禁止-->A</pre><p>如图,D向A会形成无环图,有环会形成死循环(与maven类似)</p><h2 id="7-Yarn-Cluster任务提交流程"><a href="#7-Yarn-Cluster任务提交流程" class="headerlink" title="7.Yarn Cluster任务提交流程"></a>7.Yarn Cluster任务提交流程</h2><p><strong>核心</strong>:分两大块 1.资源的申请 2.计算的准备 任务发给资源</p><p>Client与Cluster区别在于Driver程序运行的节点位置</p><p><img src="https://i.loli.net/2020/12/23/JjlbBD6sYXgC3Hx.png" alt="Spark-Yarn提交流程"></p><ol><li>任务提交</li><li>向ResourceManager通讯申请启动ApplicationMaster</li><li>ApplicationMaster选择合适的节点借用NodeManager启动一个container</li><li>在container中运行AppMatser=Driver</li><li>Driver启动后,向RM申请container运行Executor进程</li><li>Executor进程启动后反向向Driver进行注册</li><li>全部注册完成后开始执行main函数</li><li>执行到action算子,触发一个job,根据是否发生shuffle开始划分stage</li><li>每个stage生成对应的TaskSet[task1,task2,task3…]</li><li>然后将task分发到各个Executor上执行</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[shenneng@hadoop102 spark-yarn]$ bin&#x2F;spark-submit \--class org.apache.spark.examples.SparkPi \--master yarn \--deploy-mode cluster \.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.12-3.0.0.jar \10<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x2-Spark框架"><a href="#0x2-Spark框架" class="headerlink" title="0x2 Spark框架"></a>0x2 Spark框架</h1><p>Spark和Hadoop的根本差异是多个作业之间的数据通信问题</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/Spark%E8%BF%90%E8%A1%8C%E6%A8%A1%E5%BC%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Spark运行模式示意图"></p><table><thead><tr><th>Spark运行环境</th><th>用法</th></tr></thead><tbody><tr><td>Local模式</td><td>测试</td></tr><tr><td>Standalone模式</td><td>独立部署Matser-Worker<br/>自身提供计算资源,降低了耦合性</td></tr><tr><td>Yarn模式</td><td>提供集群模式</td></tr><tr><td>K8S模式</td><td></td></tr><tr><td>Mesos模式</td><td>Twitter</td></tr><tr><td>Windows模式</td><td></td></tr></tbody></table><h2 id="1-Yarn模式"><a href="#1-Yarn模式" class="headerlink" title="1.Yarn模式"></a>1.Yarn模式</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/Yarn-Cluster%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="Yarn-Cluster提交流程"></p><p>Client与Cluster的主要区别是Driver是否在本地运行</p><h2 id="2-分布式计算模拟"><a href="#2-分布式计算模拟" class="headerlink" title="2.分布式计算模拟"></a>2.分布式计算模拟</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/%E5%88%86%E5%B8%83%E5%BC%8F%E8%AE%A1%E7%AE%97%E6%A0%B8%E5%BF%83.png" alt="分布式计算核心-拆分Task"></p><p>通过简单的分布式计算模拟,理解任务的拆分,运行的模块,并行的原理,RDD的封装,底层数据结构</p><p><strong>DRIVER</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;DRIVERpackage com.ecust.saprkcoreimport java.io.&#123;ObjectOutputStream, OutputStream&#125;import java.net.&#123;ServerSocket, Socket&#125;&#x2F;** * @author Jinxin Li * @create 2020-12-31 13:43 *&#x2F;object Driver &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;进行逻辑的封装,计算的准备,数据的提交    val client1 &#x3D; new Socket(&quot;localhost&quot;, 9999)    val client2 &#x3D; new Socket(&quot;localhost&quot;, 8888)    val out1: OutputStream &#x3D; client1.getOutputStream    val out2: OutputStream &#x3D; client2.getOutputStream    val objOut1 &#x3D; new ObjectOutputStream(out1)    val objOut2 &#x3D; new ObjectOutputStream(out2)    val  task &#x3D; new Task()    val subTask1 &#x3D; new SubTask()    subTask1.logic&#x3D;task.logic    subTask1.data&#x3D;task.data.take(2)    val subTask2 &#x3D; new SubTask()    subTask2.logic&#x3D;task.logic    subTask2.data&#x3D;task.data.takeRight(2)    objOut1.writeObject(subTask1)    objOut1.flush()    objOut1.close()    objOut2.writeObject(subTask2)    objOut2.flush()    objOut2.close()    &#x2F;&#x2F;发送,注意在网络中传递的数据要进行序列化,不可能传递对象,必须序列化    println(&quot;任务发送完毕&quot;)    &#x2F;&#x2F;关闭客户端    client1.close()    client2.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EXECUTOR1</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object Executor1 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;启动服务器,接受数据    val server &#x3D; new ServerSocket(9999)    println(&quot;服务器9999启动,等待接受数据...&quot;)    val client: Socket &#x3D; server.accept()    val in: InputStream &#x3D; client.getInputStream    val objIn &#x3D; new ObjectInputStream(in)    val task &#x3D; objIn.readObject().asInstanceOf[SubTask]    val ints: List[Int] &#x3D; task.compute()    println(&quot;接收到客户端9999接受的数据:&quot;+ints)    objIn.close()    client.close()    server.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>EXECUTOR2</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object Executor2 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;启动服务器,接受数据    val server &#x3D; new ServerSocket(8888)    println(&quot;服务器9999启动,等待接受数据...&quot;)    val client: Socket &#x3D; server.accept()    val in: InputStream &#x3D; client.getInputStream    val objIn &#x3D; new ObjectInputStream(in)    val task&#x3D; objIn.readObject().asInstanceOf[SubTask]    val ints: List[Int] &#x3D; task.compute()    println(&quot;接收到客户端8888接受的数据:&quot;+ints)    objIn.close()    client.close()    server.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>SUBTASK</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">class SubTask extends Serializable &#123;  &#x2F;&#x2F;这是一种特殊的数据结构,其中包含了数据的格式,数据的计算逻辑与算子转换  &#x2F;&#x2F;接收到数据之后,可以进行计算  &#x2F;&#x2F;RDD 广播变量 累加器 就是类似的数据结构  var data :List[Int] &#x3D; _  var logic:Int&#x3D;&gt;Int &#x3D; _  &#x2F;&#x2F;计算任务  def  compute() &#x3D;&#123;    data.map(logic)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>TASK</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">class Task extends Serializable &#123;&#x2F;&#x2F;实现序列化 特质  &#x2F;&#x2F;包含原数据的数据结构  val data &#x3D; List(1, 2, 3, 4)  val function: Int &#x3D;&gt; Int &#x3D; (num: Int) &#x3D;&gt; &#123;    num * 2  &#125;  &#x2F;&#x2F;注意函数的类型是Int&#x3D;&gt;Int  val logic:Int&#x3D;&gt;Int &#x3D; _*2  &#x2F;&#x2F;计算任务  def  compute() &#x3D;&#123;    data.map(logic)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-RDD与IO"><a href="#3-RDD与IO" class="headerlink" title="3.RDD与IO"></a>3.RDD与IO</h2><p><strong>字节流&amp;字符流</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">InputStream in &#x3D; new FileInputStream(&quot;path&quot;)int i &#x3D; -1while(i &#x3D; in.read()!&#x3D;-1)&#123;    println(i)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">graph LRFile-->FileInputStream--read-->console</pre><p><strong>缓冲流</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">InputStream in &#x3D; new BufferedInputStream(new FileInputStream(&quot;path&quot;))int i &#x3D; -1while(i &#x3D; in.read()!&#x3D;-1)&#123;    println(i)&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">graph LRFile-->FileInputStream-->BufferedInputStream--read-->console</pre><p><img src="C:%5CUsers%5C89388%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201231224057782.png" alt="缓冲区的缓冲流"></p><p><strong>转换流</strong>InputStreamReader</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">Reader in &#x3D; new BufferedReader(    new InputStreamReader(        new FileInputStream(&quot;path&quot;),        &quot;UTF-8&quot;        )    )String s &#x3D; nullwhile((s&#x3D;in.readLine())!&#x3D;null)&#123;    println(i);    )<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/%E6%B5%81%E7%9A%84%E8%A3%85%E9%A5%B0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.png" alt="装饰者设计模式的IO"></p><p>可以看出核心是FileInputFormat,转换流与缓冲流都是包装,这种设计模式成为装饰者设计模式</p><p>哪些inputformat,都是对读取逻辑的封装,没有真正的读取数据</p><p>readLine才会真正的执行,new的过程仅仅是建立连接,但是没有真正的读取,有种延迟加载的感觉</p><p>RDD的组装方式,与IO的封装也是非常的类似</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">new HadoopRDD&#x2F;&#x2F;textFilenew MapPartitionsRDD()&#x2F;&#x2F;flatMapnew MapPartitionsRDD()&#x2F;&#x2F;mapnew ShuffleRDD()&#x2F;&#x2F;reduceByKey&#x2F;&#x2F;执行rdd.collect()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一层一层的包装</p><p><img src="C:%5CUsers%5C89388%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20201231232951858.png" alt="RDD的装饰者模式理解"></p><p>RDD的数据处理方式类似于IO流,也有装饰者设计模式</p><p>RDD的数据只有在调用collect方法时,才会真正的执行</p><p>RDD是不保存数据的,但是IO可以临时保存一部分数据</p><h2 id="4-分区"><a href="#4-分区" class="headerlink" title="4. 分区"></a>4. 分区</h2><p>RDD是一个最基本的数据处理模型</p><p>类似于Kafka中的分区,我们将数据进行分区,分区之后分成不成的Task,可以分发至Executor进行计算</p><p>RDD是最小的数据处理单元,里面包含了分区信息,提高并行计算的能力</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/RDD%E6%95%B0%E6%8D%AE%E7%9A%84%E5%88%87%E5%88%86.png" alt="数据的分区"></p><h1 id="0x3-spark核心"><a href="#0x3-spark核心" class="headerlink" title="0x3 spark核心"></a>0x3 spark核心</h1><h2 id="1-spark核心三大数据结构"><a href="#1-spark核心三大数据结构" class="headerlink" title="1. spark核心三大数据结构"></a>1. spark核心三大数据结构</h2><p>RDD : 弹性分布式数据集</p><p>累加器：分布式共享只写变量</p><p>广播变量：分布式共享只读变量</p><h2 id="2-RDD基本概念"><a href="#2-RDD基本概念" class="headerlink" title="2.RDD基本概念"></a>2.RDD基本概念</h2><p>RDD（Resilient Distributed Dataset）叫做弹性分布式数据集，是Spark中最基本的数据处理模型。代码中是一个抽象类，它代表一个弹性的、不可变、可分区、里面的元素可并行计算的集合。</p><p><strong>1.弹性</strong></p><p>存储的弹性：内存与磁盘的自动切换；</p><p>容错的弹性：数据丢失可以自动恢复；</p><p>计算的弹性：计算出错重试机制；</p><p>分片的弹性：可根据需要重新分片。</p><p><strong>2.分布式</strong>：数据存储在大数据集群不同节点上</p><p><strong>3.数据集</strong>：RDD封装了计算逻辑，并不保存数据</p><p><strong>4.数据抽象</strong>：RDD是一个抽象类，需要子类具体实现</p><p><strong>5.不可变</strong>：RDD封装了计算逻辑，是不可以改变的，想要改变，只能产生新的RDD，在新的RDD里面封装计算逻辑</p><p><strong>6.可分区、并行计算</strong></p><h2 id="3-RDD核心属性"><a href="#3-RDD核心属性" class="headerlink" title="3.RDD核心属性"></a>3.RDD核心属性</h2><p><a href="https://data-flair.training/blogs/spark-rdd-tutorial/">RDD详细描述</a></p><p><img src="https://i.loli.net/2020/12/23/PTqaCxnHeBdl91G.png" alt="SparkRDD的核心属性"></p><p>图:Spark RDD核心属性</p><ol><li><p>粗粒度操作(无法对单个元素进行操作)</p></li><li><p>内存中计算</p></li><li><p>懒执行</p></li><li><p>不变性</p></li><li><p>容错性</p></li><li><p>持久性(cache可以选择等级与checkpoint)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--数据缓存wordToOneRdd.cache()--可以更改存储级别mapRdd.persist(StorageLevel.MEMORY_AND_DISK_2)--设置检查点路径sc.setCheckpointDir(&quot;.&#x2F;checkpoint1&quot;)--数据检查点：针对wordToOneRdd做检查点计算wordToOneRdd.checkpoint()--一般两者联合使用<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>可分区(分区列表)</p></li><li><p>粘度分区(自定分区)</p></li></ol><h2 id="4-RDD缺点"><a href="#4-RDD缺点" class="headerlink" title="4.RDD缺点"></a>4.RDD缺点</h2><ol><li>没有内置的优化引擎,RDD无法利用Spark的高级优化器（包括catalyst optimizer与Tungsten执行引擎）的优势。开发人员需要根据其属性优化每个RDD</li><li>只能处理结构化数据与DataFrame和数据集不同，RDD不会推断所摄取数据的模式，而是需要用户指定它。</li><li>性能限制,作为内存中的JVM对象，RDD涉及垃圾收集和Java序列化的开销，这在数据增长时非常昂贵。</li><li>没有足够的内存来存储RDD时，它们会拖慢运行速度。也可以将RDD的该分区存储在不适合RAM的磁盘上。结果，它将提供与当前数据并行系统类似的性能。</li></ol><h2 id="5-RDD的来源"><a href="#5-RDD的来源" class="headerlink" title="5.RDD的来源"></a>5.RDD的来源</h2><ol><li>使用集合创建parallelize MakeRDD</li><li>外部存储文件创建RDD textfile</li><li>从其他RDD创建(血缘关系,cache,checkpoint)</li><li>直接创建RDD 内部使用</li></ol><h2 id="6-RDD的-分区分片问题"><a href="#6-RDD的-分区分片问题" class="headerlink" title="6.RDD的==分区分片问题=="></a>6.RDD的==分区分片问题==</h2><p>RDD分区意味着一个分区一个job么,</p><p>RDD分区3意味着要在三个executor里执行么</p><p>重新分区,加入三个executor在不同的container里是如何发生shuffle里的,还是三个分区是一个job,这一个job在一个container里执行</p><h2 id="7-RDD的序列化"><a href="#7-RDD的序列化" class="headerlink" title="7.RDD的序列化"></a>7.RDD的序列化</h2><p>从计算的角度, 算子以外的代码都是在Driver端执行, 算子里面的代码都是在Executor端执行。</p><p>那么在scala的函数式编程中，就会导致算子内经常会用到算子外的数据，这样就形成了闭包的效果，如果使用的算子外的数据无法序列化，就意味着无法传值给Executor端执行，就会发生错误</p><p>所以需要在执行任务计算前，检测闭包内的对象是否可以进行序列化，这个操作我们称之为闭包检测。Scala2.12版本后闭包编译方式发生了改变  </p><p><strong>Kryo序列化框架</strong></p><p>Spark2.0开始支持另外一种Kryo序列化机制。Kryo速度是Serializable的10倍。当RDD在Shuffle数据的时候，简单数据类型、数组和字符串类型已经在Spark内部使用Kryo来序列化。</p><p>即使使用Kryo序列化，也要继承Serializable接口</p><h2 id="8-RDD依赖与血缘"><a href="#8-RDD依赖与血缘" class="headerlink" title="8.RDD依赖与血缘"></a>8.RDD依赖与血缘</h2><h3 id="8-1概述"><a href="#8-1概述" class="headerlink" title="8.1概述"></a>8.1概述</h3><p>RDD的Lineage会记录RDD的元数据信息和转换行为，当该RDD的部分分区数据丢失时，它可以根据这些信息来重新运算和恢复丢失的数据分区。</p><p>相邻的两个RDD之间的关系称为<strong>依赖关系</strong></p><p>多个连续的RDD的依赖关系,称之为<strong>血缘关系</strong></p><p>我们的每一个RDD都会保存我们的血缘关系,会保存之前的血缘关系</p><p>RDD为了提供容错性,需要将RDD间的关系保存下来,一旦出现错误,可以根据血缘关系将数据源重新计算</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">val rdd1 &#x3D; rdd.map(_.2)&#x2F;&#x2F;新的RDD依赖于旧的RDD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">graph LRRDD1--依赖-->RDD2--依赖-->RDD3--依赖-->RDD4RDD4--flatmap-->RDD3RDD3--map-->RDD2RDD2--reduceByKey-->RDD1</pre><h3 id="8-2血缘关系的查看"><a href="#8-2血缘关系的查看" class="headerlink" title="8.2血缘关系的查看"></a>8.2血缘关系的查看</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;血缘关系的演示&#x2F;&#x2F;每个RDD记录了以前所有的血缘关系package com.testimport org.apache.spark.api.java.JavaSparkContext.fromSparkContextimport org.apache.spark.rdd.RDDimport org.apache.spark.&#123;SparkConf, SparkContext&#125;&#x2F;** * @author Jinxin Li * @create 2020-10-26 10:04 *&#x2F;object wordCount &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val config: SparkConf &#x3D; new SparkConf().setAppName(&quot;MyWordCount&quot;).setMaster(&quot;local[*]&quot;)    val sc &#x3D; new SparkContext(config)    val lines: RDD[String] &#x3D; sc.textFile(&quot;.&#x2F;word.txt&quot;)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(lines.toDebugString)&#x2F;&#x2F;打印血缘关系    val words: RDD[String] &#x3D; lines.flatMap(_.split(&quot; &quot;))    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(words.toDebugString)    val pairs: RDD[(String, Int)] &#x3D; words.map((_, 1))    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(pairs.toDebugString)    val word: RDD[(String, Int)] &#x3D; pairs.reduceByKey(_ + _)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(word.toDebugString)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    word.collect().foreach(println(_))    sc.close;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java">++++++++++++++++++++++++++++++++++&#x3D;(2) .&#x2F;word.txt MapPartitionsRDD[1] at textFile at wordCount.scala:15 [] |  .&#x2F;word.txt HadoopRDD[0] at textFile at wordCount.scala:15 []++++++++++++++++++++++++++++++++++&#x3D;(2) MapPartitionsRDD[2] at flatMap at wordCount.scala:18 [] |  .&#x2F;word.txt MapPartitionsRDD[1] at textFile at wordCount.scala:15 [] |  .&#x2F;word.txt HadoopRDD[0] at textFile at wordCount.scala:15 []++++++++++++++++++++++++++++++++++&#x3D;(2) MapPartitionsRDD[3] at map at wordCount.scala:21 [] |  MapPartitionsRDD[2] at flatMap at wordCount.scala:18 [] |  .&#x2F;word.txt MapPartitionsRDD[1] at textFile at wordCount.scala:15 [] |  .&#x2F;word.txt HadoopRDD[0] at textFile at wordCount.scala:15 []++++++++++++++++++++++++++++++++++&#x3D;(2) ShuffledRDD[4] at reduceByKey at wordCount.scala:24 []    &#x2F;&#x2F;这个地方断开,表示shuffle +- +-(2) MapPartitionsRDD[3] at map at wordCount.scala:21 []    |  MapPartitionsRDD[2] at flatMap at wordCount.scala:18 []    |  .&#x2F;word.txt MapPartitionsRDD[1] at textFile at wordCount.scala:15 []    |  .&#x2F;word.txt HadoopRDD[0] at textFile at wordCount.scala:15 []++++++++++++++++++++++++++++++++++&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出每个RDD会存储所有的血缘关系</p><p>同时使用dependices可以查看依赖关系</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object wordCount &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val config: SparkConf &#x3D; new SparkConf().setAppName(&quot;MyWordCount&quot;).setMaster(&quot;local[*]&quot;)    val sc &#x3D; new SparkContext(config)    val lines: RDD[String] &#x3D; sc.textFile(&quot;.&#x2F;word.txt&quot;)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(lines.dependencies)    val words: RDD[String] &#x3D; lines.flatMap(_.split(&quot; &quot;))    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(words.dependencies)    val pairs: RDD[(String, Int)] &#x3D; words.map((_, 1))    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(pairs.dependencies)    val word: RDD[(String, Int)] &#x3D; pairs.reduceByKey(_ + _)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    println(word.dependencies)    println(&quot;++++++++++++++++++++++++++++++++++&#x3D;&quot;)    word.collect().foreach(println(_))    sc.close;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">++++++++++++++++++++++++++++++++++&#x3D;List(org.apache.spark.OneToOneDependency@1a2bcd56)++++++++++++++++++++++++++++++++++&#x3D;List(org.apache.spark.OneToOneDependency@3c3a0032)++++++++++++++++++++++++++++++++++&#x3D;List(org.apache.spark.OneToOneDependency@5e519ad3)++++++++++++++++++++++++++++++++++&#x3D;List(org.apache.spark.ShuffleDependency@765d55d5)++++++++++++++++++++++++++++++++++&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以看出存在两种依赖关系,一种OneToOneDependency与ShuffleDependency</p><p>新的RDD的一个分区的数据依赖于旧的RDD的一个分区的数据,这种依赖称之为OneToOne依赖</p><p>新的RDD的一个分区的数据依赖于旧的RDD的多个分区的数据,这种依赖称为Shuffle依赖(数据被打乱重新组合)</p><p>源码中的依赖关系</p><p><img src="https://i.loli.net/2020/12/23/zWdaBIDnpNuxlr7.png" alt="RDD依赖关系的继承关系"></p><p><img src="https://i.loli.net/2020/12/23/w2M9xlshmoVAHL4.png" alt="宽依赖的图"></p><h3 id="8-3阶段划分与源码"><a href="#8-3阶段划分与源码" class="headerlink" title="8.3阶段划分与源码"></a>8.3阶段划分与源码</h3><p>Shuffle划分阶段</p><p>如果是oneToOne不需要划分阶段</p><p>不同的阶段要保证Task执行完毕才能执行下一个阶段</p><p>阶段的数量等于shuffle依赖的数量+1</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">collectdagScheduler.runjobval waiter &#x3D; submitJob&#x2F;&#x2F;DAGScheduler-681&#x2F;&#x2F;让下翻override def run(): Unit &#x3D; eventProcessLoop.post(JobSubmitted)&#x2F;&#x2F;DAGScheduler-714private[scheduler] def handleJobSubmitted&#x2F;&#x2F;DAGScheduler-975&#123;    var finalStage: ResultStage &#x3D; null&#x2F;&#x2F;判定finalStage是否存在 985    finalStage &#x3D; createResultStage(finalRDD, func, partitions, jobId, callSite)&#x2F;&#x2F;如果不存在则创建一个空的ResultStage 986&#125;&#x2F;&#x2F;也就是说ResultStage只有一个private def createResultStage:ResultStage &#x3D; &#123;    &#x2F;&#x2F;445    val parents &#x3D; getOrCreateParentStages(rdd, jobId)&#x2F;&#x2F;有没有上一个阶段,这个rdd是当前的reduceBykey最后的rdd    val stage &#x3D; new ResultStage(id, rdd, func, partitions, parents, jobId, callSite)    stage  &#125;&#x2F;**获得父阶段列表*&#x2F;private def getOrCreateParentStages(rdd: RDD[_], firstJobId: Int): List[Stage] &#x3D; &#123;&#x2F;&#x2F;466    getShuffleDependencies(rdd).map &#123; shuffleDep &#x3D;&gt;      getOrCreateShuffleMapStage(shuffleDep, firstJobId)&#x2F;&#x2F;一个shuffle就会转换为一个阶段    &#125;.toList  &#125;private[scheduler] def getShuffleDependencies(&#x2F;&#x2F;508      rdd: RDD[_]): HashSet[ShuffleDependency[_, _, _]] &#x3D; &#123;    val parents &#x3D; new HashSet[ShuffleDependency[_, _, _]]    val visited &#x3D; new HashSet[RDD[_]]    val waitingForVisit &#x3D; new ListBuffer[RDD[_]]    waitingForVisit +&#x3D; rdd&#x2F;&#x2F;放入当前rdd reduceByKey的rdd    while (waitingForVisit.nonEmpty) &#123;      val toVisit &#x3D; waitingForVisit.remove(0)      if (!visited(toVisit)) &#123;&#x2F;&#x2F;判断之前是否访问过        visited +&#x3D; toVisit        toVisit.dependencies.foreach &#123;          case shuffleDep: ShuffleDependency[_, _, _] &#x3D;&gt;            parents +&#x3D; shuffleDep&#x2F;&#x2F;模式匹配判断是否是shuffle依赖          case dependency &#x3D;&gt;            waitingForVisit.prepend(dependency.rdd)        &#125;      &#125;    &#125;    parents  &#125;private def getOrCreateShuffleMapStage( &#x2F;&#x2F;338    ... ShuffleMapStage &#x3D; &#123;...        createShuffleMapStage(shuffleDep, firstJobId)                          &#125;     def createShuffleMapStage[K, V, C](&#x2F;&#x2F;384      ... ShuffleMapStage &#x3D; &#123;    val rdd &#x3D; shuffleDep.rdd          ...    val numTasks &#x3D; rdd.partitions.length    val parents &#x3D; getOrCreateParentStages(rdd, jobId)    val id &#x3D; nextStageId.getAndIncrement()    val stage &#x3D; new ShuffleMapStage()      ...    stage  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="8-4RDD的任务划分"><a href="#8-4RDD的任务划分" class="headerlink" title="8.4RDD的任务划分"></a>8.4RDD的任务划分</h3><p>行动算子底层是runJob</p><p><strong>Application</strong>:初始化一个SparkContext即生成一个Application</p><p><strong>Job</strong>:一个Action算子就会生成一个Job</p><p><strong>Stage</strong>:Stage等于宽依赖(ShuffleDependency)+1</p><p><strong>Task</strong>:一个Stage阶段中,最后一个RDD分区个数就是Task的个数</p><p>注意:Application-&gt;Job-&gt;Stage-&gt;Task每一层都是一对n的关系</p><p>提交过程是一个阶段一个阶段的提交</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">private def submitStage(stage: Stage): Unit &#x3D; &#123;&#x2F;&#x2F;1084    val jobId &#x3D; activeJobForStage(stage)    if (jobId.isDefined) &#123;      logDebug(s&quot;submitStage($stage (name&#x3D;$&#123;stage.name&#125;;&quot; +        s&quot;jobs&#x3D;$&#123;stage.jobIds.toSeq.sorted.mkString(&quot;,&quot;)&#125;))&quot;)      if (!waitingStages(stage) &amp;&amp; !runningStages(stage) &amp;&amp; !failedStages(stage)) &#123;        val missing &#x3D; getMissingParentStages(stage).sortBy(_.id)&#x2F;&#x2F;有没有上一级阶段        logDebug(&quot;missing: &quot; + missing)        if (missing.isEmpty) &#123;&#x2F;&#x2F;如果没有上一级的stage,则为空          logInfo(&quot;Submitting &quot; + stage + &quot; (&quot; + stage.rdd + &quot;), which has no missing parents&quot;)          submitMissingTasks(stage, jobId.get)&#x2F;&#x2F;为空就提交stage&#x2F;tasks        &#125; else &#123;          for (parent &lt;- missing) &#123;            submitStage(parent)          &#125;          waitingStages +&#x3D; stage        &#125;      &#125;    &#125; else &#123;      abortStage(stage, &quot;No active job for stage &quot; + stage.id, None)    &#125;  &#125;val tasks: Seq[Task[_]] &#x3D; try &#123;&#x2F;&#x2F;1217      val serializedTaskMetrics &#x3D; closureSerializer.serialize(stage.latestInfo.taskMetrics).array()      stage match &#123;&#x2F;&#x2F;匹配的阶段类型        case stage: ShuffleMapStage &#x3D;&gt;&#x2F;&#x2F;shuffleMaptask          &#x2F;&#x2F;new 几个跟map相关,ShuffleMapStage          stage.pendingPartitions.clear()          partitionsToCompute.map &#123; id &#x3D;&gt;&#x2F;&#x2F;计算分区            val locs &#x3D; taskIdToLocations(id)            val part &#x3D; partitions(id)            stage.pendingPartitions +&#x3D; id            new ShuffleMapTask(stage.id, stage.latestInfo.attemptNumber,              taskBinary, part, locs, properties, serializedTaskMetrics, Option(jobId),              Option(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier())          &#125;        case stage: ResultStage &#x3D;&gt;          partitionsToCompute.map &#123; id &#x3D;&gt;&#x2F;&#x2F;这里面有多少元素            val p: Int &#x3D; stage.partitions(id)            val part &#x3D; partitions(p)            val locs &#x3D; taskIdToLocations(id)&#x2F;&#x2F;到底有多个new            new ResultTask(stage.id, stage.latestInfo.attemptNumber,              taskBinary, part, locs, id, properties, serializedTaskMetrics,              Option(jobId), Option(sc.applicationId), sc.applicationAttemptId,              stage.rdd.isBarrier())          &#125;      &#125;&#125;&#x2F;&#x2F;计算分区&#x2F;&#x2F; Figure out the indexes of partition ids to compute.val partitionsToCompute: Seq[Int] &#x3D; stage.findMissingPartitions()&#123;&#125;    &#x2F;&#x2F;ResultStage 61override def findMissingPartitions(): Seq[Int] &#x3D; &#123;    val job &#x3D; activeJob.get    (0 until job.numPartitions).filter(id &#x3D;&gt; !job.finished(id))&#125;&#x2F;&#x2F;此处的job.numPartitions就是最后一个RDD的分区&#x2F;&#x2F;三个分区就是0-3&#x2F;&#x2F;一个RDD的三个分区,从并行角度就会分配为3个Task&#x2F;&#x2F;SuffleMapStage 91override def findMissingPartitions(): Seq[Int] &#x3D; &#123;    mapOutputTrackerMaster      .findMissingPartitions(shuffleDep.shuffleId)      .getOrElse(0 until numPartitions)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一个应用程序会对应多个job(一个行动算子算是一个job)</p><p>ShuffleMapStage=&gt;ShuffleMapTask</p><p>ResultStage=&gt;ResultTask</p><h2 id="9-RDD分区器"><a href="#9-RDD分区器" class="headerlink" title="9.RDD分区器"></a>9.RDD分区器</h2><ol><li>Hash分区(默认)</li><li>Range分区</li><li>自定义分区</li></ol><p>只有Key-Value类型的RDD才有分区器，非Key-Value类型的RDD分区的值是None</p><p>每个RDD的分区ID范围：0 ~ (numPartitions - 1)，决定这个值是属于那个分区的。</p><p><strong>Hash</strong>分区：对于给定的key，计算其hashCode,并除以分区个数取余</p><p><strong>Range分区</strong>：将一定范围内的数据映射到一个分区中，尽量保证每个分区数据均匀，而且分区间有序</p><h3 id="1-自定义分区器"><a href="#1-自定义分区器" class="headerlink" title="1.自定义分区器"></a>1.自定义分区器</h3><h4 id="a-gt-HashPartitioner"><a href="#a-gt-HashPartitioner" class="headerlink" title="a&gt;HashPartitioner"></a>a&gt;HashPartitioner</h4><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1: RDD[(String, Int)] &#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用hash分区器    val rdd2: RDD[(String, Int)] &#x3D; rdd1.partitionBy(new HashPartitioner(3))    rdd2.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-gt-RangePartitioner"><a href="#b-gt-RangePartitioner" class="headerlink" title="b&gt;RangePartitioner"></a>b&gt;RangePartitioner</h4><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1&#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用rangePartitioner    val value &#x3D; new RangePartitioner[String, Int](2, rdd1.sample(false, 0.5))    &#x2F;&#x2F;range分区器的使用,要定义泛型,传递分区,传递sample    &#x2F;&#x2F;首先要传递一个分区,传递一个    rdd1.partitionBy(value)    rdd1.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="c-gt-自定义分区"><a href="#c-gt-自定义分区" class="headerlink" title="c&gt;自定义分区"></a>c&gt;自定义分区</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;自定义分区器case class MyPartitioner(numPartition:Int) extends Partitioner &#123;    override def numPartitions: Int &#x3D; numPartition    override def getPartition(key: Any): Int &#x3D; (math.random() * numPartition).toInt&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;自定义分区器的使用object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;Main&quot;)    val sc: SparkContext &#x3D; new SparkContext(sparkConf)    val rdd1&#x3D; sc.textFile(&quot;Day06&#x2F;input&#x2F;number&quot;).map((_, 1))    &#x2F;&#x2F;只有k-v值才有分区器    rdd1.saveAsTextFile(&quot;.&#x2F;output&quot;)    &#x2F;&#x2F;使用rangePartitioner    val value &#x3D; new RangePartitioner[String, Int](2, rdd1.sample(false, 0.5))    &#x2F;&#x2F;range分区器的使用,要定义泛型,传递分区,传递sample    &#x2F;&#x2F;首先要传递一个分区,传递一个    val value1: RDD[(String, Int)] &#x3D; rdd1.partitionBy(MyPartitioner(2))    value1.saveAsTextFile(&quot;.&#x2F;output2&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-RDD累加器"><a href="#10-RDD累加器" class="headerlink" title="10.RDD累加器"></a>10.RDD累加器</h2><p><strong>系统累加器</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object MyAccumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;myAccumulator&quot;))    val rdd: RDD[Int] &#x3D; sc.makeRDD(List(1, 2, 3, 4, 5))    &#x2F;&#x2F;声明系统累加器    val sum: LongAccumulator &#x3D; sc.longAccumulator(&quot;sum&quot;)    rdd.foreach(      num&#x3D;&gt;&#123;        sum.add(num)      &#125;    )    &#x2F;&#x2F;获取累加器    println(sum.value)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义累加器"><a href="#自定义累加器" class="headerlink" title="自定义累加器"></a><strong>自定义累加器</strong></h3><p><strong>1.自定wordcount累加器</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;自定义累加器实现wordcountclass DefineAccumulator extends AccumulatorV2[String,mutable.Map[String,Int]]&#123;  val map: mutable.Map[String, Int] &#x3D; mutable.Map()  &#x2F;&#x2F;判断累加器是否为初始状态  override def isZero: Boolean &#x3D; &#123;map.isEmpty&#125;  &#x2F;&#x2F;复制累加器  override def copy(): AccumulatorV2[String, mutable.Map[String, Int]] &#x3D; &#123;new DefineAccumulator()&#125;  &#x2F;&#x2F;重置累加器  override def reset(): Unit &#x3D; map.clear()  &#x2F;&#x2F;区内相加  override def add(v: String): Unit &#x3D; &#123;    &#x2F;&#x2F;区内相加的定义,如果存在元素,就对key值+1,如果不存在,就添加当前元素,key+1    map(v)&#x3D;map.getOrElse(v,0)+1  &#125;  &#x2F;&#x2F;区间相加  override def merge(other: AccumulatorV2[String, mutable.Map[String, Int]]): Unit &#x3D; &#123;    &#x2F;&#x2F;区间相加,固定    val map1: mutable.Map[String, Int] &#x3D; this.value    val map2: mutable.Map[String, Int] &#x3D; other.value    map2.foreach&#123;      case (k,v) &#x3D;&gt; map1(k)&#x3D;map1.getOrElse(k,0)+v    &#125;  &#125;  override def value: mutable.Map[String, Int] &#x3D; map&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.注册并使用定义累加器</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object MyAccumulator2 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;accumulator&quot;))    val word: RDD[String] &#x3D; sc.textFile(&quot;.&#x2F;word.txt&quot;)    val words &#x3D; word.flatMap(_.split(&quot; &quot;))    &#x2F;&#x2F;new出累加器    val uacc &#x3D; new DefineAccumulator    &#x2F;&#x2F;注册累加器    sc.register(uacc)    &#x2F;&#x2F;使用累加器    words.foreach(uacc.add(_))    println(uacc.value)&#x2F;&#x2F;注意输出为accumulator的值  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-广播变量"><a href="#11-广播变量" class="headerlink" title="11.广播变量"></a>11.广播变量</h2><p>广播变量用来高效分发较大的对象。向所有工作节点发送一个较大的只读值，以供一个或多个Spark操作使用。比如，如果你的应用需要向所有节点发送一个较大的只读查询表，广播变量用起来都很顺手。在多个并行操作中使用同一个变量，但是 Spark会为每个任务分别发送。</p><p>在整个队列中,仅仅存在一次</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object BoardCast &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setAppName(&quot;emm&quot;).setMaster(&quot;local[*]&quot;))    val rdd1 &#x3D; sc.makeRDD(List( (&quot;a&quot;,1), (&quot;b&quot;, 2), (&quot;c&quot;, 3), (&quot;d&quot;, 4) ),4)    val list &#x3D; List((&quot;a&quot;,4), (&quot;b&quot;, 5), (&quot;c&quot;, 6), (&quot;d&quot;, 7))    val broadcast: Broadcast[List[(String, Int)]] &#x3D; sc.broadcast(list)    val value &#x3D; rdd1.map &#123;      case (key, num) &#x3D;&gt; &#123;        var num1 &#x3D; 0        for ((k, v) &lt;- broadcast.value) &#123;          if (k &#x3D;&#x3D; key)&#123;            num1&#x3D;v          &#125;        &#125;        (key, num+num1)      &#125;    &#125;    value.collect().foreach(println)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-RDD的持久化"><a href="#12-RDD的持久化" class="headerlink" title="12.RDD的持久化"></a>12.RDD的持久化</h2><h3 id="12-1为什么要使用RDD的持久化"><a href="#12-1为什么要使用RDD的持久化" class="headerlink" title="12.1为什么要使用RDD的持久化"></a>12.1为什么要使用RDD的持久化</h3><p>数据不存储在RDD中</p><p><img src="https://i.loli.net/2020/12/25/m4gxMj5cHAh8KaG.png" alt="RDD的重用"></p><p>如果一个RDD需要重复使用,需要从头再次执行来获取数据</p><p>RDD的对象可以重用,但是数据没法重用</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkCore02_RDD_Persist &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;WordCountPersist&quot;).setMaster(&quot;local[1]&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val list &#x3D; List(&quot;Hello Spark&quot;, &quot;Hello Scala&quot;)    &#x2F;&#x2F;生成RDD RDD中不存储数据    val listRDD: RDD[String] &#x3D; sc.makeRDD(list, 1)    val wordRDD: RDD[String] &#x3D; listRDD.flatMap(word &#x3D;&gt; word.split(&quot; &quot;))    val tupleRDD: RDD[(String, Int)] &#x3D; wordRDD.map(word &#x3D;&gt;    &#123; println(&quot;map阶段&quot;)      (word, 1)    &#125;)    &#x2F;&#x2F;分组的操作    val groupRDD: RDD[(String, Iterable[Int])] &#x3D; tupleRDD.groupByKey()    val resultRDD: RDD[(String, Int)] &#x3D; tupleRDD.reduceByKey(_ + _)    resultRDD.collect().foreach(println)    println(&quot;------------华丽分割线----------------&quot;)    groupRDD.collect().foreach(println)    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;结果map阶段map阶段map阶段map阶段(Spark,1)(Hello,2)(Scala,1)------------华丽分割线----------------map阶段map阶段map阶段map阶段(Spark,CompactBuffer(1))(Hello,CompactBuffer(1, 1))(Scala,CompactBuffer(1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现map阶段运行了两波,所有的执行都会从头开始计算</p><p>这样的执行影响了效率</p><p>要想解决这个问题,数据持久化提高效率</p><p><img src="https://i.loli.net/2020/12/25/MAwm1jeOrELZWqK.png" alt="RDD持久化的作用"></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;进行缓存tupleRDD.cache() &#x2F;&#x2F;本质是persist&#x2F;&#x2F;tupleRDD.cache()tupleRDD.persist(StorageLevel.MEMORY_AND_DISK)&#x2F;&#x2F;memory_only当内存不够的情况下,数据不能溢写到磁盘,会丢失数据&#x2F;&#x2F;memory_and_disk当内存不够的情况下,会将数据落到磁盘&#x2F;&#x2F;持久化操作,必须在行动算子执行时,完成的sc.setCheckpointDir(&quot;.&#x2F;checkPoint&quot;)&#x2F;&#x2F;一般要保存到分布式存储中tupleRDD.checkpoint()&#x2F;&#x2F;检查点路径,在作业执行完毕之后也是不会删除的<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RDD对象的持久化操作不一定为了重用,在数据执行较长,或者数据比较重要的场合也可以进行持久化操作</p><h3 id="12-2-三种持久化方法"><a href="#12-2-三种持久化方法" class="headerlink" title="12.2 三种持久化方法"></a>12.2 三种持久化方法</h3><ol><li><p><strong>cache</strong>:将数据临时存储在内存中进行数据重用,会添加新的依赖,出现问题从头开始计算</p></li><li><p><strong>persist</strong>:将数据临时存储在磁盘文件中进行数据重用,涉及到磁盘IO,性能较低,但是数据安全,如果作业执行完毕,临时保存在数据文件就会丢失</p></li><li><p><strong>checkpoint</strong>:将磁盘长久地保存在磁盘文件中进行数据重用,涉及到磁盘IO时,性能较低,但是会切断血缘关系,相当于改变数据源</p><blockquote><p>但是数据安全,为了保证数据安全,所以一般情况下,会独立的执行作业,为了能够提高效率,一般情况下,会跟cache联合使用,先cache在使用checkpoint这个时候会保存cache的文件,而不会独立的跑一个单独的任务</p></blockquote></li></ol><pre class="mermaid">graph LRsc-->map-reduceByKey-->cache--保存-->CheckPointcache-->collect</pre><p><strong>大区别</strong></p><p>cache会添加新的依赖</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.ecust.rdd.persistimport org.apache.spark.rdd.RDDimport org.apache.spark.storage.StorageLevelimport org.apache.spark.&#123;SparkConf, SparkContext&#125;&#x2F;** * @author Jinxin Li * @create 2020-12-24 14:03 *&#x2F;object SparkCore03_RDD_CheckPoint &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;WordCountPersist&quot;).setMaster(&quot;local[1]&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val list &#x3D; List(&quot;Hello Spark&quot;, &quot;Hello Scala&quot;)    val listRDD: RDD[String] &#x3D; sc.makeRDD(list, 1)    val wordRDD: RDD[String] &#x3D; listRDD.flatMap(word &#x3D;&gt; word.split(&quot; &quot;))    val tupleRDD: RDD[(String, Int)] &#x3D; wordRDD.map(word &#x3D;&gt; (word, 1))    tupleRDD.cache()    println(tupleRDD.toDebugString)&#x2F;&#x2F;运行之前看血缘关系&#x2F;&#x2F;    tupleRDD.persist(StorageLevel.MEMORY_AND_DISK)&#x2F;&#x2F;    sc.setCheckpointDir(&quot;.&#x2F;checkPoint&quot;)&#x2F;&#x2F;    tupleRDD.checkpoint()    val groupRDD: RDD[(String, Iterable[Int])] &#x3D; tupleRDD.groupByKey()    groupRDD.collect().foreach(println)    println(&quot;----------------------------&quot;)    println(tupleRDD.toDebugString)&#x2F;&#x2F;运行之后看血缘    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">(1) MapPartitionsRDD[2] at map at SparkCore03_RDD_CheckPoint.scala:21 [Memory Deserialized 1x Replicated] |  MapPartitionsRDD[1] at flatMap at SparkCore03_RDD_CheckPoint.scala:20 [Memory Deserialized 1x Replicated] |  ParallelCollectionRDD[0] at makeRDD at SparkCore03_RDD_CheckPoint.scala:19 [Memory Deserialized 1x Replicated](Spark,CompactBuffer(1))(Hello,CompactBuffer(1, 1))(Scala,CompactBuffer(1))----------------------------(1) MapPartitionsRDD[2] at map at SparkCore03_RDD_CheckPoint.scala:21 [Memory Deserialized 1x Replicated] |       CachedPartitions: 1; MemorySize: 368.0 B; ExternalBlockStoreSize: 0.0 B; DiskSize: 0.0 B&#x2F;&#x2F;这里添加了新的依赖 |  MapPartitionsRDD[1] at flatMap at SparkCore03_RDD_CheckPoint.scala:20 [Memory Deserialized 1x Replicated] |  ParallelCollectionRDD[0] at makeRDD at SparkCore03_RDD_CheckPoint.scala:19 [Memory Deserialized 1x Replicated]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因此cache会在血缘关系中添加新的依赖,一旦出现问题,可以重头读取数据</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;使用checkPoint之后(1) MapPartitionsRDD[2] at map at SparkCore03_RDD_CheckPoint.scala:21 [] |  MapPartitionsRDD[1] at flatMap at SparkCore03_RDD_CheckPoint.scala:20 [] |  ParallelCollectionRDD[0] at makeRDD at SparkCore03_RDD_CheckPoint.scala:19 [](Spark,CompactBuffer(1))(Hello,CompactBuffer(1, 1))(Scala,CompactBuffer(1))----------------------------(1) MapPartitionsRDD[2] at map at SparkCore03_RDD_CheckPoint.scala:21 [] |  ReliableCheckpointRDD[4] at collect at SparkCore03_RDD_CheckPoint.scala:31 []<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用checkPoint会切断血缘关系,重新建立新的血缘关系等同于改变数据源</p><h3 id="12-3源码解析CheckPoint单独执行任务"><a href="#12-3源码解析CheckPoint单独执行任务" class="headerlink" title="12.3源码解析CheckPoint单独执行任务"></a>12.3源码解析CheckPoint单独执行任务</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;SparkContext.scala 2093-2095dagScheduler.runJob(rdd, cleanedFunc, partitions, callSite, resultHandler, localProperties.get)    progressBar.foreach(_.finishAll())    rdd.doCheckpoint()&#x2F;&#x2F;--&gt;&#x2F;&#x2F;runJob之后调用了doCheckPoint()方法&#x2F;&#x2F;-----------------------------&#x2F;&#x2F;RDD.scala 1789-1805 doCheckPointif (checkpointData.isDefined) &#123;    if (checkpointAllMarkedAncestors) &#123;        dependencies.foreach(_.rdd.doCheckpoint())          &#125;    checkpointData.get.checkpoint()&#x2F;&#x2F;如果需要checkPoint然后进行checkPoint&#125; else &#123;    dependencies.foreach(_.rdd.doCheckpoint())&#125;&#x2F;&#x2F;----------------------------------\&#x2F;&#x2F;org.apache.spark.rdd.LocalRDDCheckpointData 53-54if (missingPartitionIndices.nonEmpty) &#123;      rdd.sparkContext.runJob(rdd, action, missingPartitionIndices)&#125;&#x2F;&#x2F;单独执行任务<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-4使用CheckPoint恢复计算"><a href="#12-4使用CheckPoint恢复计算" class="headerlink" title="12.4使用CheckPoint恢复计算"></a>12.4使用CheckPoint恢复计算</h3><p>checkpoint会将结果写到hdfs上，当driver 关闭后数据不会被清除。所以可以在其他driver上重复利用该checkpoint的数据。</p><p>checkpoint write data:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">sc.setCheckpointDir(&quot;data&#x2F;checkpoint&quot;)val rddt &#x3D; sc.parallelize(Array((1,2),(3,4),(5,6)),2)rddt.checkpoint()rddt.count() &#x2F;&#x2F;要action才能触发checkpoint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>read from checkpoint data:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package org.apache.sparkimport org.apache.spark.rdd.RDDobject RDDUtilsInSpark &#123;  def getCheckpointRDD[T](sc:SparkContext, path:String) &#x3D; &#123;  &#x2F;&#x2F;path要到part-000000的父目录    val result : RDD[Any] &#x3D; sc.checkpointFile(path)    result.asInstanceOf[T]  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>note:因为sc.checkpointFile(path)是private[spark]的，所以该类要写在自己工程里新建的package org.apache.spark中</em></p><p>example:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">val rdd : RDD[(Int, Int)]&#x3D; RDDUtilsInSpark.getCheckpointRDD(sc, &quot;data&#x2F;checkpoint&#x2F;963afe46-eb23-430f-8eae-8a6c5a1e41ba&#x2F;rdd-0&quot;)   println(rdd.count())   rdd.collect().foreach(println)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这样就可以原样复原了。</p><p><strong>Demo</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkCore05_RDD_CheckPointUse &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setAppName(&quot;WordCountPersist&quot;).setMaster(&quot;local[1]&quot;)    val sc &#x3D; new SparkContext(sparkConf)&#x2F;&#x2F;使用工具类,注意工具类的包,要自己建立,注意泛型    val rdd: RDD[(String, Int)] &#x3D; RDDUtilsInSpark.getCheckpointRDD[RDD[(String, Int)]](sc, &quot;.&#x2F;checkPoint&#x2F;1186c961-ddb4-4af5-b7dc-6cc99776490b&#x2F;rdd-2&quot;)      &#x2F;&#x2F;之前的map之后reduceBykey之前的checkPoint文件    val result: RDD[(String, Int)] &#x3D; rdd.reduceByKey(_ + _)    result.collect().foreach(println)    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">import org.apache.spark.rdd.RDD&#x2F;&#x2F;可以恢复checkPoint的工具类,注意放置的包object RDDUtilsInSpark &#123;  def getCheckpointRDD[T](sc: SparkContext, path: String) &#x3D; &#123;    &#x2F;&#x2F;path要到part-000000的父目录    val result: RDD[Any] &#x3D; sc.checkpointFile(path)    result.asInstanceOf[T]  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-RDD自定义分区器"><a href="#13-RDD自定义分区器" class="headerlink" title="13.RDD自定义分区器"></a>13.RDD自定义分区器</h2><p>Spark目前支持Hash分区、Range分区和用户自定义分区。Hash分区为当前的默认分区。分区器直接决定了RDD中分区的个数、RDD中每条数据经过Shuffle后进入哪个分区和Reduce的个数。</p><p>1）注意：</p><p>（1）只有Key-Value类型的RDD才有分区器，非Key-Value类型的RDD分区的值是None</p><p>（2）每个RDD的分区ID范围：0~numPartitions-1，决定这个值是属于那个分区的。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.ecust.rdd.partitionimport org.apache.spark.rdd.RDDimport org.apache.spark.&#123;HashPartitioner, Partitioner, SparkConf, SparkContext&#125;&#x2F;** * @author Jinxin Li * @create 2020-12-26 10:52 * 自定义分区规则 *&#x2F;object SparkCore01_RDD_Partitioner &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;Partitioner&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val rdd: RDD[(String, String)] &#x3D; sc.makeRDD(List(      (&quot;nba&quot;, &quot;xxxxxxxxxxxxxxx&quot;),      (&quot;wba&quot;, &quot;aaaaaaaaaaaaaa&quot;),      (&quot;cba&quot;, &quot;dddddddddddd&quot;),      (&quot;wcba&quot;, &quot;ppppppppppppppppppppppp&quot;)    ), 3)    &#x2F;*    自动义分区器,决定数据去哪个分区     *&#x2F;    val rddPar: RDD[(String, String)] &#x3D; rdd.partitionBy(new MyPartitioner())    rddPar.saveAsTextFile(&quot;.&#x2F;par&quot;)    sc.stop()  &#125;  class MyPartitioner extends Partitioner&#123;    &#x2F;&#x2F;分区数量    override def numPartitions: Int &#x3D; 3    &#x2F;&#x2F;返回Int类型,返回数据的分区索引 从零开始    &#x2F;&#x2F;Key表示数据的KV到底是什么    &#x2F;&#x2F;根据数据的key值返回数据所在分区索引    override def getPartition(key: Any): Int &#x3D; &#123;      key match &#123;        case &quot;nba&quot; &#x3D;&gt; 0        case &quot;cba&quot; &#x3D;&gt; 1        case _ &#x3D;&gt; 2      &#125;      &#x2F;*if (key &#x3D;&#x3D; &quot;nba&quot;)&#123;        0      &#125; else if(key &#x3D;&#x3D; &quot;cba&quot;)&#123;        1      &#125;else&#123;        2      &#125;*&#x2F;    &#125;  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-RDD的存储与保存"><a href="#14-RDD的存储与保存" class="headerlink" title="14.RDD的存储与保存"></a>14.RDD的存储与保存</h2><p>Spark的数据读取及数据保存可以从两个维度来作区分：文件格式以及文件系统。</p><p>文件格式分为：Text文件、Json文件、Csv文件、Sequence文件以及Object文件；</p><p>文件系统分为：本地文件系统、HDFS以及数据库。</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;集群文件系统存储示例hdfs:&#x2F;&#x2F;hadoop102:8020&#x2F;input&#x2F;1.txt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="15-RDD的累加器"><a href="#15-RDD的累加器" class="headerlink" title="15.RDD的累加器"></a>15.RDD的累加器</h2><p>如果没有累加器,我们计算时只能使用reduce,要想把executor的变量拉回到Driver困难</p><p><img src="https://i.loli.net/2020/12/26/b24Xm8BYltu1PF3.png" alt="引入问题"></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;学前测试object SparkCore02_RDD_accumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;Partitioner&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val rdd: RDD[Int] &#x3D; sc.makeRDD(List(1, 2, 3, 4),1)    var sum:Int &#x3D; 0    &#x2F;&#x2F;行动算子返回非RDD    rdd.foreach(num&#x3D;&gt;&#123;      sum+&#x3D;num      println(&quot;executor:&quot;+sum)    &#125;)    println(&quot;driver:&quot;+sum)&#x2F;&#x2F;打印结果为零,Driver-&gt;executor,结果返回不了    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/26/9PtGzVBQ8dD3sya.png" alt="累加器的主要目的"></p><p>累加器：分布式共享只写变量。（Executor和Executor之间不能读数据）</p><p>累加器用来把Executor端变量信息聚合到Driver端。在Driver程序中定义的变量，在Executor端的每个task都会得到这个变量的一份新的副本，每个task更新这些副本的值后，传回Driver端进行merge。</p><p><strong>Long累加器Demo</strong></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkCore03_RDD_accumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;Partitioner&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val rdd: RDD[Int] &#x3D; sc.makeRDD(List(1, 2, 3, 4),1)    &#x2F;&#x2F;todo 自定义累加器    val sum: LongAccumulator &#x3D; sc.longAccumulator(&quot;sum&quot;)    &#x2F;&#x2F;系统自带了一些累加器&#x2F;&#x2F;    sc.doubleAccumulator&#x2F;&#x2F;    sc.collectionAccumulator()    rdd.foreach(num&#x3D;&gt;sum.add(num))    println(&quot;driver:&quot;+sum.value)    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>特殊情况</strong></p><p>少加:转换算子中调用累加器,如果没有行动算子的话,name不会执行</p><p>多加:转换算子中调用累加器,多次行动算子会调用多次,一般会放在行动算子中进行操作</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkCore04_RDD_accumulator &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;Partitioner&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val rdd: RDD[Int] &#x3D; sc.makeRDD(List(1, 2, 3, 4),1)    &#x2F;&#x2F;todo 自定义累加器    val sum: LongAccumulator &#x3D; sc.longAccumulator(&quot;sum&quot;)    &#x2F;&#x2F;系统自带了一些累加器&#x2F;&#x2F;    sc.doubleAccumulator&#x2F;&#x2F;    sc.collectionAccumulator()    val result: RDD[Unit] &#x3D; rdd.map(num &#x3D;&gt; sum.add(num))        result.collect()    result.collect()&#x2F;&#x2F;两个行动算子会多加    println(&quot;driver:&quot;+sum.value)    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="16-RDD的自定义广播变量"><a href="#16-RDD的自定义广播变量" class="headerlink" title="16.RDD的自定义广播变量"></a>16.RDD的自定义广播变量</h2><p>分布式共享只写变量</p><p>表示累加器的值互相之间是没法访问的,自己能读自己,只有Driver进行读到,然后在Driver端进行合并</p><p>我们可以将一些Shuffle的东西使用累加器来实现(==优化==)</p><p>比方:需要shuffle的方法就不要shuffle了</p><p>闭包数据,都是以Task为单位发送的,每个人物中包含的闭包数据这样可能会导致,一个Executor中含有大量的重复的数据,并且占用大量的内存</p><p>Executor本质其实就是JVM,所以在启动时,会自动分配内存</p><p> 完全可以将任务中的闭包数据放置到Executor的内存中,达到共享的目的</p><p>Spark中的广播变量可以将闭包的数据保存在Executor的内存中</p><p>分布式共享只读变量</p><pre class="mermaid">graph TDmap-->Executor/task1map-->Executor/task2map-->Executor/task3</pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkCore04_RDD_BroadCast &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local&quot;).setAppName(&quot;acc&quot;)    val sc &#x3D; new SparkContext(sparkConf)    val rdd1: RDD[(String, Int)] &#x3D; sc.makeRDD(List((&quot;a&quot;, 1), (&quot;b&quot;, 2), (&quot;c&quot;, 3)))    val map: mutable.Map[String, Int] &#x3D; mutable.Map((&quot;a&quot;, 4), (&quot;b&quot;, 5), (&quot;c&quot;, 6))    &#x2F;&#x2F;定义广播变量    val value: Broadcast[mutable.Map[String, Int]] &#x3D; sc.broadcast(map)    &#x2F;&#x2F;每个task都有一份数据    val result: RDD[(String, (Int, Int))] &#x3D; rdd1.map &#123; case (w, c) &#x3D;&gt; &#123;      val i: Int &#x3D; value.value.getOrElse(w, 0)      (w, (c, i))    &#125;&#125;    result.collect().foreach(println)    sc.stop()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SparkSQL</title>
      <link href="2021/01/03/Spark_SparkSQL/"/>
      <url>2021/01/03/Spark_SparkSQL/</url>
      
        <content type="html"><![CDATA[<h1 id="SparkSQL-Abstract"><a href="#SparkSQL-Abstract" class="headerlink" title="SparkSQL_Abstract"></a>SparkSQL_Abstract</h1><h2 id="什么是Spark-SQL"><a href="#什么是Spark-SQL" class="headerlink" title="什么是Spark SQL"></a>什么是Spark SQL</h2><p>Spark SQL是Spark用于结构化数据(Structured Data) 处理的Spark模块</p><p>Spark SQL的底层实现方式是<code>DataFrame API</code> 和 <code>DataSets API</code> </p><p>Spark SQL 运行在 Spark Core 之上。它允许开发人员从 Hive 表和 Parquet 文件中导入关系数据，在导入的数据和现有 rdd 上运行 SQL 查询，并轻松地将 rdd 写到 Hive 表或 Parquet 文件中。</p><p>Spark SQL 引入了称为 <code>Catalyst</code> 的可扩展优化器，因为它有助于在 Bigdata 支持广泛的数据源和算法。</p><h2 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h2><p>DataFrame是一种以RDD为基础的分布式数据集，类似于传统数据库中的二维表格</p><h3 id="0x0-主要区别"><a href="#0x0-主要区别" class="headerlink" title="0x0 主要区别"></a>0x0 主要区别</h3><p>DataFrame也是懒执行的</p><p>DataFrame与RDD的<strong>主要区别</strong>在于，前者带有schema元信息，即DataFrame所表示的二维表数据集的每一列都带有名称和类型。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/DataFrame%E4%B8%8ERDD%E7%9A%84%E5%8C%BA%E5%88%AB.png" alt="DataFrame与RDD的区别"></p><h3 id="0x1-DataFrame优势"><a href="#0x1-DataFrame优势" class="headerlink" title="0x1 DataFrame优势"></a>0x1 DataFrame优势</h3><p>提供内存管理和执行优化。</p><p>自定义内存管理: 这也被称为项目 <strong>Tungsten</strong>钨。由于数据以二进制格式存储在off-heap memory中，因此节省了大量内存。除此之外，没有垃圾收集开销。</p><p>优化执行计划: 这也称为查询优化器。使用这个，可以为查询的执行创建一个优化的执行计划。一旦创建了优化的计划，最终在 Spark 的 RDDs 上执行。</p><h3 id="0x2-优化器Catalyst"><a href="#0x2-优化器Catalyst" class="headerlink" title="0x2 优化器Catalyst"></a>0x2 优化器Catalyst</h3><ul><li>Analyze logical plan to solve references 分析逻辑计划以解决引用</li><li>Logical plan optimization 逻辑计划优化</li><li>Physical planning 物理规划</li><li>Code generation to compile part of a query to Java bytecode.把一部分代码转换为字节码文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/SparkSQL%E4%BC%98%E5%8C%96%E6%A1%88%E4%BE%8B.png" alt="SparkSQL优化案例"></p><p>如图所示,底层执行了一些优化策略,举个最简单的例子,两个RDD的数据源想做个连接,连接之后对数据进行过滤,这个时候可能会有产生笛卡尔乘积,而且再数据量大的情况下存在shuffle来说,性能会大大下降,甚至超过内存无法进行计算</p><p>DF底层会根据逻辑先进行filter然后再进行join,大大减少了数据量</p><h2 id="DataSet"><a href="#DataSet" class="headerlink" title="DataSet"></a>DataSet</h2><p>1.6版本后新的抽象</p><p>DataSet是分布式数据集合。</p><p>DataSet是强类型的。比如可以有DataSet[Car]，DataSet[User]。具有类型安全检查</p><p><code>DataFrame</code>是<code>DataSet</code>的特例,<code>type DataFrame = DataSet[Row]</code> ，<code>Row</code>是一个类型，跟Car、User这些的类型一样，所有的表结构信息都用Row来表示。</p><h3 id="0x0-为什么是DataSet"><a href="#0x0-为什么是DataSet" class="headerlink" title="0x0 为什么是DataSet"></a>0x0 为什么是DataSet</h3><p>DataFrame虽然定义了保存了表结构的原信息</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">ResultSet rs &#x3D; pstat.executeQuery(&quot;select id,name from user&quot;);while (rs.next())&#123;    rs.getInt(1)&#x2F;&#x2F;我们知道是id,但是如果我们sql改变顺序,        &#x2F;&#x2F;比如name,id        &#x2F;&#x2F;调用结果就得修改&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以spark就对DataFrame的里面的表结构封装成一个对象,直接使用对象点的方式进行调用,对象的类型就设置为Row类型</p><p>DataSet(row) = DataFrame</p><h3 id="0x1-Encoder"><a href="#0x1-Encoder" class="headerlink" title="0x1 Encoder"></a>0x1 Encoder</h3><p>Encoder编码器是 Spark SQL 中序列化和反序列化(SerDes)框架的基本概念。编码器在<strong>对象</strong>和 Spark 的内部<strong>二进制格式</strong>之间进行转换</p><h2 id="SparkSession"><a href="#SparkSession" class="headerlink" title="SparkSession"></a>SparkSession</h2><p>在老的版本中，SparkSQL提供两种SQL查询起始点：</p><p>一个叫SQLContext，用于Spark自己提供的SQL查询；</p><p>一个叫HiveContext，用于连接Hive的查询。</p><p>SparkSession是Spark最新的SQL查询起始点，实质上是SQLContext和HiveContext的组合，所以在SQLContext和HiveContext上可用的API在SparkSession上同样是可以使用的。</p><p>SparkSession内部封装了SparkContext，所以计算实际上是由SparkContext完成的。当我们使用spark-shell的时候，Spark框架会自动的创建一个名称叫做Spark的SparkSession，就像我们以前可以自动获取到一个sc来表示SparkContext。</p><h2 id="DS-DF-RDD转换"><a href="#DS-DF-RDD转换" class="headerlink" title="DS-DF-RDD转换"></a>DS-DF-RDD转换</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/DataFrame%E4%B8%8ERDD%E7%9A%84%E8%BD%AC%E6%8D%A2%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="DataFrame与RDD的转换关系图"></p><p>￼</p><p>由DataFrame转换过来的RDD的是Row类型</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--1.RDD &lt;&#x3D;&gt; DF--a. RDD --&gt; DF rdd.toDF(&quot;列名1&quot;，&quot;列名2&quot;，...)--b. DF --&gt; RDDdf.rdd--2.RDD &lt;&#x3D;&gt; DS--a、RDD --&gt; DS--将rdd的数据转换为样例类的格式。    rdd.toDS --这里声明一点--rdd如果是字符串创建来的,是没有能力toDS的--这里要实现把对象准备好val rdd &#x3D; sc.makeRDD(List(Emp(30,&quot;张三&quot;),Emp(40,&quot;李四&quot;))rdd.toDS--这样才能真正的转变--b. DS --&gt; RDDds.rdd-- 3.DF &lt;&#x3D;&gt; DS--a. DF --&gt; DS     df.as[样例类]--该样例类必须存在，而且df中的数据个样例类对应--b. DS --&gt; DSds.toDF<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%B8%89%E8%80%85%E8%BD%AC%E6%8D%A2%E5%9B%BE.png" alt="DS与DF,RDD转换图"></p><h1 id="SparkSQL-API"><a href="#SparkSQL-API" class="headerlink" title="SparkSQL_API"></a>SparkSQL_API</h1><h2 id="IDEA中使用SparkSQL"><a href="#IDEA中使用SparkSQL" class="headerlink" title="IDEA中使用SparkSQL"></a>IDEA中使用SparkSQL</h2><h3 id="0x0添加依赖"><a href="#0x0添加依赖" class="headerlink" title="0x0添加依赖"></a>0x0添加依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.spark<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spark-sql_2.12<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.4.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x1构建sparkSession对象"><a href="#0x1构建sparkSession对象" class="headerlink" title="0x1构建sparkSession对象"></a>0x1构建sparkSession对象</h3><ol><li>重要：连接SparkSQL</li></ol><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F; 1. 创建环境val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;sparksql&quot;)&#x2F;&#x2F; 2. 创建SparkSession对象val spark: SparkSession &#x3D; SparkSession.builder().config(sparkConf).getOrCreate()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>添加隐式转换，每次构建完对象以后都需要增加这个 隐式转换的代码</li></ol><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"> &#x2F;&#x2F; 3. 增加隐式转换    import spark.implicits._&quot;1. 这里的spark不是Scala中的包名，而是创建的sparkSession对象的变量名称 2. spark对象不能使用var声明，因为Scala只支持val修饰的对象的引入&quot;&#x2F;&#x2F;为什么要导入这个对象的隐式转换呢,为了方便调用 $age等<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>说明</li></ol><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 为啥要导入隐式转换sparkSQL是在spark的基础上进行延伸，属于功能的扩展，使用隐式转换，体现了OCP开发原则。--构建对象为什么不直接new呢？因为sparkSession是对sparkContext的包装，创建这个对象时，需要很多步骤，将这些过程进行封装，让开发更容易，使用一个构建器来创建对象。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x3代码实现"><a href="#0x3代码实现" class="headerlink" title="0x3代码实现"></a>0x3代码实现</h3><p>直接从SparkSQL里看</p><p>这里仅仅展示一个示例</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git clone git@github.com:fourgold&#x2F;Spark.git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SparkSQL01_DSL &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;创建SparkSQL的运行环境    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;BASIC&quot;)    val sparkSession: SparkSession &#x3D; SparkSession.builder().config(sparkConf).getOrCreate()    &#x2F;&#x2F;DataFrame    val dataFrame: DataFrame &#x3D; sparkSession.read.json(&quot;.&#x2F;input&#x2F;user.json&quot;)&#x2F;&#x2F;    dataFrame.show()    &#x2F;&#x2F;DSL语句使用调用方法,类似于Flink总的TABLE API与SQL API    dataFrame.select(&quot;name&quot;,&quot;age&quot;).show()    import sparkSession.implicits._    dataFrame.select($&quot;age&quot;+1).as(&quot;age&quot;).show()    &#x2F;&#x2F;怎么选择两列    &#x2F;&#x2F;可以使用单引号代表引用    dataFrame.select(&#39;age+1).as(&quot;age&quot;).show()    &#x2F;&#x2F;关闭环境    sparkSession.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义UDF函数"><a href="#自定义UDF函数" class="headerlink" title="自定义UDF函数"></a>自定义UDF函数</h2><p>需求:将一个字段的string,加一个前缀</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object Demo02_Practice &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val spark: SparkSession &#x3D; SparkSession.builder().config(new SparkConf().setMaster(&quot;local[1]&quot;).setAppName(&quot;SparkSQL&quot;)).getOrCreate()    &#x2F;&#x2F;用户自定函数    import spark.implicits._    val df: DataFrame &#x3D; spark.read.json(&quot;Day08&#x2F;input&#x2F;person.json&quot;)    df.createOrReplaceTempView(&quot;user&quot;)    df.show()    &#x2F;&#x2F;自定义udf函数    spark.udf.register(&quot;addName&quot;,(name:String)&#x3D;&gt;&quot;name:&quot;+name)    spark.sql(&quot;select age,addName(username) from user&quot;).show()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义UDAF函数"><a href="#自定义UDAF函数" class="headerlink" title="自定义UDAF函数"></a>自定义UDAF函数</h2><p>需求:</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E8%87%AA%E5%AE%9AUDAF%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E9%9C%80%E6%B1%82.png" alt="自定义UDAF函数实现需求"></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.SparkSqlimport org.apache.spark.sql.Rowimport org.apache.spark.sql.expressions.&#123;MutableAggregationBuffer, UserDefinedAggregateFunction&#125;import org.apache.spark.sql.types.&#123;DataType, DoubleType, LongType, StructField, StructType&#125;class MyAvg extends UserDefinedAggregateFunction&#123;  &#x2F;&#x2F;输入类型  override def inputSchema: StructType &#x3D; StructType(Array(StructField(&quot;age&quot;,LongType)))  &#x2F;&#x2F;缓冲区  override def bufferSchema: StructType &#x3D;StructType(Array(StructField(&quot;sum&quot;,LongType),StructField(&quot;count&quot;,LongType)))  &#x2F;&#x2F;返回值的数据类型  override def dataType: DataType &#x3D; DoubleType  &#x2F;&#x2F;稳定性：对于相同的输入是否一直返回相同的输出。  override def deterministic: Boolean &#x3D; true  &#x2F;&#x2F;缓冲区的初始化  override def initialize(buffer: MutableAggregationBuffer): Unit &#x3D; &#123;    buffer(0) &#x3D; 0L&#x2F;&#x2F;sum    buffer(1) &#x3D; 0L&#x2F;&#x2F;count  &#125;  &#x2F;&#x2F; 更新缓冲区中的数据  override def update(buffer: MutableAggregationBuffer, input: Row): Unit &#x3D; &#123;    if (!input.isNullAt(0)) &#123;      buffer(0) &#x3D; buffer.getLong(0) + input.getLong(0)      buffer(1) &#x3D; buffer.getLong(1) + 1    &#125;  &#125;  &#x2F;&#x2F; 合并缓冲区  override def merge(buffer1: MutableAggregationBuffer, buffer2: Row): Unit &#x3D; &#123;    buffer1(0) &#x3D; buffer1.getLong(0) + buffer2.getLong(0)    buffer1(1) &#x3D; buffer1.getLong(1) + buffer2.getLong(1)  &#125;  override def evaluate(buffer: Row): Any &#x3D; buffer.getLong(0).toDouble&#x2F;buffer.getLong(1).toDouble&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>聚合函数的使用</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;使用package com.SparkSqlimport org.apache.spark.SparkConfimport org.apache.spark.sql.expressions.UserDefinedAggregateFunctionimport org.apache.spark.sql.&#123;DataFrame, SparkSession&#125;&#x2F;** * @author Jinxin Li * @create 2020-11-03 16:55 *&#x2F;object Demo02_Practice &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val spark: SparkSession &#x3D; SparkSession.builder().config(new SparkConf().setMaster(&quot;local[1]&quot;).setAppName(&quot;SparkSQL&quot;)).getOrCreate()    &#x2F;&#x2F;用户自定函数    import spark.implicits._    val df: DataFrame &#x3D; spark.read.json(&quot;Day08&#x2F;input&#x2F;person.json&quot;)    df.createOrReplaceTempView(&quot;user&quot;)    df.show()    &#x2F;&#x2F;自定义udf函数    spark.udf.register(&quot;addName&quot;,(name:String)&#x3D;&gt;&quot;name:&quot;+name)    spark.sql(&quot;select age,addName(username) from user&quot;).show()    &#x2F;&#x2F;在spark中注册聚合函数&#x3D;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;    var MyAvg &#x3D; new MyAvg    spark.udf.register(&quot;avgAge&quot;,MyAvg)    spark.sql(&quot;select avgAge(age) from user&quot;).show()    spark.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="自定义强类型AggregateUDAF函数"><a href="#自定义强类型AggregateUDAF函数" class="headerlink" title="自定义强类型AggregateUDAF函数"></a>自定义强类型AggregateUDAF函数</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">package com.SparkSqlimport org.apache.spark.sql.&#123;Encoder, Encoders&#125;import org.apache.spark.sql.expressions.Aggregator&#x2F;** * @author Jinxin Li * @create 2020-11-03 19:16 * 求user的平均年龄 * 1.继承 * 2.定义泛型 * In 输入数据类型 * Buf * out Double输出的数据类型 * 3.重写方法(6) *&#x2F;case class Buff(var total:Long,var count:Long)class MyAvg2 extends Aggregator[Long,Buff,Double]&#123;  &#x2F;&#x2F;scala用zero,初始值,零值  &#x2F;&#x2F;缓冲区的初始化  override def zero: Buff &#x3D; &#123;    Buff(0L,0L)  &#125;  &#x2F;&#x2F;根据输入的数据更新缓冲区的数据  override def reduce(b: Buff, a: Long): Buff &#x3D; &#123;    b.total +&#x3D; a    b.count +&#x3D; 1    b  &#125;  override def merge(b1: Buff, b2: Buff): Buff &#x3D; &#123;    b1.count +&#x3D; b2.count    b1.total +&#x3D; b2.total    b1  &#125;  override def finish(reduction: Buff): Double &#x3D; reduction.total.toDouble&#x2F;reduction.count.toDouble  override def bufferEncoder: Encoder[Buff] &#x3D; Encoders.product  override def outputEncoder: Encoder[Double] &#x3D; Encoders.scalaDouble&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="0x0注册"><a href="#0x0注册" class="headerlink" title="0x0注册"></a>0x0注册</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">val MyAvg2 &#x3D; new MyAvg2    spark.udf.register(&quot;avgAge1&quot;, functions.udaf(MyAvg2))    spark.sql(&quot;select avgAge1(age) from user&quot;).show()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="0x1使用"><a href="#0x1使用" class="headerlink" title="0x1使用"></a>0x1使用</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;** * 弱类型操作,只有0,1 没有类型的概念 * 没有类型的概念 * 强类型通过属性操作,跟属性没关系 * 自定属性类,定义泛型 *&#x2F;object SparkSQL03_UDAF &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    &#x2F;&#x2F;创建SparkSQL的运行环境    val sparkConf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;BASIC&quot;)    val sparkSession: SparkSession &#x3D; SparkSession.builder().config(sparkConf).getOrCreate()    &#x2F;&#x2F;聚合函数也是比较重要的,比如,平均值,最大值,最小值    &#x2F;&#x2F;DataFrame    val dataFrame: DataFrame &#x3D; sparkSession.read.json(&quot;.&#x2F;input&#x2F;user.json&quot;)&#x2F;&#x2F;    dataFrame.show()    &#x2F;&#x2F;将数据创建临时表    dataFrame.createOrReplaceTempView(&quot;user&quot;)    &#x2F;&#x2F;view只能查不能改    sparkSession.udf.register(&quot;prefixName&quot;,(name:String)&#x3D;&gt;&#123;&quot;name+&quot;+name&#125;)    &#x2F;&#x2F;将某一字段的名字加上前缀    sparkSession.sql(      &quot;&quot;&quot;        |select prefixName(name),age from user        |&quot;&quot;&quot;.stripMargin).show()    &#x2F;&#x2F;使用udaf-aggregator函数    val myAvg &#x3D; new MyAvg()    sparkSession.udf.register(&quot;myAvg&quot;,functions.udaf(new MyAvgAgg))    sparkSession.sql(      &quot;&quot;&quot;        |select myAvg(age) as avgAge from user        |&quot;&quot;&quot;.stripMargin).show()    &#x2F;&#x2F;关闭环境    sparkSession.close()  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SparkSQL-Data"><a href="#SparkSQL-Data" class="headerlink" title="SparkSQL_Data"></a>SparkSQL_Data</h1><h2 id="加载数据"><a href="#加载数据" class="headerlink" title="加载数据"></a>加载数据</h2><p>如果不指定加载类型,默认的保存与加载类型是parquet</p><p>spark.read.load 是加载数据的通用方法</p><p>如果读取不同格式的数据，可以对不同的数据格式进行设定</p><p>我们前面都是使用 read API 先把文件加载到 DataFrame 然后再查询，其实，我们也可以直接在文件上查询</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scala&gt; spark.read. scala&gt; spark.read.format(&quot;…&quot;)[.option(&quot;…&quot;)].load(&quot;…&quot;) #format(&quot;…&quot;)：指定加载的数据类型，包括&quot;csv&quot;、&quot;jdbc&quot;、&quot;json&quot;、&quot;orc&quot;、&quot;parquet&quot;和&quot;textFile&quot;。#load(&quot;…&quot;)：在&quot;csv&quot;、&quot;jdbc&quot;、&quot;json&quot;、&quot;orc&quot;、&quot;parquet&quot;和&quot;textFile&quot;格式下需要传入加载数据的路径。 #option(&quot;…&quot;)：在&quot;jdbc&quot;格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable #直接在文件上进行查询:  文件格式.&#96;文件路径&#96; scala&gt; spark.sql(&quot;select * from json.&#96;&#x2F;opt&#x2F;module&#x2F;data&#x2F;user.json&#96;&quot;).show <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>实战</strong>:JSON与Parquet文件的读取与保存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">spark.read.load()#默认情况下读取的格式是parquet文件val df &#x3D; spark.read.load(&quot;&#x2F;opt&#x2F;module&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;resources&#x2F;users.parquet&quot;)#格式,例子的地方#&#x2F;opt&#x2F;module&#x2F;spark&#x2F;examples&#x2F;src&#x2F;main&#x2F;resources#保存数据 SparkSQL默认读取或者保存的文件格式parquetdf.write.save(&quot;output&quot;)#就想读json文件val df &#x3D; spark.read.format(&quot;json&quot;).load(&quot;data&#x2F;user.json&quot;)#比较简单的json文件spark.read.json()#保存json文件df.write.format(&quot;json&quot;).save(&quot;output1&quot;)#选择表 转换过程由spark自己完成 注意使用飘号spark.sql(&quot;select * from json.&#96;data&#x2F;user.json&#96;&quot;).show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="保存数据"><a href="#保存数据" class="headerlink" title="保存数据"></a>保存数据</h2><p>df.write.save 是保存数据的通用方法 </p><p>scala&gt;df.write. csv  jdbc   json  orc   parquet textFile… … 如果保存不同格式的数据，可以对不同的数据格式进行设定 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scala&gt;df.write. csv  jdbc   json  orc   parquet textFile… … <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/SparkSQL%E6%95%B0%E6%8D%AE%E4%BF%9D%E5%AD%98%E6%A0%BC%E5%BC%8F.png" alt="SparkSQL数据的保存"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scala&gt;df.write.format(&quot;…&quot;)[.option(&quot;…&quot;)].save(&quot;…&quot;) # format(&quot;…&quot;)：指定保存的数据类型，包括&quot;csv&quot;、&quot;jdbc&quot;、&quot;json&quot;、&quot;orc&quot;、&quot;parquet&quot;和&quot;textFile&quot;。 # save (&quot;…&quot;)：在&quot;csv&quot;、&quot;orc&quot;、&quot;parquet&quot;和&quot;textFile&quot;格式下需要传入保存数据的路径。 # option(&quot;…&quot;)：在&quot;jdbc&quot;格式下需要传入 JDBC 相应参数，url、user、password 和 dbtable # 保存操作可以使用 SaveMode, 用来指明如何处理数据，使用 mode()方法来设置。 有一点很重要: 这些 SaveMode 都是没有加锁的, 也不是原子操作。 #SaveMode 是一个枚举类，其中的常量包括： #SaveMode.ErrorIfExists(default) &quot;error&quot;(default) 如果文件已经存在则抛出异常 #SaveMode.Append &quot;append&quot; 如果文件已经存在则追加 #SaveMode.Overwrite &quot;overwrite&quot; 如果文件已经存在则覆盖 #SaveMode.Ignore &quot;ignore&quot; 如果文件已经存在则忽略 df.write.mode(&quot;append&quot;).json(&quot;&#x2F;opt&#x2F;module&#x2F;data&#x2F;output&quot;) .save(&quot;output&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JSON-Parquet-CSV"><a href="#JSON-Parquet-CSV" class="headerlink" title="JSON/Parquet/CSV"></a>JSON/Parquet/CSV</h2><h3 id="Parquet"><a href="#Parquet" class="headerlink" title="Parquet"></a>Parquet</h3><p>Spark SQL 的默认数据源为 Parquet 格式。Parquet 是一种能够有效存储嵌套数据的列式存储格式。<br>数据源为 Parquet 文件时，Spark SQL 可以方便的执行所有的操作，不需要使用 format。<br>修改配置项 spark.sql.sources.default，可修改默认数据源格式。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">scala&gt; val df &#x3D; spark.read.load(&quot;examples&#x2F;src&#x2F;main&#x2F;resources&#x2F;users.parquet&quot;) scala&gt; df.showscala&gt; var df &#x3D; spark.read.json(&quot;&#x2F;opt&#x2F;module&#x2F;data&#x2F;input&#x2F;people.json&quot;) #保存为 parquet 格式 scala&gt; df.write.mode(&quot;append&quot;).save(&quot;&#x2F;opt&#x2F;module&#x2F;data&#x2F;output&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><p>Spark SQL 能够自动推测 JSON 数据集的结构，并将它加载为一个 Dataset[Row]. 可以通过 SparkSession.read.json()去加载 JSON 文件。 </p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#将读取的文件保存val df &#x3D; spark.read.json(&quot;data&#x2F;user.json&quot;)#保存 因为保存模式的原因,再次保存会报错df.write.format(&quot;json&quot;).save(&quot;output&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>注意：Spark 读取的 JSON 文件不是传统的 JSON 文件，每一行都应该是一个 JSON 串。格式如下： </p><pre class="line-numbers language-json" data-language="json"><code class="language-json">&#123;&quot;name&quot;:&quot;Michael&quot;&#125; &#123;&quot;name&quot;:&quot;Andy&quot;， &quot;age&quot;:30&#125; [&#123;&quot;name&quot;:&quot;Justin&quot;， &quot;age&quot;:19&#125;,&#123;&quot;name&quot;:&quot;Justin&quot;， &quot;age&quot;:19&#125;] #因为Spark读取是一行一行读的,所以一行应该是一个标准的json文件<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CSV"><a href="#CSV" class="headerlink" title="CSV"></a>CSV</h3><p>Spark SQL 可以配置 CSV 文件的列表信息，读取 CSV 文件,CSV 文件的第一行设置为数据列 spark</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#option例子是分号 optipn-分隔符 header-表头 inferSchema-??spark.read.format(&quot;csv&quot;).option(&quot;sep&quot;, &quot;;&quot;).option(&quot;inferSchema&quot;, &quot;true&quot;).option(&quot;header&quot;, &quot;true&quot;).load(&quot;data&#x2F;user.csv&quot;) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="HIVE"><a href="#HIVE" class="headerlink" title="HIVE"></a>HIVE</h2><p>Apache Hive 是 Hadoop 上的 SQL 引擎，Spark SQL 编译时可以包含 Hive 支持，也可以不包含。</p><p>包含 Hive 支持的 Spark SQL 可以支持 Hive 表访问、UDF (用户自定义函数)以及 Hive 查询语言(HiveQL/HQL)等。</p><p>SparkSQL想连接HIVE有两种连接方式</p><h3 id="内置Hive"><a href="#内置Hive" class="headerlink" title="内置Hive"></a>内置Hive</h3><p>SparkSQL本身也具有元数据,数据仓库,全部都有,通过内置Hive实现</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#显示全部表spark.sql(&quot;show tables&quot;).show<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现内部文件系统自动生成了metadb</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Spark%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6.png" alt="Spark内置文件系统"></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># 导入数据val df &#x3D; spark.read.json(&quot;data&#x2F;user.json&quot;)# 创建表spark.sql(&quot;create table test(age int)&quot;)#查看表spark.sql(&quot;show tables&quot;).show#加载数据spark.sql(&quot;load data local inpath &#39;data&#x2F;user.text&#39; into table test&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/spark%E5%86%85%E7%BD%AEhive%E7%9A%84warehouse.png" alt="spark-sql数据仓库"></p><h3 id="外置Hive"><a href="#外置Hive" class="headerlink" title="外置Hive"></a>外置Hive</h3><p>一般使用外置Hive如果想连接外部已经部署好的 Hive，需要通过以下几个步骤： </p><ol><li> Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 conf/目录下 </li><li> 把 Mysql 的驱动 copy 到 jars/目录下 </li><li> 如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下 </li><li> 重启 spark-shell </li></ol><p>然后查看一下数据库</p><p>已经连接到Hive了</p><h3 id="Beeline"><a href="#Beeline" class="headerlink" title="Beeline"></a>Beeline</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin&#x2F;spark-sql#为什么带有(default)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/spark-sql.png" alt="spark-sql显示bug"></p><p>Spark Thrift Server 是 Spark 社区基于 HiveServer2 实现的一个 Thrift 服务。旨在无缝兼容HiveServer2。</p><p>因为 Spark Thrift Server 的接口和协议都和 HiveServer2 完全一致，因此我们部署好 Spark Thrift Server 后，可以直接使用 hive 的 beeline 访问 Spark Thrift Server 执行相关语句。</p><p>Spark Thrift Server 的目的也只是取代 HiveServer2，因此它依旧可以和 Hive Metastore进行交互，获取到 hive 的元数据。 </p><p>如果想连接 Thrift Server，需要通过以下几个步骤： </p><ol><li><p>Spark 要接管 Hive 需要把 hive-site.xml 拷贝到 conf/目录下  </p></li><li><p> 把 Mysql 的驱动 copy 到 jars/目录下 </p></li><li><p>如果访问不到 hdfs，则需要把 core-site.xml 和 hdfs-site.xml 拷贝到 conf/目录下 </p></li><li><p>启动 Thrift Server</p></li></ol><p><strong>beeline客户端连接</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">sbin&#x2F;start-thriftserver.sh # 使用 beeline 连接 Thrift Server bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;linux1:10000 -n root <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>代码操作</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#注意：在开发工具中创建数据库默认是在本地仓库，通过参数修改数据库仓库的地址: config(&quot;spark.sql.warehouse.dir&quot;, &quot;hdfs:&#x2F;&#x2F;linux1:8020&#x2F;user&#x2F;hive&#x2F;warehouse&quot;) <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>权限问题</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">System.setProperty(&quot;HADOOP_USER_NAME&quot;, &quot;root&quot;)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> sparkSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试stage介绍</title>
      <link href="2021/01/03/Spark_HiveOnSpark/"/>
      <url>2021/01/03/Spark_HiveOnSpark/</url>
      
        <content type="html"><![CDATA[<h1 id="面试题目"><a href="#面试题目" class="headerlink" title="面试题目"></a>面试题目</h1><h2 id="1-SQL的谓词下推"><a href="#1-SQL的谓词下推" class="headerlink" title="1.SQL的谓词下推"></a>1.SQL的谓词下推</h2><p><strong>原理</strong></p><p>不影响逻辑的情况下，尽量将过滤条件提前执行</p><p><strong>谓词</strong></p><p>sql中的where, spark API 中的 filter</p><p><strong>目的</strong></p><p>提前过滤部分数据，降低Join等一系列操作的数据量级，尽可能避免因数据倾斜导致程序性能问题</p><p><strong>参数:PPD参数</strong></p><p> hive.optimize.ppd=false</p><ul><li>Default Value: true</li></ul><p><strong>测试</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select ename,dept_name from E left outer join D on ( E.dept_id &#x3D; D.dept_id and E.eid&#x3D;&#39;HZ001&#39; and D.dept_id &#x3D; &#39;D001&#39;);</code></pre><p><strong>结论</strong></p><p>1、对于Join(Inner Join)、Full outer Join，条件写在on后面，还是where后面，性能上面没有区别；<br>2、对于Left outer Join ，右侧的表写在on后面、左侧的表写在where后面，性能上有提高；<br>3、对于Right outer Join，左侧的表写在on后面、右侧的表写在where后面，性能上有提高；</p><h2 id="2-一个sql-join几张表能有几个stage"><a href="#2-一个sql-join几张表能有几个stage" class="headerlink" title="2.一个sql  join几张表能有几个stage"></a>2.一个sql  join几张表能有几个stage</h2><p><strong>实战分析</strong></p><h3 id="2-1-启动hive-on-spark"><a href="#2-1-启动hive-on-spark" class="headerlink" title="2.1 启动hive on spark"></a>2.1 启动hive on spark</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#1.启动hadoop集群myhadoop.sh start&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode49300 JobHistoryServer48727 DataNode49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode#2.启动元数据库hive --service metastore&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode49300 JobHistoryServer51399 RunJar #多了一个RunJar48727 DataNode49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode#3.启动hiveServer2hive --service hiveserver2&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode53570 RunJar #hiveserver249300 JobHistoryServer51399 RunJar #metadata48727 DataNode49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode#4.使用beeline客户端bin&#x2F;beeline -u jdbc:hive2:&#x2F;&#x2F;hadoop102:10000 -n atguigu&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode53570 RunJar49300 JobHistoryServer51399 RunJar48727 DataNode56506 RunJar49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode #没有变化#5.退出beeline 使用DG连接</code></pre><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h4><p>启动两个<code>runJar</code>服务</p><p>beeline客户端属于JDBC连接,但是没有进程</p><h3 id="2-2加入测试用两个表并简单查询"><a href="#2-2加入测试用两个表并简单查询" class="headerlink" title="2.2加入测试用两个表并简单查询"></a>2.2加入测试用两个表并简单查询</h3><p>dept</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- dept+--------------+-------------+-----------+| dept.depart  |   dept.id   | dept.loc  |+--------------+-------------+-----------+| 10           | ACCOUNTING  | 1700      || 20           | RESEARCH    | 1800      || 30           | SALES       | 1900      || 40           | OPERATIONS  | 1700      |+--------------+-------------+-----------+</code></pre><p>emp</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%95%B0%E6%8D%AE%E4%BB%93%E5%BA%93%E6%B5%8B%E8%AF%95emp%E8%A1%A8.png" alt="数据仓库测试emp表"></p><p>需求1:查询表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select        empno,       ename,       job,mgr,       hiredate,       sal,       comm,       deptno from emp;</code></pre><p>此时已经连接</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">jpsall&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode53570 RunJar49300 JobHistoryServer51399 RunJar48727 DataNode49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode</code></pre><h4 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h4><p>简单查询类似于</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select name from user;</code></pre><p>不走spark任务,是hive与元数据跟 HDFS 交互</p><h3 id="2-3-双表join测试"><a href="#2-3-双表join测试" class="headerlink" title="2.3 双表join测试"></a>2.3 双表join测试</h3><h4 id="需求"><a href="#需求" class="headerlink" title="需求"></a><strong>需求</strong></h4><p>根据员工表和部门表中的部门编号相等，查询员工编号、员工名称和部门名称；</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 文字分析 需求快速上手select 员工编号,员工名称,部门名称 from 员工表 join 部门表 on 员工表.部门编号&#x3D;部门表.部门编号-- 具体sqlselect       e.empno,       e.ename,       d.depart,       d.idfrom     emp e         join    dept d        on e.deptno &#x3D; d.depart;</code></pre><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a><strong>分析</strong></h4><p>程序总计跑了41秒</p><p>显然第一次跑任务时间长是由于spark在创建一个任务,但是具体详情,我去分析一下</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"># jpsall&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop102 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;48578 NameNode53570 RunJar49300 JobHistoryServer51399 RunJar48727 DataNode80441 YarnCoarseGrainedExecutorBackend #第一次任务多出 Executor进程49114 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop103 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;25600 DataNode25819 ResourceManager25964 NodeManager&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D; hadoop104 &#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;&#x3D;23125 DataNode23382 NodeManager23224 SecondaryNameNode27324 ApplicationMaster #第一次任务多出 Driver进程27711 YarnCoarseGrainedExecutorBackend #第一次任务多出 Executor进程</code></pre><p>可以看出第一跑任务之后,spark在yarn资源上生成了三个进程</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">27324 ApplicationMaster #Driver80441 YarnCoarseGrainedExecutorBackend #Executor计算对象27711 YarnCoarseGrainedExecutorBackend #Executor</code></pre><p>备注:关于Executor到底是对象还是进程,官网说进程,源码说对象,jps说进程不是这个,这个比较晕</p><h4 id="yarn"><a href="#yarn" class="headerlink" title="yarn"></a><strong>yarn</strong></h4><p><strong>(1)任务号</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Yarn%E7%9A%84%E8%BF%90%E8%A1%8C%E7%9A%84%E4%BB%BB%E5%8A%A1.png" alt="Yarn中运行的任务"></p><p>Running Containers 3 (2个Executor,1个Driver),2个Executor,内存等都是spark的默认配置</p><p><strong>(2)时间线</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BB%BB%E5%8A%A1%E6%97%B6%E9%97%B4%E7%BA%BF.png" alt="AppMaster任务时间线"></p><p>可以看见Driver与Executor创建时间</p><p>同时发现,一个简单的两个表的join竟然运行了两个job,也就是代表了使用了两个行动算子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">&#x2F;&#x2F;知识点归纳1 划分Application:初始化一个SparkContext即生成一个ApplicationJob:一个Action算子就会生成一个JobStage:Stage等于宽依赖(ShuffleDependency)+1Task:一个Stage阶段中,最后一个RDD分区个数就是Task的个数;&#x2F;&#x2F;知识点归纳2 行动算子reduce()collect()count()first()take()takeOrdered()aggregate()fold()countByKey()save()foreach()</code></pre><p><strong>DAG</strong></p><p>第一个任务执行的DAG</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Job1DAG.png" alt="DAG-JOB1"></p><p>第二个任务执行的DAG</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/DAG-JOB2.png" alt="DAG-JOB2"></p><h4 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h4><p>一个简单的join </p><p>两个job </p><p>每个job一个stage </p><p>跑的都是map</p><h3 id="2-4-三表join测试"><a href="#2-4-三表join测试" class="headerlink" title="2.4 三表join测试"></a>2.4 三表join测试</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select       e.empno,       e.ename,       d.depart,       d.id,       l.locfrom     emp e         join    dept d        on e.deptno &#x3D; d.departjoin location l     on d.loc &#x3D; l.loc;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%B8%89%E8%A1%A8join%E7%9A%84%E6%B5%81%E6%B0%B4%E5%9B%BE.png" alt="三个join的任务流水图"></p><h3 id="2-5-总结"><a href="#2-5-总结" class="headerlink" title="2.5 总结"></a>2.5 总结</h3><p>没有什么难度</p><p>关键是架构问题,李晓磊老师根本不带我们分析内部优化与DAG执行计划,导致我们就懂几个业务SQL</p><p>总而言之就是</p><p>join=shuffle</p><p>一个join就有两个阶段</p><p>三表join有两个join有三个阶段,这很好理解</p><p>但是在这里与spark本身不同的是,这个一个stage直接划分为一个job(推测可能与mr的划分机制有关)</p><h3 id="2-6附加1"><a href="#2-6附加1" class="headerlink" title="2.6附加1"></a>2.6附加1</h3><p>DAG图之看到map阶段(mapPartitions算子)</p><p>那reduce阶段怎么来的</p><p>执行sql+where</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select       e.empno,       e.ename,       d.depart,       d.id,       l.locfrom     emp e         join    dept d        on e.deptno &#x3D; d.departjoin location l    on d.loc &#x3D; l.locwhere d.loc&#x3D;1800;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%94%BE%E4%B8%8Awhere.png" alt="三表join放上where"></p><p><strong>结论</strong></p><p>放上where变成了两个job,两个stage..其中有个DAG不一样</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Job5%E7%9A%84DAG.png" alt="JOB5的DAG"></p><h3 id="2-7附加2"><a href="#2-7附加2" class="headerlink" title="2.7附加2"></a>2.7附加2</h3><p>运行一下真正的数仓sql看看吧</p><p>需求:7连3</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">select    &#39;2020-06-16&#39;,    concat(date_add(&#39;2020-06-16&#39;,-6),&#39;_&#39;,&#39;2020-06-16&#39;),    count(*)from(    select mid_id    from    (        select mid_id        from        (            select                 mid_id,                date_sub(dt,rank) date_dif            from            (                select                    mid_id,                    dt,                    rank() over(partition by mid_id order by dt) rank                from dws_uv_detail_daycount                where dt&gt;&#x3D;date_add(&#39;2020-06-25&#39;,-6) and dt&lt;&#x3D;&#39;2020-06-25&#39;            )t1        )t2         group by mid_id,date_dif        having count(*)&gt;&#x3D;3    )t3     group by mid_id   --去重,防止一个设备有两段连续超过3天的日子)t4;</code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%B8%83%E8%BF%9E%E4%B8%89%E7%9A%84DAG%E4%B8%8Ejob.png" alt="七连三DAG与job"></p><p>震惊了</p><p>七连三只跑了一个job</p><p>四个stage</p><p>好久不看数仓,这个复杂程度日后在分析吧,或者你们谁有时间可以琢磨一下</p><p>晓磊老师没讲这些东西确实可气</p><p>网上的东西都不靠谱</p><h1 id="源文件"><a href="#源文件" class="headerlink" title="源文件"></a>源文件</h1><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">show databases;create database test;create table if not exists dept(    depart int,    id string,    loc int)row format delimited fields terminated by &#39;\t&#39;;create table if not exists emp(    empno int,    ename string,    job string,    mgr int,    hiredate string,    sal double,    comm double,    deptno int)row format delimited fields terminated by &#39;\t&#39;;load data local inpath &#39;&#x2F;opt&#x2F;module&#x2F;data&#x2F;dept&#39; into table dept;load data local inpath &#39;&#x2F;opt&#x2F;module&#x2F;data&#x2F;emp&#39; into table emp;select * from emp;select * from dept;select       empno,       ename,       job,       mgr,       hiredate,       sal,       comm,       deptnofrom emp;select       e.empno,       e.ename,       d.depart,       d.id,       l.locfrom     emp e         join    dept d        on e.deptno &#x3D; d.departjoin location l    on d.loc &#x3D; l.locwhere d.loc&#x3D;1800;create table if not exists location(    loc int,    loc_name string)row format delimited fields terminated by &#39;\t&#39;;load data local inpath &#39;&#x2F;opt&#x2F;module&#x2F;data&#x2F;location&#39; into table location;select * from location;location:1700Beijing1800London1900Tokyodept:10ACCOUNTING170020RESEARCH180030SALES190040OPERATIONS1700emp：7369SMITHCLERK79021980-12-17800.00207499ALLENSALESMAN76981981-2-201600.00300.00307521WARDSALESMAN76981981-2-221250.00500.00307566JONESMANAGER78391981-4-22975.00207654MARTINSALESMAN76981981-9-281250.001400.00307698BLAKEMANAGER78391981-5-12850.00307782CLARKMANAGER78391981-6-92450.00107788SCOTTANALYST75661987-4-193000.00207839KINGPRESIDENT1981-11-175000.00107844TURNERSALESMAN76981981-9-81500.000.00307876ADAMSCLERK77881987-5-231100.00207900JAMESCLERK76981981-12-3950.00307902FORDANALYST75661981-12-33000.00207934MILLERCLERK77821982-1-231300.0010select    &#39;2020-06-16&#39;,    concat(date_add(&#39;2020-06-16&#39;,-6),&#39;_&#39;,&#39;2020-06-16&#39;),    count(*)from(    select mid_id    from    (        select mid_id        from        (            select                mid_id,                date_sub(dt,rank) date_dif            from            (                select                    mid_id,                    dt,                    rank() over(partition by mid_id order by dt) rank                from dws_uv_detail_daycount                where dt&gt;&#x3D;date_add(&#39;2020-06-25&#39;,-6) and dt&lt;&#x3D;&#39;2020-06-25&#39;            )t1        )t2        group by mid_id,date_dif        having count(*)&gt;&#x3D;3    )t3    group by mid_id   --去重,防止一个设备有两段连续超过3天的日子)t4;</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> interview </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jetbrains系列产品重置试用方法</title>
      <link href="2020/12/28/Jetbrains%E7%B3%BB%E5%88%97%E4%BA%A7%E5%93%81%E9%87%8D%E7%BD%AE%E8%AF%95%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>2020/12/28/Jetbrains%E7%B3%BB%E5%88%97%E4%BA%A7%E5%93%81%E9%87%8D%E7%BD%AE%E8%AF%95%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="0x0-项目背景"><a href="#0x0-项目背景" class="headerlink" title="0x0. 项目背景"></a>0x0. 项目背景</h2><p>Jetbrains家的产品有一个很良心的地方，他会允许你试用<code>30</code>天（这个数字写死在代码里了）以评估是否你真的需要为它而付费。<br>但很多时候会出现一种情况：<strong>IDE并不能按照我们实际的试用时间来计算。</strong><br>我举个例子：如果我们开始了试用，然后媳妇生孩子要你回去陪产！陪产时我们并无空闲对IDE试用评估，它依旧算试用时间。（只是举个例子，或许你并没有女朋友）<br>发现了吗？你未能真的有<code>30</code>天来对它进行全面的试用评估，你甚至无法作出是否付费的决定。此时你会想要延长试用时间，然而Jetbrains并未提供相关功能，该怎么办？</p><p>事实上有一款插件可以实现这个功能，你或许可以用它来重置一下试用时间。<strong>但切记不要无休止的一直试用，这并不是这个插件的本意！</strong></p><h2 id="0x1-如何安装"><a href="#0x1-如何安装" class="headerlink" title="0x1. 如何安装"></a>0x1. 如何安装</h2><h3 id="1-插件市场安装："><a href="#1-插件市场安装：" class="headerlink" title="1). 插件市场安装："></a>1). 插件市场安装：</h3><ul><li>在<code>Settings/Preferences...</code> -&gt; <code>Plugins</code> 内手动添加第三方插件仓库地址：<code>https://plugins.zhile.io</code></li><li>搜索：<code>IDE Eval Reset</code>插件进行安装。如果搜索不到请注意是否做好了上一步？网络是否通畅？</li><li>插件会提示安装成功。</li></ul><h3 id="2-下载安装："><a href="#2-下载安装：" class="headerlink" title="2). 下载安装："></a>2). 下载安装：</h3><ul><li>点击这个<a href="https://plugins.zhile.io/files/ide-eval-resetter-2.1.6.zip">链接(v2.1.6)</a>下载插件的<code>zip</code>包（macOS可能会自动解压，然后把<code>zip</code>包丢进回收站）</li><li>通常可以直接把<code>zip</code>包拖进IDE的窗口来进行插件的安装。如果无法拖动安装，你可以在<code>Settings/Preferences...</code> -&gt; <code>Plugins</code> 里手动安装插件（<code>Install Plugin From Disk...</code>）</li><li>插件会提示安装成功。</li></ul><h2 id="0x2-如何使用"><a href="#0x2-如何使用" class="headerlink" title="0x2. 如何使用"></a>0x2. 如何使用</h2><ul><li>一般来说，在IDE窗口切出去或切回来时（窗口失去/得到焦点）会触发事件，检测是否长时间（<code>25</code>天）没有重置，给通知让你选择。（初次安装因为无法获取上次重置时间，会直接给予提示）</li><li>也可以手动唤出插件的主界面：<ul><li>如果IDE没有打开项目，在<code>Welcome</code>界面点击菜单：<code>Get Help</code> -&gt; <code>Eval Reset</code></li><li>如果IDE打开了项目，点击菜单：<code>Help</code> -&gt; <code>Eval Reset</code></li></ul></li><li>唤出的插件主界面中包含了一些显示信息，<code>2</code>个按钮，<code>1</code>个勾选项：<ul><li>按钮：<code>Reload</code> 用来刷新界面上的显示信息。</li><li>按钮：<code>Reset</code> 点击会询问是否重置试用信息并<strong>重启IDE</strong>。选择<code>Yes</code>则执行重置操作并<strong>重启IDE生效</strong>，选择<code>No</code>则什么也不做。（此为手动重置方式）</li><li>勾选项：<code>Auto reset before per restart</code> 如果勾选了，则自勾选后<strong>每次重启/退出IDE时会自动重置试用信息</strong>，你无需做额外的事情。（此为自动重置方式）</li></ul></li></ul><h2 id="0x3-如何更新"><a href="#0x3-如何更新" class="headerlink" title="0x3. 如何更新"></a>0x3. 如何更新</h2><h3 id="1-插件更新机制（推荐）："><a href="#1-插件更新机制（推荐）：" class="headerlink" title="1). 插件更新机制（推荐）："></a>1). 插件更新机制（推荐）：</h3><ul><li>IDE会自行检测其自身和所安装插件的更新并给予提示。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</li><li>点击IDE的<code>Check for Updates...</code> 菜单手动检测IDE和所安装插件的更新。如果本插件有更新，你会收到提示看到更新日志，自行选择是否更新。</li><li>插件更新可能会需要<strong>重启IDE</strong>。</li></ul><h3 id="2-手动更新："><a href="#2-手动更新：" class="headerlink" title="2). 手动更新："></a>2). 手动更新：</h3><ul><li>从本页面下载最新的插件<code>zip</code>包安装更新。参考本文：<code>下载安装</code>小节。</li><li>插件更新需要<strong>重启IDE</strong>。</li></ul><h2 id="0x4-一些说明"><a href="#0x4-一些说明" class="headerlink" title="0x4. 一些说明"></a>0x4. 一些说明</h2><ul><li><p>本插件默认不会显示其主界面，如果你需要，参考本文：<code>如何使用</code>小节。</p></li><li><p>市场付费插件的试用信息也会<strong>一并重置</strong>。</p></li><li><p>对于某些付费插件（如:<code>Iedis 2</code>,<code>MinBatis</code>）来说，你可能需要去取掉<code>javaagent</code></p><p>配置（如果有）后重启IDE：</p><ul><li>如果IDE没有打开项目，在<code>Welcome</code>界面点击菜单：<code>Configure</code> -&gt; <code>Edit Custom VM Options...</code> -&gt; 移除 <code>-javaagent:</code> 开头的行。</li><li>如果IDE打开了项目，点击菜单：<code>Help</code> -&gt; <code>Edit Custom VM Options...</code> -&gt; 移除 <code>-javaagent:</code> 开头的行。</li></ul></li><li><p>重置需要<strong>重启IDE生效</strong>！</p></li><li><p>重置后并不弹出<code>Licenses</code>对话框让你选择输入License或试用，这和之前的重置脚本/插件不同（省去这烦人的一步）。</p></li><li><p>如果长达<code>25</code>天不曾有任何重置动作，IDE会有<strong>通知询问</strong>你是否进行重置。</p></li><li><p>如果勾选：<code>Auto reset before per restart</code> ，重置是静默无感知的。</p></li><li><p>简单来说：勾选了<code>Auto reset before per restart</code>则无需再管，一劳永逸。</p></li></ul><h2 id="0x5-开源信息"><a href="#0x5-开源信息" class="headerlink" title="0x5. 开源信息"></a>0x5. 开源信息</h2><ul><li>插件是学习研究项目，源代码是开放的。源码仓库地址：<a href="https://gitee.com/pengzhile/ide-eval-resetter">Gitee</a>。</li><li>如果你有更好的想法，欢迎给我提<code>Pull Request</code>来共同研究完善。</li><li>插件源码使用：<code>GPL-2.0</code>开源协议发布。</li><li>插件使用<code>PHP</code>编写，毕竟<code>PHP</code>是世界上最好的编程语言！</li></ul><h2 id="0x6-支持的产品"><a href="#0x6-支持的产品" class="headerlink" title="0x6. 支持的产品"></a>0x6. 支持的产品</h2><ul><li><strong>IntelliJ IDEA</strong></li><li><strong>AppCode</strong></li><li><strong>CLion</strong></li><li><strong>DataGrip</strong></li><li><strong>GoLand</strong></li><li><strong>PhpStorm</strong></li><li><strong>PyCharm</strong></li><li><strong>Rider</strong></li><li><strong>RubyMine</strong></li><li><strong>WebStorm</strong></li></ul><p><strong>转载于：</strong> <a href="https://zhile.io/2020/11/18/jetbrains-eval-reset.html">https://zhile.io/2020/11/18/jetbrains-eval-reset.html</a></p>]]></content>
      
      
      <categories>
          
          <category> tips </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git的配置与在idea中的应用</title>
      <link href="2020/10/27/Git/"/>
      <url>2020/10/27/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h1 id="0x0-GitHub用户信息"><a href="#0x0-GitHub用户信息" class="headerlink" title="0x0. GitHub用户信息"></a>0x0. GitHub用户信息</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">Username: fourgoldEmail address: lijinxinok@163.com密码：IELTS-rise-to-6.5-!验证邮箱：lijinxinok@163.com邮箱密码：qinni123！<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x1-Github常用命令"><a href="#0x1-Github常用命令" class="headerlink" title="0x1. Github常用命令"></a>0x1. Github常用命令</h1><h3 id="2-1初始化操作"><a href="#2-1初始化操作" class="headerlink" title="2.1初始化操作"></a>2.1初始化操作</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#初始化本地仓库git init#查看隐藏文件.&#x2F;gitls -lAll .git&#x2F;#.git存放的是本地库相关的子目录以及文件#初始化本地配置 设置签名 这个签名和登录远程库和账号密码没有任何关系#global代表的是系统用户级别git config --global user.name JInxinLi#初始化本地邮箱$ git config --global user.email Jinxin@atguigu.com#签名的作用是区分不同操作者身份。用户的签名信息在每一个版本的提交信息中能够看到，以此确认本次提交是谁做的。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就近原则:项目级别的优先于系统用户级别,采用项目级别的签名</p><p><strong>签名信息保存在哪里?</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">.&#x2F;git&#x2F;config<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>系统用户保存在哪里?</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~&#x2F;.gitconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2实际操作"><a href="#2-2实际操作" class="headerlink" title="2.2实际操作"></a>2.2实际操作</h3><p>git add添加到暂存区还可以撤销</p><p>HEAD是一个指针</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">#查看主文档 暂存区与工作区的状态 默认matser分支git status#添加暂存区git add#提交到本地库 hello.txt是文件名1 git commit -m &quot;version1.0&quot; hello.txt#推送matser开发线到远程仓库git push sparkStreaming master#将远程仓库的内容克隆到本地git clone http#拉取远程仓库内容git pull sparkStreaming master#查看历史版本 (HEAD -&gt; matser) HEAD是一个指针git loggit reflog#切换版本号git reset --hard 087a1a7#创建分支git branch hot-fix#查看分支git branch -v#切换分支git checkout hot-fix#合并分支#注意当前分支为mastergit merge hot-fix#冲突解决后提交git commit -m &quot;merge hot-fix&quot;####新建别名urlgit remote -vgit remote add origin https:&#x2F;&#x2F;url....git remote -v##推送git push origin master##克隆操作git clone url#回车#完整的把远程库下载到本地#创建origin远程地址别名#初始化本地库#邀请别人加入到协作组中#点击邀请,就变成了团队成员#pull &#x3D; fetch+mergegit fetch origin master#将远程库的master拉取下来#切换到origin master#查看远程的master分支[远程地址][远程分支]git checkout origin&#x2F;master#合并远程的master分支[远程地址][远程分支]git merge origin&#x2F;mastergit pull origin&#x2F;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>冲突解决</strong></p><p>当主分支已经提升了版本,而我们的clone的是旧版本,这个时候就已经无法推送</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#解决,先拿到远程的修改 如果不是最新版所做的修改,不能修改,必须先拉取git pull origin&#x2F;master#文件里东西修改git add [filename]git commit -m &quot;version2.0&quot;git push origin&#x2F;master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>跨团队协作</strong></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#以第三者的身份先进行fork fork到自己的远程库#克隆到本地git clone url[自己的地址]#然后进行增加内容git commit -m &quot;...&quot; [filename]git push origin master#现在已经推送到自己的远程库#本地修改,然后推送到远程#new pull request#create new pull result#发送消息进行提交#经理 打开pull request#点击内容#两人可以聊天#点commits files changed#审核代码#merge pull request#点这里进行合并#合并的时候也要添加相关信息<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>展示的时候显示了来源</p><h3 id="2-3查看历史记录log的方式"><a href="#2-3查看历史记录log的方式" class="headerlink" title="2.3查看历史记录log的方式"></a>2.3查看历史记录log的方式</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#最完整的形式git log#日志以一个漂亮的格式进行显示git log --pretty&#x3D;oneline#hash值显示一部分git log --oneline#多屏幕显示控制方法#空格向下翻页#b向上翻页#q退出#在oneline的基础上显示了移动到某一个版本要移动几步git reflog<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/24/mvKrNGdHQwWt9Ty.png" alt="注意HEAD"></p><h3 id="2-4版本回退穿梭"><a href="#2-4版本回退穿梭" class="headerlink" title="2.4版本回退穿梭"></a>2.4版本回退穿梭</h3><p>管理历史记录的时候存在一个<strong>指针</strong>(HEAD)</p><p>我们可以把HEAD指针进行移动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#切换版本号 git reset --hard 087a1a7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5三种操作的参数"><a href="#2-5三种操作的参数" class="headerlink" title="2.5三种操作的参数"></a>2.5<strong>三种操作</strong>的参数</h3><ol><li>基于索引值操作[推荐]</li><li>使用^符号:只能往后退</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#回退一步git reset --hard HEAD^#回退三步git reset --hard HEAD^^^<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol><li>使用~符号</li></ol><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#回退3步git reset --hard HEAD~3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-6参数说明"><a href="#2-6参数说明" class="headerlink" title="2.6参数说明"></a>2.6参数说明</h3><p>reset命令的三个参数对比</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看本地帮助文档git help reset#命令--soft不会动index file(暂存区) and work tree(工作区)仅仅在本地库移动HEAD指针#将本地库后退--mixed在本地移动指针重置暂存区#将暂存区与本地库后退--hard移动指针重置缓存区重置工作区#全部后退<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-7永久删除文件的保存"><a href="#2-7永久删除文件的保存" class="headerlink" title="2.7永久删除文件的保存"></a>2.7永久删除文件的保存</h3><p>删除仅仅是一条记录,可以回退版本进行恢复</p><p>前提:删除前,文件存在时的状态提交到了本地库</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git reset -hard[指针位置]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-8添加到暂存区的删除文件找回"><a href="#2-8添加到暂存区的删除文件找回" class="headerlink" title="2.8添加到暂存区的删除文件找回"></a>2.8添加到暂存区的删除文件找回</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#暂存区与工作都是git reset --hard HEAD<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-9比较文件差异"><a href="#2-9比较文件差异" class="headerlink" title="2.9比较文件差异"></a>2.9比较文件差异</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git diff test.txtgit diff [本地区中的历史版本][文件名]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/24/GsheZUHS9PQ3zWN.png" alt="image-20201224171304996"></p><p>将工作区的文件个暂存区的文件进行比较</p><h3 id="2-10分支管理"><a href="#2-10分支管理" class="headerlink" title="2.10分支管理"></a>2.10分支管理</h3><p>在版本控制过程中,使用多条线控制任务的分支</p><p>分支的命名以feature开头 feature_bule</p><p>热修复的命名 hot_fix </p><p>分支能够同时并行推进多个功能的开发,提高开发效率</p><p>如果分支在开发过程中,如果某一个分支开发失败,不会对其他分支有任何影响,失败的分支删除重新开始</p><h3 id="2-11分支的具体操作"><a href="#2-11分支的具体操作" class="headerlink" title="2.11分支的具体操作"></a>2.11分支的具体操作</h3><p>master是默认分支</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看分支git branch -v#创建分支git branch hot_fix#切换分支git checkout hot_fix#合并分支的步骤#第一步:切换到接受修改的分支git checkout master#第二步:执行merge命令git merge hot_fix#解决冲突#第一步编辑文件,删除特殊符号#第二步把文件修改到满意#第三步 git add[文件名]#第四部 git commit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x3-Git基本原理"><a href="#0x3-Git基本原理" class="headerlink" title="0x3. Git基本原理"></a>0x3. Git基本原理</h1><h2 id="3-1哈希算法"><a href="#3-1哈希算法" class="headerlink" title="3.1哈希算法"></a>3.1哈希算法</h2><pre class="mermaid">graph LR明文-->加密算法-->密文</pre><p>同一个数保证加密后得到同一个结果</p><p>输入数据细微变化会引起Hash巨大的变化</p><p>哈希算法不可逆</p><p>不管输入的数据的数据量有多大,输入同一个哈希算法,得到的加密结果长度固定</p><p>很多内容也会加密成得到的长度相同32位16进制数</p><p>Git底层采用的是SHA-1算法</p><p><strong>用途</strong>:哈希算法用于校验文件</p><h2 id="3-2-Git保存版本的机制"><a href="#3-2-Git保存版本的机制" class="headerlink" title="3.2 Git保存版本的机制"></a>3.2 Git保存版本的机制</h2><p>每个版本都会保存当前版本的文件状态</p><p>Git把数据看做是小型文件系统的一组快照,每次提交更新时Git都会对当前的全部文件制作一个快照并保存这个快照的索引</p><p>为了高效,如果文件没有修改,Git不再重新存储该文件,而是只保留一个链接指向之前的存储的文件,所以Git的工作方式可以称为快照流</p><h2 id="3-3Git如何管理分支"><a href="#3-3Git如何管理分支" class="headerlink" title="3.3Git如何管理分支"></a>3.3Git如何管理分支</h2><p>第一次提交是rootcommit</p><p>master与testing都算是指针,指向原来的对象</p><h1 id="0x4-idea使用GitHub"><a href="#0x4-idea使用GitHub" class="headerlink" title="0x4. idea使用GitHub"></a>0x4. idea使用GitHub</h1><h3 id="4-1创建同步忽略文件"><a href="#4-1创建同步忽略文件" class="headerlink" title="4.1创建同步忽略文件"></a>4.1创建同步忽略文件</h3><p>创建忽略规则文件xxxx.ignore（前缀名随便起）</p><p>这个文件的存放位置原则上在哪里都可以，</p><p>为了便于让~/.gitconfig文件引用，</p><p>建议也放在用户家目录下</p><p>xxxx.ignore文件内容如下：</p><h4 id="idea-ignore"><a href="#idea-ignore" class="headerlink" title="idea.ignore"></a>idea.ignore</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"># Compiled class file*.class# Log file*.log# BlueJ files*.ctxt# Mobile Tools for Java (J2ME).mtj.tmp&#x2F;# Package Files #*.jar*.war*.nar*.ear*.zip*.tar.gz*.rar# virtual machine crash logs, see http:&#x2F;&#x2F;www.java.com&#x2F;en&#x2F;download&#x2F;help&#x2F;error_hotspot.xmlhs_err_pid*.classpath.project.settingstarget.idea*.iml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）在.gitconfig文件中引用忽略配置文件（此文件在Windows的家目录中）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">[user]name &#x3D; ZhangJYemail &#x3D; ZhangJY@atguigu.com[core]excludesfile &#x3D; C:&#x2F;Users&#x2F;ZhangJY&#x2F;SH0720.ignore注意：这里要使用“正斜线（&#x2F;）”，不要使用“反斜线（\）”<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-2使用免密登录连接远程仓库"><a href="#4-2使用免密登录连接远程仓库" class="headerlink" title="4.2使用免密登录连接远程仓库"></a>4.2使用免密登录连接远程仓库</h2><p>配置免密登录时非常有必要的</p><p>首先要明白配置免密登录使用的SSH登录方式,使用RSA</p><p>免密登陆地址</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#1.进入家目录cd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>89388@DESKTOP-CEH28KV MINGW64 ~</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#2.删除.ssh目录rm -rvf .ssh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>removed ‘.ssh/known_hosts’</p><p>removed directory ‘.ssh’</p></blockquote><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#3.生成免密密钥 -C +github账号ssh-keygen -t rsa -C lijinxinok@163.com<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#4.查看公钥并复制公钥cat id_rsa.pub#复制公钥,注意有坑,在命令行复制容易出问题#可以去源文件的地方使用nodpad++打开<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#5.添加公钥到github#如图<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://i.loli.net/2020/12/25/am5XnUMoeWY7G2x.png" alt=" 1606477780968"></p><p>然后将公钥复制进去就可以了</p><p>注意push的时候要使用SSH地址哦</p><p><img src="https://i.loli.net/2020/12/25/4PqjRpcbdrewtGv.png" alt="免密登陆地址"></p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#6.查看当前所有远程地址别名git remote -v <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后将远程登录的SSH复制,添加别名</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#7.别名 远程地址git remote add SparkStreaming http:ssh登录地址<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>注意有坑,这里时ssh登录地址</p><p>接下来就可以测试了</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#8.测试一下git add hello.txtgit push SparkStreaming master<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="4-3-Git结构"><a href="#4-3-Git结构" class="headerlink" title="4.3.Git结构"></a>4.3.Git结构</h2><pre class="mermaid">graph TD历史版本---本地库临时存储---暂存区写代码---工作区工作区--git add-->暂存区暂存区--git commit-->本地库</pre><h2 id="4-4Git和代码托管中心"><a href="#4-4Git和代码托管中心" class="headerlink" title="4.4Git和代码托管中心"></a>4.4Git和代码托管中心</h2><h4 id="局域网环境"><a href="#局域网环境" class="headerlink" title="局域网环境"></a>局域网环境</h4><p>GitLab</p><h4 id="外网络环境"><a href="#外网络环境" class="headerlink" title="外网络环境"></a>外网络环境</h4><p>GitHub</p><p>码云</p><h2 id="4-5-本地与内部协作"><a href="#4-5-本地与内部协作" class="headerlink" title="4.5 本地与内部协作"></a>4.5 本地与内部协作</h2><h4 id="团队内部协作"><a href="#团队内部协作" class="headerlink" title="团队内部协作"></a>团队内部协作</h4><p>加入团队可以增加权限</p><h4 id="跨团队协作"><a href="#跨团队协作" class="headerlink" title="跨团队协作"></a>跨团队协作</h4><h2 id="4-6从零到一使用IDEA"><a href="#4-6从零到一使用IDEA" class="headerlink" title="4.6从零到一使用IDEA"></a>4.6从零到一使用IDEA</h2><h3 id="创建本地库"><a href="#创建本地库" class="headerlink" title="创建本地库"></a>创建本地库</h3><p>将一个文件添加到ignore忽视</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#将数据添加到ignoregit add to .gitignore<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将文件添加exclude</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">git add to exclude<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="创建版本"><a href="#创建版本" class="headerlink" title="创建版本"></a>创建版本</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">commitversion-0.1 Copy Revison Number<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="回退版本"><a href="#回退版本" class="headerlink" title="回退版本"></a>回退版本</h3><p><img src="https://i.loli.net/2020/12/25/oyQbqeJjfGzdlF5.png" alt="回退版本图"></p><p>然后将版本哈希值粘贴到HEAD地方</p><h3 id="创建分支以及合并分支"><a href="#创建分支以及合并分支" class="headerlink" title="创建分支以及合并分支"></a>创建分支以及合并分支</h3><p>创建分支</p><p><img src="https://i.loli.net/2020/12/25/48awkZFMH3X7q2B.png" alt="image-20201225163340577"></p><p>合并分支</p><p><img src="https://i.loli.net/2020/12/25/DyPaoRHQ5Ud2Y63.png" alt="image-20201225163935837"></p><h3 id="如何在idea里解决分支冲突"><a href="#如何在idea里解决分支冲突" class="headerlink" title="如何在idea里解决分支冲突"></a>如何在idea里解决分支冲突</h3><p>merge</p><h3 id="添加合作伙伴"><a href="#添加合作伙伴" class="headerlink" title="添加合作伙伴"></a>添加合作伙伴</h3><p>setting</p><p>manage access</p><h1 id="0x5-HEXO个人博客"><a href="#0x5-HEXO个人博客" class="headerlink" title="0x5. HEXO个人博客"></a>0x5. HEXO个人博客</h1><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">git config --global user.name &quot;godweiyang&quot;git config --global user.email &quot;792321264@qq.com&quot;ssh-keygen -t rsa -C &quot;lijinxinok@163.com&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x6-配置图床"><a href="#0x6-配置图床" class="headerlink" title="0x6. 配置图床"></a>0x6. 配置图床</h1><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_20_12/%E6%B5%8B%E8%AF%95.png" alt="测试图"></p><p>加油</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ElasticSearch的学习总结(包含API)</title>
      <link href="2020/09/24/ElasticSearch_%E6%80%BB%E7%BB%93/"/>
      <url>2020/09/24/ElasticSearch_%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="ElasticSearch-总结"><a href="#ElasticSearch-总结" class="headerlink" title="ElasticSearch_总结"></a>ElasticSearch_总结</h2><h2 id="1-lucene"><a href="#1-lucene" class="headerlink" title="1.lucene"></a>1.lucene</h2><p>lucene，就是一个jar包，里面包含了封装好的各种建立倒排索引，以及进行搜索的代码，包括各种算法。我们就用java开发的时候，引入lucene jar，然后基于lucene的api进行去进行开发就可以了。</p><h2 id="2-倒排索引"><a href="#2-倒排索引" class="headerlink" title="2.倒排索引"></a>2.倒排索引</h2><p>可以看到 Lucene 为倒排索引(Term Dictionary)部分又增加一层Term Index结构，用于快速定位，而这Term Index是缓存在内存中的，但MySQL的B+tree不在内存中，所以整体来看ES速度更快，但同时也更消耗资源（内存、磁盘）。</p><h2 id="3-B-tree"><a href="#3-B-tree" class="headerlink" title="3.B+tree"></a>3.B+tree</h2><p>是B-Tree的改进版本，同时也是数据库索引索引所采用的存储结构。数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。相比B-Tree来说，进行范围查找时只需要查找两个节点，进行遍历即可。而B-Tree需要获取所有节点，相比之下B+Tree效率更高。（排序查找算法系统的学习，可以在Java知音公众号回复“排序算法聚合”）</p><p>MySQL使用的B+tree   是B-Tree的改进版本，同时也是数据库索引索引所采用的存储结构。数据都在叶子节点上，并且增加了顺序访问指针，每个叶子节点都指向相邻的叶子节点的地址。相比B-Tree来说，进行范围查找时只需要查找两个节点，进行遍历即可。而B-Tree需要获取所有节点，相比之下B+Tree效率更高。（排序查找算法系统的学习，可以在Java知音公众号回复“排序算法聚合”）</p><h2 id="3-Elasticsearch核心概念"><a href="#3-Elasticsearch核心概念" class="headerlink" title="3.Elasticsearch核心概念"></a>3.Elasticsearch核心概念</h2><h3 id="3-1近实时"><a href="#3-1近实时" class="headerlink" title="3.1近实时"></a>3.1近实时</h3><p>近实时，两个意思，从写入数据到数据可以被搜索到有一个小延迟（大概1秒）；基于es执行搜索和分析可以达到秒级。</p><h3 id="3-2Cluster（集群）"><a href="#3-2Cluster（集群）" class="headerlink" title="3.2Cluster（集群）"></a>3.2Cluster（集群）</h3><p>集群包含多个节点，每个节点属于哪个集群是通过一个配置（集群名称，默认是elasticsearch）来决定的，对于中小型应用来说，刚开始一个集群就一个节点很正常</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#cluster.name#-----------------------------------------------#1 如果要配置集群需要两个节点上的elasticsearch配置的cluster.name相同，都启动可以自动组成集群，这里如果不改cluster.name则默认是cluster.name&#x3D;my-application#2 nodename随意取但是集群内的各节点不能相同#3 修改后的每行前面不能有空格，修改后的“：”后面必须有一个空格<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3Node（节点）"><a href="#3-3Node（节点）" class="headerlink" title="3.3Node（节点）"></a>3.3Node（节点）</h3><p>集群中的一个节点，节点也有一个名称（默认是随机分配的），节点名称很重要（在执行运维管理操作的时候），默认节点会去加入一个名称为“elasticsearch”的集群，如果直接启动一堆节点，那么它们会自动组成一个elasticsearch集群，当然一个节点也可以组成一个elasticsearch集群。</p><h3 id="3-4Index（索引-数据库）"><a href="#3-4Index（索引-数据库）" class="headerlink" title="3.4Index（索引-数据库）"></a>3.4Index（索引-数据库）</h3><p>索引包含一堆有相似结构的文档数据，比如可以有一个客户索引，商品分类索引，订单索引，索引有一个名称。一个index包含很多document，一个index就代表了一类类似的或者相同的document。比如说建立一个product index，商品索引，里面可能就存放了所有的商品数据，所有的商品document。</p><h3 id="3-5Type（类型-表）"><a href="#3-5Type（类型-表）" class="headerlink" title="3.5Type（类型-表）"></a>3.5Type（类型-表）</h3><p>6.0版本之前每个索引里都可以有多个type；</p><p>6.0版本之后每个索引里面只能有一个Type，一般使用_doc代替了。</p><p>商品index，里面存放了所有的商品数据，商品document</p><p>商品type：product_id，product_name，product_desc，category_id，category_name，service_period</p><p>每一个type里面，都会包含一堆document</p><pre class="line-numbers language-json" data-language="json"><code class="language-json"><span class="token punctuation">&#123;</span>  <span class="token property">"product_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"product_name"</span><span class="token operator">:</span> <span class="token string">"长虹电视机"</span><span class="token punctuation">,</span>  <span class="token property">"product_desc"</span><span class="token operator">:</span> <span class="token string">"4k高清"</span><span class="token punctuation">,</span>  <span class="token property">"category_id"</span><span class="token operator">:</span> <span class="token string">"3"</span><span class="token punctuation">,</span>  <span class="token property">"category_name"</span><span class="token operator">:</span> <span class="token string">"电器"</span><span class="token punctuation">,</span>  <span class="token property">"service_period"</span><span class="token operator">:</span> <span class="token string">"1年"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-6Document（文档-行）"><a href="#3-6Document（文档-行）" class="headerlink" title="3.6Document（文档-行）"></a>3.6Document（文档-行）</h3><p>文档是ES中的最小数据单元，一个document可以是一条客户数据，一条商品分类数据，一条订单数据，通常用JSON数据结构表示，每个index下的type中，都可以去存储多个document。</p><h3 id="3-7Field（字段-列）"><a href="#3-7Field（字段-列）" class="headerlink" title="3.7Field（字段-列）"></a>3.7Field（字段-列）</h3><p>一个document里面有多个field，每个field就是一个数据字段。</p><pre class="line-numbers language-json" data-language="json"><code class="language-json">#product document<span class="token punctuation">&#123;</span>  <span class="token property">"product_id"</span><span class="token operator">:</span> <span class="token string">"1"</span><span class="token punctuation">,</span>  <span class="token property">"product_name"</span><span class="token operator">:</span> <span class="token string">"高露洁牙膏"</span><span class="token punctuation">,</span>  <span class="token property">"product_desc"</span><span class="token operator">:</span> <span class="token string">"高效美白"</span><span class="token punctuation">,</span>  <span class="token property">"category_id"</span><span class="token operator">:</span> <span class="token string">"2"</span><span class="token punctuation">,</span>  <span class="token property">"category_name"</span><span class="token operator">:</span> <span class="token string">"日化用品"</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-8Mapping（映射-约束）"><a href="#3-8Mapping（映射-约束）" class="headerlink" title="3.8Mapping（映射-约束）"></a>3.8Mapping（映射-约束）</h3><p>数据如何存放到索引对象上，需要有一个映射配置，包括：数据类型、是否存储、是否分词等。</p><p>Mapping用来定义Document中每个字段的类型，即所使用的分词器、是否索引等属性，非常关键等。</p><h3 id="3-9ElasticSearch与数据库的类比"><a href="#3-9ElasticSearch与数据库的类比" class="headerlink" title="3.9ElasticSearch与数据库的类比"></a>3.9ElasticSearch与数据库的类比</h3><table><thead><tr><th>关系型数据库（比如Mysql）</th><th>非关系型数据库（Elasticsearch）</th></tr></thead><tbody><tr><td>数据库Database</td><td>索引Index</td></tr><tr><td>表Table</td><td>类型Type(6.0版本之后在一个索引下面只能有一个，7.0版本之后取消了Type)</td></tr><tr><td>数据行Row</td><td>文档Document(JSON格式)</td></tr><tr><td>数据列Column</td><td>字段Field</td></tr><tr><td>约束 Schema</td><td>映射Mapping</td></tr></tbody></table><h3 id="3-10ElasticSearch存入数据和搜索数据机制"><a href="#3-10ElasticSearch存入数据和搜索数据机制" class="headerlink" title="3.10ElasticSearch存入数据和搜索数据机制"></a>3.10ElasticSearch存入数据和搜索数据机制</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/es%E7%B4%A2%E5%BC%95.png" alt="ElasticSearch索引结构"></p><p>1）索引对象（blog=index）：存储数据的表结构，任何搜索数据，存放在索引对象上 。</p><p>2）映射（mapping）：数据如何存放到索引对象上，需要有一个映射配置， 包括：数据类型、是否存储、是否分词等。</p><p>3）文档（document）：一条数据记录，存在索引对象上。</p><p>4）文档类型：一个索引对象，存放多种类型数据，数据用文档类型进行标识。</p><h2 id="4-总结"><a href="#4-总结" class="headerlink" title="4.总结"></a>4.总结</h2><p>总而言之 搜索是把所有数据进行json格式化,格式化的方法使用Mapping映射约束成json文件,然后赋予Docid,然后通过倒排索引的方法将字段提取出来,提供 索引(Docid结构)</p><h2 id="5-代码"><a href="#5-代码" class="headerlink" title="5.代码"></a>5.代码</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">#查看元数据信息<span class="token constant">GET</span> _cat<span class="token operator">/</span>nodes<span class="token constant">GET</span> _cat<span class="token operator">/</span>health<span class="token constant">GET</span> _cat<span class="token operator">/</span>indices<span class="token constant">GET</span> _cat<span class="token operator">/</span>master#手动创建Mapping<span class="token constant">PUT</span> student<span class="token punctuation">&#123;</span>  <span class="token string">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"_doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token string">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"boolean"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"birth"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"date"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#查看Mapping信息<span class="token constant">GET</span> student<span class="token operator">/</span>_mapping#使用<span class="token constant">PUT</span>方式向student索引中插入数据<span class="token operator">:</span>幂等操作<span class="token constant">PUT</span> student<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1001</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"1111"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020-12-05"</span><span class="token punctuation">&#125;</span>#插入错误类型的数据<span class="token constant">PUT</span> student<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1002</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"2222"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"aaaa"</span><span class="token punctuation">,</span>  <span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020-12-05"</span><span class="token punctuation">&#125;</span>#使用<span class="token constant">POST</span>方式向student索引中插入数据<span class="token constant">POST</span> student<span class="token operator">/</span>_doc<span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"2222"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"李四"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token boolean">true</span><span class="token punctuation">,</span>  <span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020-12-05"</span><span class="token punctuation">&#125;</span>#查询索引数据<span class="token constant">GET</span> student<span class="token operator">/</span>_search<span class="token function">#自动创建Mapping</span><span class="token punctuation">(</span>直接向一个不存在的Index中插入数据即可<span class="token punctuation">)</span><span class="token constant">PUT</span> student1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1001</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token number">1111</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张三"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token boolean">false</span><span class="token punctuation">,</span>  <span class="token string">"birth"</span><span class="token operator">:</span><span class="token string">"2020-12-05"</span><span class="token punctuation">&#125;</span>#查询自动创建Mapping的映射信息<span class="token constant">GET</span> student1<span class="token operator">/</span>_mapping<span class="token function">#查看keyWord类型分词结果</span><span class="token punctuation">(</span>报错<span class="token punctuation">,</span>不分词<span class="token punctuation">)</span><span class="token constant">GET</span> _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"keyword"</span><span class="token operator">:</span><span class="token string">"我是程序员"</span><span class="token punctuation">&#125;</span><span class="token function">#查看Text类型分词结果</span><span class="token punctuation">(</span>将汉字独立拆开<span class="token punctuation">)</span><span class="token constant">GET</span> _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"text"</span><span class="token operator">:</span><span class="token string">"我是程序员"</span><span class="token punctuation">&#125;</span>#查看使用<span class="token constant">IK</span>分词器之后的分词效果<span class="token constant">GET</span> _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_smart"</span><span class="token punctuation">,</span>  <span class="token string">"text"</span><span class="token operator">:</span><span class="token string">"我是程序员"</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> _analyze<span class="token punctuation">&#123;</span>  <span class="token string">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span><span class="token punctuation">,</span>  <span class="token string">"text"</span><span class="token operator">:</span><span class="token string">"我是程序员"</span><span class="token punctuation">&#125;</span>#创建Index<span class="token constant">PUT</span> stu1<span class="token punctuation">&#123;</span>  <span class="token string">"mappings"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"_doc"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>      <span class="token string">"properties"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>        <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"name"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"integer"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"gender"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"text"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"age"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"integer"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"keyword"</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token punctuation">&#123;</span>          <span class="token string">"type"</span><span class="token operator">:</span><span class="token string">"text"</span><span class="token punctuation">,</span>          <span class="token string">"analyzer"</span><span class="token operator">:</span> <span class="token string">"ik_max_word"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#插入测试数据<span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1001</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"1111"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"国亮"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"唱歌跳舞,乒乓球"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"唱歌跳舞,乒乓球"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1002</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"2222"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"王斌"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">3</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"睡觉,做梦,梦游"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"睡觉,做梦,梦游"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1003</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"3333"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"班长"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"female"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">17</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"抽烟,喝酒,烫头,羽毛球"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"抽烟,喝酒,烫头,羽毛球"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1004</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"4444"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"文康"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">60</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"太极,广场舞,闪电舞"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"太极,广场舞,闪电舞"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1005</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"5555"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"加明"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">22</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"蹦迪,大保健,洗脚"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"蹦迪,大保健,洗脚"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1006</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"6666"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"张小芳"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0720"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"female"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">24</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"来,手机交一下,胸卡口罩戴起来"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"来,手机交一下,胸卡口罩戴起来"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1007</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"7777"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"马丁"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0523"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"male"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">70</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"_省略,scala,编程,橄榄球"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"_省略,scala,编程,橄榄球"</span><span class="token punctuation">&#125;</span><span class="token constant">PUT</span> stu1<span class="token operator">/</span>_doc<span class="token operator">/</span><span class="token number">1008</span><span class="token punctuation">&#123;</span>  <span class="token string">"stu_id"</span><span class="token operator">:</span><span class="token string">"8888"</span><span class="token punctuation">,</span>  <span class="token string">"name"</span><span class="token operator">:</span><span class="token string">"安小妮"</span><span class="token punctuation">,</span>  <span class="token string">"class_id"</span><span class="token operator">:</span><span class="token string">"0523"</span><span class="token punctuation">,</span>  <span class="token string">"gender"</span><span class="token operator">:</span><span class="token string">"female"</span><span class="token punctuation">,</span>  <span class="token string">"age"</span><span class="token operator">:</span><span class="token number">30</span><span class="token punctuation">,</span>  <span class="token string">"favo1"</span><span class="token operator">:</span><span class="token string">"来,手机交一下,胸卡口罩戴起来"</span><span class="token punctuation">,</span>  <span class="token string">"favo2"</span><span class="token operator">:</span><span class="token string">"来,手机交一下,胸卡口罩戴起来"</span><span class="token punctuation">&#125;</span>#查询数据<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token function">#全值匹配查询filter</span><span class="token punctuation">(</span>where<span class="token punctuation">)</span><span class="token operator">:</span>指的是将查询条件当做一个整体<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"favo1"</span><span class="token operator">:</span> <span class="token string">"来,手机交一下,胸卡口罩戴起来"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"favo2"</span><span class="token operator">:</span> <span class="token string">"来,手机交一下,胸卡口罩戴起来"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#分词匹配match<span class="token operator">:</span>将查询条件做分词<span class="token punctuation">,</span>但是使用的分词规则与原字段相同<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"favo1"</span><span class="token operator">:</span> <span class="token string">"来,手机交一下,胸卡口罩戴起来"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"favo2"</span><span class="token operator">:</span> <span class="token string">"来,手机交一下,胸卡口罩戴起来"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"favo1"</span><span class="token operator">:</span> <span class="token string">"球"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"favo2"</span><span class="token operator">:</span> <span class="token string">"球"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#结合全值匹配以及分词匹配查询#需求<span class="token punctuation">,</span>查询出<span class="token number">0720</span>班级爱好包含<span class="token string">"球"</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"class_id"</span><span class="token operator">:</span> <span class="token string">"0720"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"favo2"</span><span class="token operator">:</span> <span class="token string">"球"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#模糊查询<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"fuzzy"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"gender"</span><span class="token operator">:</span> <span class="token string">"female"</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#聚合查询<span class="token operator">:</span>单个聚合条件<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"countByClass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"terms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"class_id"</span><span class="token punctuation">,</span>        <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"maxAge"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"max"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#聚合查询<span class="token operator">:</span>多个聚合条件<span class="token operator">:</span>没有关联<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"countByClass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"terms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"class_id"</span><span class="token punctuation">,</span>        <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string">"maxAge"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"max"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#聚合查询<span class="token operator">:</span>多个聚合条件<span class="token operator">:</span>嵌套关联<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"countByClass"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"terms"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"class_id"</span><span class="token punctuation">,</span>        <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">10</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"maxAge"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"max"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>#分页查询  <span class="token keyword">from</span><span class="token operator">=</span><span class="token punctuation">(</span>页码<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span>size<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"from"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span>#综合需求<span class="token operator">:</span>查询<span class="token number">0720</span>班级爱好包含<span class="token string">"球"</span>的人<span class="token punctuation">,</span>并计算其中最大年纪是多少<span class="token punctuation">,</span>同时使用分页查询<span class="token constant">GET</span> stu1<span class="token operator">/</span>_search<span class="token punctuation">&#123;</span>  <span class="token string">"query"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"bool"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"filter"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"term"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>          <span class="token string">"class_id"</span><span class="token operator">:</span> <span class="token string">"0720"</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token string">"must"</span><span class="token operator">:</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span>          <span class="token string">"match"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>            <span class="token string">"favo2"</span><span class="token operator">:</span> <span class="token string">"球"</span>          <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">]</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"aggs"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    <span class="token string">"maxAge"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>      <span class="token string">"max"</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token string">"field"</span><span class="token operator">:</span> <span class="token string">"age"</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token string">"from"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token string">"size"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Spark_SparkOperator</title>
      <link href="2020/08/29/Spark_operator/"/>
      <url>2020/08/29/Spark_operator/</url>
      
        <content type="html"><![CDATA[<h1 id="算子"><a href="#算子" class="headerlink" title="算子"></a>算子</h1><h3 id="reduceBykey"><a href="#reduceBykey" class="headerlink" title="reduceBykey"></a>reduceBykey</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">val dataRDD1 &#x3D; sparkContext.makeRDD(List((&quot;a&quot;,1),(&quot;b&quot;,2),(&quot;c&quot;,3)))val dataRDD2 &#x3D; dataRDD1.reduceByKey(_+_)val dataRDD3 &#x3D; dataRDD1.reduceByKey(_+_, 2)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="aggregateByKey"><a href="#aggregateByKey" class="headerlink" title="aggregateByKey"></a>aggregateByKey</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">val dataRDD1 &#x3D;    sparkContext.makeRDD(List((&quot;a&quot;,1),(&quot;b&quot;,2),(&quot;c&quot;,3)))val dataRDD2 &#x3D;    dataRDD1.aggregateByKey(0)(_+_,_+_)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="combineByKey"><a href="#combineByKey" class="headerlink" title="combineByKey"></a>combineByKey</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"> * @author Jinxin Li * @create 2020-10-30 8:53 * 第一个初始值(但是传递函数),把每个分区的第一个值通过一个函数转化为初始值 * 第二个是区内聚合 * 第三个是区间聚合函数.跟上一个一样 * * 没有经过shuffle数据不会改变排序 * 需求,区内字符串相加,区间字符串长度相乘 *&#x2F;object CombineByKey &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[3]&quot;).setAppName(&quot;project1&quot;))    val list&#x3D; List(      (1, &quot;aa&quot;), (1,&quot;b&quot;), (1,&quot;a&quot;),      (2,&quot;ccc&quot;), (2, &quot;95&quot;), (1,&quot;b&quot;))&#x2F;&#x2F;这里(1,&quot;b&quot;)是第二个分区,但是位置是3,但是key为1的时候他是第一个,用这个第一个数指    val input &#x3D; sc.makeRDD(list, 2)    val combineRdd&#x3D; input.combineByKey(      x&#x3D;&gt;x.length,&#x2F;&#x2F;将每一个分区内的第一位数的进行函数作为初始值      &#x2F;&#x2F;这里区内第一个数指的是,相同的key的值的第一个      (len:Int,str:String)&#x3D;&gt;len + str.length,&#x2F;&#x2F;len是首值,也就是第一个函数传递的分区      (len1:Int,len2:Int) &#x3D;&gt; len1*len2&#x2F;&#x2F;不是函数的柯里化无法使用首值进行类型推断    ).saveAsTextFile(&quot;Day05&#x2F;output&quot;)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="sortByKey"><a href="#sortByKey" class="headerlink" title="sortByKey"></a>sortByKey</h3><p>稳定排序:数字相同不会改变顺序</p><p>函数时间复杂度O(c),O(n),O(nlogn),O(n2)</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object SortByKey &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;project1&quot;))    val list&#x3D; List(      (1, &quot;aa&quot;), (1,&quot;b&quot;), (1,&quot;a&quot;),      (2,&quot;ccc&quot;), (2, &quot;95&quot;), (1,&quot;b&quot;))    val input &#x3D; sc.makeRDD(list, 2)    input.sortByKey().collect().foreach(println)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object Join &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;project1&quot;))    val list&#x3D; List(      (1, &quot;aa&quot;), (1,&quot;b&quot;), (1,&quot;a&quot;),      (2,&quot;ccc&quot;), (2, &quot;95&quot;), (1,&quot;b&quot;))&#x2F;&#x2F;这里(1,&quot;b&quot;)是第二个分区,但是位置是3,但是key为1的时候他是第一个,用这个第一个数指    val input1 &#x3D; sc.makeRDD(list, 2)    val list2&#x3D; List(      (1, &quot;aa&quot;), (1,&quot;b&quot;), (1,&quot;a&quot;),      (2,&quot;ccc&quot;), (2, &quot;95&quot;), (3,&quot;b&quot;))    val input2 &#x3D; sc.makeRDD(list, 2)    input1.join(input2).collect().foreach(println)    &#x2F;&#x2F;结果是相同的Key进行join 1号list有3个key1,2号有4个key1,两者会产生12个数据(key1)    &#x2F;&#x2F;同时这个是内连接    &#x2F;&#x2F;也就是3这个key会消失  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="PartitionBy-包含关于分区的一些说明"><a href="#PartitionBy-包含关于分区的一些说明" class="headerlink" title="PartitionBy(包含关于分区的一些说明)"></a>PartitionBy(包含关于分区的一些说明)</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object PartitionBy &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;project1&quot;))    val rdd &#x3D; sc.makeRDD(Array((1,&quot;aaa&quot;),(2,&quot;bbb&quot;),(3,&quot;ccc&quot;),(1,&quot;aaa&quot;),(2,&quot;bbb&quot;),(3,&quot;ccc&quot;)),3)    &#x2F;*import org.apache.spark.HashPartitioner    val rdd2 &#x3D; rdd.partitionBy(new HashPartitioner(3))*&#x2F;    &#x2F;&#x2F;关于makeRDD的分区事项,默认是根据range与核心数进行切分,分区,添加hash分区器之后按照hash进行分区    val fileRDD: RDD[String] &#x3D; sc.textFile(&quot;Day05&#x2F;input&quot;)    fileRDD.saveAsTextFile(&quot;Day05&#x2F;output&quot;)    &#x2F;&#x2F;textFile的分区默认按照2个分区.保证最少两个分区    &#x2F;&#x2F;默认按照HDFS来进行分区,但是至少两个分区  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;行动算子的主要特点就是返回一个非RDD,经过shuffleobject count &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;project1&quot;))    val rdd&#x3D; sc.textFile(&quot;Day02&#x2F;input&#x2F;word.txt&quot;)    &#x2F;&#x2F; 返回RDD中元素的个数    val countResult: Long &#x3D; rdd.count()    println(countResult)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="cogroup"><a href="#cogroup" class="headerlink" title="cogroup"></a>cogroup</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">object cogroup &#123;  &#x2F;&#x2F;coGroup主要是对每一个key进行分组,然后针对于这些分组每一个分组作为一个buffer  def main(args: Array[String]): Unit &#x3D; &#123;    val sc &#x3D; new SparkContext(new SparkConf().setMaster(&quot;local[*]&quot;).setAppName(&quot;project1&quot;))    val dataRDD1 &#x3D; sc.makeRDD(List((&quot;a&quot;,1),(&quot;a&quot;,2),(&quot;c&quot;,3)))    val dataRDD2 &#x3D; sc.makeRDD(List((&quot;a&quot;,1),(&quot;c&quot;,2),(&quot;c&quot;,3)))    val value: RDD[(String, (Iterable[Int], Iterable[Int]))] &#x3D; dataRDD1.cogroup(dataRDD2)    value.foreach(println)    &#x2F;&#x2F;(a,(CompactBuffer(1, 2),CompactBuffer(1)))    &#x2F;&#x2F;(c,(CompactBuffer(3),CompactBuffer(2, 3)))  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604105832445.png" alt="1604105832445"></p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">sc.longAccumulator<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604111699745.png" alt="累加器"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604112475954.png" alt="Wc的累加器"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604112819436.png" alt="Scala算子总结"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604113095891.png" alt="1604113095891"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604113150988.png" alt="1604113150988"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604129808171.png" alt="1604129808171"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604130528847.png" alt="1604130528847"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604133613281.png" alt="1604133613281"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604279277784.png" alt="1604279277784"></p><p><img src="Scala%E7%AE%97%E5%AD%90%E6%80%BB%E7%BB%93.assets/1604279808204.png" alt="1604279808204"></p><h2 id="算子实战1-1"><a href="#算子实战1-1" class="headerlink" title="算子实战1.1"></a>算子实战1.1</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;&#x2F;6.2.1object Case1_1 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val Conf: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;project&quot;)    val sc: SparkContext &#x3D; new SparkContext(Conf)    val source: RDD[Array[String]] &#x3D; sc.textFile(&quot;Day07&#x2F;input&#x2F;user_visit_action.txt&quot;).map(_.split(&quot;_&quot;))    &#x2F;&#x2F;品类点击总数    &#x2F;&#x2F;思路:filter-&gt;map(6,1)-&gt;reduceBykey    val require1RDD: RDD[(String, Int)] &#x3D; source.filter(fields &#x3D;&gt; fields(6) !&#x3D; &quot;-1&quot;).map(fields &#x3D;&gt; (fields(6), 1)).reduceByKey(_ + _)    require1RDD.collect().foreach(println)    &#x2F;&#x2F;思路:filter-&gt;flatMap-&gt;reduceBykey    val require2RDD: RDD[(String, Int)] &#x3D; source.filter(fields &#x3D;&gt; fields(8) !&#x3D; &quot;null&quot;).flatMap(t &#x3D;&gt; t(8).split(&quot;,&quot;))      .map((_, 1)).reduceByKey(_ + _)    require2RDD.collect().foreach(println)    val require3RDD: RDD[(String, Int)] &#x3D; source.filter(fields &#x3D;&gt; fields(10) !&#x3D; &quot;null&quot;).flatMap(t &#x3D;&gt; t(10).split(&quot;,&quot;))      .map((_, 1)).reduceByKey(_ + _)    require3RDD.collect().foreach(println)    val result: RDD[(String, Int, Int, Int)] &#x3D; require1RDD.join(require2RDD).join(require3RDD).map &#123;      case (a, ((b, c), d)) &#x3D;&gt; (a, b, c, d)    &#125;.sortBy(t&#x3D;&gt;(t._2,t._3,t._4),false)    result.collect().foreach(println)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算子实战1-2-Case-If-多级筛选-多级排序"><a href="#算子实战1-2-Case-If-多级筛选-多级排序" class="headerlink" title="算子实战1.2 [Case - If 多级筛选,多级排序]"></a>算子实战1.2 [Case - If 多级筛选,多级排序]</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala">&#x2F;** * @author Jinxin Li * @create 2020-11-02 19:57 *&#x2F;object Case1_2 &#123;  def main(args: Array[String]): Unit &#x3D; &#123;    val Conf1: SparkConf &#x3D; new SparkConf().setMaster(&quot;local[2]&quot;).setAppName(&quot;project1.2&quot;)    val sc: SparkContext &#x3D; new SparkContext(Conf1)    val source: RDD[Array[String]] &#x3D; sc.textFile(&quot;Day07&#x2F;input&#x2F;user_visit_action.txt&quot;).map(_.split(&quot;_&quot;))    &#x2F;&#x2F;filter-&gt;flatmap-&gt;map-&gt;reducebykey    source.flatMap&#123;      case info if info(6) !&#x3D; &quot;-1&quot; &#x3D;&gt; Array(((info(6),&quot;click&quot;),1))      case info if info(8) !&#x3D; &quot;null&quot; &#x3D;&gt; info(8).split(&quot;,&quot;).map(t&#x3D;&gt;((t,&quot;order&quot;),1))      case info if info(10) !&#x3D; &quot;null&quot; &#x3D;&gt; info(10).split(&quot;,&quot;).map(t&#x3D;&gt;((t,&quot;pay&quot;),1))      case _ &#x3D;&gt; Nil    &#125;.reduceByKey(_+_).map&#123;      case ((cateId,action),count) &#x3D;&gt; (cateId,(action,count))    &#125;.groupByKey.mapValues(t&#x3D;&gt;&#123;      val map: Map[String, Int] &#x3D; t.toMap      (map.getOrElse(&quot;click&quot;,0),map.getOrElse(&quot;order&quot;,0),map.getOrElse(&quot;pay&quot;,0))    &#125;).sortBy(_._2,false).collect().foreach(println)  &#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="算子实战1-3-样例类-拓展样例类-重要"><a href="#算子实战1-3-样例类-拓展样例类-重要" class="headerlink" title="算子实战1.3 [样例类,拓展样例类(重要)]"></a>算子实战1.3 [样例类,拓展样例类(重要)]</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Scala的集合与泛型"><a href="#Scala的集合与泛型" class="headerlink" title="Scala的集合与泛型"></a>Scala的集合与泛型</h3><h3 id="算子实战1-4-1-5-2-3-自定义累加器"><a href="#算子实战1-4-1-5-2-3-自定义累加器" class="headerlink" title="算子实战1.4,1.5,2,3,自定义累加器"></a>算子实战1.4,1.5,2,3,自定义累加器</h3><h3 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h3>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> operator </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ProcessAPI与状态后端</title>
      <link href="2020/08/20/Flink05_ProcessFunction%E4%B8%8EState/"/>
      <url>2020/08/20/Flink05_ProcessFunction%E4%B8%8EState/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-ProcessFunctionAPI概述"><a href="#0x0-ProcessFunctionAPI概述" class="headerlink" title="0x0 ProcessFunctionAPI概述"></a>0x0 ProcessFunctionAPI概述</h1><p>我们之前学习的转换算子是无法访问事件的时间戳信息和水位线信息的。而这在一些应用场景下，极为重要。例如MapFunction这样的map转换算子就无法访问时间戳或者当前事件的事件时间。</p><p>基于此，DataStream API提供了一系列的Low-Level转换算子。可以访问时间戳、watermark以及注册定时事件。还可以输出特定的一些事件，例如超时事件等。Process Function用来构建事件驱动的应用以及实现自定义的业务逻辑(使用之前的window函数和转换算子无法实现)。例如，Flink SQL就是使用Process Function实现的。</p><p>Flink提供了8个Process Function：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">ProcessFunctionKeyedProcessFunctionCoProcessFunctionProcessJoinFunctionBroadcastProcessFunctionKeyedBroadcastProcessFunctionProcessWindowFunctionProcessAllWindowFunction<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/ProcessFunction%E7%BB%A7%E6%89%BF%E6%A0%91.png" alt="ProcessFunction继承树"></p><h1 id="0x1-状态编程"><a href="#0x1-状态编程" class="headerlink" title="0x1 状态编程"></a>0x1 状态编程</h1><p>流式计算分为无状态和有状态两种情况。</p><p>无状态的计算观察每个独立事件，并根据最后一个事件输出结果。例如，流处理应用程序从传感器接收温度读数，并在温度超过90度时发出警告。有状态的计算则会基于多个事件输出结果。</p><p><strong>使用状态编程的算例</strong></p><ol><li>按时间:</li></ol><p>例如，计算过去一小时的平均温度，就是有状态的计算。</p><ol start="2"><li>复杂事件检测</li></ol><p>例如，若在一分钟内收到两个相差20度以上的温度读数，则发出警告，这是有状态的计算。</p><p>流与流之间的所有关联操作，以及流与静态表或动态表之间的关联操作，都是有状态的计算。</p><p>下图展示了无状态流处理和有状态流处理的主要区别。无状态流处理分别接收每条数据记录(图中的黑条)，然后根据最新输入的数据生成输出数据(白条)。</p><p>有状态流处理会维护状态(根据每条输入记录进行更新)，并基于最新输入的记录和当前的状态值生成输出记录(灰条)。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%9C%89%E7%8A%B6%E6%80%81%E7%9A%84%E6%B5%81%E8%AE%A1%E7%AE%97%E4%B8%8E%E6%97%A0%E7%8A%B6%E6%80%81%E7%9A%84%E6%B5%81%E8%AE%A1%E7%AE%97.jpg" alt="有状态的流处理与无状态的流处理"></p><h2 id="1-状态的类型"><a href="#1-状态的类型" class="headerlink" title="1.状态的类型"></a>1.状态的类型</h2><p>Flink内置的很多算子，数据源source，数据存储sink都是有状态的，流中的数据都是buffer records，会保存一定的元素或者元数据。例如: ProcessWindowFunction会缓存输入流的数据，ProcessFunction会保存设置的定时器信息等等。</p><p>在Flink中，状态始终与特定算子相关联。总的来说，有两种类型的状态：</p><p>算子状态（operator state）</p><p>键控状态（keyed state）</p><h2 id="2-有状态的算子和应用程序"><a href="#2-有状态的算子和应用程序" class="headerlink" title="2.有状态的算子和应用程序"></a>2.有状态的算子和应用程序</h2><p>Flink内置的很多算子，数据源source，数据存储sink都是有状态的，流中的数据都是buffer records，会保存一定的元素或者元数据。例如: ProcessWindowFunction会缓存输入流的数据，ProcessFunction会保存设置的定时器信息等等。</p><p>在Flink中，状态始终与特定算子相关联。总的来说，有两种类型的状态：</p><p>l 算子状态（operator state）</p><p>l 键控状态（keyed state）</p><h3 id="2-1-算子状态（operator-state）"><a href="#2-1-算子状态（operator-state）" class="headerlink" title="2.1 算子状态（operator state）"></a>2.1 算子状态（operator state）</h3><p>算子状态的作用范围限定为<strong>算子任务</strong>。</p><p>状态与算子挂钩</p><p>这意味着由同一并行任务所处理的所有数据都可以访问到相同的状态，状态对于同一任务而言是共享的。算子状态不能由相同或不同算子的另一个任务访问。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%9F%BA%E4%BA%8E%E7%AE%97%E5%AD%90%E7%9A%84%E7%8A%B6%E6%80%81.jpg" alt="基于算子的状态"></p><p>Flink为算子状态提供三种基本数据结构：</p><p>列表状态（List state）</p><p>将状态表示为一组数据的列表。</p><p>联合列表状态（Union list state）</p><p>也将状态表示为数据的列表。它与常规列表状态的区别在于，在发生故障时，或者从保存点（savepoint）启动应用程序时如何恢复。</p><p>广播状态（Broadcast state）</p><p>如果一个算子有多项任务，而它的每项任务状态又都相同，那么这种特殊情况最适合应用广播状态。</p><h3 id="2-2-键控状态（keyed-state）"><a href="#2-2-键控状态（keyed-state）" class="headerlink" title="2.2 键控状态（keyed state）"></a>2.2 键控状态（keyed state）</h3><p>键控状态是根据输入数据流中定义的键（key）来维护和访问的。</p><p>Flink为每个键值维护一个状态实例，并将具有相同键的所有数据，都分区到同一个算子任务中，这个任务会维护和处理这个key对应的状态。当任务处理一条数据时，它会自动将状态的访问范围限定为当前数据的key。因此，具有相同key的所有数据都会访问相同的状态。Keyed State很类似于一个分布式的key-value map数据结构，只能用于KeyedStream（keyBy算子处理之后）。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E9%94%AE%E6%8E%A7%E7%8A%B6%E6%80%81.png" alt="键控状态使用"></p><h2 id="3-键控状态的支持类型与基本操作"><a href="#3-键控状态的支持类型与基本操作" class="headerlink" title="3.键控状态的支持类型与基本操作"></a>3.键控状态的支持类型与基本操作</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token class-name">Flink</span>的<span class="token class-name">Keyed</span> <span class="token class-name">State</span>支持以下数据类型：​<span class="token class-name">ValueState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token comment">//保存单个的值，值的类型为T。</span>​get操作<span class="token operator">:</span> <span class="token class-name">ValueState</span><span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span>​set操作<span class="token operator">:</span> <span class="token class-name">ValueState</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token class-name">ListState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span>保存一个列表，列表里的元素的数据类型为<span class="token class-name">T</span>。基本操作如下：​<span class="token class-name">ListState</span><span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">T</span> value<span class="token punctuation">)</span>​<span class="token class-name">ListState</span><span class="token punctuation">.</span><span class="token function">addAll</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> values<span class="token punctuation">)</span>​<span class="token class-name">ListState</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span>返回<span class="token class-name">Iterable</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span>​<span class="token class-name">ListState</span><span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> values<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token class-name">MapState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">K</span><span class="token punctuation">,</span> <span class="token class-name">V</span><span class="token punctuation">></span></span>保存<span class="token class-name">Key</span><span class="token operator">-</span><span class="token class-name">Value</span>对。​<span class="token class-name">MapState</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">UK</span> key<span class="token punctuation">)</span>​<span class="token class-name">MapState</span><span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">UK</span> key<span class="token punctuation">,</span> <span class="token class-name">UV</span> value<span class="token punctuation">)</span>​<span class="token class-name">MapState</span><span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span><span class="token class-name">UK</span> key<span class="token punctuation">)</span>​<span class="token class-name">MapState</span><span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">UK</span> key<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token class-name">ReducingState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token class-name">AggregatingState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">I</span><span class="token punctuation">,</span> <span class="token class-name">O</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token class-name">State</span><span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span>是清空操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x2-实战案例"><a href="#0x2-实战案例" class="headerlink" title="0x2 实战案例"></a>0x2 实战案例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>state</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">SensorReading</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span></span><span class="token class-name">ValueState</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>state<span class="token punctuation">.</span></span><span class="token class-name">ValueStateDescriptor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>configuration<span class="token punctuation">.</span></span><span class="token class-name">Configuration</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">KeyedProcessFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Collector</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-18 9:01 * 需求:监测传感器温度,在10秒内不下降,使用processAPI.onTimer */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink02_State_ProcessOnTimer</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境与端口数据源</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 将数据源转换为SensorReading对象</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> sensorStream <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">SensorReading</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> id <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> ts <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> ts<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 分组,然后使用processAPi定时统计计算</span>        sensorStream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyKeyedProcessFunction</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 执行计划</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyKeyedProcessFunction</span> <span class="token keyword">extends</span> <span class="token class-name">KeyedProcessFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token comment">//间隔属性</span>        <span class="token keyword">private</span> <span class="token keyword">long</span> interval<span class="token punctuation">;</span>        <span class="token comment">//状态属性</span>        <span class="token keyword">private</span> <span class="token class-name">ValueState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> lastTemp<span class="token punctuation">;</span>        <span class="token comment">//定时器属性</span>        <span class="token keyword">private</span> <span class="token class-name">ValueState</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span> timer<span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token class-name">MyKeyedProcessFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//定义构造器外部传入参数</span>        <span class="token keyword">public</span> <span class="token class-name">MyKeyedProcessFunction</span><span class="token punctuation">(</span><span class="token keyword">long</span> interval<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>interval<span class="token operator">=</span>interval<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//生命周期函数</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token class-name">Configuration</span> parameters<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取上下文对象</span>            lastTemp <span class="token operator">=</span> <span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"lastTemp"</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取定时器记录状态</span>            timer <span class="token operator">=</span> <span class="token function">getRuntimeContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ValueStateDescriptor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Long</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"timer"</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span> sensorReading<span class="token punctuation">,</span> <span class="token class-name">Context</span> context<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取现在传感器的温度</span>            <span class="token class-name">Double</span> temp <span class="token operator">=</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取上次传感器的温度</span>            <span class="token class-name">Double</span> last_temp <span class="token operator">=</span> lastTemp<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//获取当前时间</span>            <span class="token keyword">long</span> ts <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">currentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>last_temp<span class="token operator">!=</span><span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> temp<span class="token operator">&lt;</span>last_temp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">Long</span> lastTs <span class="token operator">=</span> timer<span class="token punctuation">.</span><span class="token function">value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                context<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">deleteProcessingTimeTimer</span><span class="token punctuation">(</span>lastTs<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//注册新的10秒的定时器</span>                context<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerProcessingTimeTimer</span><span class="token punctuation">(</span>ts<span class="token operator">+</span>interval<span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//更新状态</span>                timer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ts<span class="token operator">+</span>interval<span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>last_temp<span class="token operator">==</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//注册新的10秒的定时器</span>                context<span class="token punctuation">.</span><span class="token function">timerService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerProcessingTimeTimer</span><span class="token punctuation">(</span>ts<span class="token operator">+</span>interval<span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//更新状态</span>                timer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>ts<span class="token operator">+</span>interval<span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            lastTemp<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onTimer</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token class-name">OnTimerContext</span> ctx<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> out<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"温度在"</span><span class="token operator">+</span>interval<span class="token operator">+</span><span class="token string">"秒内没有下降"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x3-状态后端"><a href="#0x3-状态后端" class="headerlink" title="0x3 状态后端"></a>0x3 状态后端</h1><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>每传入一条数据，有状态的算子任务都会读取和更新状态。由于有效的状态访问对于处理数据的低延迟至关重要，因此每个并行任务都会在本地维护其状态，以确保快速的状态访问。状态的存储、访问以及维护，由一个可插入的组件决定，这个组件就叫做状态后端（state backend）</p><p>状态后端主要负责两件事：</p><ol><li><p>本地的状态管理</p></li><li><p>将检查点（checkpoint）状态写入远程存储</p></li></ol><p><strong>用途</strong>:用 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/dev/datastream_api.html">Data Stream API</a> 编写的程序通常以各种形式保存状态：</p><ul><li>在 Window 触发之前要么收集元素、要么聚合</li><li>转换函数可以使用 key/value 格式的状态接口来存储状态</li><li>转换函数可以实现 <code>CheckpointedFunction</code> 接口，使其本地变量具有容错能力</li></ul><h2 id="2-状态后端分类："><a href="#2-状态后端分类：" class="headerlink" title="2.状态后端分类："></a>2.状态后端分类：</h2><h3 id="MemoryStateBackend"><a href="#MemoryStateBackend" class="headerlink" title="MemoryStateBackend"></a><strong>MemoryStateBackend</strong></h3><p>在 <em>MemoryStateBackend</em> 内部，数据以 Java 对象的形式存储在堆中。 Key/value 形式的状态和窗口算子持有存储着状态值、触发器的 hash table。</p><p>在 CheckPoint 时，State Backend 对状态进行快照，并将快照信息作为 CheckPoint 应答消息的一部分发送给 JobManager(master)，同时 JobManager 也将快照信息存储在堆内存中。</p><p><strong>何时使用MemoryStateBackend？</strong></p><p>MemoryStateBackend 能配置异步快照。强烈建议使用异步快照来防止数据流阻塞，注意，异步快照默认是开启的。 用户可以在实例化 <code>MemoryStateBackend</code> 的时候，将相应布尔类型的构造参数设置为 <code>false</code> 来关闭异步快照（仅在 debug 的时候使用），例如：</p><pre class="line-numbers language-none"><code class="language-none">new MemoryStateBackend(MAX_MEM_STATE_SIZE, false);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>MemoryStateBackend 的限制：</strong></p><ul><li>默认情况下，每个独立的状态大小限制是 5 MB。在 MemoryStateBackend 的构造器中可以增加其大小。</li><li>无论配置的最大状态内存大小（MAX_MEM_STATE_SIZE）有多大，都不能大于 akka frame 大小（看<a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/config.html">配置参数</a>）。</li><li>聚合后的状态必须能够放进 JobManager 的内存中。</li></ul><p><strong>MemoryStateBackend 适用场景：</strong></p><ul><li>本地开发和调试。</li><li>状态很小的 Job，例如：由每次只处理一条记录的函数（Map、FlatMap、Filter 等）构成的 Job。Kafka Consumer 仅仅需要非常小的状态。</li></ul><p>建议同时将 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#managed-memory">managed memory</a> 设为0，以保证将最大限度的内存分配给 JVM 上的用户代码。</p><h3 id="FsStateBackend"><a href="#FsStateBackend" class="headerlink" title="FsStateBackend"></a><strong>FsStateBackend</strong></h3><p><em>FsStateBackend</em> 需要配置一个文件系统的 URL（类型、地址、路径），例如：”hdfs://namenode:40010/flink/checkpoints” 或 “file:///data/flink/checkpoints”。</p><p>FsStateBackend 将正在运行中的状态数据保存在 TaskManager 的内存中。CheckPoint 时，将状态快照写入到配置的文件系统目录中。 少量的元数据信息存储到 JobManager 的内存中（高可用模式下，将其写入到 CheckPoint 的元数据文件中）。</p><p>FsStateBackend 默认使用==异步快照==来防止 CheckPoint 写状态时对数据处理造成阻塞。 用户可以在实例化 <code>FsStateBackend</code> 的时候，将相应布尔类型的构造参数设置为 <code>false</code> 来关闭异步快照，例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>FsStateBackend 适用场景:</p><ul><li>状态比较大、窗口比较长、key/value 状态比较大的 Job。</li><li>所有高可用的场景。</li></ul><p>建议同时将 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/deployment/memory/mem_setup_tm.html#managed-memory">managed memory</a> 设为0，以保证将最大限度的内存分配给 JVM 上的用户代码。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>env<span class="token punctuation">.</span><span class="token function">setStateBackend</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FsStateBackend</span><span class="token punctuation">(</span><span class="token string">"hdfs://namenode:40010/flink/checkpoints"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>yaml文件配置</strong></p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 用于存储 operator state 快照的 State Backend</span><span class="token key atrule">state.backend</span><span class="token punctuation">:</span> filesystem<span class="token comment"># 存储快照的目录</span><span class="token key atrule">state.checkpoints.dir</span><span class="token punctuation">:</span> hdfs<span class="token punctuation">:</span>//namenode<span class="token punctuation">:</span>40010/flink/checkpoints<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RocksDBStateBackend"><a href="#RocksDBStateBackend" class="headerlink" title="==RocksDBStateBackend=="></a>==<strong>RocksDBStateBackend</strong>==</h3><p><em>RocksDBStateBackend</em> 需要配置一个文件系统的 URL （类型、地址、路径），例如：”hdfs://namenode:40010/flink/checkpoints” 或 “file:///data/flink/checkpoints”。</p><p>RocksDBStateBackend 将正在运行中的状态数据保存在 <a href="http://rocksdb.org/">RocksDB</a> 数据库中，RocksDB 数据库默认将数据存储在 TaskManager 的数据目录。 CheckPoint 时，整个 RocksDB 数据库被 checkpoint 到配置的文件系统目录中。 少量的元数据信息存储到 JobManager 的内存中（高可用模式下，将其存储到 CheckPoint 的元数据文件中）。</p><p>RocksDBStateBackend 只支持异步快照。</p><p>RocksDBStateBackend 的限制：</p><ul><li>由于 RocksDB 的 JNI API 构建在 byte[] 数据结构之上, 所以每个 key 和 value 最大支持 2^31 字节(2G, 重要信息: RocksDB 合并操作的状态（例如：ListState）累积数据量大小可以超过 2^31 字节==(4G)==，但是会在下一次获取数据时失败。这是当前 RocksDB JNI 的限制。</li></ul><p>RocksDBStateBackend 的适用场景：</p><ul><li>状态非常大、窗口非常长、key/value 状态非常大的 Job。</li><li>所有高可用的场景。</li></ul><p>注意，你可以保留的状态大小仅受磁盘空间的限制。与状态存储在内存中的 FsStateBackend 相比，RocksDBStateBackend 允许存储非常大的状态。 然而，这也意味着使用 RocksDBStateBackend 将会使应用程序的最大吞吐量降低。 所有的读写都必须序列化、反序列化操作，这个比基于堆内存的 state backend 的效率要低很多。</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.apache.flink<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>flink-statebackend-rocksdb_2.11<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.10.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>设置状态后端为RocksDBStateBackend：</p><p>设置状态后端的配置</p><h2 id="3-异步快照"><a href="#3-异步快照" class="headerlink" title="3.异步快照"></a>3.异步快照</h2><p>参考:</p><p> <a href="https://arxiv.org/abs/1506.08603">https://arxiv.org/abs/1506.08603</a> （Lightweight Asynchronous Snapshots for Distributed Dataflows）</p><h3 id="3-1-概述"><a href="#3-1-概述" class="headerlink" title="3.1 概述"></a>3.1 概述</h3><p>flink的checkpoint（检查点）的原理:checkpoint是目前主流的分布式流式处理框架用于恢复失败作业而保证数据不丢失的常用方法，也是flink实现exactly-once的基础。</p><p>以checkpoint为基础，定期生成全局的状态快照（global stat snapshot），当出现作业失败，将集群状态恢复到上一个可用的global stat snapshot再开始继续计算，从而保证数据不丢失。</p><p>同时这个“checkpoint/snapshot”还必须尽可能不影响正常的流式计算过程，不能说在生成“checkpoint/snapshot”的时候，对整个集群的处理速度有很大影响，甚至停下来（文章中举了一个反例，叫Naiad，这个不了解），那么这种方案等同于不可用。</p><p>Flink采用的是轻量级异步快照，叫做 ABS（Asynchronous Barrier Snapshotting).</p><h3 id="3-2-异步快照"><a href="#3-2-异步快照" class="headerlink" title="3.2 异步快照"></a>3.2 异步快照</h3><p>所以flink有一篇另外描述exactly-once的文章<a href="https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html%E3%80%82%E5%A4%A7%E6%A6%82%E6%80%9D%E8%B7%AF%E6%98%AF%EF%BC%9A%E6%8A%8A%E5%B1%9E%E4%BA%8E%E4%B8%80%E4%B8%AA%E5%85%A8%E5%B1%80%E5%BF%AB%E7%85%A7%E7%9A%84%E6%89%80%E6%9C%89sink%E6%95%B0%E6%8D%AE%E4%B8%80%E6%AC%A1%E6%80%A7%E6%8F%90%E4%BA%A4%EF%BC%8C%E6%8F%90%E4%BA%A4%E6%88%90%E5%8A%9F%E6%89%8D%E7%AE%97%E8%AF%A5%E5%85%A8%E5%B1%80%E5%BF%AB%E7%85%A7%E6%89%A7%E8%A1%8C%E6%88%90%E5%8A%9F%E3%80%82%E5%8F%A6%E5%A4%96%E5%A4%96%E9%83%A8%E5%AD%98%E5%82%A8%E8%BF%98%E8%A6%81%E6%9C%89%E4%BA%8B%E5%8A%A1%E6%80%A7%E5%86%99%E5%85%A5%EF%BC%88%E4%B8%80%E6%89%B9%E6%95%B0%E6%8D%AE%E8%A6%81%E4%B9%88%E5%86%99%E5%85%A5%E9%83%BD%E6%88%90%E5%8A%9F%EF%BC%8C%E8%A6%81%E4%B9%88%E9%83%BD%E5%A4%B1%E8%B4%A5%EF%BC%89%E7%9A%84%E5%8A%9F%E8%83%BD%E3%80%82kafka">https://flink.apache.org/features/2018/03/01/end-to-end-exactly-once-apache-flink.html。大概思路是：把属于一个全局快照的所有sink数据一次性提交，提交成功才算该全局快照执行成功。另外外部存储还要有事务性写入（一批数据要么写入都成功，要么都失败）的功能。kafka</a> 0.11开始有提供事务性写入功能。</p><h1 id="0x4-RocksDB-State-Backend"><a href="#0x4-RocksDB-State-Backend" class="headerlink" title="0x4 RocksDB State Backend"></a>0x4 RocksDB State Backend</h1><h3 id="1-增量快照"><a href="#1-增量快照" class="headerlink" title="1.增量快照"></a>1.增量快照</h3><p>RocksDBStateBackend 支持<em>增量快照</em>。不同于产生一个包含所有数据的全量备份，增量快照中只包含自上一次快照完成之后被修改的记录，因此可以显著减少快照完成的耗时。</p><p>一个增量快照是基于（通常多个）前序快照构建的。由于 RocksDB 内部存在 compaction 机制对 sst 文件进行合并，Flink 的增量快照也会定期重新设立起点（rebase），因此增量链条不会一直增长，旧快照包含的文件也会逐渐过期并被自动清理。</p><p>和基于全量快照的恢复时间相比，如果网络带宽是瓶颈，那么基于增量快照恢复可能会消耗更多时间，因为增量快照包含的 sst 文件之间可能存在数据重叠导致需要下载的数据量变大；而当 CPU 或者 IO 是瓶颈的时候，基于增量快照恢复会更快，因为从增量快照恢复不需要解析 Flink 的统一快照格式来重建本地的 RocksDB 数据表，而是可以直接基于 sst 文件加载。</p><p>虽然状态数据量很大时我们推荐使用增量快照，但这并不是默认的快照机制，您需要通过下述配置手动开启该功能：</p><ul><li>在 <code>flink-conf.yaml</code> 中设置：<code>state.backend.incremental: true</code> 或者</li><li>在代码中按照右侧方式配置（来覆盖默认配置）：<code>RocksDBStateBackend backend = new RocksDBStateBackend(filebackend, true);</code></li></ul><p>需要注意的是，一旦启用了增量快照，网页上展示的 <code>Checkpointed Data Size</code> 只代表增量上传的数据量，而不是一次快照的完整数据量。</p><h3 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2.内存管理"></a>2.内存管理</h3><p>Flink 致力于控制整个进程的内存消耗，以确保 Flink 任务管理器（TaskManager）有良好的内存使用，从而既不会在容器（Docker/Kubernetes, Yarn等）环境中由于内存超用被杀掉，也不会因为内存利用率过低导致不必要的数据落盘或是缓存命中率下降，致使性能下降。</p><p>为了达到上述目标，Flink 默认将 RocksDB 的可用内存配置为任务管理器的单槽（per-slot）托管内存量。这将为大多数应用程序提供良好的开箱即用体验，即大多数应用程序不需要调整 RocksDB 配置，简单的增加 Flink 的托管内存即可改善内存相关性能问题。</p><p>当然，您也可以选择不使用 Flink 自带的内存管理，而是手动为 RocksDB 的每个列族（ColumnFamily）分配内存（每个算子的每个 state 都对应一个列族）。这为专业用户提供了对 RocksDB 进行更细粒度控制的途径，但同时也意味着用户需要自行保证总内存消耗不会超过（尤其是容器）环境的限制。请参阅 <a href="https://ci.apache.org/projects/flink/flink-docs-release-1.12/zh/ops/state/large_state_tuning.html#tuning-rocksdb-memory">large state tuning</a> 了解有关大状态数据性能调优的一些指导原则。</p><p><strong>总结</strong>:flink会分配一个slot给RocksDB</p><p>==<strong>RocksDB 使用托管内存</strong>==</p><p>这个功能默认打开，并且可以通过 <code>state.backend.rocksdb.memory.managed</code> 配置项控制。</p><p>Flink 并不直接控制 RocksDB 的 native 内存分配，而是通过配置 RocksDB 来确保其使用的内存正好与 Flink 的托管内存预算相同。这是在任务槽（per-slot）级别上完成的（托管内存以任务槽为粒度计算)。</p><p>为了设置 RocksDB 实例的总内存使用量，Flink 对同一个任务槽上的所有 RocksDB 实例使用共享的 <a href="https://github.com/facebook/RocksDB/wiki/Block-cache">cache</a> 以及 <a href="https://github.com/facebook/rocksdb/wiki/write-buffer-manager">write buffer manager</a>。 共享 cache 将对 RocksDB 中内存消耗的<a href="https://github.com/facebook/rocksdb/wiki/Memory-usage-in-rocksdb">三个主要来源</a>（块缓存、索引和bloom过滤器、MemTables）设置上限。</p><p>Flink还提供了两个参数来控制<em>写路径</em>（MemTable）和<em>读路径</em>（索引及过滤器，读缓存）之间的内存分配。当您看到 RocksDB 由于缺少写缓冲内存（频繁刷新）或读缓存未命中而性能不佳时，可以使用这些参数调整读写间的内存分配。</p><ul><li><code>state.backend.rocksdb.memory.write-buffer-ratio</code>，默认值 <code>0.5</code>，即 50% 的给定内存会分配给写缓冲区使用。</li><li><code>state.backend.rocksdb.memory.high-prio-pool-ratio</code>，默认值 <code>0.1</code>，即 10% 的 block cache 内存会优先分配给索引及过滤器。 我们强烈建议不要将此值设置为零，以防止索引和过滤器被频繁踢出缓存而导致性能问题。此外，我们默认将L0级的过滤器和索引将被固定到缓存中以提高性能，更多详细信息请参阅 <a href="https://github.com/facebook/rocksdb/wiki/Block-Cache#caching-index-filter-and-compression-dictionary-blocks">RocksDB 文档</a>。</li></ul><p><strong>注意</strong> 上述机制开启时将覆盖用户在 <a href="https://ci.apache.org/projects/flink/flink-docs-stable/zh/ops/state/state_backends.html#predefined-per-columnfamily-options"><code>PredefinedOptions</code></a> 和 <a href="https://ci.apache.org/projects/flink/flink-docs-stable/zh/ops/state/state_backends.html#passing-options-factory-to-rocksdb"><code>RocksDBOptionsFactory</code></a> 中对 block cache 和 write buffer 进行的配置。</p><p><strong>注意</strong> <em>仅面向专业用户</em>：若要手动控制内存，可以将 <code>state.backend.rocksdb.memory.managed</code> 设置为 <code>false</code>，并通过 <a href="https://ci.apache.org/projects/flink/flink-docs-stable/zh/ops/state/state_backends.html#passing-options-factory-to-rocksdb"><code>ColumnFamilyOptions</code></a> 配置 RocksDB。 或者可以复用上述 cache/write-buffer-manager 机制，但将内存大小设置为与 Flink 的托管内存大小无关的固定大小（通过 <code>state.backend.rocksdb.memory.fixed-per-slot</code> 选项）。 注意在这两种情况下，用户都需要确保在 JVM 之外有足够的内存可供 RocksDB 使用。</p><h3 id="3-计时器（内存-vs-RocksDB）"><a href="#3-计时器（内存-vs-RocksDB）" class="headerlink" title="3.计时器（内存 vs. RocksDB）"></a>3.计时器（内存 vs. RocksDB）</h3><p>计时器（Timer）用于安排稍后的操作（基于事件时间或处理时间），例如触发窗口或回调 <code>ProcessFunction</code>。</p><p>当选择 RocksDBStateBackend 时，默认情况下计时器也存储在 RocksDB 中。这是一种健壮且可扩展的方式，允许应用程序使用很多个计时器。另一方面，在 RocksDB 中维护计时器会有一定的成本，因此 Flink 也提供了将计时器存储在 JVM 堆上而使用 RocksDB 存储其他状态的选项。当计时器数量较少时，基于堆的计时器可以有更好的性能。</p><p>您可以通过将 <code>state.backend.rocksdb.timer-service.factory</code> 配置项设置为 <code>heap</code>（而不是默认的 <code>rocksdb</code>）来将计时器存储在堆上。</p><p><strong>注意</strong> <em>在 RocksDBStateBackend 中使用基于堆的计时器的组合当前不支持计时器状态的异步快照。其他状态（如 keyed state）可以被异步快照。</em></p><h2 id="4-对于RocksDB总结"><a href="#4-对于RocksDB总结" class="headerlink" title="4.对于RocksDB总结"></a>4.对于RocksDB总结</h2><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">RocksDB是一个本地库，<span class="token attr-name">它直接从进程分配内存，</span> <span class="token attr-value">而不是从JVM分配内存。</span><span class="token attr-name">分配给</span> <span class="token attr-value">RocksDB 的任何内存都必须被考虑在内，</span>通常需要将这部分内存从任务管理器（TaskManager）的JVM堆中减去。<span class="token attr-name">不这样做可能会导致JVM进程由于分配的内存超过申请值而被</span> <span class="token attr-value">YARN/Mesos 等资源管理框架终止。</span>算控状态<span class="token attr-name">Operator</span> <span class="token attr-value">ID | State</span>------------+------------------------<span class="token attr-name">source-id</span> <span class="token attr-value">  | State of StatefulSource</span><span class="token attr-name">mapper-id</span> <span class="token attr-value">  | State of StatefulMapper</span><span class="token attr-name">目前每个算子的每个状态都在</span> <span class="token attr-value">RocksDB 中有专门的一个列族存储</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>RocksDB</strong></p><p>您也可以通过配置一个 <code>RocksDBOptionsFactory</code> 来手动控制 RocksDB 的选项。此机制使您可以对列族的设置进行细粒度控制，例如内存使用、线程、Compaction 设置等。目前每个算子的每个状态都在 RocksDB 中有专门的一个列族存储。</p><h1 id="0x5-RocksDB数据库系统"><a href="#0x5-RocksDB数据库系统" class="headerlink" title="0x5 RocksDB数据库系统"></a>0x5 RocksDB数据库系统</h1><p>当选择 RocksDB 作为状态后端时，状态将作为序列化字节串存在于堆外内存（off-heap) 存储或本地磁盘中。<br>RocksDB 是一个以日志合并树( LSM 树）作为索引结构的 KV 存储引擎。当用于在 Flink 中存储 kv 状态时，键由 的序列化字节串组成，而值由状态的序列化字节组成。每次注册 kv 状态时，它都会映射到列族（column-family）（类似于传统数据库中的表），并将键值对以字节串存储在 RocksDB 中。这意味着每次读写（READ or WRITE）操作都必须对数据进行反序列化或者序列化，与 Flink 内置的 in-memory 状态后端相比，会有一些性能开销。<br>使用 RocksDB 作为状态后端有许多优点：</p><ul><li>不受 Java 垃圾回收的影响，与 heap 对象相比，它的内存开销更低，并且是目前唯一支持增量检查点（incremental checkpointing）的选项。</li><li>使用 RocksDB，状态大小仅受限于本地可用的磁盘空间大小，这很适合 state 特别大的 Flink 作业。</li></ul><p>下面的图表将进一步阐明 RocksDB 的基本读写操作。<br>RocksDB 的一次写入操作将把数据写入到内存的 MemTable 中。当 MemTable 写满时，它将成为 READ ONLY MemTable，并被一个新申请的 MemTable 替换。只读 MemTable 被后台线程周期性地刷新到磁盘中，生成按键排序的只读文件，这便是所谓的 SSTables。这些 SSTable 是不可变的，通过后台的多路归并实现进一步的整合。如前所述，对于 RocksDB，每个注册状态都是一个列族，这意味着每个状态都包含自己的 MemTables 和 SSTables 集。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink01_工具与架构</title>
      <link href="2020/05/21/Flink01_%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%9E%B6%E6%9E%84/"/>
      <url>2020/05/21/Flink01_%E5%B7%A5%E5%85%B7%E4%B8%8E%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-Flink的应用"><a href="#0x0-Flink的应用" class="headerlink" title="0x0.Flink的应用"></a>0x0.Flink的应用</h1><p>Apache Flink 是一个框架和分布式处理引擎，用于在<em>无边界和有边界</em>数据流上进行有状态的计算。Flink 能在所有常见集群环境中运行，并能以内存速度和任意规模进行计算。</p><h2 id="1-处理无界和有界数据"><a href="#1-处理无界和有界数据" class="headerlink" title="1.处理无界和有界数据"></a>1.处理无界和有界数据</h2><p>任何类型的数据都可以形成一种事件流。信用卡交易、传感器测量、机器日志、网站或移动应用程序上的用户交互记录，所有这些数据都形成一种流。</p><p>数据可以被作为 <strong>无界</strong> 或者 <strong>有界</strong>流来处理。</p><ol><li><strong>无界流</strong> 有定义流的开始，但没有定义流的结束。它们会无休止地产生数据。无界流的数据必须持续处理，即数据被摄取后需要立刻处理。我们不能等到所有数据都到达再处理，因为输入是无限的，在任何时候输入都不会完成。处理无界数据通常要求以特定顺序摄取事件，例如事件发生的顺序，以便能够推断结果的完整性。</li><li><strong>有界流</strong> 有定义流的开始，也有定义流的结束。有界流可以在摄取所有数据后再进行计算。有界流所有数据可以被排序，所以并不需要有序摄取。有界流处理通常被称为批处理</li></ol><p><img src="https://flink.apache.org/img/bounded-unbounded.png" alt="有界流与无界流"></p><p><strong>Apache Flink 擅长处理无界和有界数据集</strong> 精确的时间控制和状态化使得 Flink 的运行时(runtime)能够运行任何处理无界流的应用。有界流则由一些专为固定大小数据集特殊设计的算法和数据结构进行内部处理，产生了出色的性能。</p><h2 id="2-Flink的强大之处"><a href="#2-Flink的强大之处" class="headerlink" title="2.Flink的强大之处"></a>2.Flink的强大之处</h2><ul><li>处理<strong>每天处理数万亿的事件</strong>,</li><li>应用维护<strong>几TB大小的状态</strong>, 和</li><li>应用<strong>在数千个内核上运行</strong>。</li></ul><h2 id="3-如何利用内存性能"><a href="#3-如何利用内存性能" class="headerlink" title="3.如何利用内存性能"></a>3.如何利用内存性能</h2><p>有状态的 Flink 程序针对本地状态访问进行了优化。任务的状态始终保留在内存中，如果状态大小超过可用内存，则会保存在能高效访问的磁盘数据结构中。任务通过访问本地（通常在内存中）状态来进行所有的计算，从而产生非常低的处理延迟。Flink 通过定期和异步地对本地状态进行持久化存储来保证故障场景下精确一次的状态一致性。</p><p><img src="https://flink.apache.org/img/local-state.png" alt="img"></p><h1 id="0x1-Flink的操作工具"><a href="#0x1-Flink的操作工具" class="headerlink" title="0x1.Flink的操作工具"></a>0x1.Flink的操作工具</h1><h2 id="0-流处理应用的基本组件"><a href="#0-流处理应用的基本组件" class="headerlink" title="0.流处理应用的基本组件"></a>0.流处理应用的基本组件</h2><p>可以由流处理框架构建和执行的应用程序类型是由框架对 <em>流</em>、<em>状态</em>、<em>时间</em> 的支持程度来决定的。在下文中，我们将对上述这些流处理应用的基本组件逐一进行描述，并对 Flink 处理它们的方法进行细致剖析。</p><h3 id="1-流Stream"><a href="#1-流Stream" class="headerlink" title="1.流Stream"></a>1.流Stream</h3><p>显而易见，（数据）流是流处理的基本要素。然而，流也拥有着多种特征。这些特征决定了流如何以及何时被处理。Flink 是一个能够处理任何类型数据流的强大处理框架。</p><ul><li><strong>有界</strong> 和 <strong>无界</strong> 的数据流：流可以是无界的；也可以是有界的，例如固定大小的数据集。Flink 在无界的数据流处理上拥有诸多功能强大的特性，同时也针对有界的数据流开发了专用的高效算子。</li><li><strong>实时</strong> 和 <strong>历史记录</strong> 的数据流：所有的数据都是以流的方式产生，但用户通常会使用两种截然不同的方法处理数据。或是在数据生成时进行实时的处理；亦或是先将数据流持久化到存储系统中——例如文件系统或对象存储，然后再进行批处理。Flink 的应用能够同时支持处理实时以及历史记录数据流。</li></ul><h3 id="2-状态State"><a href="#2-状态State" class="headerlink" title="2.状态State"></a>2.状态State</h3><p>只有在每一个单独的事件上进行转换操作的应用才不需要状态，换言之，每一个具有一定复杂度的流处理应用都是有状态的。任何运行基本业务逻辑的流处理应用都需要在一定时间内存储所接收的事件或中间结果，以供后续的某个时间点（例如收到下一个事件或者经过一段特定时间）进行访问并进行后续处理。</p><p><img src="https://flink.apache.org/img/function-state.png" alt="算子与状态协同处理流"></p><p>应用状态是 Flink 中的特点，Flink 提供了许多状态管理相关的特性支持，其中包括：</p><ul><li><strong>多种状态基础类型</strong>：Flink 为多种不同的数据结构提供了相对应的状态基础类型，例如原子值（value），列表（list）以及映射（map）。开发者可以基于处理函数对状态的访问方式，选择最高效、最适合的状态基础类型。</li><li><strong>插件化的State Backend</strong>：State Backend 负责管理应用程序状态，并在需要的时候进行 checkpoint。Flink 支持多种 state backend，可以将状态存在内存或者 <a href="https://rocksdb.org/">RocksDB</a>。RocksDB 是一种高效的嵌入式、持久化键值存储引擎。Flink 也支持插件式的自定义 state backend 进行状态存储。</li><li><strong>精确一次语义</strong>：Flink 的 checkpoint 和故障恢复算法保证了故障发生后应用状态的一致性。因此，Flink 能够在应用程序发生故障时，对应用程序透明，不造成正确性的影响。</li><li><strong>超大数据量状态</strong>：Flink 能够利用其异步以及增量式的 checkpoint 算法，存储数 TB 级别的应用状态。</li><li><strong>可弹性伸缩的应用</strong>：Flink 能够通过在更多或更少的工作节点上对状态进行重新分布，支持有状态应用的分布式的横向伸缩</li></ul><h3 id="3-时间WaterMark"><a href="#3-时间WaterMark" class="headerlink" title="3.时间WaterMark"></a>3.时间WaterMark</h3><p>时间是流处理应用另一个重要的组成部分。因为事件总是在特定时间点发生，所以大多数的事件流都拥有事件本身所固有的时间语义。进一步而言，许多常见的流计算都基于时间语义，例如窗口聚合、会话计算、模式检测和基于时间的 join。流处理的一个重要方面是应用程序如何衡量时间，即区分事件时间（event-time）和处理时间（processing-time）。</p><p>Flink 提供了丰富的时间语义支持。</p><ul><li><strong>事件时间模式</strong>：使用事件时间语义的流处理应用根据事件本身自带的时间戳进行结果的计算。因此，无论处理的是历史记录的事件还是实时的事件，事件时间模式的处理总能保证结果的准确性和一致性。</li><li><strong>Watermark 支持</strong>：Flink 引入了 watermark 的概念，用以衡量事件时间进展。Watermark 也是一种平衡处理延时和完整性的灵活机制。</li><li><strong>迟到数据处理</strong>：当以带有 watermark 的事件时间模式处理数据流时，在计算完成之后仍会有相关数据到达。这样的事件被称为迟到事件。Flink 提供了多种处理迟到数据的选项，例如将这些数据重定向到旁路输出（side output）或者更新之前完成计算的结果。</li><li><strong>处理时间模式</strong>：除了事件时间模式，Flink 还支持处理时间语义。处理时间模式根据处理引擎的机器时钟触发计算，一般适用于有着严格的低延迟需求，并且能够容忍近似结果的流处理应用。</li></ul><h2 id="4-分层-API"><a href="#4-分层-API" class="headerlink" title="4.分层 API"></a>4.分层 API</h2><p>Flink 根据抽象程度分层，提供了三种不同的 API。每一种 API 在简洁性和表达力上有着不同的侧重，并且针对不同的应用场景。</p><p><img src="https://flink.apache.org/img/api-stack.png" alt="flink分层API"></p><h3 id="ProcessFunction"><a href="#ProcessFunction" class="headerlink" title="ProcessFunction"></a>ProcessFunction</h3><p><a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/stream/operators/process_function.html">ProcessFunction</a> 是 Flink 所提供的最具表达力的接口。ProcessFunction 可以处理一或两条输入数据流中的单个事件或者归入一个特定窗口内的多个事件。它提供了对于时间和状态的细粒度控制。开发者可以在其中任意地修改状态，也能够注册定时器用以在未来的某一时刻触发回调函数。因此，你可以利用 ProcessFunction 实现许多<a href="https://flink.apache.org/zh/usecases.html#eventDrivenApps">有状态的事件驱动应用</a>所需要的基于单个事件的复杂业务逻辑。</p><h3 id="DataStream-API"><a href="#DataStream-API" class="headerlink" title="DataStream API"></a>DataStream API</h3><p><a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/datastream_api.html">DataStream API</a> 为许多通用的流处理操作提供了处理原语。这些操作包括窗口、逐条记录的转换操作，在处理事件时进行外部数据库查询等。DataStream API 支持 Java 和 Scala 语言，预先定义了例如<code>map()</code>、<code>reduce()</code>、<code>aggregate()</code> 等函数。你可以通过扩展实现预定义接口或使用 Java、Scala 的 lambda 表达式实现自定义的函数。</p><p>下面的代码示例展示了如何捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。</p><h3 id="SQL-amp-Table-API"><a href="#SQL-amp-Table-API" class="headerlink" title="SQL &amp; Table API"></a>SQL &amp; Table API</h3><p>Flink 支持两种关系型的 API，<a href="https://ci.apache.org/projects/flink/flink-docs-stable/dev/table/index.html">Table API 和 SQL</a>。这两个 API 都是批处理和流处理统一的 API，这意味着在无边界的实时数据流和有边界的历史记录数据流上，关系型 API 会以相同的语义执行查询，并产生相同的结果。Table API 和 SQL 借助了 <a href="https://calcite.apache.org/">Apache Calcite</a> 来进行查询的解析，校验以及优化。它们可以与 DataStream 和 DataSet API 无缝集成，并支持用户自定义的标量函数，聚合函数以及表值函数。</p><p>Flink 的关系型 API 旨在简化<a href="https://flink.apache.org/zh/usecases.html#analytics">数据分析</a>、<a href="https://flink.apache.org/zh/usecases.html#pipelines">数据流水线和 ETL 应用</a>的定义。</p><p>下面的代码示例展示了如何使用 SQL 语句查询捕获会话时间范围内所有的点击流事件，并对每一次会话的点击量进行计数。此示例与上述 DataStream API 中的示例有着相同的逻辑。</p><h1 id="0x2-Flink的稳定性"><a href="#0x2-Flink的稳定性" class="headerlink" title="0x2.Flink的稳定性"></a>0x2.Flink的稳定性</h1><p>Apache Flink 是一个针对无界和有界数据流进行有状态计算的框架。由于许多流应用程序旨在以最短的停机时间连续运行，因此流处理器必须提供出色的故障恢复能力，以及在应用程序运行期间进行监控和维护的工具。</p><p>Apache Flink 非常注重流数据处理的可运维性。因此在这一小节中，我们将详细介绍 Flink 的故障恢复机制，并介绍其管理和监控应用的功能。</p><h2 id="1-如何保持7-24小时稳定运行"><a href="#1-如何保持7-24小时稳定运行" class="headerlink" title="1.如何保持7 * 24小时稳定运行"></a>1.如何保持7 * 24小时稳定运行</h2><p>Flink通过几下多种机制维护应用可持续运行及其一致性:</p><ul><li><strong>检查点的一致性</strong>: Flink的故障恢复机制是通过建立分布式应用服务状态一致性检查点实现的，当有故障产生时，应用服务会重启后，再重新加载上一次成功备份的状态检查点信息。结合可重放的数据源，该特性可保证<em>精确一次（exactly-once）</em>的状态一致性。</li><li><strong>高效的检查点</strong>: 如果一个应用要维护一个TB级的状态信息，对此应用的状态建立检查点服务的资源开销是很高的，为了减小因检查点服务对应用的延迟性（SLAs服务等级协议）的影响，Flink采用异步及增量的方式构建检查点服务。</li><li><strong>端到端的精确一次</strong>: Flink 为某些特定的存储支持了事务型输出的功能，及时在发生故障的情况下，也能够保证精确一次的输出。</li><li><strong>集成多种集群管理服务</strong>: Flink已与多种集群管理服务紧密集成，如 <a href="https://hadoop.apache.org/">Hadoop YARN</a>, <a href="https://mesos.apache.org/">Mesos</a>, 以及 <a href="https://kubernetes.io/">Kubernetes</a>。当集群中某个流程任务失败后，一个新的流程服务会自动启动并替代它继续执行。</li><li><strong>内置高可用服务</strong>: Flink内置了为解决单点故障问题的高可用性服务模块，此模块是基于<a href="https://zookeeper.apache.org/">Apache ZooKeeper</a> 技术实现的，<a href="https://zookeeper.apache.org/">Apache ZooKeeper</a>是一种可靠的、交互式的、分布式协调服务组件。</li></ul><h2 id="2-如何升级、迁移、暂停、恢复应用服务"><a href="#2-如何升级、迁移、暂停、恢复应用服务" class="headerlink" title="2.如何升级、迁移、暂停、恢复应用服务"></a>2.如何升级、迁移、暂停、恢复应用服务</h2><p>而Flink的 <em>Savepoint</em> 服务就是为解决升级服务过程中记录流应用状态信息及其相关难题而产生的一种唯一的、强大的组件。一个 Savepoint，就是一个应用服务状态的一致性快照，因此其与checkpoint组件的很相似，但是与checkpoint相比，Savepoint 需要手动触发启动，而且当流应用服务停止时，它并不会自动删除。Savepoint 常被应用于启动一个已含有状态的流服务，并初始化其（备份时）状态。Savepoint 有以下特点：</p><ul><li><strong>便于升级应用服务版本</strong>: Savepoint 常在应用版本升级时使用，当前应用的新版本更新升级时，可以根据上一个版本程序记录的 Savepoint 内的服务状态信息来重启服务。它也可能会使用更早的 Savepoint 还原点来重启服务，以便于修复由于有缺陷的程序版本导致的不正确的程序运行结果。</li><li><strong>方便集群服务移植</strong>: 通过使用 Savepoint，流服务应用可以自由的在不同集群中迁移部署。</li><li><strong>方便Flink版本升级</strong>: 通过使用 Savepoint，可以使应用服务在升级Flink时，更加安全便捷。</li><li><strong>增加应用并行服务的扩展性</strong>: Savepoint 也常在增加或减少应用服务集群的并行度时使用。</li><li><strong>便于A/B测试及假设分析场景对比结果</strong>: 通过把同一应用在使用不同版本的应用程序，基于同一个 Savepoint 还原点启动服务时，可以测试对比2个或多个版本程序的性能及服务质量。</li><li><strong>暂停和恢复服务</strong>: 一个应用服务可以在新建一个 Savepoint 后再停止服务，以便于后面任何时间点再根据这个实时刷新的 Savepoint 还原点进行恢复服务。</li><li><strong>归档服务</strong>: Savepoint 还提供还原点的归档服务，以便于用户能够指定时间点的 Savepoint 的服务数据进行重置应用服务的状态，进行恢复服务。</li></ul><h2 id="3-如何监控和控制应用服务"><a href="#3-如何监控和控制应用服务" class="headerlink" title="3.如何监控和控制应用服务"></a>3.如何监控和控制应用服务</h2><p>如其它应用服务一样，持续运行的流应用服务也需要监控及集成到一些基础设施资源管理服务中，例如一个组件的监控服务及日志服务等。监控服务有助于预测问题并提前做出反应，日志服务提供日志记录能够帮助追踪、调查、分析故障发生的根本原因。最后，便捷易用的访问控制应用服务运行的接口也是Flink的一个重要的亮点特征。</p><p>Flink与许多常见的日志记录和监视服务集成得很好，并提供了一个REST API来控制应用服务和查询应用信息。具体表现如下：</p><ul><li><strong>Web UI方式</strong>: Flink提供了一个web UI来观察、监视和调试正在运行的应用服务。并且还可以执行或取消组件或任务的执行。</li><li><strong>日志集成服务</strong>:Flink实现了流行的slf4j日志接口，并与日志框架<a href="https://logging.apache.org/log4j/2.x/">log4j</a>或<a href="https://logback.qos.ch/">logback</a>集成。</li><li><strong>指标服务</strong>: Flink提供了一个复杂的度量系统来收集和报告系统和用户定义的度量指标信息。度量信息可以导出到多个报表组件服务，包括 <a href="https://en.wikipedia.org/wiki/Java_Management_Extensions">JMX</a>, Ganglia, <a href="https://graphiteapp.org/">Graphite</a>, <a href="https://prometheus.io/">Prometheus</a>, <a href="https://github.com/etsy/statsd">StatsD</a>, <a href="https://www.datadoghq.com/">Datadog</a>, 和 <a href="https://www.slf4j.org/">Slf4j</a>.</li><li><strong>标准的WEB REST API接口服务</strong>: Flink提供多种REST API接口，有提交新应用程序、获取正在运行的应用程序的Savepoint服务信息、取消应用服务等接口。REST API还提供元数据信息和已采集的运行中或完成后的应用服务的指标信息。</li></ul><h1 id="0x3-Flink的组件"><a href="#0x3-Flink的组件" class="headerlink" title="0x3.Flink的组件"></a>0x3.Flink的组件</h1><p>Flink运行时架构主要包括四个不同的组件，它们会在运行流处理应用程序时协同工作：作业管理器（JobManager）、资源管理器（ResourceManager）、任务管理器（TaskManager），以及分发器（Dispatcher）。因为Flink是用Java和Scala实现的，所以所有组件都会运行在Java虚拟机上。每个组件的职责如下：</p><h2 id="1-作业管理器（JobManager）"><a href="#1-作业管理器（JobManager）" class="headerlink" title="1.作业管理器（JobManager）"></a>1.作业管理器（JobManager）</h2><p>控制一个应用程序执行的主进程，也就是说，每个应用程序都会被一个不同的JobManager所控制执行。JobManager会先接收到要执行的应用程序，这个应用程序会包括：作业图（JobGraph）、逻辑数据流图（logical dataflow graph）和打包了所有的类、库和其它资源的JAR包。</p><p>JobManager会把JobGraph转换成一个物理层面的数据流图，这个图被叫做“执行图”（ExecutionGraph），包含了所有可以并发执行的任务。</p><p>JobManager会向资源管理器（ResourceManager）请求执行任务必要的资源，也就是任务管理器（TaskManager）上的插槽（slot）。</p><p>一旦它获取到了足够的资源，就会将执行图分发到真正运行它们的TaskManager上。而在运行过程中，JobManager会负责所有需要中央协调的操作，比如说检查点（checkpoints）的协调。</p><h2 id="2-资源管理器（ResourceManager）"><a href="#2-资源管理器（ResourceManager）" class="headerlink" title="2.资源管理器（ResourceManager）"></a>2.资源管理器（ResourceManager）</h2><p>主要负责管理任务管理器（TaskManager）的插槽（slot），TaskManger插槽是Flink中定义的处理资源单元。</p><p>Flink为不同的环境和资源管理工具提供了不同资源管理器，比如YARN、Mesos、K8s，以及standalone部署。当JobManager申请插槽资源时，ResourceManager会将有空闲插槽的TaskManager分配给JobManager。</p><p>如果ResourceManager没有足够的插槽来满足JobManager的请求，它还可以向资源提供平台发起会话，以提供启动TaskManager进程的容器。另外，ResourceManager还负责终止空闲的TaskManager，释放计算资源。</p><p>(通信:Spark-netty框架,Flink-rpc框架)</p><h2 id="3-任务管理器（TaskManager）"><a href="#3-任务管理器（TaskManager）" class="headerlink" title="3.任务管理器（TaskManager）"></a>3.任务管理器（TaskManager）</h2><p>Flink中的工作进程。通常在Flink中会有多个TaskManager运行，每一个TaskManager都包含了一定数量的插槽（slots）。</p><p>插槽的数量限制了TaskManager能够执行的任务数量。</p><p>启动之后，TaskManager会向资源管理器注册它的插槽；收到资源管理器的指令后，TaskManager就会将一个或者多个插槽提供给JobManager调用。</p><p>JobManager就可以向插槽分配任务（tasks）来执行了。在执行过程中，一个TaskManager可以跟其它运行同一应用程序的TaskManager交换数据。</p><h2 id="4-分发器（Dispatcher）"><a href="#4-分发器（Dispatcher）" class="headerlink" title="4.分发器（Dispatcher）"></a>4.分发器（Dispatcher）</h2><p>可以跨作业运行，它为应用提交提供了REST接口。</p><p>当一个应用被提交执行时，分发器就会启动并将应用移交给一个JobManager。由于是REST接口，所以Dispatcher可以作为集群的一个HTTP接入点，这样就能够不受防火墙阻挡。</p><p>Dispatcher也会启动一个Web UI，用来方便地展示和监控作业执行的信息。Dispatcher在架构中可能并不是必需的，这取决于应用提交运行的方式。</p><h1 id="0x4-Flink的提交与运行架构"><a href="#0x4-Flink的提交与运行架构" class="headerlink" title="0x4.Flink的提交与运行架构"></a>0x4.Flink的提交与运行架构</h1><p>具体地，如果我们将Flink集群部署到YARN上，那么就会有如下的提交流程：</p><h2 id="1-提交流程"><a href="#1-提交流程" class="headerlink" title="1.提交流程"></a>1.提交流程</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/flink-yarn-job-mode%E6%8F%90%E4%BA%A4%E6%B5%81%E7%A8%8B.png" alt="Yarn-提交流程"></p><p>Per-Job模式没有现成的slot</p><p>(1) 当任务执行<code>1.SubmitJob</code>的时候,请求Yarn的ResourceManager去开一个新的YARN Application Master进程,这个进程包含一个JobManager线程和一个属于Flink Master的ResourceManager.<code>2.Start application 3.master with Flink master</code></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92%E5%9B%BE.png" alt="FlowGraph"></p><p>(2) JobManager负责对任务进行切分,划分任务,然后根据任务去ResourceManager <code>4.Request Slots</code></p><p>(3) RM向YarnRM请求资源,RM返回一个使用Container包装好的TaskManager <code>5.Start TaskManager containers</code></p><p>(4) TaskManager向RM注册Slots <code>6.Register slots</code></p><p>(5) 然后RM得到注册好的TaskManager之后,请求使用TaskManager<code>7.Resuest slot</code>,然后TaskManager <code>8.Offer slot</code> 给JobManager</p><p>(6) JobManager执行任务<code>9.Execute task</code></p><h2 id="2-TaskManager与Slots"><a href="#2-TaskManager与Slots" class="headerlink" title="2.TaskManager与Slots"></a>2.TaskManager与Slots</h2><p>Flink中每一个worker(TaskManager)都是一个<strong>JVM</strong>进程，它可能会在独立的线程上执行一个或多个subtask。</p><p><strong>为什么要使用Slots</strong></p><p>为了控制一个TaskManager能够运行多个task,使用slot隔离内存,一个worker至少有一个task slot。</p><p>每个task slot表示TaskManager拥有资源的<strong>一个固定大小的子集</strong>。</p><p><strong>Task Slot</strong></p><p>Task Slot是静态的概念，是指TaskManager具有的并发执行能力，可以通过参数<code>taskmanager.numberOfTaskSlots</code>进行配置；</p><p>而并行度parallelism是动态概念，即TaskManager运行程序时实际使用的并发能力，可以通过参数<code>parallelism.default</code>进行配置。</p><h2 id="3-Slots与Slots共享组"><a href="#3-Slots与Slots共享组" class="headerlink" title="3.Slots与Slots共享组"></a>3.Slots与Slots共享组</h2><p>TaskManager 是一个 JVM 进程，并会以独立的线程来执行一个task。</p><p>为了控制一个 TaskManager 能接受多少个 task，Flink 提出了 <em>Task Slot</em> 的概念，通过 <em>Task Slot</em> 来定义Flink 中的计算资源。</p><p>solt 对TaskManager内存进行平均分配，每个solt内存都相同，加起来和等于TaskManager可用内存，但是仅仅对内存做了隔离，并没有对cpu进行隔离。</p><p><strong>同一个JVM不同slots内部通信</strong></p><p>而在同一个JVM进程中的task，可以共享TCP连接（基于多路复用）和心跳消息，可以减少数据的网络传输。也能共享一些数据结构，一定程度上减少了每个task的消耗。</p><h2 id="4-共享组示例"><a href="#4-共享组示例" class="headerlink" title="4.共享组示例"></a>4.共享组示例</h2><p>共享组是将一个Slot的任务链截断,另起一个Slot,增加并行度与运行效率</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink02_Wc_Groups</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x0 使用工具类从命令行获取参数</span>        <span class="token class-name">ParameterTool</span> parameterTool <span class="token operator">=</span> <span class="token class-name">ParameterTool</span><span class="token punctuation">.</span><span class="token function">fromArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> host <span class="token operator">=</span> parameterTool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> parameterTool<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 获取端口数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> portDS <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 处理数据计算wordCount</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> word2One <span class="token operator">=</span> portDS<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">FlatMapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token class-name">Collector</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> collector<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> word <span class="token operator">:</span> words<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> tuple2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>word<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    collector<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>tuple2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slotSharingGroup</span><span class="token punctuation">(</span><span class="token string">"group1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印数据</span>        <span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple</span><span class="token punctuation">></span></span> keyedOne <span class="token operator">=</span> word2One<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> one2Sum <span class="token operator">=</span> keyedOne<span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slotSharingGroup</span><span class="token punctuation">(</span><span class="token string">"group2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        one2Sum<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">slotSharingGroup</span><span class="token punctuation">(</span><span class="token string">"group3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>我们简单使用Standalone-mode提交</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run <span class="token punctuation">\</span>-c com.ecust.groups.Flink01_Wc_Groups <span class="token punctuation">\</span>-p <span class="token number">2</span> <span class="token punctuation">\</span>flink-core-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 --port <span class="token number">9999</span> <span class="token punctuation">\</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/slot%E5%85%B1%E4%BA%AB%E7%BB%84%E6%89%A7%E8%A1%8C%E8%AE%A1%E5%88%92.png" alt="Slot共享组执行计划"></p><p>任务运行后的slot使用情况观察</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/slot%E5%85%B1%E4%BA%AB%E7%BB%84%E7%9A%84slot%E4%BD%BF%E7%94%A8%E6%83%85%E5%86%B5.png" alt="slot共享组slot使用情况"></p><h2 id="5-任务链"><a href="#5-任务链" class="headerlink" title="5.任务链"></a>5.任务链</h2><p>观察上述的执行图,一个小框就是一个任务链(可以有多个人subTask)</p><p>Shuffle任务不能合并任务链</p><p>能够合并的任务链</p><ol><li>one2One</li><li>并行度相同</li><li>同一个共享组</li></ol><p>将算子链接成task是非常有效的优化：它能减少线程之间的切换和基于缓存区的数据交换，在减少时延的同时提升吞吐量。链接的行为可以在编程API中进行指定。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BB%BB%E5%8A%A1%E9%93%BE%E7%9A%84%E5%90%88%E5%B9%B6.jpg" alt="任务链的合并"></p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> structure </tag>
            
            <tag> procedure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spark_Kernel</title>
      <link href="2020/04/29/Spark_Kernel/"/>
      <url>2020/04/29/Spark_Kernel/</url>
      
        <content type="html"><![CDATA[<h1 id="Spark内核"><a href="#Spark内核" class="headerlink" title="Spark内核"></a>Spark内核</h1><hr><blockquote><p>所谓的内核，就是Spark内部核心原理。</p></blockquote><h2 id="一、内核解析的分解"><a href="#一、内核解析的分解" class="headerlink" title="一、内核解析的分解"></a>一、内核解析的分解</h2><ol><li>Spark应用的提交</li><li>Spark内部的通信</li><li>Spark作业的调度</li><li>任务的执行</li><li>spark内存管理</li></ol><h2 id="二、-SparkSubmit"><a href="#二、-SparkSubmit" class="headerlink" title="二、 SparkSubmit"></a>二、 SparkSubmit</h2><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--本章节讲述job提交应用以后，环境的准备工作。主要包含以下：1. spark向yarn提交job的过程2. yarn中application、driver、executor、container是如何相互响应<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>提交应用</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">bin&#x2F;spark-submit \--class org.apache.spark.examples.SparkPi \--master yarn \--deploymode cluster \   表示yarn的集群模式.&#x2F;examples&#x2F;jars&#x2F;spark-examples_2.12-2.4.5.jar \10-- 说明：--master yarn 默认是采用yarn的客户端模式，但是在实际过程中，我们都是使用yarn的集群模式。所以增加：--deploymode cluster \<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-Spark向yarn提交"><a href="#2-1-Spark向yarn提交" class="headerlink" title="2.1  Spark向yarn提交"></a>2.1  Spark向yarn提交</h3><h4 id="2-1-1-SparkSubmit"><a href="#2-1-1-SparkSubmit" class="headerlink" title="2.1.1 SparkSubmit"></a>2.1.1 SparkSubmit</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--作用：1. 解析参数2. 提交参数，初始数环境，并获取&quot;org.apache.spark.deploy.yarn.YarnClusterApplication&quot;的对象，调用对象的start方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. 执行SparkSubmit的mian方法2. 在main方法中：   1）、 new SparkSubmit   2）、 submit.doSubmit(args) --&gt;执行提交程序,点击doSubmit          ①、 val appArgs &#x3D; parseArguments(args)  --&gt;解析参数，解析应用提交的参数，点击parseArguments                  a、parse(args.asJava)   --&gt;具体进行参数的解析，点击parse，返回参数的解析，方法的内部调用了handle方法                     action &#x3D; Option(action).getOrElse(SUBMIT)，--&gt;默认值为submit                  b、handle(opt: String, value: String) --&gt;opt:参数的名称，value：参数的值。                      左边是参数  &#x3D;&gt; 右边是赋值的变量                     &#x2F;&#x2F; --master yarn &#x3D;&gt; master                     &#x2F;&#x2F; --deploy-mode cluster &#x3D;&gt; deployMode                     &#x2F;&#x2F; --class SparkPI(WordCount) &#x3D;&gt; 【mainClass】                               &quot;如上为解析参数&quot;       ②、appArgs.action match &#123;case SparkSubmitAction.SUBMIT &#x3D;&gt; submit(appArgs, uninitLog)--&gt;点击submit          a、submit中又调用了doRunMain()，doRunMain()中调用了runMain()方法              -- runMain(args, uninitLog)，运行主程序，在runmain()方法中：                  1.准备提交环境                  -- val (childArgs, childClasspath, sparkConf, childMainClass) &#x3D; prepareSubmitEnvironment(args)                                    2.设定当前类的加载器                  -- Thread.currentThread.setContextClassLoader(loader)                                    3.通过类名加载这个类，&#39;反射的方式&#39;                  -- mainClass &#x3D; Utils.classForName(childMainClass)                                    4.创建第3步类的实例，并将类型转换为SparkApplication                  -- app: SparkApplication &#x3D; mainClass.newInstance().asInstanceOf[SparkApplication]                                     childMainClass到底是谁？                       cluster模式：childMainClass &#x3D; YARN_CLUSTER_SUBMIT_CLASS                                   &#x3D;org.apache.spark.deploy.yarn.YarnClusterApplication                       client模式：childMainClass &#x3D; args.mainClass&#x3D;class SparkPI(WordCount)                                       5.YarnClusterApplication.start                   --  app.start(childArgs.toArray, sparkConf)                                &quot;如上为提交环境，并启动org.apache.spark.deploy.yarn.YarnClusterApplication&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-2-yarn-YarnClusterApplication"><a href="#2-2-2-yarn-YarnClusterApplication" class="headerlink" title="2.2.2 yarn.YarnClusterApplication"></a>2.2.2 yarn.YarnClusterApplication</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--作用：1. 调用YarnClusterApplication的start方法，创建yarn的resourcemanagerClient，RM的客户端2. 执行RM客户端执行run方法3. 在run方法中，启动一个应用程序application，也就是一个进程，并提交应用程序，则会执行这个进程的main方法。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. 通过反射调用start()方法，在start()方法中：   -- 1）new Client(new ClientArguments(args), conf).run()          ①new ClientArguments(args)，是配置参数的封装          ②new Client，在client类中的属性有：              --val yarnClient &#x3D; YarnClient.createYarnClient，点击createYarnClient方法，在这个方法中：                  -- YarnClient client &#x3D; new YarnClientImpl()，点击YarnClientImpl类，在类中有一个属性                      rmclient：resourcemanagerClient                      -- protected ApplicationClientProtocol rmClient          &quot;如上就是创建RM客户端对象&quot;，接下来执行run方法          ③run()，RM客户端对象执行run方法，点击run，在run方法的内部：              1. 提交应用，返回应用的id。              -- this.appId &#x3D; submitApplication()，点击submitApplication(),查看具体提交的过程                     1. 初始化hadoop的环境                   --yarnClient.init(hadoopConf)                   2. 启动yarn客户端,与yarn之间进行连接      -- yarnClient.start()      3. yarn客户端创建一个应用application      --val newApp &#x3D; yarnClient.createApplication()                     4. 获取应用的id，在yarn应用程序中，每一个应用都是有唯一的应用id      -- appId &#x3D; newAppResponse.getApplicationId()      5. 提交yarn应用程序，提交的是什么呢？      --yarnClient.submitApplication(appContext)，点击appContext         --&#x2F;&#x2F; Set up the appropriate contexts to launch our AM               配置java虚拟机的启动参数，点击createContainerLaunchContext，               在这个方法的内部进行了command的封装：               【集群模式】command &#x3D; bin&#x2F;java org.apache.spark.deploy.yarn.ApplicationMaster                              【client模式】command &#x3D; bin&#x2F;java org.apache.spark.deploy.yarn.ExecutorLauncher                              --val containerContext &#x3D; createContainerLaunchContext(newAppResponse)                              基本参数配置的封装                              --val appContext &#x3D; createApplicationSubmissionContext(newApp, containerContext)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-2-3-yarn-ApplicationMaster"><a href="#2-2-3-yarn-ApplicationMaster" class="headerlink" title="2.2.3 yarn.ApplicationMaster"></a>2.2.3 yarn.ApplicationMaster</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 作用1. 封装ApplicationMaster的参数2. 根据参数，创建ApplicationMaster对象3. 执行ApplicationMaster的run方法，在run方法中，最后调用到runDriver方法，在这个方法中：   a、启动用户的应用，并返回这个应用的&quot;线程&quot;，具体实现如下：           a、启动用户提交的应用程序；           b、在ApplicationMaster中创建一个线程，线程的名称就是&quot;Driver&quot;           c、启动这个线程，并执行run方法，在run方法中，就是执行我们提交的应用程序类的main方法           d、返回这个&quot;Driver&quot;线程    b、 执行一个方法，用于返回&quot;sparkContext&quot;的对象，如果没有返回，就不会执行下面的代码，当返回了这个上下文的对象以后：    c、 ApplicationMaster通过ApplicationMaste的客户端，向ResourceManager注册自己，并申请资源    d、 分配资源，具体实现如下：             a、在ResourceManager端获取一个ApplicationMaster的客户端，返回一个分配器            b、分配器进行资源的分配：                 a、ApplicationMaster的客户端申请一个分配器响应                 b、分配器响应返回所有被分配的容器container(资源列表)给到ApplicationMaster                 c、如果分配的资源列表的数量大于0，则对容器进行处理，处理的方式为：                        1.AM内部会创建一个线程，并调用线程的run方法，在run方法中循环遍历RM返回的可用容器，然后进行                        对每个容器进行匹配，此时涉及到首选位置，根据请求匹配选择哪些容器.首选位置的选择规则见首选位置说明。                        2. 运行匹配后的资源，挨个遍历可用的容器，如果运行执行器的数量小于目标执行器的数量&quot;假如需要4个执行                        器，即为目标执行器，此时已经运行了2个执行器，即为运行执行器的数量，此时会启动下面的逻辑&quot;，                        那么在这个容器中会创建一个线程池，一个线程池container对应一个ExecutorRunnable，并调用了这个对象的                        run方法，在这个线程池中，有一个nmClient(nameManagClient),说明AM能够找到NM，在这个run方法中，创建                        NM的客户端，初始化NM，并启动容器container，在启动容器中，封装一个指令，   command：&#x2F;bin&#x2F;java                        &#x2F;org.apache.spark.executor.CoarseGrainedExecutorBackend，并且启动了这个指令，显然是一个进程                        ，CoarseGrainedExecutorBackend，粗粒度的执行器后台。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. main方法，在main方法中，分三步骤：    1） 封装参数    --val amArgs &#x3D; new ApplicationMasterArguments(args)    2）创建ApplicationMaster的对象    --master &#x3D; new ApplicationMaster(amArgs)    3）执行run方法,点击run方法    --System.exit(master.run())           ①run方法的实现，点击runImpl       --runImpl()            &#x2F;&#x2F; 如果是client模式，执行：            -- runExecutorLauncher()             &#x2F;&#x2F; 如果是集群模式，执行，点击runDriver            -- runDriver               1. 启动用户的程序,返回一个线程，点击startUserApplication               --userClassThread &#x3D; startUserApplication()                    1. 通过类加载器加载一个类，并获取这个类的main方法                    -- val mainMethod &#x3D; userClassLoader.loadClass(args.userClass).getMethod(&quot;main&quot;, classOf[Array[String]])                    2. 创建一个线程                    -- val userThread &#x3D; new Thread                    3.                     -- userThread.setContextClassLoader(userClassLoader)                    4. 设定线程的名字为driver，说明driver就是一个applicationMaster的一个线程                    -- userThread.setName(&quot;Driver&quot;)                    5. 启动线程，执行线程的run方法，其实就是执行类userClass的main方法，userClass是哪个类呢？                       通过查到，就是我们提交应用的--class，sparkpi，或者是我们自定的类                    -- userThread.start()                        -- mainMethod.invoke                          6. 返回用户线程                    -- userThread               2. awaitResult等待结果，线程阻塞，等待对象(SparkContext)的返回               --val sc &#x3D; ThreadUtils.awaitResult(sparkContextPromise.future,Duration(totalWaitTime, TimeUnit.MILLISECONDS))                                3. 返回sparkContext以后，向rm进行注册AM：ApplicationMaster，点击registerAM()                --registerAM(host, port, userConf, sc.ui.map(_.webUrl))                    ApplicationMaster的客户端向RM注册自己，并申请资源                    --client.register(host, port, yarnConf, _sparkConf, uiAddress, historyAddress)               4. 返回RM分配的容器               --createAllocator(driverRef, userConf)                   &#x2F;&#x2F; 1.AM的客户端，&#39;在RM端&#39;，创建分配器，返回一个分配器                   -- allocator &#x3D; client.createAllocator                   &#x2F;&#x2F; 2.分配器分配资源，点击allocateResources                   -- allocator.allocateResources()                          &#x2F;&#x2F; 1.AM的客户端，申请一个分配响应                          --val allocateResponse &#x3D; amClient.allocate(progressIndicator)                          &#x2F;&#x2F; 2.分配器响应获取所有被分配的容器container(资源列表)                         --val allocatedContainers &#x3D; allocateResponse.getAllocatedContainers()                         &#x2F;&#x2F; 3.如果可分配的容器数量大于0，则调用处理可用容器的方法，点击handle方法                          --if (allocatedContainers.size &gt; 0) &#x3D;&gt;                            handleAllocatedContainers(allocatedContainers.asScala)                               &#x2F;&#x2F; 1.内部会创建一个线程，并调用线程的run方法，在run方法中循环遍历RM返回的可用容器，然后进行                                  对每个容器进行匹配，此时涉及到首选位置，根据请求匹配选择哪些容器.首选位置的选择规则见                                  首选位置说明。                               &#x2F;&#x2F; 2. 运行匹配后的资源，点击runAllocatedContainers                               --runAllocatedContainers(containersToUse)                                      &#x2F;&#x2F; 1. 挨个遍历可用的容器资源                                       --for (container &lt;- containersToUse)                                       &#x2F;&#x2F; 2. 每个容器中，如果运行执行器的数量小于目标执行器的数量，执行如下代码                                       --runningExecutors.size() &lt; targetNumExecutors                                       &#x2F;&#x2F; 3. 线程池，在线程池的内部有：                                       --launcherPool.execute(new Runnable                                             &#x2F;&#x2F; 1.执行的池子是一个线程池                                            --launcherPool &#x3D; ThreadUtils.newDaemonCachedThreadPool                                       &#x2F;&#x2F; 2.一个线程container对应一个ExecutorRunnable，并调用了这个对象的run方法                                       --new ExecutorRunnable...run()                                            &#x2F;&#x2F; a、在ExecutorRunnable中：说明AM能够找到NM                                            --nmClient，nodeManager                                            &#x2F;&#x2F; b、run()中：其实就是AM与NM建立连接                                                     &#x2F;&#x2F; 创建NM的客户端                                                     --nmClient &#x3D; NMClient.createNMClient()                                                     &#x2F;&#x2F; 初始化NM                                                     --nmClient.init(conf)                                                      &#x2F;&#x2F; 启动NM                                                     -- nmClient.start()                                                      &#x2F;&#x2F; 启动容器，点击                                                      --startContainer()                                                           &#x2F;&#x2F; NM启动容器，启动executor                                                           --nmClient.startContainer(container.get, ctx)                                                           &#x2F;&#x2F; 封装指令，点击prepareCommand                                                           --val commands &#x3D; prepareCommand()                                                                 commands&#x3D;&#x2F;bin&#x2F;java&#x2F;org.apache.spark.executor.CoarseGrainedExecutorBackend--&gt;粗粒度的执行器后台，是一个进程                                                           &#x2F;&#x2F;将封装好的指令传递到参数中                                                           --ctx.setCommands(commands.asJava)   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 首选位置说明        --1. 移动数据不如移动计算。         --2. 首选位置：有多个，和本地化级别有关。        --3. 本地化级别：将数据和计算所在的位置称之为本地化               1. 计算和数据在同一个Executor中，称之进程本地化               2. 计算和数据在同一个节点中，称之节点本地化               3. 计算和数据在同一个机架中，称之机架本地化               4. 任意<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200618002757.png" alt="image-20200618002757465" style="zoom:50%;" /><img src="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200618002929.png" alt="image-20200618002929263" style="zoom:50%;" /><p>![image-20200619202433592](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200619202433.png)</p><h4 id="2-2-4-CoarseGrainedExecutorBackend"><a href="#2-2-4-CoarseGrainedExecutorBackend" class="headerlink" title="2.2.4 CoarseGrainedExecutorBackend"></a>2.2.4 CoarseGrainedExecutorBackend</h4><blockquote><p>执行一次bin/java就会执行一个新的进程，则是属于并行执行的感觉，和之前执行的内容是分开的。类似我们在Windows中开了一个微信和qq程序一样，各自执行，互不影响。</p></blockquote><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 作用：   执行CoarseGrainedExecutorBackend&quot;执行器后台&quot;的main方法，在main方法中：   1. 首先封装一些参数   2. 执行run方法，在run方法中：        1. 通过driver的URI，使得CoarseGrainedExecutorBackend与Driver进行关联        2. 通过通信环境创建了一个终端，名字为executor，创建一个CoarseGrainedExecutorBackend对象并调用onstart方法：             1. 获取driver的引用             2. ExecutorBackend向driver发送消息，注册executor的消息，也称之为反向注册             3. 在driver端会接收到这个消息，通过executor的引用，发送消息给到ExecutorBackend，注册executor成功              4. ExecutorBackend接收driver返回的executor注册成功的消息，            -- 说明：   executor是一个计算对象，在这个对象里面有一个线程池，每一个线程来处理一个从driver端发送过来的任务 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. commands&#x3D;&#x2F;bin&#x2F;java&#x2F;org.apache.spark.executor.CoarseGrainedExecutorBackend,执行这个指令，那么是调用这个类的main方法。2. main方法中：       &#x2F;&#x2F; 1. 首先是对一些参数进行封装       &#x2F;&#x2F; 2. 执行run方法        -- run(driverUrl, executorId, hostname, cores, appId, workerUrl, userClassPath)           &#x2F;&#x2F; 1.通过driver的uri和Driver进行关联            --driver &#x3D; fetcher.setupEndpointRefByURI(driverUrl)            &#x2F;&#x2F; 2.通过通信环境创建了一个终端，名字为executor，            在底层：Executor启动后会注册通信，并收到信息onStart，收到消息后，会执行通信对象CoarseGrainedExecutorBackend            的onStart方法，点击CoarseGrainedExecutorBackend            --env.rpcEnv.setupEndpoint(&quot;Executor&quot;, new CoarseGrainedExecutorBackend(        env.rpcEnv, driverUrl, executorId, hostname, cores, userClassPath, env))                &#x2F;&#x2F; 1.获取driver的引用                -- driver &#x3D; Some(ref)                &#x2F;&#x2F; 2.ExecutorBackend向driver发送消息，注册executor的消息，也称之为反向注册                --ref.ask[Boolean](RegisterExecutor(executorId, self, hostname, cores, extractLogUrls))                &#x2F;&#x2F; 3.在driver端会接收到这个消息，因为在driver端，有一个上下文的对象，sparkcontext，在这个类有一个属性：                   private var _schedulerBackend: SchedulerBackend &#x3D; _，点击SchedulerBackend，是一个trait，找到                   实现类：CoarseGrainedSchedulerBackend，在这个类中，有一个方法：receiveAndReply()：                      &#x2F;&#x2F; executor的引用，在driver端，发送消息给到ExecutorBackend，注册executor成功                      --executorRef.send(RegisteredExecutor)                                            &#x2F;&#x2F; ExecutorBackend类中有一个recive方法，用来接收driver返回的executor注册成功的消息，executor是一                         个计算对象，在这个对象里面有一个线程池，每一个线程来处理一个从driver端发送过来的任务                     --executor &#x3D; new Executor(executorId, hostname, env, userClassPath, isLocal &#x3D; false)                       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200618150421861](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200618150421.png)</p><p>![image-20200618150442390](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200618150442.png)</p><h4 id="2-2-5-总结"><a href="#2-2-5-总结" class="headerlink" title="2.2.5 总结"></a>2.2.5 总结</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1. application是在一个nodemanager中container中，并且在这个container中创建了一个driver线程-- 2. 在一个nodemanager中，可以创建多个container，在每个container中，会创建ExecutorBackend对象，在这个对象中，会创建一个executor对象，在这个对象中一个线程池，一个线程用来处理driver发来的一个task，至于能同时执行多少个task，和executor中的core数量有关。-- 3. ApplicationMaster周旋于Driver和ResourceManager之间-- 4. spark有两个进程，也就是两个分支    创建RM的客户端，创建AM，在AM中，创建Driver的线程    &quot;分支1&quot;：此时会执行Driver线程的run方法，在run方法中就是执行了应用程序的main方法    &quot;分支2&quot;：构建SparkContext上下文的对象，再向RM注册AM，然后申请资源和返回可用的资源，最后Driver进行资源的选择，按照首选位置的原则。    所以如下图片有一个错误：资源满足以后才执行main方法，实际上是创建了driver线程，还没有申请资源就已经开始执行main方法了。-- 5. 进程、线程、对象   &quot;进程&quot;：SparkSubmit、ApplicationMaster和CoarseGrainedExecutorBackend   &quot;线程&quot;：Driver，但是我们一般称SparkContext称之为Driver   &quot;对象&quot;：Executor和YarnClusterApplication   -- 6. client和cluster模式的区别：      Driver的位置不同，其余的逻辑是一样的。      Cluster：在集群中，在nodemanager中的AM对象中，是一个线程      client：在集群之外<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><img src="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic GO/20200618155642.png" alt="image-20200618155642818" style="zoom:150%;" /><h2 id="三、Spark内部组件及通信"><a href="#三、Spark内部组件及通信" class="headerlink" title="三、Spark内部组件及通信"></a>三、Spark内部组件及通信</h2><h3 id="3-1-通信原理"><a href="#3-1-通信原理" class="headerlink" title="3.1 通信原理"></a>3.1 通信原理</h3><p>Netty:通信框架/AIO</p><p>为什么要采用Netty==&gt;<strong>AIO</strong></p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 通信原理 - IO - RPC    1. 基本的网络通信：Socket, ServerSocket    2. 通信框架：AKKA(旧),  Netty(新)(AIO)    3. 三种IO方式：BIO（阻塞式）, NIO（非阻塞式）, AIO（异步非阻塞）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="0x1-如何理解三种IO"><a href="#0x1-如何理解三种IO" class="headerlink" title="0x1 如何理解三种IO?"></a>0x1 如何理解三种IO?</h4><p>BIO: 阻塞式IO 饭馆点餐,一直等待上餐,</p><p>NIO:非阻塞式IO 不干等着,让老板先做饭,去干别的,时不时回去询问,饭好没好</p><p>这种方式没有阻塞,但是要时不时的回头看饭有没有做好,性能提高但是有损耗</p><p>AIO:异步非阻塞式IO 一个小时后送到指定位置,性能最好</p><p><strong>注意</strong></p><p>Netty就是基于AIO开发的通信框架</p><p>但是Linux对AIO支持不够好,不支持</p><p>Linux采用Epoll方式模仿AIO进行操作</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--Linux与windows通信框架的对比在Linux系统上，AIO的底层实现仍使用EPOLL，与NIO相同，因此在性能上没有明显的优势；Windows的AIO底层实现良好，但是Netty开发人员并没有把Windows作为主要使用平台考虑。微软的windows系统提供了一种异步IO技术：IOCP（I&#x2F;O CompletionPort，I&#x2F;O完成端口）；Linux下由于没有这种异步IO技术，所以使用的是epoll（一种多路复用IO技术的实现）对异步IO进行模拟。所以在Linux上不建议使用AIO<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-组件之间通信"><a href="#3-2-组件之间通信" class="headerlink" title="3.2 组件之间通信"></a>3.2 组件之间通信</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. 组件：Driver、executor2. 通信环境：NettyRpcEnvFactory() -- TransportServer(通信服务器 EPOLL) 服务器初始化3. 通信终端: RpcEndPoint[receive*] --用于接收数据收件箱: inbox --按顺序读取.4. 通信终端: RpcEndPointRef[ask*] --用于发送数据发件箱: outboxes[transportClient*] --根据地址(Host + Port),会有多个发件箱.-- 一个终端的生命周期：The life-cycle of an endpoint is:创建终端-&gt; 启动终端 -&gt; 接收消息 -&gt; 停止终端* &#123;@code constructor -&gt; onStart -&gt; receive* -&gt; onStop&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Spark%E5%86%85%E9%83%A8%E9%80%9A%E4%BF%A1%E5%8E%9F%E7%90%86.png" alt="Spark内部组件通信原理"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%86%85%E9%83%A8%E9%80%9A%E4%BF%A1%E5%9F%BA%E4%BA%8Eactor%E6%A8%A1%E5%9E%8B.png" alt="基于actor模型额内部通信架构"></p><h2 id="四、作业的调度"><a href="#四、作业的调度" class="headerlink" title="四、作业的调度"></a>四、作业的调度</h2><h3 id="4-1-Application"><a href="#4-1-Application" class="headerlink" title="4.1 Application"></a>4.1 Application</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. Yarn中会有application，提交任务以后，就会产生一个应用，并有一个唯一的应用id2. 在SparkConf中配置了setAppName(xxxx),设置应用的名字<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>![image-20200618203801740](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200618203801.png)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">3. SparkContext，是spark核心的对象，核心类，在这个核心类中的一些重要的参数有：  private var _conf: SparkConf &#x3D; _  -- spark的关键参数  private var _env: SparkEnv &#x3D; _    -- spark的环境，内部有NettyRpcEnv  private var _schedulerBackend: SchedulerBackend &#x3D; _   -- spark的调度后台，Rpc后台信息交互对象  private var _taskScheduler: TaskScheduler &#x3D; _         -- 任务调度器  private var _heartbeatReceiver: RpcEndpointRef &#x3D; _    -- 指心跳接收器，通信终端的引用   @volatile private var _dagScheduler: DAGScheduler &#x3D; _ -- 有向无环图调度器，负责job内部调度，负责阶段划分和任务的切分。  -- _conf：下滑线开头，表示内部的变量，不是规范，是早期程序员默认遵守的规范。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">4. DAGScheduler ，spark非常核心的调度器。      1.内部有一个对象,DAGSchedulerEventProcessLoop,&quot;指事件调度的规则&quot;，点击这个类：    --private[spark] val eventProcessLoop &#x3D; new DAGSchedulerEventProcessLoop(this)        1.上面类继承于EventLoop,这个类中有一个属性：事件队列，用来存放事件           BlockingQueue[E]：阻塞式队列           LinkedBlockingDeque：双端队列        -- private val eventQueue: BlockingQueue[E] &#x3D; new LinkedBlockingDeque[E]()       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200618211748700](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200618211748.png)</p><h3 id="4-2-逻辑代码"><a href="#4-2-逻辑代码" class="headerlink" title="4.2 逻辑代码"></a>4.2 逻辑代码</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. RDD的创建： 从内存中&#x2F;从文件中2. RDD的转换： 转换算子(单value类型、双value类型、kv类型)3. RDD的行动： 行动算子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-3-job"><a href="#4-3-job" class="headerlink" title="4.3 job"></a>4.3 job</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. 触发作业的执行，在行动算子的内部会执行过程：    1.sparkContext提交作业--&gt; sc.runjob 2. 有向无环图的调度器执行runjob--&gt; dagScheduler.runJob 3. 提交job--&gt; submitjob4. 消息队列进行存放消息--&gt; eventProcessLoop.post5. 消息队列将消息放进队列中，这个消息是：JobSubmitted--&gt; eventQueue.put(event) 6. 在eventQueue有一个线程，线程中有一个run方法--&gt; eventThread 7.  负责取出消息，因为这个队列是一个阻塞式队列，队列中没有消息，那么就处于阻塞式状态--&gt; val event &#x3D; eventQueue.take() 8. 取到消息--&gt; onReceive(event)9. 执行处理消息--&gt; doOnReceive(event)10. 使用模式匹配的的方式处理消息--&gt;  def doOnReceive(event: DAGSchedulerEvent): Unit &#x3D; event match &#123;      case JobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties) &#x3D;&gt;      dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties)    11. 有向无环图调度器处理任务的提交     --&gt; dagScheduler.handleJobSubmitted(jobId, rdd, func, partitions, callSite, listener, properties)    12. 创建一个活动的job    --&gt; val job &#x3D; new ActiveJob<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 总结：启动一个行动算子 --&gt; runjob  -&gt; 将执行事件放进阻塞式队列中 -&gt; 创建一个线程取出队列中的消息 -&gt; 进行模式匹配，处理任务的提交--&gt; 创建一个运行job<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="4-4-stage"><a href="#4-4-stage" class="headerlink" title="4.4 stage"></a>4.4 stage</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1. 阶段的划分，取决于转换算子的依赖类型。-- 2. 宽依赖：ShuffleDependency-- 3. 窄依赖：OneToOneDependency extends NarrowDependency-- 4. 分区的数量     a、窄依赖：分区数量保持不变          1. 获取窄依赖的分区数量，点击 firstParent          -- override def getPartitions: Array[Partition] &#x3D; firstParent[T].partitions               1. 获取依赖关系的第一个rdd分区数量               -- dependencies.head.rdd.asInstanceOf[RDD[U]]     b、宽依赖：            1. 获取宽依赖的分区数量            partitioner：是一个分区器，partitioner，由上一个RDD传递过来的，在传递的时候，会进行判断，如果当前的RDD的分区器            和上一级的分区器一样，那么是不会创建shuffleRDD，只有当前RDD的分区器和上一级的分区器不一样时，才会创建            ShuffledRDD            --Array.tabulate[Partition](part.numPartitions)(i &#x3D;&gt; new ShuffledRDDPartition(i))                        2. 默认情况下，默认的分区器将上一级的RDD传入            --  reduceByKey(defaultPartitioner(self), func)                1. 默认的分区数量等于上级RDD的最大值，因为上一级RDD可能有多个                -- val defaultNumPartitions &#x3D; rdds.map(_.partitions.length).max                2. 构造分区器的时候，将默认的分区数量传入，分区器的作用是指定数据去到哪个分区，分区的数量默认和上一级RDD                   保持一致                -- new HashPartitioner(defaultNumPartitions) -- 5. 总结：        a、窄依赖默认分区数量保持不变       b、宽依赖，默认和上一级RDD最大的分区数量保持一致，如果上一级RDD只有一个，那就和上一级RDD保持一致                 但是Shuffle的算子一般都会有改变分区数量的参数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 6. 从文件中创建RDD时默认的分区数量      1. 取(defaultParallelism, 2)的最小值，点击defaultParallelism      --math.min(defaultParallelism, 2)      2. 选择yarn模式中的默认平行度。      --defaultParallelism &#x3D; conf.getInt(&quot;spark.default.parallelism&quot;, math.max(totalCoreCount.get(), 2))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200620130734058](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620130734.png)</p><h3 id="4-5-task的切分"><a href="#4-5-task的切分" class="headerlink" title="4.5 task的切分"></a>4.5 task的切分</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--1. 任务和阶段stage的关系     定位：DAGScheduler类     1. 处理任务的提交handleJobSubmitted，在这个方法的内部：        1. 将整个job作为一个finalStage    -- var finalStage: ResultStage &#x3D; null    2. 创建一个结果阶段，并赋值给finalStage        finalRDD：最后提交job时的RDD，点击createResultStage    -- finalStage &#x3D; createResultStage(finalRDD, func, partitions, jobId, callSite)        1. 通过当前的RDD获取其上一级的阶段，点击getOrCreateParentStages        -- val parents &#x3D; getOrCreateParentStages(rdd, jobId)             1.获取最后一个RDD的shuffle依赖，每一个shuffle依赖创建一个shufflemapStage             --getShuffleDependencies(rdd).map &#123; shuffleDep &#x3D;&gt;getOrCreateShuffleMapStage(shuffleDep, firstJobId)&#125;.toList              a. 在getShuffleDependencies方法中，找到resultStage的上一级shuffleRDD               val parents &#x3D; new HashSet[ShuffleDependency[_, _, _]] -- 存放宽依赖                    val visited &#x3D; new HashSet[RDD[_]] --创建一个hashSet集合，用来存放已经被访问过的RDD                    val waitingForVisit &#x3D; new ArrayStack[RDD[_]] -- 集合的栈，创建一个集合，用来存放待访问的RDD                    waitingForVisit.push(rdd)    -- 将最后的一个RDD传到这个集合中                    while (waitingForVisit.nonEmpty) &#123; -- 集合是否为空，刚放进去，肯定不是空                      val toVisit &#x3D; waitingForVisit.pop()  -- pop，弹栈，将刚刚放进去的RDD弹出来，并准备去访问                      if (!visited(toVisit)) &#123;  -- 当前放进去的RDD是否被访问过，如果没有，则继续向下执行                        visited +&#x3D; toVisit      -- 将当前获取的RDD放进已经被访问的RDD集合中                        toVisit.dependencies.foreach &#123;  -- 获取RDD与直接上级的RDD的依赖关系，并循环遍历。                          case shuffleDep: ShuffleDependency[_, _, _] &#x3D;&gt; -- 如果是宽依赖                            parents +&#x3D; shuffleDep  -- 则将依赖加入parents集合中                          case dependency &#x3D;&gt;                            waitingForVisit.push(dependency.rdd) -- 如果是窄依赖，将上级RDD放进等待访问的RDD中，并                                                                 进行循环，判断其与上级RDD的依赖关系，直到当前的RDD为                                                                 shuffleRDD                             &#125;                      &#125;                    &#125;                    parents   -- 将上一级shuffleRDD放进parents的集合中                                        获取当前RDD与直接上级的RDD的依赖关系，返回一个seq序列集合，因为当前的RDD的直接上级的RDD可能有多个                    -- toVisit.dependencies                 b、通过map方法，对resultStage上级的shuffleRDD进行遍历，调用如下方法：返回获取的ShuffleDependency，执行获取或创建shuffleMapStage，点击这个方法                    -- getOrCreateShuffleMapStage                        创建shuffleMapStage，每一个shuffleDep创建一个shuffleMapStage                        -- createShuffleMapStage(shuffleDep, firstJobId)                            new出一个shuffleMapStage                            &#x2F;&#x2F; 将依赖的上一级RDD赋值给rdd                            --val rdd &#x3D; shuffleDep.rdd                            &#x2F;&#x2F; 又调用了创建或获取上一级阶段                            -- val parents &#x3D; getOrCreateParentStages(rdd, jobId)                            -- val stage &#x3D; new ShuffleMapStage<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--2. 阶段的类型   ResultStage 和 shuffleMapStage--3. 阶段的数量   &#x3D; ResultStage  + n *  shuffleMapStage--4. 任务和分区的关系     1. 提交最后一个阶段：       --submitStage(finalStage)           1. 获取当前阶段的上一级阶段           --  val missing &#x3D; getMissingParentStages(stage).sortBy(_.id)           2. 如果有上一级阶段不为空，则循环遍历上一阶段，先假如上一级阶段只有一个，则提交上一个阶段，又调用提交阶段           --for (parent &lt;- missing) &#123;submitStage(parent)&#125;             &quot;总结：在提交阶段时，从最后一个阶段往前找，直到最前面的一个阶段，然后再依次从前往后进行提交阶段&quot;。                 2. 当没有上一级阶段以后，提交任务       -- submitMissingTasks(stage, jobId.get)          &#x2F;&#x2F; 1.对当前阶段进行模式匹配，确认是shuffleMapSrage还是ResultStage，返回结果为taskIdToLocations,任务本地化路径          &#x2F;&#x2F; 2. 如果当前阶段是ShuffleMapStage，则创建ShuffleMapTask                如果当前阶段是ResultStage ，则创建ResultTask           val tasks: Seq[Task[_]] &#x3D; try &#123;            case stage: ShuffleMapStage            partitionsToCompute.map  --&gt; 计算分区的数量，每一个分区，会执行如下创建任务的代码。            &#123;........            new ShuffleMapTask(stage.id, stage.latestInfo.attemptNumber            .....&#125;           case stage: ResultStage &#x3D;&gt;            &#123;                               .......            new ResultTask(stage.id, stage.latestInfo.attemptNumber,            .......                   &#125;-- 5. task的类型：      a、如果当前阶段是ShuffleMapStage，则创建ShuffleMapTask      b、如果当前阶段是ResultStage ，则创建ResultTask    -- 6 .任务的总数量      &#x3D; 每个阶段的任务总和<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--总结：1. 通过resultStage最后一个RDD，进行循环依次向上找，获取resultStage阶段，上一级为shuffleDep的ShuffleDependency，   存放到一个parents集合中2. 采用map算子，parents集合中的每个ShuffleDependency，获取到所有上级依赖为shuffleDep的RDD，然后每一个shuffleDep会创建一个ShuffleMapStage阶段。3. 当找到job最前面一个RDD以后，开始从第一个阶段提交阶段，提交阶段时，首先获取当前阶段最后一个RDD的分区数量，在一个阶段中，每一个分区就会创建一个task，task的类型和阶段的类型匹配：      a、如果当前阶段是ShuffleMapStage，则创建ShuffleMapTask      b、如果当前阶段是ResultStage ，则创建ResultTask4. 当前阶段提交完成以后，就提交下一个阶段，依次类推，最后就会提交resultStage。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、任务的执行"><a href="#五、任务的执行" class="headerlink" title="五、任务的执行"></a>五、任务的执行</h2><h3 id="5-1-任务包含的内容"><a href="#5-1-任务包含的内容" class="headerlink" title="5.1 任务包含的内容"></a>5.1 任务包含的内容</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1.任务的提交：--new ShuffleMapTask(stage.id, stage.latestInfo.attemptNumber,taskBinary, part, locs, properties, serializedTaskMetrics, Option(jobId),Option(sc.applicationId), sc.applicationAttemptId, stage.rdd.isBarrier())2. 提交的重要几个参数有：   a、&quot;stage.id&quot;：任务从属的阶段id   b、&quot;taskBinary&quot;：是一个广播变量，内容为：阶段的&quot;RDD&quot;和&quot;依赖关系&quot;序列化以后的二进制字节码，因为RDD是不保存数据，一旦任务执行失败，需要知道RDD的元数据信息以及依赖关系，才能进行重新计算。       1. 是一个广播变量       --var taskBinary: Broadcast[Array[Byte]] &#x3D; null       2. 将任务的二进制的字节码赋值给了这个广播变量       --taskBinary &#x3D; sc.broadcast(taskBinaryBytes)       3. 任务的二进制的字节码是通过对阶段匹配，如果是shuffle阶段，就会采用闭合的序列化器将阶段的RDD和阶段的依赖进行序列化       --taskBinaryBytes &#x3D; stage match &#123;         case stage: ShuffleMapStage &#x3D;&gt;              JavaUtils.bufferToArray(                closureSerializer.serialize((stage.rdd, stage.shuffleDep): AnyRef))           case stage: ResultStage &#x3D;&gt;          JavaUtils.bufferToArray(closureSerializer.serialize((stage.rdd, stage.func): AnyRef))          &#125;    c、 &quot;part&quot; ：分区，指当前的task和哪个partition有关        -- val part &#x3D; partitions(id)    d、 &quot;locs&quot; ： 任务的首选位置        -- val locs &#x3D; taskIdToLocations(id)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-序列化"><a href="#5-2-序列化" class="headerlink" title="5.2 序列化"></a>5.2 序列化</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">1. 默认的序列化：&quot;JavaSerializer&quot;    1. 在SparkContext中创建了SparkEnv，点击创建的方法，一层一层往里点：    -- _env &#x3D; createSparkEnv(_conf, isLocal, listenerBus)        1. 最终看到了默认的序列化器为：JavaSerializer        --val serializer &#x3D; instantiateClassFromConf[Serializer](      &quot;spark.serializer&quot;, &quot;org.apache.spark.serializer.JavaSerializer&quot;)    logDebug(s&quot;Using serializer: $&#123;serializer.getClass&#125;&quot;)2. kryo序列化:      --1.特点：          a、性能优          b、序列化结果文件的字节数少          c、可以绕过java的序列化，将不能序列的对象也能进行序列化          d、但是，我们在实际的情况下，并不是所有的对象都会采用kryo序列化。     --2. 那么哪些对象采用kryo序列化会比较有优势呢？          &quot;总结：在shuffle阶段，当为kv类型时，k、v的数据类型如果都支持kryo序列，则会采用kryo进行序列化。                支持ktyo序列化的数据类型有：String和值类型(anyVal)&quot;                   底层：当有shuffle阶段时，会选择最好的序列化器         -- Pick the best serializer for shuffling an RDD of key-value pairs.         2. 判断选择的规则：            如果kv的k和v都能使用kryo序列化器时，则选择kryo序列化器，否则选择默认的序列化器：javaSerializer            当为如下类型（值类型）或者是string类型的时候，则可以使用kyro序列化器            --if (canUseKryo(keyClassTag) &amp;&amp; canUseKryo(valueClassTag)) &#123;              kryoSerializer            &#125; else &#123;              defaultSerializer            &#125;                          --  ClassTag.Boolean,                  ClassTag.Byte,                  ClassTag.Char,                  ClassTag.Double,                  ClassTag.Float,                  ClassTag.Int,                  ClassTag.Long,                  ClassTag.Null,                  ClassTag.Short<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-3-任务的调度"><a href="#5-3-任务的调度" class="headerlink" title="5.3  任务的调度"></a>5.3  任务的调度</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1. driver生成的任务以后存放在哪里了？   a、当driver生成任务以后，并不是立即将任务task就发送给executor，因为可能发送过程有异常，也可能发送过去的时候，executor对象还没有创建，都会导致任务task发送失败        1. 一个阶段stage生成tasks以后，如果这个阶段的tasks的数量大于0，那么这个任务调度器就会提交任务，在提交任务中，会将这个          stage的任务封装成一个TaskSet,任务集进行提交，点击submitTasks      -- if (tasks.size &gt; 0)，taskScheduler.submitTasks(new TaskSet( tasks.toArray, stage.id, stage.latestInfo.attemptNumber, jobId, properties))              1.首先取出任务              --val tasks &#x3D; taskSet.tasks              2. 创建一个任务集taskset的管理者manager              -- val manager &#x3D; createTaskSetManager(taskSet, maxTaskFailures)              3. 构建调度器，将刚刚创建的任务集管理者放到调度器中，点击addTaskSetManager              --schedulableBuilder.addTaskSetManager(manager, manager.taskSet.properties)                  1.是一个抽象方法，类是一个trait，有两个实现类，分别是：                        FIFOSchedulableBuilder --&gt; 先进先出调度器                        FairSchedulableBuilder --&gt; 公平调度器                        那么我们新增加进去的manager是采用什么调度器呢？                            a、通过源码可知，默认的调度模式为FIFO模式                            -- private val schedulingModeConf &#x3D; conf.get(SCHEDULER_MODE_PROPERTY, SchedulingMode.FIFO.toString)                            b、创建一个任务调度池，当driver生成任务以后，会将任务放进任务池中，由manager来进行调度                            val rootPool: Pool &#x3D; new Pool(&quot;&quot;, schedulingMode, 0, 0)                   2. 将manager直接放进调度池中，                    rootPool.addSchedulable(manager)                4. 点击.reviveOffers：恢复当前的操作               --backend.reviveOffers()                   1.driver的终端，自己给自己发消息                    -- driverEndpoint.send(ReviveOffers)                    2.在DriverEndpoint中，就有一个receive方法，在这个方法中，匹配获取的消息，如果是ReviveOffers,                    则执行makeOffers()方法，点击makeOffers()方法                     -- case ReviveOffers &#x3D;&gt;makeOffers()                         a、DriverEndpoint调度器从任务池中取出任务，取任务的具体方式：点击resourceOffers                          -- val taskDescs &#x3D; scheduler.resourceOffers(workOffers)                               a、获取一个排好序的任务集合，实现方式，点击getSortedTaskSetQueue                                --val sortedTaskSets &#x3D; rootPool.getSortedTaskSetQueue                                     a、如下为任务集的调度的算法，依据算法对任务集进行比较排序，返回排好序的任务集，然后将                                     返回任务集存放到一个arraybuffer集合中，并返回给到sortedTaskSets，不同的调度的算法                                     是不一样的。                                     &quot;FIFO调度算法&quot;：先比较优先级，优先级高的先调度，如果优先级相等，则比较阶段id，阶段                                                    id小的先执行。                                     &quot;Fair调度算法&quot;：根据运行任务的数量、权重【默认值为1】、最小分配数量【默认值为0】，                                                    进行综合分配                                      -- val sortedSchedulableQueue &#x3D;      schedulableQueue.asScala.toSeq.sortWith(taskSetSchedulingAlgorithm.comparator)                                 b、如果任务不为空，则driver发射任务                          -- if (!taskDescs.isEmpty) &#123;launchTasks(taskDescs)&#125;             <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1.总结   1. 一个stage生成tasks以后，由taskSchedule负责任务的调度   2. 一个stage就会有一个任务集，taskSet   3. 每一个taskSet都会被封装成TaskSetManager，负责监控管理同一个Stage中的Tasks，TaskScheduler调度模式有两种：        a、FIFOSchedulableBuilder --&gt; 先进先出调度器【默认调度模式】        b、FairSchedulableBuilder --&gt; 公平调度器   4. TaskScheduler初始化过程中会实例化rootPool任务池，driver准备的任务和管理者会发送到这个任务池中，      由TaskScheduler负责将任务调度结果发送给executor   5. driver的终端自己给自己发送一个消息&quot;ReviveOffers&quot;，driverEndpoint收到ReviveOffer消息后调用makeOffers方法，TaskScheduler就开始进行任务集的调度   6. 根据&quot;调度算法&quot;对任务集进行排序，获取一个排好序的队列&quot;排序在前的就先执行，排序在后的就后执行&quot;，将排好序的队列放到一个arraybuffer集合中，并返回给到sortedTaskSets              &quot;FIFO调度算法&quot;：先比较优先级，优先级高的先调度，如果优先级相等，则比较阶段id，阶段 id小的先执行。        &quot;Fair调度算法&quot;：根据运行任务的数量、weight【默认值为1】、minShare【默认值为0】，进行综合分配        minShare、weight的值均在公平调度配置文件&quot;fairscheduler.xml&quot;中被指定，调度池在构建阶段会读取此文件的相关配置   7. &quot;driverEndpoint&quot;调度器就从这个排好序的任务队列的数组中取任务tasks。   8. 如果获取的任务不为空，则dirver开始发射任务   -- 2.说明：   1. 从任务池中取出的任务，包含了本地化级别信息以及等待的时长(&quot;默认每个级别等待时间为3s，也可以单独设置每个级别的等待时间&quot;)，当在driver在发送任务的时候，会根据本地化级别进行发送任务.   -- 3.区分本地化级别和调度算法    调度算法：是指driverEndpoint在调度任务集时，确定哪个任务集先执行，哪个任务集后执行    本地化级别：是指driver在发送向executor发送任务的首选位置，确定任务发送到哪个executor中，如果发送不成功，并进行降级处理                                           <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-4-任务的计算"><a href="#5-4-任务的计算" class="headerlink" title="5.4  任务的计算"></a>5.4  任务的计算</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> 1. driver发送任务前，会将任务进行编码： --val serializedTask &#x3D; TaskDescription.encode(task)    2. 然后向executor发送已经编码和序列化的任务task-- executorData.executorEndpoint.send(LaunchTask(new SerializableBuffer(serializedTask))3. 在executorbackend就会收到任务(receive)并启动任务,首先是对任务进行解码，然后executor启动任务，点击launchTask --val taskDesc &#x3D; TaskDescription.decode(data.value)     logInfo(&quot;Got assigned task &quot; + taskDesc.taskId)     executor.launchTask(this, taskDesc)4.  来一个task就使用一个线程来接收     --val tr &#x3D; new TaskRunner(context, taskDescription)     runningTasks.put(taskDescription.taskId, tr)     threadPool.execute(tr) 5. 线程中有一个run方法，方法中有一个逻辑为：task.run，通过底层发现，其实调用的是具体task对象的runTask()方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-5-shuffle"><a href="#5-5-shuffle" class="headerlink" title="5.5 shuffle"></a>5.5 shuffle</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">【在&quot;shuffleMapTask类&quot;中的runTask()方法中】1. shuffle&quot;写操作&quot;--var writer: ShuffleWriter[Any, Any] &#x3D; null2. 在写操作之前，也会调用迭代器的方式，所以也可以实现&quot;读的操作&quot;--writer.write(rdd.iterator(partition, context)......【在&quot;resultTask类&quot;中的runTask()方法中，那么就得有读数据的操作】1. RDD中不保存数据，所以操作的时候数据是一条一条的执行，则会调用迭代器的方法，点击iterator方法-- func(context, rdd.iterator(partition, context))    1. 一层一层的调，在shuffleRDD中的computer中有：&quot;读的操作&quot;     -- SparkEnv.get.shuffleManager.getReader(dep.shuffleHandle, split.index, split.index + 1, context).read()   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&quot;分支1&quot;： Shuffle map(Write)      1. 点击getWrite      -- writer &#x3D; manager.getWriter[Any, Any](dep.shuffleHandle, partitionId, context)            1. getWriter是一个抽象方法，所在的类为：ShuffleManager，&#39;shuffle管理器&#39;，获取其实现类：&quot;SortShuffleManager&quot;               是一个可排序的shuffleManager管理器。查询这个管理类的getWriter方法，在这个方法中，对handle的类型进行模式匹               配，所以现在handle就很很重要了，从模式匹配项，可以知道有3种不同类型的handle，而且handle来自&quot;getWriter方法&quot;               -- handle match &#123;                  case unsafeShuffleHandle: SerializedShuffleHandle                  case bypassMergeSortHandle: BypassMergeSortShuffleHandle                  case other: BaseShuffleHandle      2.在 &quot;manager.getWriter&quot;方法中的handle到底是什么？看源码             1. 是shuffle管理器注册shuffle获取的，点击registerShuffle             --val shuffleHandle: ShuffleHandle &#x3D; _rdd.context.env.shuffleManager.registerShuffle(        shuffleId, _rdd.partitions.length, this)             2. 是一个抽象方法，获取抽象类&quot;ShuffleManager&quot;的实现类&quot;SortShuffleManager&quot;,查询&quot;registerShuffle&quot;方法                    从这里发现，确实有三种handle：                    a、如果忽略索引文件的排序 --&gt; 创建BypassMergeSortShuffleHandle                    b、如果可以实现序列化    --&gt; 创建SerializedShuffleHandle                    c、如果不是以上两种      --&gt; 创建BaseShuffleHandle                   --if (SortShuffleWriter.shouldBypassMergeSort(conf, dependency)) &#123;                            new BypassMergeSortShuffleHandle[K, V](                            shuffleId, numMaps, dependency.asInstanceOf[ShuffleDependency[K, V, V]])                        &#125; else if (SortShuffleManager.canUseSerializedShuffle(dependency)) &#123;                            new SerializedShuffleHandle[K, V](                            shuffleId, numMaps, dependency.asInstanceOf[ShuffleDependency[K, V, V]])                        &#125; else &#123;                               new BaseShuffleHandle(shuffleId, numMaps, dependency)                        &#125;                      &#125;                      1. 点击&quot;shouldBypassMergeSort&quot;,查看什么情况下忽略排序，如果当前rdd的map端有预聚合功能，就                         不能忽略排序，如reduceByKey算子                        -- if (dep.mapSideCombine) &#123;false&#125;                        如果map端没有预聚合功能，首先获取忽略合并的阈值，如果没有显示设置，就会默认给200，如果当前RDD的                        分区器的分区数量小于这个阈值，那么就返回true，则此时创建&quot;BypassMergeSortShuffleHandle&quot;                        --else &#123;                        val bypassMergeThreshold: Int &#x3D; conf.getInt(&quot;spark.shuffle.sortbypassMergeThreshold&quot;, 200)                        dep.partitioner.numPartitions &lt;&#x3D; bypassMergeThreshold                        -- 所以总结就是当rdd的map端没有预聚合功能，且分区器的分区数量小于阈值，那么就会创建                            &quot;BypassMergeSortShuffleHandle&quot;                     2. 点击&quot;canUseSerializedShuffle&quot;,Spark的内存优化后的解决方案,对象序列化后不需要反序列化。                          &#x2F;&#x2F; 通过以下代码可知，创建&quot;SerializedShuffleHandle&quot;的条件为,满足以下三个条件即可：                             a、序列化对象需要&quot;支持&quot;重定义                             b、依赖的map端&quot;没有&quot;预聚合功能                             c、分区数量&quot;小于&quot;(1 &lt;&lt; 24) - 1 &#x3D; 16777215                          if (!dependency.serializer.supportsRelocationOfSerializedObjects) &#123; false&#125;                           else if (dependency.mapSideCombine) &#123;false &#125;                           else if (numPartitions &gt; MAX_SHUFFLE_OUTPUT_PARTITIONS_FOR_SERIALIZED_MODE) &#123; false&#125;                           else &#123;true &#125;                     3. 如果以上两个handle都不满足，则选择最后一个handle：&quot;BaseShuffleHandle&quot; --&gt;默认的handle                                             &quot;分支2&quot;：Shuffle reduce(Read)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 总结： shuffle的handle有三种：     1. BypassMergeSortShuffleHandle  --&gt; BypassMergeSortShuffleWriter        &quot;条件&quot;：        a、当前rdd的map端没有预聚合功能，如groupBy        b、分区器的分区数量小于阈值,默认为200             2. SerializedShuffleHandle      --&gt; UnsafeShuffleWriter        &quot;条件&quot;：        a、序列化对象需要&quot;支持&quot;重定义        b、依赖的map端&quot;没有&quot;预聚合功能        c、分区数量&quot;小于&quot;(1 &lt;&lt; 24) - 1 &#x3D; 16777215     3. BaseShuffleHandle           --&gt; SortShuffleWriter        &quot;默认的handle&quot;如果前两种都不满足，那么就使用默认的write拿着这三种handle，再来看这个&quot;getWrite&quot;方法<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"> -- handle match &#123;    -- case unsafeShuffleHandle: SerializedShuffleHandle &#x3D;&gt;       new UnsafeShuffleWriter....      -- case bypassMergeSortHandle: BypassMergeSortShuffleHandle &#x3D;&gt;       new BypassMergeSortShuffleWriter....    -- case other: BaseShuffleHandle &#x3D;&gt;       new SortShuffleWriter....&quot;不同的handle对应不同的writer&quot;    1. BypassMergeSortShuffleHandle  --&gt; BypassMergeSortShuffleWriter       &#x2F;&#x2F; 点击&quot;BypassMergeSortShuffleWriter&quot;中的write方法，如下代码，根据分区的数量进行循环，&#39;每一个分区就向磁盘写一个文       件&#39;。 即map端的每一个task会为reduce端的每一个task都创建一个临时磁盘文件,根据key的hashcode%分区数量，决定数据去到       哪个分区文件中。       -- for (int i &#x3D; 0; i &lt; numPartitions; i++) &#123;     partitionWriters[i] &#x3D; blockManager.getDiskWriter(blockId, file, serInstance, fileBufferSize, writeMetrics);&#125;          2. SerializedShuffleHandle       --&gt; UnsafeShuffleWriter       3. BaseShuffleHandle,&quot;重要&quot;       --&gt; SortShuffleWriter        &#x2F;&#x2F; 点击&quot;SortShuffleWriter&quot;中的write方法，如下代码：       &#x2F;&#x2F; 1. &quot;写文件过程&quot;：写磁盘文件时，首先将数据写到内存中，并在内存中的进行排序，如果内存（5M）不够，会溢写磁盘，       生成临时文件(一个数据文件，一个索引文件)，最终将所有的临时文件合并(原来的数据文件和索引文件会被删除)成数据       文件和索引文件。          2. &quot;预聚和的原理&quot;：在排序时，构造了一种类似于hashtable的结构，所以相同的key就聚合在一起。          3. &quot;排序规则&quot;：首先会按照分区进行排序，然后按照key.          4. &quot;数据进入不同分区的原则&quot;：按照分区器的原则，默认是hashpartition，根据key的hash%分区数量。        val partitionLengths &#x3D; sorter.writePartitionedFile(blockId, tmp)        shuffleBlockResolver.writeIndexFileAndCommit...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200621180817513](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200621180817.png)</p><p>![image-20200620004312766](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620004312.png)</p><pre class="line-numbers language-sqlite" data-language="sqlite"><code class="language-sqlite">-- 面试中常见shuffle的两个问题：1. 我们现在spark使用了哪种shuffle，哪一种类型的？   a、sortshuffle。2. 忽略排序过程的shuffle什么时候会触发？   a、map 端没有预聚合功能   b、reduce端的分区数量小于一个阈值，默认是200<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="六-、-Spark内存管理"><a href="#六-、-Spark内存管理" class="headerlink" title="六 、 Spark内存管理"></a>六 、 Spark内存管理</h2><h3 id="6-1-堆内内存和堆外内存"><a href="#6-1-堆内内存和堆外内存" class="headerlink" title="6.1 堆内内存和堆外内存"></a>6.1 堆内内存和堆外内存</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">--1. &quot;堆内内存&quot;：    是指jvm所能使用的内存，并不是完全可以控制，如GC垃圾回收器的执行时间是不可控的，当你需要内存进行数据处理时，GC并不能立    马释放内存给你使用。jvm虚拟机默认使用的内存大小是可用内存的1&#x2F;64，最大值是1&#x2F;4--2. &quot;堆外内存&quot;：     在jvm虚拟机之外的内存，可以存储我们的数据，这个内存是咱们向操作系统申请过来的，完全可控。&quot;默认是不启用堆外内存&quot;--3. 设置堆外内存的参数：    a、启动堆外内存参数：spark.memory.offHeap.enabled    b、设定堆外内存的大小： spark.memory.offHeap.size --4. 在spark中，堆内和堆外内存可以进行统一的管理。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-内存空间分配"><a href="#6-2-内存空间分配" class="headerlink" title="6.2 内存空间分配"></a>6.2 内存空间分配</h3><h4 id="6-2-1-早期内存管理"><a href="#6-2-1-早期内存管理" class="headerlink" title="6.2.1 早期内存管理"></a>6.2.1 早期内存管理</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">&quot;早期各个区域的内存分配好了以后，就需要严格遵守这个规则，内存大小不可变。&quot;--1. 内存空间的分配：1. Storage：缓存RDD数据和广播变量的数据， &quot;内存大小占比60%&quot;2. Execution：用于缓存在shuffle过程中的中间数据， &quot;内存大小占比20%&quot;3. Other：用户自定义的一些数据结构或者是Spark内部的元数据 ： &quot;内存大小占比20%&quot;-- 2. Storage内存和Execution内存都有预留空间，目的是防止OOM，因为Spark堆内内存大小的记录是不准确的，需要留出保险区域。-- 3. 当前不同区域内存大小分配存在的问题：      Execution的内存过小，而Storage内存大小过多。       从而就产生了新的内存分配原则<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>堆内内存</li></ul><p>![image-20200620012427321](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620012427.png)</p><ul><li>堆外内存</li></ul><p>![image-20200620015214858](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620015214.png)</p><h4 id="6-2-2-统一内存管理"><a href="#6-2-2-统一内存管理" class="headerlink" title="6.2.2 统一内存管理"></a>6.2.2 统一内存管理</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1. 什么是统一内存管理？   Spark1.6 之后引入的统一内存管理机制，各个区域内存的大小是可变的. --2.与静态内存管理的区别:   统一内存管理&quot;存储内存&quot;和&quot;执行内存共享&quot;同一块空间，可以动态占用对方的空闲区域-- 3. 当前spark默认的内存分配是按照统一内存管理的模式。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>堆内内存</li></ul><p>![image-20200620015026859](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620015026.png)</p><ul><li>堆外内存</li></ul><p>![image-20200620015251558](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620015251.png)</p><h4 id="6-2-3-同一管理内存的优点"><a href="#6-2-3-同一管理内存的优点" class="headerlink" title="6.2.3 同一管理内存的优点"></a>6.2.3 同一管理内存的优点</h4><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 1. 优点1)设定基本的存储内存和执行内存区域（spark.storage.storageFraction参数），该设定确定了双方各自拥有的空间的范围；2)双方的空间都不足时，则存储到硬盘；若己方空间不足而对方空余时，可借用对方的空间;（存储空间不足是指不足以放下一个完整的Block）3)执行内存的空间被对方占用后，可让对方将占用的部分转存到硬盘，然后”归还”借用的空间；4)存储内存的空间被对方占用后，无法让对方”归还”，因为需要考虑 Shuffle过程中的很多因素，实现起来较为复杂。-- 2. 统一内存管理的动态占用机制图如下：<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>![image-20200620015447725](<a href="https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic">https://lian-zp.oss-cn-shenzhen.aliyuncs.com/pic</a> GO/20200620015447.png)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 注意事项1. 如果是storage借了Execution的内存，那么当Execution需使用时，storage占用Execution的内存就要想办法还给Execution，一般可以进行落盘，但是在内存中的数据有一个存储级别，如果仅仅是Memory_Only的话，那么此时占用内存的数据就会丢失。2.  如果是Execution借了storage的内存，那么当storage需使用时，Execution并不会把内存还给storage，那么此时storage的数据就会溢写磁盘，如果不能溢写的话，那么就会丢失或淘汰。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">-- 面试题：1. 动态占用机制图是什么情况？2. 为什么cache为丢失数据？3. 阶段的划分4. task的发送<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> spark </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从TCP传输谈到Scala分布式逻辑传输</title>
      <link href="2020/04/15/%E4%BB%8EScala%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
      <url>2020/04/15/%E4%BB%8EScala%E8%B0%88%E5%88%86%E5%B8%83%E5%BC%8F%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="从Scala谈分布式代码实现原理"><a href="#从Scala谈分布式代码实现原理" class="headerlink" title="从Scala谈分布式代码实现原理"></a>从Scala谈分布式代码实现原理</h1><h2 id="1-什么是-Socket"><a href="#1-什么是-Socket" class="headerlink" title="1.什么是 Socket?"></a>1.什么是 Socket?</h2><p>Transmission Control Protocol/Internet protocol 即传输控制协议/网络协议</p><p>User Data Protocol 用户数据报协议 是与TCP相对应的协议,是TCP/IP协议族中的一种.</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127163835.png" alt="scala的传输"></p><p>TCP/IP协议族包括运输层、网络层、链路层。<br>Socket的位置如下图</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/socket%E4%BC%A0%E8%BE%93.png" alt="img"></p><p>Socket是应用层与TCP/IP协议族通信的中间软件抽象层，它是一组接口。在设计模式中，Socket其实就是一个门面模式，它把复杂的TCP/IP协议族隐藏在Socket接口后面，对用户来说，一组简单的接口就是全部，让Socket去组织数据，以符合指定的协议。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BC%A0%E8%BE%93.png" alt="img"></p><pre><code> 先从服务器端说起。服务器端先初始化Socket，然后与端口绑定(bind)，对端口进行监听(listen)，调用accept阻塞，等待客户端连接。在这时如果有个客户端初始化一个Socket，然后连接服务器(connect)，如果连接成功，这时客户端与服务器端的连接就建立了。客户端发送数据请求，服务器端接收请求并处理请求，然后把回应数据发送给客户端，客户端读取数据，最后关闭连接，一次交互结束。</code></pre><p>​    Socket源于Unix,一切皆是文件,所以对于Scoket来说我们就简单的看作是一个云共享的文件,然后定义一下文件的名字(IP+端口号),把传输的数据放入文件,指定的目标IP下通过监听指定端口就可以打开监听</p><h2 id="2-Scala的分布式传输简单实现"><a href="#2-Scala的分布式传输简单实现" class="headerlink" title="2.Scala的分布式传输简单实现"></a>2.Scala的分布式传输简单实现</h2><p>分布式必定是Master与Worker共同作用.Master需要指定代码传输给Worker进行执行</p><p>定义工作类Task</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">class</span> Task <span class="token keyword">extends</span> Serializable <span class="token punctuation">&#123;</span>  <span class="token keyword">val</span> data <span class="token operator">=</span> <span class="token number">1</span> to <span class="token number">5</span>  <span class="token keyword">val</span> logic <span class="token operator">=</span> <span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token keyword">=></span>x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>定义Master</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Master<span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> worker <span class="token operator">=</span> <span class="token keyword">new</span> Socket<span class="token punctuation">(</span><span class="token string">"localhost"</span><span class="token punctuation">,</span><span class="token number">9999</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> objOut <span class="token operator">=</span> <span class="token keyword">new</span> ObjectOutputStream<span class="token punctuation">(</span>worker<span class="token punctuation">.</span>getOutputStream<span class="token punctuation">)</span>        <span class="token keyword">val</span> task <span class="token operator">=</span> <span class="token keyword">new</span> Task<span class="token punctuation">(</span><span class="token punctuation">)</span>        objOut<span class="token punctuation">.</span>writeObject<span class="token punctuation">(</span>task<span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string">"开始发送对象"</span><span class="token punctuation">)</span>        objOut<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span>        objOut<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        worker<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//关闭工作窗口</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>定义worker</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Worker<span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span>Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token builtin">Unit</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>        <span class="token keyword">val</span> server <span class="token operator">=</span> <span class="token keyword">new</span> ServerSocket<span class="token punctuation">(</span><span class="token number">9999</span><span class="token punctuation">)</span>        <span class="token keyword">val</span> master<span class="token operator">:</span>Socket <span class="token operator">=</span> server<span class="token punctuation">.</span>accept<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//阻塞线程.等待接收</span>        <span class="token keyword">val</span> objIn <span class="token operator">=</span> <span class="token keyword">new</span> ObjectInputSteam<span class="token punctuation">(</span>master<span class="token punctuation">.</span>getInputStream<span class="token punctuation">)</span>        <span class="token keyword">val</span> task<span class="token operator">:</span>Task <span class="token operator">=</span> objIn<span class="token punctuation">.</span>readObject<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>asInstanceOf<span class="token punctuation">[</span>Task<span class="token punctuation">]</span>        objIn<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        master<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>        server<span class="token punctuation">.</span>clsoe<span class="token punctuation">(</span><span class="token punctuation">)</span>        println<span class="token punctuation">(</span><span class="token string">"开始计算...."</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token keyword">&lt;-</span>task<span class="token punctuation">.</span>data<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            println<span class="token punctuation">(</span>task<span class="token punctuation">.</span>logic<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        println<span class="token punctuation">(</span><span class="token string">"计算完毕"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    </p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>redis的架构与API</title>
      <link href="2020/03/23/Redis/"/>
      <url>2020/03/23/Redis/</url>
      
        <content type="html"><![CDATA[<p style="text-align:center;font-size:100px;">Redis</p># 一、大型网站的系统特点<h2 id="1-高并发、大流量"><a href="#1-高并发、大流量" class="headerlink" title="1.高并发、大流量"></a>1.高并发、大流量</h2><p>大型网站系统需要面对高并发用户，大流量访问。Google日均PV数35亿，日均IP访问数3亿；腾讯QQ的最大在线用户数1.4亿（2011年数据）；微信用户量已超11亿；2019年天猫双十一交易额突破2500亿。</p><h2 id="2-高可用"><a href="#2-高可用" class="headerlink" title="2.高可用"></a>2.高可用</h2><p>系统7×24小时不间断服务。大型互联网站的宕机事件通常会成为新闻焦点，例如2010年百度域名被黑客劫持导致不能访问，成为重大新闻热点。</p><h2 id="3-海量数据"><a href="#3-海量数据" class="headerlink" title="3.海量数据"></a>3.海量数据</h2><p>需要存储、管理海量数据，需要使用大量服务器。Facebook每周上传的照片数目接近10亿，百度收录的网页数目有数百亿，Google有近百万台服务器为全球用户提供服务。</p><h2 id="4-用户分布广泛，网络情况复杂"><a href="#4-用户分布广泛，网络情况复杂" class="headerlink" title="4.用户分布广泛，网络情况复杂"></a>4.用户分布广泛，网络情况复杂</h2><p>许多大型互联网都是为全球用户提供服务的，用户分布范围广，各地网络情况千差万别。在国内，还有各个运营商网络互通难的问题。而中美光缆的数次故障，也让一些对国外用户依赖较大的网站不得不考虑在海外建立数据中心。</p><h2 id="5-安全环境恶劣"><a href="#5-安全环境恶劣" class="headerlink" title="5.安全环境恶劣"></a>5.安全环境恶劣</h2><p>由于互联网的开放性，使得互联网站更容易受到攻击，大型网站几 乎每天都会被黑客攻击。任何系统漏洞都会被攻击者利用，造成重大损失。</p><h2 id="6-需求快速变更，发布频繁"><a href="#6-需求快速变更，发布频繁" class="headerlink" title="6.需求快速变更，发布频繁"></a>6.需求快速变更，发布频繁</h2><p>和传统软件的版本发布频率不同，互联网产品为快速适应市场，满足用户需求，其产品发布频率是极高的。Office的产品版本以年为单位发布，而一般大型网站的产品每周都有新版本发布上线，至于中小型网站的发布就更频繁了，有时候一天会发布几十次。</p><h2 id="7-渐进式发展"><a href="#7-渐进式发展" class="headerlink" title="7.渐进式发展"></a>7.渐进式发展</h2><p>与传统软件产品或企业应用系统一开始就规划好全部的功能和非功能需求不同，几乎所有的大型互联网站都是从一个小网站开始，渐进地发展起来的。 </p><p>Facebook是伯克扎克同学在哈佛大学的宿舍里开发的；Google的第一台服务器部署在斯坦福大学的实验室里；</p><p>阿里巴巴则是在马云家的客厅里诞生的。好的互联网产品都是慢慢运营出来的，不是一开始就开发好的，这也正好与网站架构的发展演化过程对应。</p><h1 id="二、大型网站架构发展历程"><a href="#二、大型网站架构发展历程" class="headerlink" title="二、大型网站架构发展历程"></a>二、大型网站架构发展历程</h1><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E7%BB%93%E6%9E%84.jpg" alt="architecture"></p><h2 id="1-单一应用架构"><a href="#1-单一应用架构" class="headerlink" title="1.单一应用架构"></a>1.单一应用架构</h2><p>当网站流量很小时，只需一个应用，将所有功能都部署在一起，以减少部署节点和成本。此时，用于简化增删改查工作量的数据访问框架(ORM)是关键。</p><h2 id="2-垂直应用架构"><a href="#2-垂直应用架构" class="headerlink" title="2.垂直应用架构"></a>2.垂直应用架构</h2><p>当访问量逐渐增大，单一应用增加机器带来的加速度越来越小，提升效率的方法之一是将应用拆成互不相干的几个应用，以提升效率。此时，用于加速前端页面开发的Web框架(MVC)是关键。</p><h2 id="3-分布式服务架构"><a href="#3-分布式服务架构" class="headerlink" title="3.分布式服务架构"></a>3.分布式服务架构</h2><p>当垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。</p><h2 id="4-流动计算架构"><a href="#4-流动计算架构" class="headerlink" title="4.流动计算架构"></a>4.流动计算架构</h2><p>当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。</p><h1 id="三、从NoSQL说起"><a href="#三、从NoSQL说起" class="headerlink" title="三、从NoSQL说起"></a>三、从NoSQL说起</h1><p>NoSQL是Not only SQL的缩写，大意为“不只是SQL”，说明这项技术是<b><font color="red">传统关系型数据库的补充</font></b>而非替代。在整个NoSQL技术栈中<b><font color="blue">MemCache</font></b>、<b><font color="blue">Redis</font></b>、<b><font color="blue">MongoDB</font></b>被称为NoSQL三剑客。那么时代为什么需要NoSQL数据库呢？我们来做个对比：</p><table><thead><tr><th></th><th>关系型数据库</th><th>NoSQL数据库</th></tr></thead><tbody><tr><td>数据存储位置</td><td>硬盘</td><td>内存</td></tr><tr><td>数据结构</td><td>高度组织化结构化数据</td><td>没有预定义的模式</td></tr><tr><td>数据操作方式</td><td>SQL</td><td>所有数据都是键值对，没有声明性查询语言</td></tr><tr><td>事务控制</td><td>严格的基础事务ACID原则</td><td>基于乐观锁的松散事务控制</td></tr></tbody></table><p>所以NoSQL数据库的最大优势体现为：高性能、高可用性和可伸缩性。</p><h2 id="3-1大数据时代"><a href="#3-1大数据时代" class="headerlink" title="3.1大数据时代"></a>3.1大数据时代</h2><p>一般数据库无法进行分析处理</p><p>一个基本的网站,单个数据库完全足够</p><p>静态网路服务器压力小</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="1602837878033"></p><p>MyISAM:表锁</p><p>INnodb:行锁</p><p>分库分表</p><p>MySQL表分区</p><p>MySQL集群</p><p>技术爆炸</p><p>世界已经发生了翻天覆地的变化(定位:也是一种数据)</p><p>音乐榜,热榜,实时变化,</p><p>关系型数据,数据量大发生变化快</p><p>BSON 是MongoDB的格式</p><p>JSON的二进制</p><p>数据库专门处理这种数据</p><p>MySQL压力变小了.</p><p>四、Redis简介</p><h1 id="四、Redis简介"><a href="#四、Redis简介" class="headerlink" title="四、Redis简介"></a>四、Redis简介</h1><p>Redis英文官网介绍：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Redis is an open source (BSD licensed), in-memory data structure store, used as a database, cache and message broker. It supports data structures such as strings, hashes, lists, sets, sorted sets with range queries, bitmaps, hyperloglogs and geospatial indexes with radius queries. Redis has built-in replication, Lua scripting, LRU eviction, transactions and different levels of on-disk persistence, and provides high availability via Redis Sentinel and automatic partitioning with Redis Cluster.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Redis中文官网介绍：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">Redis 是一个开源（BSD许可）的，内存中的数据结构存储系统，它可以用作数据库、缓存和消息中间件。 它支持多种类型的数据结构，如 字符串（strings）， 散列（hashes）， 列表（lists）， 集合（sets）， 有序集合（sorted sets） 与范围查询， bitmaps， hyperloglogs 和 地理空间（geospatial） 索引半径查询。 Redis 内置了 复制（replication），LUA脚本（Lua scripting）， LRU驱动事件（LRU eviction），事务（transactions） 和不同级别的 磁盘持久化（persistence）， 并通过 Redis哨兵（Sentinel）和自动 分区（Cluster）提供高可用性（high availability）。<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Redis命令参考文档网址：<a href="http://redisdoc.com/">http://redisdoc.com</a></p><p>Redis的典型应用场景：</p><blockquote><p>1、缓存</p><p>使用Redis可以建立性能非常出色的缓存服务器，查询请求先在Redis中查找所需要的数据，如果能够查询到（命中）则直接返回，大大减轻关系型数据库的压力。</p><p>2、数据临时存储位置</p><p>使用token（令牌）作为用户登录系统时的身份标识，这个token就可以在Redis中临时存储。</p><p>3、分布式环境下解决Session不一致问题时的Session库</p><p>Spring提供了一种技术解决分布式环境下Session不一致问题，叫SpringSession。而Redis就可以为SpringSession提供一个数据存储空间。</p><p>4、流式数据去重</p><p>在Redis中有一种数据类型是set，和Java中的Set集合很像，不允许存储重复数据。借助这个特性我们可以在Redis中使用set类型存储流式数据达到去重的目的。</p></blockquote><h1 id="五、Redis安装"><a href="#五、Redis安装" class="headerlink" title="五、Redis安装"></a>五、Redis安装</h1><h2 id="1-上传并解压"><a href="#1-上传并解压" class="headerlink" title="1.上传并解压"></a>1.上传并解压</h2><p>redis-4.0.2.tar.gz</p><h2 id="2-安装C语言编译环境"><a href="#2-安装C语言编译环境" class="headerlink" title="2.安装C语言编译环境"></a>2.安装C语言编译环境</h2><p>[建议先拍快照]<br/></p><p>yum install -y gcc-c++</p><h2 id="3-修改安装位置（选做）"><a href="#3-修改安装位置（选做）" class="headerlink" title="3.修改安装位置（选做）"></a>3.修改安装位置（选做）</h2><p>vim redis解压目录/src/Makefile</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">PREFIX?=/usr/local/redis<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>就Redis自身而言是不需要修改的，这里修改的目的是让Redis的运行程序不要和其他文件混杂在一起。</p><h2 id="4-编译安装"><a href="#4-编译安装" class="headerlink" title="4.编译安装"></a>4.编译安装</h2><p>编译：进入Redis解压目录执行make命令<br/></p><p>[建议先拍快照]<br/></p><p>安装：make install</p><h2 id="5-启动Redis服务器"><a href="#5-启动Redis服务器" class="headerlink" title="5.启动Redis服务器"></a>5.启动Redis服务器</h2><h3 id="①默认启动"><a href="#①默认启动" class="headerlink" title="①默认启动"></a>①默认启动</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">[root@rich ~]# /usr/local/redis/bin/redis-server7239:C 07 Oct 18:59:12.144 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo7239:C 07 Oct 18:59:12.144 # Redis version=4.0.2, bits=64, commit=00000000, modified=0, pid=7239, just started7239:C 07 Oct 18:59:12.144 # Warning: no config file specified, using the default config. In order to specify a config file use /usr/local/redis/bin/redis-server /path/to/redis.conf7239:M 07 Oct 18:59:12.145 * Increased maximum number of open files to 10032 (it was originally set to 1024).                _._                                                             _.-``__ ''-._                                                   _.-``    `.  `_.  ''-._           Redis 4.0.2 (00000000/0) 64 bit  .-`` .-```.  ```\/    _.,_ ''-._                                    (    '      ,       .-`  | `,    )     Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'|     Port: 6379 |    `-._   `._    /     _.-'    |     PID: 7239  `-._    `-._  `-./  _.-'    _.-'                                    |`-._`-._    `-.__.-'    _.-'_.-'|                                   |    `-._`-._        _.-'_.-'    |           http://redis.io          `-._    `-._`-.__.-'_.-'    _.-'                                    |`-._`-._    `-.__.-'    _.-'_.-'|                                   |    `-._`-._        _.-'_.-'    |                                    `-._    `-._`-.__.-'_.-'    _.-'                                         `-._    `-.__.-'    _.-'                                                 `-._        _.-'                                                         `-.__.-'                                               7239:M 07 Oct 18:59:12.148 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.7239:M 07 Oct 18:59:12.148 # Server initialized7239:M 07 Oct 18:59:12.148 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect.7239:M 07 Oct 18:59:12.148 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.7239:M 07 Oct 18:59:12.148 * Ready to accept connections<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>停止Redis服务器</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">/usr/local/redis/bin/redis-cli shutdown<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">7239:M 07 Oct 19:00:53.208 # User requested shutdown...7239:M 07 Oct 19:00:53.208 * Saving the final RDB snapshot before exiting.7239:M 07 Oct 19:00:53.214 * DB saved on disk7239:M 07 Oct 19:00:53.214 # Redis is now ready to exit, bye bye...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②定制配置项启动"><a href="#②定制配置项启动" class="headerlink" title="②定制配置项启动"></a>②定制配置项启动</h3><h4 id="1-准备配置文件"><a href="#1-准备配置文件" class="headerlink" title="[1]准备配置文件"></a>[1]准备配置文件</h4><p>在用户的家目录创建一个目录</p><p>mkdir myredis</p><p>cp /opt/redis-4.0.2/redis.conf myredis</p><h4 id="2-修改配置项"><a href="#2-修改配置项" class="headerlink" title="[2]修改配置项"></a>[2]修改配置项</h4><table><thead><tr><th>配置项名称</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>daemonize</td><td>控制是否以守护进程形式运行Redis服务器</td><td>yes</td></tr><tr><td>logfile</td><td>指定日志文件位置</td><td>“/var/logs/redis.log”</td></tr><tr><td>dir</td><td>Redis工作目录</td><td>/usr/local/redis</td></tr></tbody></table><p><strong>注意：/var/logs目录需要我们提前创建好</strong></p><h4 id="3-让Redis根据指定的配置文件启动"><a href="#3-让Redis根据指定的配置文件启动" class="headerlink" title="[3]让Redis根据指定的配置文件启动"></a>[3]让Redis根据指定的配置文件启动</h4><p>格式</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">redis-server redis.conf文件路径<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>举例</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">redis-server /root/myredis/redis.confredis-server /home/atguigu/myredis/myredis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="6-客户端登录"><a href="#6-客户端登录" class="headerlink" title="6.客户端登录"></a>6.客户端登录</h2><p>redis-cli</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> pingPONG127.0.0.1:6379> exit<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="六、Redis五种常用数据结构"><a href="#六、Redis五种常用数据结构" class="headerlink" title="六、Redis五种常用数据结构"></a>六、Redis五种常用数据结构</h1><h2 id="1-总体结构"><a href="#1-总体结构" class="headerlink" title="1.总体结构"></a>1.总体结构</h2><table>    <tr>        <td rowspan="6">KEY</td>        <td>VALUE</td>    </tr>    <tr>        <td>string</td>    </tr>    <tr>        <td>list</td>    </tr>    <tr>        <td>set</td>    </tr>    <tr>        <td>hash</td>    </tr>    <tr>        <td>zset</td>    </tr></table><p>Redis中的数据，总体上是键值对，不同数据类型指的是键值对中值的类型。</p><h2 id="2-string类型"><a href="#2-string类型" class="headerlink" title="2.string类型"></a>2.string类型</h2><p>Redis中最基本的类型，它是key对应的一个单一值。二进制安全，不必担心由于编码等问题导致二进制数据变化。所以redis的string可以包含任何数据，比如jpg图片或者序列化的对象。Redis中一个字符串值的最大容量是512M。</p><h2 id="3-list类型"><a href="#3-list类型" class="headerlink" title="3.list类型"></a>3.list类型</h2><p>Redis 列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。说明它的底层是基于链表实现的，所以它操作时头尾效率高，中间效率低。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E7%9A%84list.png" alt="list"></p><h2 id="2-set类型"><a href="#2-set类型" class="headerlink" title="2.set类型"></a>2.set类型</h2><p>Redis的set是string类型的无序集合。它是基于哈希表实现的。</p><h2 id="3-hash类型"><a href="#3-hash类型" class="headerlink" title="3.hash类型"></a>3.hash类型</h2><p>本身就是一个键值对集合。可以当做Java中的Map&lt;String,String&gt;对待。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis-hash.png" alt="hash"></p><h2 id="4-zset类型"><a href="#4-zset类型" class="headerlink" title="4.zset类型"></a>4.zset类型</h2><p>Redis zset 和 set 一样也是string类型元素的集合,且不允许重复的成员。不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。zset的成员是唯一的,但分数(score)却可以重复。</p><h1 id="七、Redis命令行操作"><a href="#七、Redis命令行操作" class="headerlink" title="七、Redis命令行操作"></a>七、Redis命令行操作</h1><h2 id="1-基本操作"><a href="#1-基本操作" class="headerlink" title="1.基本操作"></a>1.基本操作</h2><h3 id="①切换数据库"><a href="#①切换数据库" class="headerlink" title="①切换数据库"></a>①切换数据库</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">Redis默认有16个数据库。115 # Set the number of databases. The default database is DB 0, you can select116 # a different one on a per-connection basis using SELECT <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dbid</span><span class="token punctuation">></span></span> where117 # dbid is a number between 0 and 'databases'-1118 databases 16使用select进行切换，数据库索引从0开始127.0.0.1:6379> select 2OK127.0.0.1:6379[2]> select 0OK127.0.0.1:6379> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②查看数据库长度"><a href="#②查看数据库长度" class="headerlink" title="②查看数据库长度"></a>②查看数据库长度</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> dbsize(integer) 3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="2-KEY操作"><a href="#2-KEY操作" class="headerlink" title="2.KEY操作"></a>2.KEY操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●KEYS PATTERN●TYPE KEY返回KEY对应的值的类型●MOVE KEY DB把一组键值对数据移动到另一个数据库中●DEL KEY [KEY ...]根据KEY进行删除，至少要指定一个KEY●EXISTS KEY检查指定的KEY是否存在。指定一个KEY时，存在返回1，不存在返回0。可以指定多个，返回存在的KEY的数量。●RANDOMKEY在现有的KEY中随机返回一个●RENAME KEY NEWKEY重命名一个KEY，NEWKEY不管是否是已经存在的都会执行，如果NEWKEY已经存在则会被覆盖。●RENAMENX KEY NEWKEY只有在NEWKEY不存在时能够执行成功，否则失败●TTL KEY以秒为单位查看KEY还能存在多长时间●EXPIRE KEY SECONDS给一个KEY设置在SECONDS秒后过期，过期会被Redis移除。●PERSIST KEY移除过期时间，变成永久key<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-string操作"><a href="#2-string操作" class="headerlink" title="2.string操作"></a>2.string操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●SET KEY VALUE [EX SECONDS] [PX MILLISECONDS] [NX|XX]给KEY设置一个string类型的值。EX参数用于设置存活的秒数。PX参数用于设置存活的毫秒数。NX参数表示当前命令中指定的KEY不存在才行。XX参数表示当前命令中指定的KEY存在才行。●GET KEY根据key得到值，只能用于string类型。●APPEND KEY VALUE把指定的value追加到KEY对应的原来的值后面，返回值是追加后字符串长度●STRLEN KEY直接返回字符串长度●INCR KEY自增1●DECR KEY自减1●INCRBY KEY INCREMENT原值+INCREMENT●DECRBY KEY DECREMENT原值-DECREMENT●GETRANGE KEY START END从字符串中取指定的一段●SETRANGE KEY OFFSET VALUE从offset开始使用VALUE进行替换●SETEX KEY SECONDS VALUE设置KEY,VALUE时指定存在秒数●SETNX KEY VALUE新建字符串类型的键值对●MSET KEY VALUE [KEY VALUE ...]一次性设置一组多个键值对●MGET KEY [KEY ...]一次性指定多个KEY，返回它们对应的值，没有值的KEY返回值是(nil)●MSETNX KEY VALUE [KEY VALUE ...]一次性新建多个值●GETSET KEY VALUE设置新值，同时能够将旧值返回<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-list操作"><a href="#3-list操作" class="headerlink" title="3.list操作"></a>3.list操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●LPUSH key value [value ...]●RPUSH key value [value ...]●LRANGE key start stop根据list集合的索引打印元素数据正着数：0,1,2,3,...倒着数：-1,-2,-3,...●LLEN key●LPOP key从左边弹出一个元素。弹出=返回+删除。●RPOP key从右边弹出一个元素。●RPOPLPUSH source destination从source中RPOP一个元素，LPUSH到destination中●LINDEX key index根据索引从集合中取值●LINSERT key BEFORE|AFTER pivot value在pivot指定的值前面或后面插入value●LPUSHX key value只能针对存在的list执行LPUSH●LREM key count value根据count指定的数量从key对应的list中删除value●LSET key index value把指定索引位置的元素替换为另一个值●LTRIM key start stop仅保留指定区间的数据，两边的数据被删除<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-set操作"><a href="#4-set操作" class="headerlink" title="4.set操作"></a>4.set操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●SADD key member [member ...]●SMEMBERS key●SCARD key返回集合中元素的数量●SISMEMBER key member检查当前指定member是否是集合中的元素●SREM key member [member ...]从集合中删除元素●SINTER key [key ...]将指定的集合进行“交集”操作集合A：a,b,c集合B：b,c,d交集：b,c●SINTERSTORE destination key [key ...]取交集后存入destination●SDIFF key [key ...]将指定的集合执行“差集”操作集合A：a,b,c集合B：b,c,dA对B执行diff：a相当于：A-交集部分●SDIFFSTORE destination key [key ...]●SUNION key [key ...]将指定的集合执行“并集”操作集合A：a,b,c集合B：b,c,d并集：a,b,c,d●SUNIONSTORE destination key [key ...]●SMOVE source destination member把member从source移动到destination●SPOP key [count]从集合中随机弹出count个数量的元素，count不指定就弹出1个●SRANDMEMBER key [count]从集合中随机返回count个数量的元素，count不指定就返回1个●SSCAN key cursor [MATCH pattern] [COUNT count]基于游标的遍历<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-hash操作"><a href="#5-hash操作" class="headerlink" title="5.hash操作"></a>5.hash操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●HSET key field value●HGETALL key●HGET key field●HLEN key●HKEYS key●HVALS key●HEXISTS key field●HDEL key field [field ...]●HINCRBY key field increment●HMGET key field [field ...]●HMSET key field value [field value ...]●HSETNX key field value<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-zset操作"><a href="#6-zset操作" class="headerlink" title="6.zset操作"></a>6.zset操作</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">●ZADD key [NX|XX] [CH] [INCR] score member [score member ...]●ZRANGE key start stop [WITHSCORES]●ZCARD key●ZSCORE key member●ZINCRBY key increment member●ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]在分数的指定区间内返回数据●ZRANK key member先对分数进行升序排序，返回member的排名●ZREM key member [member ...]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="八、Redis持久化机制"><a href="#八、Redis持久化机制" class="headerlink" title="八、Redis持久化机制"></a>八、Redis持久化机制</h1><p><a href="https://redis.io/topics/persistence#snapshotting">官网描述</a></p><p>Redis工作时数据都存储在内存中，万一服务器断电，则所有数据都会丢失。针对这种情况，Redis采用持久化机制来增强数据安全性。</p><h2 id="1-RDB"><a href="#1-RDB" class="headerlink" title="1.RDB"></a>1.RDB</h2><h3 id="①机制描述"><a href="#①机制描述" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>每隔一定的时间把内存中的数据作为一个快照保存到硬盘上的文件中。Redis默认开启RDB机制。</p><h3 id="②触发时机"><a href="#②触发时机" class="headerlink" title="②触发时机"></a>②触发时机</h3><h4 id="1-基于默认配置"><a href="#1-基于默认配置" class="headerlink" title="[1]基于默认配置"></a>[1]基于默认配置</h4><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">save</span> <span class="token attr-value">900 1</span><span class="token attr-name">save</span> <span class="token attr-value">300 10</span><span class="token attr-name">save</span> <span class="token attr-value">60 10000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>含义</p><table><thead><tr><th>配置</th><th>含义</th></tr></thead><tbody><tr><td>save 900 1</td><td>900秒内至少有一次修改则触发保存操作</td></tr><tr><td>save 300 10</td><td>300秒内至少有10次修改则触发保存操作</td></tr><tr><td>save 60 10000</td><td>60秒内至少有1万次修改则触发保存操作</td></tr></tbody></table><h4 id="2-使用保存命令"><a href="#2-使用保存命令" class="headerlink" title="[2]使用保存命令"></a>[2]使用保存命令</h4><p>save或bgsave</p><h4 id="3-使用flushall命令"><a href="#3-使用flushall命令" class="headerlink" title="[3]使用flushall命令"></a>[3]使用flushall命令</h4><p>这个命令也会产生dump.rdb文件，但里面是空的，没有意义</p><h4 id="4-服务器关闭"><a href="#4-服务器关闭" class="headerlink" title="[4]服务器关闭"></a>[4]服务器关闭</h4><p>如果执行SHUTDOWN命令让Redis正常退出，那么此前Redis就会执行一次持久化保存。</p><h3 id="③相关配置"><a href="#③相关配置" class="headerlink" title="③相关配置"></a>③相关配置</h3><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>save</td><td>“”</td><td>禁用RDB机制</td></tr><tr><td>dbfilename</td><td>文件名，例如：dump.rdb</td><td>设置RDB机制下，数据存储文件的文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr></tbody></table><h3 id="④思考"><a href="#④思考" class="headerlink" title="④思考"></a>④思考</h3><p>RDB机制能够保证数据的绝对安全吗？</p><h2 id="2-AOF"><a href="#2-AOF" class="headerlink" title="2.AOF"></a>2.AOF</h2><h3 id="①机制描述-1"><a href="#①机制描述-1" class="headerlink" title="①机制描述"></a>①机制描述</h3><p>根据配置文件中指定的策略，把生成数据的命令保存到硬盘上的文件中。一个AOF文件的内容可以参照下面的例子：</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">*2$6SELECT$10*3$3set$3num$210*2$4incr$3num*2$4incr$3num*2$4incr$3num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>生成上面文件内容的Redis命令是：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">set num 10incr numincr numincr num<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="②AOF基本配置"><a href="#②AOF基本配置" class="headerlink" title="②AOF基本配置"></a>②AOF基本配置</h3><table><thead><tr><th>配置项</th><th>取值</th><th>作用</th></tr></thead><tbody><tr><td>appendonly</td><td>yes</td><td>启用AOF持久化机制</td></tr><tr><td></td><td>no</td><td>禁用AOF持久化机制[默认值]</td></tr><tr><td>appendfilename</td><td>“文件名”</td><td>AOF持久化文件名</td></tr><tr><td>dir</td><td>Redis工作目录路径</td><td>指定存放持久化文件的目录的路径。注意：这里指定的必须是目录不能是文件名</td></tr><tr><td>appendfsync</td><td>always</td><td>每一次数据修改后都将执行文件写入操作，缓慢但是最安全。</td></tr><tr><td></td><td>everysec</td><td>每秒执行一次写入操作。折中。</td></tr><tr><td></td><td>no</td><td>由操作系统在适当的时候执行写入操作，最快。</td></tr></tbody></table><h3 id="③AOF重写"><a href="#③AOF重写" class="headerlink" title="③AOF重写"></a>③AOF重写</h3><p>对比下面两组命令：</p><table><thead><tr><th>AOF重写前</th><th>AOF重写后</th></tr></thead><tbody><tr><td>set count 1<br />incr count<br />incr count<br />incr count</td><td>set count 4</td></tr></tbody></table><p>两组命令执行后对于count来说最终的值是一致的，但是进行AOF重写后省略了中间过程，可以让AOF文件体积更小。而Redis会根据AOF文件的体积来决定是否进行AOF重写。参考的配置项如下：</p><table><thead><tr><th>配置项</th><th>含义</th></tr></thead><tbody><tr><td>auto-aof-rewrite-percentage 100</td><td>文件体积增大100%时执行AOF重写</td></tr><tr><td>auto-aof-rewrite-min-size 64mb</td><td>文件体积增长到64mb时执行AOF重写</td></tr></tbody></table><p>实际工作中不要进行频繁的AOF重写，因为CPU资源和硬盘资源二者之间肯定是CPU资源更加宝贵，所以不应该过多耗费CPU性能去节省硬盘空间。</p><h2 id="3-持久化文件损坏修复"><a href="#3-持久化文件损坏修复" class="headerlink" title="3.持久化文件损坏修复"></a>3.持久化文件损坏修复</h2><p>Redis服务器启动时如果读取了损坏的持久化文件会导致启动失败，此时为了让Redis服务器能够正常启动，需要对损坏的持久化文件进行修复。这里以AOF文件为例介绍修复操作的步骤。</p><ul><li><p>第一步：备份要修复的appendonly.aof文件</p></li><li><p>第二步：执行修复程序</p><p>/usr/local/redis/bin/redis-check-aof –fix /usr/local/redis/appendonly.aof</p></li><li><p>第三步：重启Redis</p></li></ul><p>注意：所谓修复持久化文件仅仅是把损坏的部分去掉，而没法把受损的数据找回。</p><h2 id="4-扩展阅读：两种持久化机制的取舍"><a href="#4-扩展阅读：两种持久化机制的取舍" class="headerlink" title="4.扩展阅读：两种持久化机制的取舍"></a>4.扩展阅读：两种持久化机制的取舍</h2><h3 id="①RDB"><a href="#①RDB" class="headerlink" title="①RDB"></a>①RDB</h3><h4 id="1-优势"><a href="#1-优势" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>适合大规模的数据恢复，速度较快</p><h4 id="2-劣势"><a href="#2-劣势" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>会丢失最后一次快照后的所有修改，不能绝对保证数据的高度一致性和完整性。Fork的时候，内存中的数据被克隆了一份，大致2倍的膨胀性需要考虑，但上述成立有条件，Linux也有优化手段</p><h3 id="②AOF"><a href="#②AOF" class="headerlink" title="②AOF"></a>②AOF</h3><h4 id="1-优势-1"><a href="#1-优势-1" class="headerlink" title="[1]优势"></a>[1]优势</h4><p>选择appendfsync always方式运行时理论上能够做到数据完整一致，但此时性能又不好。文件内容具备一定可读性，能够用来分析Redis工作情况。</p><h4 id="2-劣势-1"><a href="#2-劣势-1" class="headerlink" title="[2]劣势"></a>[2]劣势</h4><p>持久化相同的数据，文件体积比RDB大，恢复速度比RDB慢。效率在同步写入时低于RDB，不同步写入时与RDB相同。</p><h3 id="③RDB和AOF并存"><a href="#③RDB和AOF并存" class="headerlink" title="③RDB和AOF并存"></a>③RDB和AOF并存</h3><p>Redis重启的时候会优先载入AOF文件来恢复原始的数据，因为在通常情况下AOF文件保存的数据集要比RDB文件保存的数据集要完整</p><p>RDB的数据不实时，同时使用两者时服务器重启也只会找AOF文件。那要不要只使用AOF呢？作者建议不要，因为RDB更适合用于备份数据库(AOF在不断变化不好备份)、快速重启，而且不会有AOF可能潜在的bug，留着作为一个万一的手段。</p><h3 id="④使用建议"><a href="#④使用建议" class="headerlink" title="④使用建议"></a>④使用建议</h3><p>如果Redis仅仅作为缓存可以不使用任何持久化方式。</p><p>其他应用方式综合考虑性能和完整性、一致性要求。</p><p>RDB文件只用作后备用途，建议只在Slave上持久化RDB文件，而且只要15分钟备份一次就够了，只保留save 900 1这条规则。如果Enalbe AOF，好处是在最恶劣情况下也只会丢失不超过两秒数据，启动脚本较简单只load自己的AOF文件就可以了。代价一是带来了持续的IO，二是AOF rewrite的最后将rewrite过程中产生的新数据写到新文件造成的阻塞几乎是不可避免的。只要硬盘许可，应该尽量减少AOF rewrite的频率，AOF重写的基础大小默认值64M太小了，可以设到5G以上。默认超过原大小100%大小时重写可以改到适当的数值。如果不开启AOF，仅靠Master-Slave Replication 实现高可用性能也不错。能省掉一大笔IO也减少了rewrite时带来的系统波动。代价是如果Master/Slave同时倒掉，会丢失十几分钟的数据，启动脚本也要比较两个Master/Slave中的RDB文件，载入较新的那个。新浪微博就选用了这种架构。</p><h1 id="九、Redis事务控制"><a href="#九、Redis事务控制" class="headerlink" title="九、Redis事务控制"></a>九、Redis事务控制</h1><h2 id="1-Redis事务控制的相关命令"><a href="#1-Redis事务控制的相关命令" class="headerlink" title="1.Redis事务控制的相关命令"></a>1.Redis事务控制的相关命令</h2><table><thead><tr><th>命令名</th><th>作用</th></tr></thead><tbody><tr><td>MULTI</td><td>表示开始收集命令，后面所有命令都不是马上执行，而是加入到一个队列中。</td></tr><tr><td>EXEC</td><td>执行MULTI后面命令队列中的所有命令。</td></tr><tr><td>DISCARD</td><td>放弃执行队列中的命令。</td></tr><tr><td>WATCH</td><td>“观察“、”监控“一个KEY，在当前队列外的其他命令操作这个KEY时，放弃执行自己队列的命令</td></tr><tr><td>UNWATCH</td><td>放弃监控一个KEY</td></tr></tbody></table><h2 id="2-命令队列执行失败的两种情况"><a href="#2-命令队列执行失败的两种情况" class="headerlink" title="2.命令队列执行失败的两种情况"></a>2.命令队列执行失败的两种情况</h2><h3 id="①加入队列时失败"><a href="#①加入队列时失败" class="headerlink" title="①加入队列时失败"></a>①加入队列时失败</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> multiOK127.0.0.1:6379> set age 20QUEUED127.0.0.1:6379> incr ageQUEUED127.0.0.1:6379> incr age www(error) ERR wrong number of arguments for 'incr' command127.0.0.1:6379> exec(error) EXECABORT Transaction discarded because of previous errors.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>遇到了入队时即可检测到的错误，整个队列都不会执行。</p><h3 id="②执行队列时失败"><a href="#②执行队列时失败" class="headerlink" title="②执行队列时失败"></a>②执行队列时失败</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> multiOK127.0.0.1:6379> set age 30QUEUED127.0.0.1:6379> incrby age 5QUEUED127.0.0.1:6379> incrby age 5QUEUED127.0.0.1:6379> incrby age wwQUEUED127.0.0.1:6379> incrby age 5QUEUED127.0.0.1:6379> EXEC1) OK2) (integer) 353) (integer) 404) (error) ERR value is not an integer or out of range5) (integer) 45127.0.0.1:6379> get age"45"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>错误在入队时检测不出来，整个队列执行时有错的命令执行失败，但是其他命令并没有回滚。</p><h3 id="③Redis为什么不支持回滚"><a href="#③Redis为什么不支持回滚" class="headerlink" title="③Redis为什么不支持回滚"></a>③Redis为什么不支持回滚</h3><p>官方解释如下：</p><blockquote><pre><code>如果你有使用关系式数据库的经验， 那么 “Redis 在事务失败时不进行回滚，而是继续执行余下的命令”这种做法可能会让你觉得有点奇怪。以下是这种做法的优点：1.Redis 命令只会因为错误的语法而失败（并且这些问题不能在入队时发现），或是命令用在了错误类型的键上面：这也就是说，从实用性的角度来说，失败的命令是由编程错误造成的，而这些错误应该在开发的过程中被发现，而不应该出现在生产环境中。   2.因为不需要对回滚进行支持，所以 Redis 的内部可以保持简单且快速。有种观点认为 Redis 处理事务的做法会产生 bug ， 然而需要注意的是， 在通常情况下， 回滚并不能解决编程错误带来的问题。 举个例子， 如果你本来想通过 INCR 命令将键的值加上 1 ， 却不小心加上了 2 ， 又或者对错误类型的键执行了 INCR ， 回滚是没有办法处理这些情况的。</code></pre></blockquote><h2 id="3-悲观锁和乐观锁"><a href="#3-悲观锁和乐观锁" class="headerlink" title="3.悲观锁和乐观锁"></a>3.悲观锁和乐观锁</h2><p>在使用WATCH命令监控一个KEY后，当前队列中的命令会由于外部命令的执行而放弃，这是乐观锁的体现。</p><ul><li><p>悲观锁</p><p>认为当前环境非常容易发生碰撞，所以执行操作前需要把数据锁定，操作完成后释放锁，其他操作才可以继续操作。</p></li><li><p>乐观锁</p><p>认为当前环境不容易发生碰撞，所以执行操作前不锁定数据，万一碰撞真的发生了，那么放弃自己的操作。</p></li></ul><h1 id="十、Redis主从复制机制"><a href="#十、Redis主从复制机制" class="headerlink" title="十、Redis主从复制机制"></a>十、Redis主从复制机制</h1><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E7%9A%84%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6.png" alt="redis的主从复制"></p><h2 id="1-读写分离的好处："><a href="#1-读写分离的好处：" class="headerlink" title="1.读写分离的好处："></a>1.读写分离的好处：</h2><ul><li>性能优化：主服务器专注于写操作，可以用更适合写入数据的模式工作；同样，从服务器专注于读操作，可以用更适合读取数据的模式工作。</li><li>强化数据安全，避免单点故障：由于数据同步机制的存在，各个服务器之间数据保持一致，所以其中某个服务器宕机不会导致数据丢失或无法访问。从这个角度说参与主从复制的Redis服务器构成了一个<b><font color="blue">集群</font></b>。</li></ul><h2 id="2-搭建步骤"><a href="#2-搭建步骤" class="headerlink" title="2.搭建步骤"></a>2.搭建步骤</h2><h3 id="①思路"><a href="#①思路" class="headerlink" title="①思路"></a>①思路</h3><p>Redis集群在运行时使用的是同一个可执行文件，只是对应的配置文件不同。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E7%9A%84server%E7%9A%84%E7%BB%93%E6%9E%84.png" alt="p03"></p><p>每个配置文件中相同的参数是：</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">daemonize yesdir /usr/local/cluster-redis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>不同的参数有：</p><table><thead><tr><th>配置项名称</th><th>作用</th><th>取值</th></tr></thead><tbody><tr><td>port</td><td>Redis服务器启动后监听的端口号</td><td>6000<br />7000<br />8000</td></tr><tr><td>dbfilename</td><td>RDB文件存储位置</td><td>dump6000.rdb<br />dump7000.rdb<br />dump8000.rdb</td></tr><tr><td>logfile</td><td>日志文件位置</td><td>/var/logs/redis6000.log<br />/var/logs/redis7000.log<br />/var/logs/redis8000.log</td></tr><tr><td>pidfile</td><td>pid文件位置</td><td>/var/run/redis6000.pid<br />/var/run/redis7000.pid<br />/var/run/redis8000.pid</td></tr></tbody></table><h3 id="②步骤"><a href="#②步骤" class="headerlink" title="②步骤"></a>②步骤</h3><ul><li>第一步：创建/usr/local/cluster-redis目录</li><li>第二步：把原始未经修改的redis.conf复制到/usr/local/cluster-redis目录</li><li>第三步：把/usr/local/cluster-redis目录下的redis.conf复制为redis6000.conf</li><li>第四步：按照既定计划修改redis6000.conf中的相关配置项<ul><li>daemonize yes</li><li>dir</li><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第五步：复制redis6000.conf为redis7000.conf</li><li>第六步：修改redis7000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li><li>第七步：复制redis6000.conf为redis8000.conf</li><li>第八步：修改redis8000.conf中的相关配置项<ul><li>port</li><li>dbfilename</li><li>logfile</li><li>pidfile</li></ul></li></ul><h3 id="③启动Redis主从复制集群"><a href="#③启动Redis主从复制集群" class="headerlink" title="③启动Redis主从复制集群"></a>③启动Redis主从复制集群</h3><pre class="line-numbers language-redis" data-language="redis"><code class="language-redis">&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;cluster-redis&#x2F;redis6000.conf&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;cluster-redis&#x2F;redis7000.conf&#x2F;usr&#x2F;local&#x2F;redis&#x2F;bin&#x2F;redis-server &#x2F;usr&#x2F;local&#x2F;cluster-redis&#x2F;redis8000.conf<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>使用redis-cli停止指定服务器的命令格式如下：<br/><br>/usr/local/bin/redis-cli -h IP地址 -p 端口号 shutdown</p><h2 id="3-主从关系"><a href="#3-主从关系" class="headerlink" title="3.主从关系"></a>3.主从关系</h2><h3 id="①查看主从关系"><a href="#①查看主从关系" class="headerlink" title="①查看主从关系"></a>①查看主从关系</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6000> info replication# Replicationrole:masterconnected_slaves:0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>刚刚启动的集群服务器中每一个节点服务器都认为自己是主服务器。需要建立主从关系。</p><h3 id="②设定主从关系"><a href="#②设定主从关系" class="headerlink" title="②设定主从关系"></a>②设定主从关系</h3><p>在从机上指定主机位置即可</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">SLAVEOF 127.0.0.1 6000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="③取消主从关系"><a href="#③取消主从关系" class="headerlink" title="③取消主从关系"></a>③取消主从关系</h3><p>在从机上执行命令</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">SLAVEOF NO ONE<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="4-初步测试"><a href="#4-初步测试" class="headerlink" title="4.初步测试"></a>4.初步测试</h2><ul><li>测试1：在主机写入数据，在从机查看</li><li>测试2：在从机写入数据报错。配置文件中的依据是：slave-read-only yes</li><li>测试3：主机执行SHUTDOWN看从机状态</li><li>测试4：主机恢复启动，看从机状态</li><li>测试5：从机SHUTDOWN，此时主机写入数据，从机恢复启动查看状态。重新设定主从关系后看新写入的数据是否同步。</li></ul><h2 id="5-哨兵模式"><a href="#5-哨兵模式" class="headerlink" title="5.哨兵模式"></a>5.哨兵模式</h2><h3 id="①作用"><a href="#①作用" class="headerlink" title="①作用"></a>①作用</h3><p>通过哨兵服务器监控master/slave实现主从复制集群的自动管理。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/redis%E7%9A%84%E5%93%A8%E5%85%B5%E6%A8%A1%E5%BC%8F.png" alt="p04"></p><h3 id="②相关概念"><a href="#②相关概念" class="headerlink" title="②相关概念"></a>②相关概念</h3><h4 id="1-主观下线"><a href="#1-主观下线" class="headerlink" title="[1]主观下线"></a>[1]主观下线</h4><p>1台哨兵检测到某节点服务器下线。</p><h4 id="2-客观下线"><a href="#2-客观下线" class="headerlink" title="[2]客观下线"></a>[2]客观下线</h4><p>认为某个节点服务器下线的哨兵服务器达到指定数量。这个数量后面在哨兵的启动配置文件中指定。</p><h3 id="③配置方式"><a href="#③配置方式" class="headerlink" title="③配置方式"></a>③配置方式</h3><p>简单起见我们只配置一台哨兵。我们所需要做的就是创建一个哨兵服务器运行所需要的配置文件。</p><p>vim /usr/local/cluster-redis/sentinel.conf</p><table><thead><tr><th>格式</th><th>sentinel monitor 为主机命名 主机IP 主机端口号 将主机判定为下线时需要Sentinel同意的数量</th></tr></thead><tbody><tr><td>例子</td><td>sentinel monitor mymaster 127.0.0.1 6000 1</td></tr></tbody></table><h3 id="④启动哨兵"><a href="#④启动哨兵" class="headerlink" title="④启动哨兵"></a>④启动哨兵</h3><p>redis-sentinel /root/myredis/sentinel.conf</p><pre class="line-numbers language-html" data-language="html"><code class="language-html">+sdown master mymaster 127.0.0.1 6379 【主观下线】+odown master mymaster 127.0.0.1 6379 #quorum 1/1【客观下线】……+vote-for-leader 17818eb9240c8a625d2c8a13ae9d99ae3a70f9d2 1【选举leader】……+failover-state-send-slaveof-noone slave 127.0.0.1:6381 127.0.0.1 6381 @ mymaster 127.0.0.1 6379【把一个从机设置为主机】-------------挂掉的主机又重新启动----------------------sdown slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381【离开主观下线状态】+convert-to-slave slave 127.0.0.1:6379 127.0.0.1 6379 @ mymaster 127.0.0.1 6381【转换为从机】<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十一、发布订阅"><a href="#十一、发布订阅" class="headerlink" title="十一、发布订阅"></a>十一、发布订阅</h1><h2 id="1-订阅一个频道"><a href="#1-订阅一个频道" class="headerlink" title="1.订阅一个频道"></a>1.订阅一个频道</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> SUBSCRIBE cctvReading messages... (press Ctrl-C to quit)1) "subscribe"2) "cctv"3) (integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-在一个频道上发布信息"><a href="#2-在一个频道上发布信息" class="headerlink" title="2.在一个频道上发布信息"></a>2.在一个频道上发布信息</h2><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> PUBLISH cctv hai(integer) 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-html" data-language="html"><code class="language-html">127.0.0.1:6379> SUBSCRIBE cctvReading messages... (press Ctrl-C to quit)1) "subscribe"2) "cctv"3) (integer) 11) "message"2) "cctv"3) "hai"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="十二、Jedis"><a href="#十二、Jedis" class="headerlink" title="十二、Jedis"></a>十二、Jedis</h1><h2 id="1-一个对比"><a href="#1-一个对比" class="headerlink" title="1.一个对比"></a>1.一个对比</h2><table><thead><tr><th></th><th>MySQL</th><th>Redis</th></tr></thead><tbody><tr><td>连接</td><td>Connection</td><td>Jedis</td></tr><tr><td>连接池</td><td>C3P0等等</td><td>JedisPool</td></tr><tr><td>操作完成</td><td>关闭连接</td><td>关闭连接</td></tr></tbody></table><h2 id="2-Redis准备"><a href="#2-Redis准备" class="headerlink" title="2.Redis准备"></a>2.Redis准备</h2><h3 id="①理解Redis配置文件中bind配置项含义"><a href="#①理解Redis配置文件中bind配置项含义" class="headerlink" title="①理解Redis配置文件中bind配置项含义"></a>①理解Redis配置文件中bind配置项含义</h3><p>bind后面跟的ip地址是客户端访问Redis时使用的IP地址。看下面例子：<br>| bind值      | 访问方式     |<br>| ———- | ——— |<br>| 127.0.0.1 | ./redis-cli -h 127.0.0.1     |<br>| 192.168.1.100  | ./redis-cli -h 192.168.1.100 |</p><h3 id="②查看Linux系统本机IP"><a href="#②查看Linux系统本机IP" class="headerlink" title="②查看Linux系统本机IP"></a>②查看Linux系统本机IP</h3><p>远程客户端访问Linux服务器时不能使用127.0.0.1，要使用网络上的实际IP。可以用ifconfig命令查看。</p><h3 id="③将Redis配置文件中的bind配置项设置为本机IP。"><a href="#③将Redis配置文件中的bind配置项设置为本机IP。" class="headerlink" title="③将Redis配置文件中的bind配置项设置为本机IP。"></a>③将Redis配置文件中的bind配置项设置为本机IP。</h3><pre class="line-numbers language-html" data-language="html"><code class="language-html">bind [你的实际IP]bind 192.168.1.100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="3-Jedis"><a href="#3-Jedis" class="headerlink" title="3.Jedis"></a>3.Jedis</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>redis.clients<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jedis<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>2.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//指定Redis服务器的IP地址和端口号</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedis</span><span class="token punctuation">(</span><span class="token string">"192.168.200.100"</span><span class="token punctuation">,</span> <span class="token number">6379</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行ping命令</span><span class="token class-name">String</span> ping <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-JedisPool"><a href="#4-JedisPool" class="headerlink" title="4.JedisPool"></a>4.JedisPool</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//声明Linux服务器IP地址</span><span class="token class-name">String</span> host <span class="token operator">=</span> <span class="token string">"192.168.1.100"</span><span class="token punctuation">;</span><span class="token comment">//声明Redis端口号</span><span class="token keyword">int</span> port <span class="token operator">=</span> <span class="token class-name">Protocol</span><span class="token punctuation">.</span>DEFAULT_PORT<span class="token punctuation">;</span><span class="token comment">//创建连接池对象</span><span class="token class-name">JedisPool</span> jedisPool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">JedisPool</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取Jedis对象连接Redis</span><span class="token class-name">Jedis</span> jedis <span class="token operator">=</span> jedisPool<span class="token punctuation">.</span><span class="token function">getResource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//执行具体操作</span><span class="token class-name">String</span> ping <span class="token operator">=</span> jedis<span class="token punctuation">.</span><span class="token function">ping</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>ping<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//关闭连接</span>jedisPool<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink02_上手与部署</title>
      <link href="2020/02/26/Flink02_%E4%B8%8A%E6%89%8B%E4%B8%8E%E9%83%A8%E7%BD%B2/"/>
      <url>2020/02/26/Flink02_%E4%B8%8A%E6%89%8B%E4%B8%8E%E9%83%A8%E7%BD%B2/</url>
      
        <content type="html"><![CDATA[<h2 id="0x0-Standalone模式"><a href="#0x0-Standalone模式" class="headerlink" title="0x0.Standalone模式"></a>0x0.Standalone模式</h2><p><strong>快速上手</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#解压缩</span><span class="token function">tar</span> -zxvf flink-1.10.1-bin-scala_2.12.tgz -C /opt/module<span class="token comment">#修改flink/conf/flink-conf.yaml配置文件</span>jobmanager.rpc.address: hadoop102 <span class="token comment">#修改jobmanager</span><span class="token comment">#修改/conf/slaves文件</span>hadoop102hadoop103hadoop104<span class="token punctuation">..</span>.<span class="token comment">#添加集群机器</span><span class="token comment">#分发</span>xsync flink/<span class="token comment">#启动</span>bin/start-cluster.sh<span class="token comment">#监控</span>http://hadoop102:8081 <span class="token comment">#提交任务</span><span class="token comment">#提交</span>bin/flink run -c com.atguigu.wc.Flink03_WordCount_Unbounded -p <span class="token number">2</span> FlinkTutorial-1.0-SNAPSHOT-jar-with-dependencies.jar --host hadoop102 --port <span class="token number">7777</span> <span class="token comment">#-c 全类名</span><span class="token comment">#-p 并行度</span><span class="token comment">#jar包</span><span class="token comment">#--host 参数</span><span class="token comment">#--prot 参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Socket端口是不可以并行的</p><h3 id="example"><a href="#example" class="headerlink" title="example"></a>example</h3><p><a href="#%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98%E6%A0%B8%E7%AE%97">回到运行内存核算</a></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Jinxin Li * @create 2021-01-06 20:12 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink01_Wc_ParameterToolExample</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 从端口中获取数据</span>            <span class="token comment">//DataStreamSource&lt;String> portDS = env.socketTextStream("hadoop102", 9999);</span>            <span class="token comment">//工具类需要传入参数 --host hadoop102 --port 9999</span>        <span class="token class-name">ParameterTool</span> parameterTool <span class="token operator">=</span> <span class="token class-name">ParameterTool</span><span class="token punctuation">.</span><span class="token function">fromArgs</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> host <span class="token operator">=</span> parameterTool<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"host"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> port <span class="token operator">=</span> parameterTool<span class="token punctuation">.</span><span class="token function">getInt</span><span class="token punctuation">(</span><span class="token string">"port"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> portDS <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span>host<span class="token punctuation">,</span> port<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 处理数据</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> word2One <span class="token operator">=</span> portDS<span class="token punctuation">.</span><span class="token function">flatMap</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Function01_MyFlatMapFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> word2One<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印数据</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 启动</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%B9%B6%E8%A1%8C%E5%BA%A6%E4%B8%BA1%E7%9A%84%E6%89%A7%E8%A1%8Cplan.png" alt="并行度为1的执行plan"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BB%BB%E5%8A%A1%E5%B9%B6%E8%A1%8C%E5%BA%A63%E7%9A%84plan.png" alt="任务并行度为3的plan"></p><h2 id="0x1-Yarn-Session模式"><a href="#0x1-Yarn-Session模式" class="headerlink" title="0x1.Yarn-Session模式"></a>0x1.Yarn-Session模式</h2><h3 id="Start-a-long-running-Flink-cluster-on-YARN"><a href="#Start-a-long-running-Flink-cluster-on-YARN" class="headerlink" title="Start a long-running Flink cluster on YARN"></a>Start a long-running Flink cluster on YARN</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Session-Cluster%E6%A8%A1%E5%BC%8F%E7%A4%BA%E6%84%8F%E5%9B%BE.jpg" alt="Yarn-Session模式示意图"></p><p>Session-Cluster模式需要先启动集群，然后再提交作业，接着会向yarn申请一块空间后，资源永远保持不变。</p><p>如果资源满了，下一个作业就无法提交，只能等到yarn中的其中一个作业执行完成后，释放了资源，下个作业才会正常提交。</p><p>所有作业共享Dispatcher和ResourceManager；共享资源；适合规模小执行时间短的作业。</p><p>在yarn中初始化一个flink集群，开辟指定的资源，以后提交任务都向这里提交。这个flink集群会常驻在yarn集群中，除非手工停止。</p><h3 id="局限性"><a href="#局限性" class="headerlink" title="局限性"></a>局限性</h3><p>我们在配置slot的时候,就限定了session的slot的个数,将slot的个数固定,无法根据内存灵活启动.</p><p>比如我们三台机器,每台机器配置2个slot,一个任务最大并行度为3,则只能启动两个任务.即使集群还有剩余内存</p><h3 id="快速上手"><a href="#快速上手" class="headerlink" title="快速上手"></a>快速上手</h3><p>Start a YARN session where the job manager gets 1 GB of heap space and the task managers 4 GB of heap space assigned:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># get the hadoop2 package from the Flink download page at</span><span class="token comment"># https://flink.apache.org/downloads.html</span><span class="token function">tar</span> xvzf flink-1.10.2-bin-hadoop2.tgz<span class="token comment">#需要添加额外的hadoop支持 编译</span><span class="token builtin class-name">cd</span> flink-1.10.2/./bin/yarn-session.sh -jm 1024m -tm 4096m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Specify the <code>-s</code> flag for the number of processing slots per Task Manager.</p><p>We recommend to set the number of slots to the number of processors per machine.</p><p>Once the session has been started, you can submit jobs to the cluster using the <code>./bin/flink</code> tool.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">-n<span class="token punctuation">\</span>工本费<span class="token punctuation">(</span>--container<span class="token punctuation">)</span>：TaskManager的数量。这参数已经过时无效-s<span class="token punctuation">(</span>--slots<span class="token punctuation">)</span>： 每个TaskManager的slot数量，默认一个slot一个core，默认每个taskmanager的slot的个数为1，有时可以多一些taskmanager，做冗余。-jm：JobManager的内存（单位MB<span class="token punctuation">)</span>。-tm：每个taskmanager的内存（单位MB<span class="token punctuation">)</span>。-nm：yarn 的appName<span class="token punctuation">(</span>现在yarn的ui上的名字<span class="token punctuation">)</span>。-d：后台执行。这个参数也已经过时无效<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hadoop集群</span>myhadoop.sh start<span class="token comment">#启动服务</span>bin/yarn-session.sh -n <span class="token number">2</span> -s <span class="token number">2</span> -jm <span class="token number">1024</span> -tm <span class="token number">1024</span> -nm <span class="token builtin class-name">test</span> -d<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#提交任务</span>./flink run -c com.ecust.parametertool.Flink01_Wc_ParameterToolExampleFlinkTutorial-1.0-SNAPSHOT-jar-with-dependencies.jar --host hadoop102 --port <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="0x2-Yarn-Per-Job模式"><a href="#0x2-Yarn-Per-Job模式" class="headerlink" title="0x2.Yarn-Per-Job模式"></a>0x2.Yarn-Per-Job模式</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/yarnPerJob%E6%A8%A1%E5%BC%8F.jpg" alt="Yarn-Per_job模式示意图"></p><p>一个Job会对应一个集群，每提交一个作业会根据自身的情况，都会单独向yarn申请资源，直到作业执行完成，一个作业的失败与否并不会影响下一个作业的正常提交和运行。</p><p>独享Dispatcher和ResourceManager，按需接受资源申请；适合规模大长时间运行的作业。</p><p>每次提交都会创建一个新的flink集群，任务之间互相独立，互不影响，方便管理。</p><p>任务执行完成之后创建的集群也会消失。</p><h3 id="1-快速上手"><a href="#1-快速上手" class="headerlink" title="1.快速上手"></a>1.快速上手</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#启动hadoop集群</span>myhadoop.sh start<span class="token comment">#不启动yarn-session,直接执行job</span>bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.parametertool.Flink01_Wc_ParameterToolExample <span class="token punctuation">\</span>flink-utils-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 <span class="token punctuation">\</span>--port <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-配置多队列"><a href="#2-配置多队列" class="headerlink" title="2.配置多队列"></a>2.配置多队列</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">vim</span> /opt/module/hadoop-3.1.3/etc/hadoop/capacity-scheduler.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>50<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列的容量为50%    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.user-limit-factor<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      一个用户最多能够获取该队列资源容量的比例，取值0-1    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.maximum-capacity<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>80<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列的最大容量（自己队列资源不够，可以使用其他队列资源上限）    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.state<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>RUNNING<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      开启hive队列运行，不设置队列不能使用    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_submit_applications<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      访问控制，控制谁可以将任务提交到该队列,*表示任何人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_administer_queue<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      访问控制，控制谁可以管理(包括提交和取消)该队列的任务，*表示任何人    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.acl_application_max_priority<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      指定哪个用户可以提交配置任务优先级    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.maximum-application-lifetime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列中任务的最大生命时长，以秒为单位。任何小于或等于零的值将被视为禁用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.root.hive.default-application-lifetime<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>-1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      hive队列中任务的默认生命时长，以秒为单位。任何小于或等于零的值将被视为禁用。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-执行命令"><a href="#3-执行命令" class="headerlink" title="3.执行命令"></a>3.执行命令</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看命令</span>bin/flink<span class="token comment">#指定队列 --yarnqueue</span>-yqu hive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>对于per-job模式而言,能够充分使用集群资源</p><h3 id="4-Container与Slot"><a href="#4-Container与Slot" class="headerlink" title="4.Container与Slot"></a>4.Container与Slot</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%B8%89%E5%B9%B6%E8%A1%8C%E5%BA%A6%E4%B8%89container.png" alt="运行3并行度的使用3个container"></p><p>三个并行度的任务启动了三个container</p><p>一个用来封装Driver</p><p>每个container里面有一个TaskManager,里面封装了2个slot</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/TaskManager%E7%9A%84%E4%BD%BF%E7%94%A8%E5%AE%B9%E5%99%A8.png" alt="TaskManager的容器使用情况"></p><h3 id="5-运行内存核算"><a href="#5-运行内存核算" class="headerlink" title="5.运行内存核算"></a>5.运行内存核算</h3><blockquote><p>实现跳转功能需要按住Ctrl键</p><p>计算示例使用上面<a href="#example">example</a></p></blockquote><p>虚拟机运行总内存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#hadoop102</span>8g<span class="token comment">#hadoop103</span>4g<span class="token comment">#hadoop104</span>4g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>flink的Per-Job内存</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jobmanager.heap.size</span><span class="token punctuation">:</span> 1024m<span class="token key atrule">taskmanager.memory.process.size</span><span class="token punctuation">:</span> 1728m<span class="token key atrule">taskmanager.numberOfTaskSlots</span><span class="token punctuation">:</span> <span class="token number">2</span><span class="token key atrule">parallelism.default</span><span class="token punctuation">:</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>估计内存</p><p>目前总队列2条,hive与default,各占用50%运行内存</p><p>每个任务使用1024M的jobManager</p><p>1728M的taskManager2个</p><p>总计<br>$$<br>1728M(TaskManager)*2+1024M(JobManager)=4480M=4.375G<br>$$<br>并行度为3,使用3个slot</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/YarnJob%E6%80%BB%E8%BF%90%E8%A1%8C%E5%86%85%E5%AD%98.png" alt="单Job总运行内存"></p><p>可以发现单个job提交后运行内存为5G</p><p>我们继续在default提交任务</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.parametertool.Flink01_Wc_ParameterToolExample <span class="token punctuation">\</span>-nm test01 <span class="token punctuation">\</span>flink-utils-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 <span class="token punctuation">\</span>--port <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总内存还剩余<br>$$<br>12G(AllMemory)-5G(singlejob)=7G(RemainMemory)<br>$$<br>单队列还剩余<br>$$<br>6G(DefaultMemory)-5G(singlejob)=1G(RemainMemory)<br>$$<br>所以此任务已经无法启动</p><p>提交任务到另一个队列</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.parametertool.Flink01_Wc_ParameterToolExample <span class="token punctuation">\</span>-nm test02 <span class="token punctuation">\</span>-yqu hive <span class="token punctuation">\</span>flink-utils-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 <span class="token punctuation">\</span>--port <span class="token number">9999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>此时任务能够成功运行</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Flink%E5%8F%8C%E9%98%9F%E5%88%97%E8%BF%90%E8%A1%8C%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="Flink双队列运行示意图"></p><p>这个时候任务已经提交到集群,即使关闭提交客户端窗口,任务依旧执行</p><h3 id="6-队列的思考"><a href="#6-队列的思考" class="headerlink" title="6.队列的思考"></a>6.队列的思考</h3><p>首先把之前的example的jar的运行并行度设置为1</p><p>常规思想说的是,一般来讲,在一个FIFO调度器中,提交一个任务后,不会在启动其他任务,如果提交其他任务,会处理卡死状态</p><p><strong>example</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#在hadoop102提交一个任务</span>bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.parametertool.Flink01_Wc_ParameterToolExample <span class="token punctuation">\</span>-nm test01 <span class="token punctuation">\</span>flink-utils-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 <span class="token punctuation">\</span>--port <span class="token number">9999</span><span class="token comment">#在hadoop102再次提交一个任务</span>bin/flink run <span class="token punctuation">\</span>-m yarn-cluster <span class="token punctuation">\</span>-c com.ecust.parametertool.Flink01_Wc_ParameterToolExample <span class="token punctuation">\</span>-nm test01 <span class="token punctuation">\</span>flink-utils-1.0-SNAPSHOT.jar <span class="token punctuation">\</span>--host hadoop102 <span class="token punctuation">\</span>--port <span class="token number">9999</span><span class="token comment">#就会发现两个任务,在同一个队列无法运行,就算把堆内存,跟slot更改,也无法运行</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>问题</strong></p><p>这个时候会单纯的认为是因为程序在调度时卡住,当调度没有完成时,无法进行下一个任务的提交</p><p>一个队列是根本无法运行两个任务的,FIFO队列是先进先出</p><p><strong>解析</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#打开容量调度器配置文件</span><span class="token function">vim</span> /opt/module/hadoop-3.1.3/etc/hadoop/capacity-scheduler.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>查看下面参数</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.maximum-am-resource-percent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      Maximum percent of resources in the cluster which can be used to run      application masters i.e. controls number of concurrent running      applications.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#这个参数 maximum-am-resource-percent</span>代表的是application masters占集群的总资源占比是0.1我们的集群是8/4/4一共是16g的运行内存,我们仅仅有1.6g内存去启动application master而我们的flink-conf.yaml配置的jobManager是1024g我们的application master <span class="token operator">=</span> jobManager + 内置resourceManager在1.6g的内存下无法存在两个jobManager<span class="token comment">#若想运行两个job</span>修改成0.15先 <span class="token number">16</span>*0.15<span class="token operator">=</span><span class="token number">2</span>.4G,运行两个application master足够了试一试吧结果不行因为双队列 <span class="token number">6</span>*0.15<span class="token operator">=</span><span class="token number">1</span>.2G<span class="token comment">#需要重启yarn</span>继续修改成0.5 <span class="token number">6</span>*0.5 <span class="token operator">=</span> 3g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- /opt/module/hadoop-3.1.3/etc/hadoop/yarn-site.xml --></span><span class="token comment">&lt;!-- yarn容器允许管理的物理内存大小 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- /opt/module/hadoop-3.1.3/etc/hadoop/capacity-scheduler.xml --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.capacity.maximum-am-resource-percent<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>0.5<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>description</span><span class="token punctuation">></span></span>      Maximum percent of resources in the cluster which can be used to run      application masters i.e. controls number of concurrent running      applications.    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>description</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是我的Flink-Conf.yaml的修改配置,JobManager1G,TaskManager占用1G内存</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">jobmanager.rpc.address</span><span class="token punctuation">:</span> hadoop102<span class="token comment"># The RPC port where the JobManager is reachable.</span><span class="token key atrule">jobmanager.rpc.port</span><span class="token punctuation">:</span> <span class="token number">6123</span><span class="token comment"># The heap size for the JobManager JVM</span><span class="token comment"># jobmanager.heap.size: 1024m</span><span class="token key atrule">jobmanager.heap.size</span><span class="token punctuation">:</span> 1024m<span class="token comment"># The total process memory size for the TaskManager.</span><span class="token comment">#</span><span class="token comment"># Note this accounts for all memory usage within the TaskManager process, including JVM metaspace and other overhead.</span><span class="token comment"># taskmanager.memory.process.size: 1728m</span><span class="token key atrule">taskmanager.memory.process.size</span><span class="token punctuation">:</span> 1024m<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%8D%95%E9%98%9F%E5%88%97%E5%90%AF%E5%8A%A8%E4%B8%A4%E4%B8%AAFlink%E4%BB%BB%E5%8A%A1.png" alt="在一个队列里运行两个Flink任务"></p><p>进一步观察程序占用内存</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%8F%8C%E9%98%9F%E5%88%97%E5%8D%A0%E7%94%A8%E5%86%85%E5%AD%98%E6%83%85%E5%86%B5.png" alt="双队列内存占用统计"></p><p>整体内存12g</p><p>则JobManager1g,TaskManager(就执行一个,1g)</p><p>FIFO是先进先出调度器.</p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flink03_流处理API</title>
      <link href="2020/02/26/Flink03_DataStreamAPI/"/>
      <url>2020/02/26/Flink03_DataStreamAPI/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-执行环境Environment"><a href="#0x0-执行环境Environment" class="headerlink" title="0x0.执行环境Environment"></a>0x0.执行环境Environment</h1><h1 id="0x1-Source"><a href="#0x1-Source" class="headerlink" title="0x1.Source"></a>0x1.Source</h1><h2 id="3-KafkaSource"><a href="#3-KafkaSource" class="headerlink" title="3.KafkaSource"></a>3.KafkaSource</h2><p>直接上代码,从kafka读取数据然后进行处理</p><p><strong>example</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink04_Source_Kafka</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 创建执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 获取Kafka数据源</span>            <span class="token comment">// kafka配置项</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>BOOTSTRAP_SERVERS_CONFIG<span class="token punctuation">,</span> <span class="token string">"hadoop102:9092"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token class-name">ConsumerConfig</span><span class="token punctuation">.</span>GROUP_ID_CONFIG<span class="token punctuation">,</span> <span class="token string">"consumer-group"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"key.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"value.deserializer"</span><span class="token punctuation">,</span> <span class="token string">"org.apache.kafka.common.serialization.StringDeserializer"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">setProperty</span><span class="token punctuation">(</span><span class="token string">"auto.offset.reset"</span><span class="token punctuation">,</span> <span class="token string">"latest"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 从kafka读取数据 要使用通用的方式,需要额外的jar包flink-connector-kafka-0.11_2.12</span>            <span class="token comment">// kafka - RichParallelSourceFunction 可以并行</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> kafkaDS <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span>                <span class="token keyword">new</span> <span class="token class-name">FlinkKafkaConsumer011</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>                        <span class="token string">"test"</span><span class="token punctuation">,</span>                        <span class="token keyword">new</span> <span class="token class-name">SimpleStringSchema</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        properties<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//设置并行度为2测试并行能力</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> kafkaDS<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">SensorReading</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 打印数据</span>        result<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 执行环境</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 开启kafka生产者</span>        <span class="token comment">//bin/kafka-console-producer.sh --broker-list hadoop102:9092 --topic test</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>kafka开启与查看命令</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#查看指定topic的详细信息</span>bin/kafka-topics.sh --zookeeper  hadoop102:2181/kafka --describe --topic <span class="token builtin class-name">test</span><span class="token comment">#所有查看topic</span>bin/kafka-topics.sh --zookeeper hadoop102:2181/kafka --list<span class="token comment">#创建topic</span>bin/kafka-topics.sh --zookeeper hadoop102:2181/kafka --create --replication-factor <span class="token number">2</span> --partitions <span class="token number">10</span> --topic testTopicbin/kafka-topics.sh --bootstrap-server hadoop102:9092 --create --replication-factor <span class="token number">2</span> --partitions <span class="token number">10</span> --topic testTopic<span class="token comment">#往topic里生产数据</span>bin/kafka-console-producer.sh --broker-list hadoop102:9092 --topic <span class="token builtin class-name">test</span><span class="token comment">#消费topic</span>bin/kafka-console-consumer --bootstrap-server hadoop102:9092 --from-beginning  --topic register_topic<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>kafka分区策略</strong></p><ol><li>指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</li><li>没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值</li><li>既没有 partition 值又没有 key 值的情况下， kafka采用Sticky Partition(黏性分区器)，会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，kafka再随机一个分区进行使用.</li></ol><p><strong>kafka分区分配策略</strong></p><p>一个consumer group中有多个consumer，一个 topic有多个partition，所以必然会涉及到partition的分配问题，即确定那个partition由哪个consumer来消费。</p><p>Kafka有三种分配策略，RoundRobin，Range , Sticky。</p><p>一个消费者组中的消费者可以消费一个Topic的不同分区</p><p><strong>kafka集群查看策略</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment">#连接zk</span>bin/zkCli.sh -timeout <span class="token number">5000</span> -r -server hadoop102:2181<span class="token comment">#查看zookeeper集群下kafka集群下所有的brokers id列表</span><span class="token function">ls</span> /kafka/brokers/ids<span class="token comment">#查看2的broker的信息</span>get /kafka/brokers/ids/2<span class="token comment"># 列出帮助文档，英文好的同学基本看帮助文档就可以指定大概怎么使用该命令了</span>kafka-topics --help<span class="token comment"># 列出kafka集群下的所有topics，这里需要指定kafka机器元数据存储所在的zk机器地址，记得如果有namespace，要也加上，否则将连不上kafka集群</span> kafka-topics --zookeeper hadoop102:2181/kafka --list <span class="token comment"># 创建一个topic为test的topic，并指定分区数为5，副本数为1。这里的副本数不能超过broker的数量，否则会报错</span>kafka-topics --topic <span class="token builtin class-name">test</span> --zookeeper hadoop102:2181/kafka --create --replication-factor <span class="token number">1</span> --partitions <span class="token number">5</span><span class="token comment"># 创建时指定副本在哪个broker上,多个partition之间用逗号分隔，副本之间用":"分割，第一个副本默认是leader</span>kafka-topics.sh --zookeeper hadoop102:2181/kafka --topic <span class="token builtin class-name">test</span> --create --replica-assignment <span class="token number">0</span>:1,1:2,0:2<span class="token comment"># 删除指定主题</span>kafka-topics --zookeeper localhost:2181/kafka --delete --topic yangjb_test<span class="token comment"># 将partition数量修改成7个</span>kafka-topics --zookeeper localhost:2181/kafka --topic <span class="token builtin class-name">test</span> --alter --partitions <span class="token number">7</span><span class="token comment"># 通过 --replica-assignment 参数指定新增partition的副本分布情况</span><span class="token comment"># 如果原先的partition数量是3，那么新增的一个分区的副本分布应该在1002和1003</span>kafka-topics --zookeeper localhost:2181/kafka --topic <span class="token builtin class-name">test</span> -alter --partitions <span class="token number">4</span> --replica-assignment <span class="token number">0</span>:1,1:2,0:2,2:3<span class="token comment"># 修改topic test的配置 flush.ms =30000 。</span>kafka-topics --zookeeper localhost:2181/kafka  --topic <span class="token builtin class-name">test</span> --alter --config flush.ms<span class="token operator">=</span><span class="token number">30000</span><span class="token comment"># 删除topic test的 flush.ms 配置</span>kafka-topics --zookeeper localhost:2181/kafka  --topic <span class="token builtin class-name">test</span> --alter --delete-config flush.ms<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>==问题整理==</strong></p><p>问题1:当我的一个模块依赖于另一个模块时,单模块如何打包</p><p>问题2:kafka增加并行度,相当于增加了同一个组的消费者么?</p><h1 id="0x2-Operator"><a href="#0x2-Operator" class="headerlink" title="0x2 Operator"></a>0x2 Operator</h1><h2 id="1-map"><a href="#1-map" class="headerlink" title="1.map"></a>1.map</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/flink-map%E7%AE%97%E5%AD%90.jpg" alt="map算子"></p><h2 id="2-Filter"><a href="#2-Filter" class="headerlink" title="2.Filter"></a>2.Filter</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/flink-filter%E7%AE%97%E5%AD%90.jpg" alt="flink-filter算子"></p><h2 id="3-KeyBy"><a href="#3-KeyBy" class="headerlink" title="3.KeyBy"></a>3.KeyBy</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/flink-keyed.jpg" alt="Flink-KeyBy"></p><h2 id="4-滚动聚合算子（Rolling-Aggregation）"><a href="#4-滚动聚合算子（Rolling-Aggregation）" class="headerlink" title="4.滚动聚合算子（Rolling Aggregation）"></a>4.滚动聚合算子（Rolling Aggregation）</h2>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
            <tag> source </tag>
            
            <tag> sink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Scala闭包</title>
      <link href="2020/02/18/Scala_%E9%97%AD%E5%8C%85/"/>
      <url>2020/02/18/Scala_%E9%97%AD%E5%8C%85/</url>
      
        <content type="html"><![CDATA[<h2 id="1-Scala-基础"><a href="#1-Scala-基础" class="headerlink" title="1.Scala_基础"></a>1.Scala_基础</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>demo</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-11 15:25 */</span><span class="token keyword">object</span> SparkCore05_Closure_Scala <span class="token punctuation">&#123;</span>  <span class="token comment">//将函数作为返回值来使用</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token keyword">def</span> inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      println<span class="token punctuation">(</span><span class="token string">"xxxxxx"</span><span class="token punctuation">)</span>      <span class="token comment">//下划线表示将函数作为对象来使用</span>      <span class="token keyword">val</span> f <span class="token operator">=</span> inner _      f    <span class="token punctuation">&#125;</span>    <span class="token comment">//对上述方法调用</span>    <span class="token keyword">val</span> f<span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token builtin">Unit</span> <span class="token operator">=</span> test<span class="token punctuation">(</span><span class="token punctuation">)</span>    f<span class="token punctuation">(</span><span class="token punctuation">)</span>    test<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> test1<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token keyword">def</span> inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//下划线表示将函数作为对象来使用</span>      inner _    <span class="token punctuation">&#125;</span>    <span class="token comment">//todo > 也可以直接指定类型 但是在企业中不这么用</span>    <span class="token keyword">def</span> test2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">=></span><span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token keyword">def</span> inner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//下划线表示将函数作为对象来使用</span>      inner    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/*public User getUser()&#123;    User user = new User();    return user;  &#125;*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-闭包"><a href="#2-闭包" class="headerlink" title="2.闭包"></a>2.闭包</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>demo</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-11 15:34 */</span><span class="token keyword">object</span> SparkCore06_Closure_Scala <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//1.outer函数=>方法</span>    <span class="token comment">//2.参数x编译后应该是方法的局部变量 局部变量有效范围是当前方法内部有效</span>    <span class="token comment">//3.inner函数=>文件中方法</span>    <span class="token comment">//4.inner方法执行时间点:在outer方法执行之后9</span>    <span class="token comment">//5.outer方法如果执行完了会弹出栈,其中的局部变量会回收</span>    <span class="token comment">//6.inner方法凭什么能用x 底层进行特殊操作,一个函数如果使用了外部的变量,需要将变量的生命周期改变</span>    <span class="token comment">//7.函数将变量包含到函数的内部,形成一个闭合的效果,称之为闭包</span>    <span class="token comment">//8.早期是使用匿名内部类实现的</span>    <span class="token keyword">def</span> outer<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"执行外部程序"</span><span class="token punctuation">)</span>      <span class="token keyword">def</span> inner<span class="token punctuation">(</span>y<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>        println<span class="token punctuation">(</span><span class="token string">"执行内部程序"</span><span class="token punctuation">)</span>        x<span class="token operator">+</span>y      <span class="token punctuation">&#125;</span>      inner _    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> f<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token keyword">=></span> <span class="token builtin">Int</span> <span class="token operator">=</span> outer<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">val</span> i<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> f<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">//    println(outer(20)(20))</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-Java模仿"><a href="#3-Java模仿" class="headerlink" title="3.Java模仿"></a>3.Java模仿</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>demo</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-11 15:49 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SparkCore08_Closure_Scala</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SparkCore08_Closure_Scala</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SparkCore08_Closure_Scala</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//先执行方法outer,方法弹出栈</span>        <span class="token keyword">int</span> outer <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">outer</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在执行方法inner</span>        <span class="token keyword">int</span> inner <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">inner</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(x);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>inner<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//java方法中不能写方法</span>    <span class="token comment">/*public void outer(int x)&#123;        public void inner()&#123;        &#125;    &#125;*/</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">outer</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">inner</span><span class="token punctuation">(</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-实战1"><a href="#4-实战1" class="headerlink" title="4.实战1"></a>4.实战1</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>demo</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span></span>RDD<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">&#125;</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-11 16:19 */</span><span class="token keyword">object</span> SparkCore09_Closure_Spark <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">val</span> conf<span class="token operator">:</span> SparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkCoreTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sc<span class="token operator">:</span> SparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>      <span class="token keyword">val</span> rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">new</span> user<span class="token punctuation">(</span><span class="token punctuation">)</span>      rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>        num<span class="token keyword">=></span><span class="token punctuation">&#123;</span>          println<span class="token punctuation">(</span><span class="token string">"age:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>age<span class="token operator">+</span>num<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>      sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//这里可以选择是否进行序列化类</span>  <span class="token keyword">class</span> user <span class="token keyword">extends</span> Serializable <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span> <span class="token number">30</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-实战2"><a href="#5-实战2" class="headerlink" title="5.实战2"></a>5.实战2</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>demo</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span>rdd<span class="token punctuation">.</span></span>RDD<span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>spark<span class="token punctuation">.</span></span><span class="token punctuation">&#123;</span>SparkConf<span class="token punctuation">,</span> SparkContext<span class="token punctuation">&#125;</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-11 16:19 * 这种情况下还是不能运行,因为需要进行闭包检查,当executor内部引用了外部变量时,就会监测外部变量能否使用 */</span><span class="token keyword">object</span> SparkCore10_Closure_Spark <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">val</span> conf<span class="token operator">:</span> SparkConf <span class="token operator">=</span> <span class="token keyword">new</span> SparkConf<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setAppName<span class="token punctuation">(</span><span class="token string">"SparkCoreTest"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>setMaster<span class="token punctuation">(</span><span class="token string">"local[*]"</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> sc<span class="token operator">:</span> SparkContext <span class="token operator">=</span> <span class="token keyword">new</span> SparkContext<span class="token punctuation">(</span>conf<span class="token punctuation">)</span>      <span class="token keyword">val</span> rdd<span class="token operator">:</span> RDD<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> sc<span class="token punctuation">.</span>makeRDD<span class="token punctuation">(</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">new</span> user<span class="token punctuation">(</span><span class="token punctuation">)</span>      rdd<span class="token punctuation">.</span>foreach<span class="token punctuation">(</span>        <span class="token comment">//todo 源码:ClosureCleaner.clean(f, checkSerializable)</span>        num<span class="token keyword">=></span><span class="token punctuation">&#123;</span>          println<span class="token punctuation">(</span><span class="token string">"age:"</span> <span class="token operator">+</span> user<span class="token punctuation">.</span>age<span class="token operator">+</span>num<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">)</span>      sc<span class="token punctuation">.</span>stop<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token comment">//这里可以选择是否进行序列化类</span>  <span class="token keyword">class</span> user <span class="token keyword">extends</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token operator">=</span> <span class="token number">30</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><p>在spark的scala程序中,我们都是定义的main方法</p><p>main方法中又定了在executor的方法</p><p>executor在使用main方法中的变量时,要进行要将main方法变量提高生命周期,</p><p>版本之前以匿名内部类的方法实现,在调用之前检查能够进行序列化传输</p><p>并编译成高声明周期的变量</p><p>称为闭包检查</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scala的集合</title>
      <link href="2020/02/17/Scala_%E9%9B%86%E5%90%88/"/>
      <url>2020/02/17/Scala_%E9%9B%86%E5%90%88/</url>
      
        <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><h2 id="1-集合基本常用方法"><a href="#1-集合基本常用方法" class="headerlink" title="1.集合基本常用方法"></a>1.集合基本常用方法</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Scala_Collection <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//集合常用的方法</span>    <span class="token keyword">val</span> buffer <span class="token operator">=</span> ArrayBuffer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token comment">//长度</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token comment">//length=size</span>    <span class="token comment">//反转</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>reverse<span class="token punctuation">)</span>    <span class="token comment">//取一部分数据(取前三条)</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>take<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//获取数据后三条</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>takeRight<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//删除数据</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>dropRight<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//头</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>head<span class="token punctuation">)</span>    <span class="token comment">//尾巴</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>tail<span class="token punctuation">)</span><span class="token comment">//集合中都是非头是尾(2,3,4)</span>    <span class="token comment">//最后一个</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>last<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>buffer<span class="token punctuation">.</span>init<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-不同类型的集合"><a href="#2-不同类型的集合" class="headerlink" title="2.不同类型的集合"></a>2.不同类型的集合</h2><h3 id="2-1不可变List"><a href="#2-1不可变List" class="headerlink" title="2.1不可变List"></a>2.1不可变List</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> ListTest <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token comment">//todo 1.在数组的后面添加一个数,产生新集合</span>    <span class="token keyword">val</span> list1<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> list <span class="token operator">:</span><span class="token operator">+</span> <span class="token number">5</span>    <span class="token comment">//todo 2.空集合</span>    Nil<span class="token comment">//List()</span>    <span class="token comment">//todo 3 :: 相当于从右往左添加元素</span>    <span class="token keyword">val</span> list3<span class="token operator">:</span> List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">::</span> <span class="token number">2</span> <span class="token operator">::</span> <span class="token number">3</span> <span class="token operator">::</span> Nil    <span class="token comment">//:::相当于添加元素,使用元素拆解开,添加入空集合</span>    <span class="token keyword">val</span> list4<span class="token operator">=</span><span class="token number">1</span><span class="token operator">::</span><span class="token number">2</span><span class="token operator">::</span><span class="token number">3</span><span class="token operator">::</span>list1<span class="token operator">::</span><span class="token operator">:</span>Nil    println<span class="token punctuation">(</span>list4<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-2-可变集合"><a href="#2-2-可变集合" class="headerlink" title="2.2 可变集合"></a>2.2 可变集合</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//todo 集合-Seq(List) 可变</span><span class="token keyword">val</span> list<span class="token operator">:</span> ListBuffer<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> ListBuffer<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token comment">//ListBuffer(1, 2, 3, 6)</span>list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token comment">//ListBuffer(1, 2, 3, 6,5)//remove</span>println<span class="token punctuation">(</span>list<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-无序且不可能重复集合set"><a href="#3-无序且不可能重复集合set" class="headerlink" title="3.无序且不可能重复集合set"></a>3.无序且不可能重复集合set</h2><h3 id="3-1-不可变set"><a href="#3-1-不可变set" class="headerlink" title="3.1 不可变set"></a>3.1 不可变set</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> set <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">val</span> set1<span class="token operator">:</span> Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> set <span class="token operator">+</span> <span class="token number">7</span><span class="token comment">//添加新元素形成新集合</span><span class="token keyword">val</span> set2<span class="token operator">:</span> Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> set <span class="token operator">-</span> <span class="token number">5</span><span class="token comment">//减少元素</span>println<span class="token punctuation">(</span>set2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-2-可变Set"><a href="#3-2-可变Set" class="headerlink" title="3.2 可变Set"></a>3.2 可变Set</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> set <span class="token operator">=</span> Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">val</span> set1<span class="token operator">:</span> Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> set <span class="token operator">+</span> <span class="token number">7</span><span class="token comment">//添加新元素形成新集合</span><span class="token keyword">val</span> set2<span class="token operator">:</span> Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> set <span class="token operator">-</span> <span class="token number">5</span><span class="token comment">//减少元素</span><span class="token comment">//可变set集合是使用包名进行区分</span><span class="token keyword">val</span> set3<span class="token operator">:</span> mutable<span class="token punctuation">.</span>Set<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> mutable<span class="token punctuation">.</span>Set<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">)</span><span class="token comment">//更新集合本身,重点是后面的false</span>set3<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token boolean">false</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>set3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-Map存储无序的K-V"><a href="#4-Map存储无序的K-V" class="headerlink" title="4.Map存储无序的K-V"></a>4.Map存储无序的K-V</h2><p>默认也是不可变的Map</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">val</span> map <span class="token operator">=</span> Map<span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>println<span class="token punctuation">(</span>map<span class="token punctuation">)</span><span class="token comment">//scala中方法用于创建关联关系,形成键值对-></span><span class="token keyword">val</span> map1 <span class="token operator">=</span> mutable<span class="token punctuation">.</span>Map<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token operator">-></span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">"b"</span><span class="token operator">-></span><span class="token number">2</span><span class="token punctuation">)</span>println<span class="token punctuation">(</span>map1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-Option"><a href="#5-Option" class="headerlink" title="5.Option"></a>5.Option</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> map1 <span class="token operator">=</span> Map<span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>      <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    <span class="token keyword">val</span> option<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> map1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span>    <span class="token comment">//option选项,称为有值跟无值</span>    <span class="token comment">//Some:有值,None:无值</span>    <span class="token comment">//空指针异常</span>    println<span class="token punctuation">(</span>option<span class="token punctuation">)</span>    <span class="token keyword">val</span> option1<span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token operator">=</span> map1<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"f"</span><span class="token punctuation">)</span>    println<span class="token punctuation">(</span>option1<span class="token punctuation">)</span><span class="token comment">//    option1.get,知道没值但是还是取值会报错</span><span class="token comment">//    map1.get("d").getOrElse(0)</span>    println<span class="token punctuation">(</span>map1<span class="token punctuation">.</span>getOrElse<span class="token punctuation">(</span><span class="token string">"e"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scala的模式匹配</title>
      <link href="2020/02/15/Scala_%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
      <url>2020/02/15/Scala_%E6%A8%A1%E5%BC%8F%E5%8C%B9%E9%85%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="模式匹配"><a href="#模式匹配" class="headerlink" title="模式匹配"></a>模式匹配</h1><h2 id="1-普通匹配"><a href="#1-普通匹配" class="headerlink" title="1.普通匹配"></a>1.普通匹配</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//简单不聊</span><span class="token comment">//todo 常量匹配</span>    <span class="token keyword">def</span> testAge<span class="token punctuation">(</span>age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      age <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">10</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"10"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> <span class="token number">20</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"20"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"其他"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    testAge<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span>    <span class="token comment">//todo 类型匹配</span>    <span class="token keyword">def</span> testType<span class="token punctuation">(</span>x<span class="token operator">:</span><span class="token builtin">Any</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      x <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> x<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"整型"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> x<span class="token operator">:</span>List<span class="token punctuation">[</span><span class="token builtin">Int</span><span class="token punctuation">]</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"List"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> x<span class="token operator">:</span><span class="token builtin">String</span> <span class="token keyword">=></span>println<span class="token punctuation">(</span><span class="token string">"字符串"</span><span class="token punctuation">)</span>        <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"其他"</span><span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    testType<span class="token punctuation">(</span>List<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//类型不考虑</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//todo 匹配集合</span>  <span class="token keyword">private</span> <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span>  list <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> first<span class="token operator">::</span>second<span class="token operator">::</span>rest <span class="token keyword">=></span> println<span class="token punctuation">(</span>first <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> second <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> rest<span class="token punctuation">)</span>    <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"some else"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//todo 匹配元组</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span>tuple <span class="token keyword">&lt;-</span> Array<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> tuple <span class="token keyword">match</span> <span class="token punctuation">&#123;</span><span class="token comment">//可以返回</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> _<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token string">"0 ..."</span> <span class="token comment">//是第一个元素是0的元组</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>y<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token string">""</span> <span class="token operator">+</span> y <span class="token operator">+</span> <span class="token string">"0"</span> <span class="token comment">// 匹配后一个元素是0的对偶元组</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token string">""</span> <span class="token operator">+</span> a <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> b      <span class="token keyword">case</span> _ <span class="token keyword">=></span> <span class="token string">"something else"</span> <span class="token comment">//默认</span>    <span class="token punctuation">&#125;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-匹配对象"><a href="#2-匹配对象" class="headerlink" title="2.匹配对象"></a>2.匹配对象</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//todo 匹配对象</span>  <span class="token comment">//类的构造方法中参数使用var或者val声明</span>  <span class="token comment">//这个参数就可以直接作为类的属性使用[圈起来]</span>  <span class="token comment">//var参数可以修改的,val参数不可以修改</span>  <span class="token keyword">class</span> User<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span><span class="token builtin">String</span><span class="token punctuation">,</span><span class="token keyword">val</span> age<span class="token operator">:</span><span class="token builtin">Int</span><span class="token punctuation">)</span>  <span class="token keyword">object</span> User<span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> apply<span class="token punctuation">(</span>name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token operator">:</span> User <span class="token operator">=</span> <span class="token keyword">new</span> User<span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span>    <span class="token keyword">def</span> unapply<span class="token punctuation">(</span>user<span class="token operator">:</span> User<span class="token punctuation">)</span><span class="token operator">:</span> Option<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token builtin">Int</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> Option<span class="token punctuation">(</span>user<span class="token punctuation">.</span>name<span class="token punctuation">,</span> user<span class="token punctuation">.</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">val</span> user<span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>  user <span class="token keyword">match</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> User<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"对象没有问题"</span><span class="token punctuation">)</span>    <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"不匹配"</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-样例类-模式匹配应该学的地方"><a href="#3-样例类-模式匹配应该学的地方" class="headerlink" title="3.样例类[模式匹配应该学的地方]"></a>3.样例类[模式匹配应该学的地方]</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">/** * @author Jinxin Li * @create 2020-10-28 18:50 * 模式匹配 * 马丁专门为模式匹配的对象匹配创建了特殊的类,样例类,就是在class前增加case关键字 * 这个类可以当做普通类来用,也能生成特殊类使用 * 编译器在遍历样例类时,会自动生成伴生对象,apply方法,unapply方法 * 同时这个类默认实现了可序列化接口 */</span><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token comment">//样例类</span>  <span class="token keyword">case</span> <span class="token keyword">class</span> User<span class="token punctuation">(</span><span class="token keyword">val</span> name<span class="token operator">:</span> <span class="token builtin">String</span><span class="token punctuation">,</span> <span class="token keyword">val</span> age<span class="token operator">:</span> <span class="token builtin">Int</span><span class="token punctuation">)</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> user <span class="token operator">=</span> User<span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    user <span class="token keyword">match</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> User<span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"对象没有问题"</span><span class="token punctuation">)</span>      <span class="token keyword">case</span> _ <span class="token keyword">=></span> println<span class="token punctuation">(</span><span class="token string">"不匹配"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明:</p><ol><li><p>样例类就是使用case关键字声明的类</p></li><li><p>样例类仍然是类，和普通类相比，只是其自动生成了伴生对象，并且伴生对象中自动提供了一些常用的方法，如apply、unapply、toString、equals、hashCode和copy。</p></li><li><p>样例类是为模式匹配而优化的类，因为其默认提供了unapply方法，因此，样例类可以直接使用模式匹配，而无需自己实现unapply方法。</p></li><li><p>构造器中的每一个参数都成为val，除非它被显式地声明为var（不建议这样做）</p></li></ol></blockquote><h2 id="4-变量匹配"><a href="#4-变量匹配" class="headerlink" title="4.变量匹配"></a>4.变量匹配</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> <span class="token punctuation">(</span>name<span class="token punctuation">,</span> age<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token string">"zhangsan"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span>    <span class="token comment">//1.直接声明对应</span>    println<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    println<span class="token punctuation">(</span>age<span class="token punctuation">)</span>        <span class="token comment">//2.map声明,循环匹配</span>    <span class="token keyword">val</span> map <span class="token operator">=</span> Map<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span>v<span class="token punctuation">)</span> <span class="token keyword">&lt;-</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//打印的时候直接匹配</span>      println<span class="token punctuation">(</span>k <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> v<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">&lt;-</span> map<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//匹配也能做过滤,将v为2的数进行过滤</span>      println<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-匹配函数的参数-要重点学习的地方"><a href="#5-匹配函数的参数-要重点学习的地方" class="headerlink" title="5.匹配函数的参数[要重点学习的地方]"></a>5.匹配函数的参数[要重点学习的地方]</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    list<span class="token punctuation">.</span>map<span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token punctuation">(</span>string<span class="token punctuation">,</span>int<span class="token punctuation">)</span><span class="token keyword">=></span><span class="token punctuation">(</span>string<span class="token punctuation">,</span>int<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">//这里传递出两个参数显然是不合适的</span>    <span class="token comment">//注意1.要使用case</span>    <span class="token comment">//    2.注意使用花括号</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-过滤功能"><a href="#5-1-过滤功能" class="headerlink" title="5.1 过滤功能"></a>5.1 过滤功能</h3><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>    <span class="token comment">//过滤出第二个数的为奇数</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span>      <span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"c"</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span>    list<span class="token punctuation">.</span>filter<span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> <span class="token punctuation">(</span>_<span class="token punctuation">,</span>cont<span class="token punctuation">)</span> <span class="token keyword">=></span> <span class="token punctuation">&#123;</span>cont<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token comment">//使用模式匹配</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-偏函数"><a href="#6-偏函数" class="headerlink" title="6.偏函数"></a>6.偏函数</h2><p>对满足条件的一部分数据处理为偏函数  </p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">//一般情况下偏函数就是模式匹配,使用case</span><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token comment">//将该List(1,2,3,4,5,6,"test")中的Int类型的元素加一，并去掉字符串。</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> list <span class="token operator">=</span> List<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"test"</span><span class="token punctuation">)</span>    <span class="token comment">//采集数据,符合条件的数据被采集并做处理,这样的函数称为偏函数</span>    <span class="token keyword">val</span> result <span class="token operator">=</span> list<span class="token punctuation">.</span>collect<span class="token punctuation">&#123;</span>      <span class="token keyword">case</span> i<span class="token operator">:</span><span class="token builtin">Int</span> <span class="token keyword">=></span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token punctuation">&#125;</span>    println<span class="token punctuation">(</span>result<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Scala的隐式转换</title>
      <link href="2020/02/14/Scala_%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/"/>
      <url>2020/02/14/Scala_%E9%9A%90%E5%BC%8F%E8%BD%AC%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="隐式转换的一些总结"><a href="#隐式转换的一些总结" class="headerlink" title="隐式转换的一些总结"></a>隐式转换的一些总结</h1><h2 id="1-普通隐式转换"><a href="#1-普通隐式转换" class="headerlink" title="1.普通隐式转换"></a>1.普通隐式转换</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">/** * @author Jinxin Li * @create 2020-10-28 18:50 * 编译器在编译时,有可能编译不通过 * 尝试在作用域范围内查找可以让程序编译通过的逻辑 * 然后使用这段逻辑进行二次编译,让编译通过 * 然后对指定的逻辑增加标记,告诉编译器这个标记可以进行二次编译 * implicit * * 相同作用域下,相同的隐式转换规则不能使用多次 */</span><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">implicit</span> <span class="token keyword">def</span> transform<span class="token punctuation">(</span>d<span class="token operator">:</span><span class="token builtin">Double</span><span class="token punctuation">)</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>      d<span class="token punctuation">.</span>toInt    <span class="token punctuation">&#125;</span><span class="token comment">//隐式函数,当编译不通过时,编译器会自动寻找</span>    <span class="token keyword">val</span> test <span class="token operator">=</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">val</span> age<span class="token operator">:</span> <span class="token builtin">Int</span> <span class="token operator">=</span> test<span class="token punctuation">.</span>age<span class="token comment">//这里接收的是Int类型</span>    println<span class="token punctuation">(</span>age<span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//第三方类库</span>  <span class="token keyword">class</span> Test<span class="token punctuation">&#123;</span>    <span class="token keyword">val</span> age<span class="token operator">:</span><span class="token builtin">Double</span> <span class="token operator">=</span> <span class="token number">20</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">object</span> Test<span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> apply<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> Test <span class="token operator">=</span> <span class="token keyword">new</span> Test<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-不修改源码升级代码-重点"><a href="#2-不修改源码升级代码-重点" class="headerlink" title="2.不修改源码升级代码[重点]"></a>2.不修改源码升级代码[重点]</h2><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">implicit</span> <span class="token keyword">def</span> transform<span class="token punctuation">(</span>user<span class="token operator">:</span>User<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      <span class="token keyword">new</span> UserExt<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">val</span> user <span class="token operator">=</span> <span class="token keyword">new</span> User<span class="token punctuation">(</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>insertUser<span class="token punctuation">(</span><span class="token punctuation">)</span>    user<span class="token punctuation">.</span>updateUser<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token punctuation">&#125;</span><span class="token comment">//---------------------------源码--------------</span>  <span class="token keyword">class</span> User <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> insertUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"insert user...."</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token comment">//---------------------------源码--------------</span>  <span class="token keyword">class</span> UserExt <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> updateUser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"update user...."</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-修改源码"><a href="#3-修改源码" class="headerlink" title="3.修改源码"></a>3.修改源码</h2><p>需求:</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">/** * @author Jinxin Li * @create 2020-10-28 18:50 * 不改源码修改密码参数 */</span><span class="token keyword">object</span> Match01_match <span class="token punctuation">&#123;</span>  <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">def</span> reg<span class="token punctuation">(</span>password <span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>      println<span class="token punctuation">(</span><span class="token string">"密码为"</span><span class="token operator">+</span>password<span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解决</p><pre class="line-numbers language-scala" data-language="scala"><code class="language-scala"><span class="token comment">/** * @author Jinxin Li * @create 2020-10-28 18:50 * 不改源码修改密码参数 */</span><span class="token keyword">object</span> Scala_Implicit <span class="token punctuation">&#123;</span>    <span class="token keyword">def</span> main<span class="token punctuation">(</span>args<span class="token operator">:</span> Array<span class="token punctuation">[</span><span class="token builtin">String</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">implicit</span> <span class="token keyword">val</span> password <span class="token operator">=</span> <span class="token string">"123123"</span>      <span class="token keyword">def</span> reg<span class="token punctuation">(</span><span class="token keyword">implicit</span> password<span class="token operator">:</span> <span class="token builtin">String</span> <span class="token operator">=</span> <span class="token string">"000000"</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Unit</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>        println<span class="token punctuation">(</span><span class="token string">"密码为"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span>      <span class="token punctuation">&#125;</span>      reg<span class="token comment">//调用隐式</span>      reg<span class="token punctuation">(</span><span class="token punctuation">)</span>      reg<span class="token punctuation">(</span><span class="token string">"12313"</span><span class="token punctuation">)</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink08_高可用与tuning</title>
      <link href="2020/01/04/Flink08_%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B0%83%E4%BC%98/"/>
      <url>2020/01/04/Flink08_%E9%AB%98%E5%8F%AF%E7%94%A8%E4%B8%8E%E8%B0%83%E4%BC%98/</url>
      
        <content type="html"><![CDATA[<h1 id="0x0-监控"><a href="#0x0-监控" class="headerlink" title="0x0 监控"></a>0x0 监控</h1><h2 id="1-概览（Overview）"><a href="#1-概览（Overview）" class="headerlink" title="1.概览（Overview）"></a>1.概览（Overview）</h2><p>Flink 的 Web 界面提供了<code>选项卡/标签（tab）</code>来监视作业的 checkpoint 信息。作业终止后，这些统计信息仍然可用。有四个不同的选项卡可显示有关 checkpoint 的信息：概览（Overview），历史记录（History），摘要信息（Summary）和配置信息（Configuration）。以下各节将依次介绍这些内容。</p><h2 id="2-反压"><a href="#2-反压" class="headerlink" title="2.反压"></a>2.反压</h2><p>如果你看到一个 Task 发生 <strong>反压警告</strong>（例如： <code>High</code>），意味着它生产数据的速率比下游 Task 消费数据的速率要快。 在工作流中数据记录是从上游向下游流动的（例如：从 Source 到 Sink）。反压沿着相反的方向传播，沿着数据流向上游传播。</p><p>以一个简单的 <code>Source -&gt; Sink</code> Job 为例。如果看到 <code>Source</code> 发生了警告，意味着 <code>Sink</code> 消费数据的速率比 <code>Source</code> 生产数据的速率要慢。 <code>Sink</code> 正在向上游的 <code>Source</code> 算子产生反压。</p><h2 id="3-反压采样"><a href="#3-反压采样" class="headerlink" title="3.反压采样"></a>3.反压采样</h2><p>通过不断对每个 Task 的反压状态采样来进行反压监控。JobManager 会触发对 Task <code>Task.isBackPressured()</code> 的重复调用。</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.10/fig/back_pressure_sampling.png" alt="img"></p><p>Task 是否反压是基于输出 Buffer 的可用性判断的，如果一个用于数据输出的 Buffer 都没有了，则表明 Task 被反压了。</p><p>默认情况下，JobManager 会触发 100 次采样，每次间隔 50ms 来确定反压。 你在 Web 界面看到的比率表示在获得的样本中有多少表明 Task 正在被反压，例如: <code>0.01</code> 表示 100 个样本中只有 1 个反压了。</p><ul><li><strong>OK</strong>: 0 &lt;= 比例 &lt;= 0.10</li><li><strong>LOW</strong>: 0.10 &lt; 比例 &lt;= 0.5</li><li><strong>HIGH</strong>: 0.5 &lt; 比例 &lt;= 1</li></ul><p>为了不因为采样导致 TaskManager 负载过重，Web 界面仅在每 60 秒后重新采样。</p><h2 id="3-配置参数"><a href="#3-配置参数" class="headerlink" title="3.配置参数"></a>3.配置参数</h2><p>你可以使用以下键来配置 JobManager 的样本数：</p><ul><li><code>web.backpressure.refresh-interval</code>: 有效的反压结果被废弃并重新进行采样的时间 (默认: 60000, 1 min)。</li><li><code>web.backpressure.num-samples</code>: 用于确定反压采样的样本数 (默认: 100)。</li><li><code>web.backpressure.delay-between-samples</code>: 用于确定反压采样的间隔时间 (默认: 50, 50 ms)。</li></ul><h2 id="4-示例"><a href="#4-示例" class="headerlink" title="4.示例"></a>4.示例</h2><p>你可以在 Job 的 Overview 选项卡后面找到 <em>Back Pressure</em> 。</p><h3 id="4-1采样进行中"><a href="#4-1采样进行中" class="headerlink" title="4.1采样进行中"></a>4.1采样进行中</h3><p>这意味着 JobManager 对正在运行的 Task 触发了反压采样。默认情况下，大约需要 5 秒完成采样。</p><p>注意，点击该行，可触发该算子所有 SubTask 的采样。</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.10/fig/back_pressure_sampling_in_progress.png" alt="正常状态"></p><h3 id="4-2反压状态"><a href="#4-2反压状态" class="headerlink" title="4.2反压状态"></a>4.2反压状态</h3><p>如果你看到 Task 的状态为 <strong>OK</strong> 表示没有反压。<strong>HIGH</strong> 表示这个 Task 被反压。</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.10/fig/back_pressure_sampling_high.png" alt="反压状态"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yarn中aM与Container的配置</title>
      <link href="2019/12/28/Yarn%E4%B8%AD%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4AppMatser%E5%AE%B9%E5%99%A8%E4%B8%8EContainer%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE/"/>
      <url>2019/12/28/Yarn%E4%B8%AD%E5%A6%82%E4%BD%95%E8%B0%83%E6%95%B4AppMatser%E5%AE%B9%E5%99%A8%E4%B8%8EContainer%E5%AE%B9%E5%99%A8%E7%9A%84%E5%A4%A7%E5%B0%8F%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h3 id="Yarn中如何调整AppMatser容器与Container容器的大小配置"><a href="#Yarn中如何调整AppMatser容器与Container容器的大小配置" class="headerlink" title="Yarn中如何调整AppMatser容器与Container容器的大小配置"></a>Yarn中如何调整AppMatser容器与Container容器的大小配置</h3><h4 id="1-配置AppMatser容器大小的文件目录地址"><a href="#1-配置AppMatser容器大小的文件目录地址" class="headerlink" title="1.配置AppMatser容器大小的文件目录地址"></a>1.配置AppMatser容器大小的文件目录地址</h4><blockquote><p>AppMaster:  hadoop3.1/etc/hadoop/capacity-scheduler.xml</p></blockquote><h4 id="2-配置中信息解读"><a href="#2-配置中信息解读" class="headerlink" title="2.配置中信息解读"></a>2.配置中信息解读</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;property>&lt;name>yarn<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>capacity<span class="token punctuation">.</span>maximum<span class="token operator">-</span>am<span class="token operator">-</span>resourcepercent&lt;<span class="token operator">/</span>name>    &lt;value>0<span class="token punctuation">.</span>1&lt;<span class="token operator">/</span>value><span class="token comment">#你要关注的地方</span>    &lt;description>      Maximum percent of resources in the cluster which can be used to run       application masters i<span class="token punctuation">.</span>e<span class="token punctuation">.</span> controls number of concurrent running      applications<span class="token punctuation">.</span>    &lt;<span class="token operator">/</span>description>&lt;<span class="token operator">/</span>property><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>0.1代表AppMaster分配的容器的内存上限是整体内存的10%,可以根据需要修改,开启多个AppMaster</p><p>值得注意是:假如整体内存是100G,上限内存是10G,但是如果第一个AppMaster占用大小为20G也是可以启动的,但是再启动第二个AppMaster就处于等待而无法启动了.</p><h4 id="3-配置NameNode中的运行MapTask的容器的大小配置"><a href="#3-配置NameNode中的运行MapTask的容器的大小配置" class="headerlink" title="3.配置NameNode中的运行MapTask的容器的大小配置"></a>3.配置NameNode中的运行MapTask的容器的大小配置</h4><blockquote><p>hadoop-3.1.3/etc/hadoop/yarn-site.xml</p></blockquote><h4 id="4-信息解读"><a href="#4-信息解读" class="headerlink" title="4.信息解读"></a>4.信息解读</h4><pre class="line-numbers language-powershell" data-language="powershell"><code class="language-powershell">&lt;<span class="token operator">!</span>-<span class="token operator">-</span> yarn容器允许分配的最大最小内存 <span class="token operator">--</span>>&lt;property>&lt;name>yarn<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>minimum<span class="token operator">-</span>allocation<span class="token operator">-</span>mb&lt;<span class="token operator">/</span>name>&lt;value>512&lt;<span class="token operator">/</span>value>    &lt;<span class="token operator">/</span>property>    &lt;property>        &lt;name>yarn<span class="token punctuation">.</span>scheduler<span class="token punctuation">.</span>maximum<span class="token operator">-</span>allocation<span class="token operator">-</span>mb&lt;<span class="token operator">/</span>name>        &lt;value>4096&lt;<span class="token operator">/</span>value>    &lt;<span class="token operator">/</span>property>&lt;<span class="token operator">!</span>-<span class="token operator">-</span> yarn容器允许管理的物理内存大小 <span class="token operator">--</span>>    &lt;property>        &lt;name>yarn<span class="token punctuation">.</span>nodemanager<span class="token punctuation">.</span>resource<span class="token punctuation">.</span>memory<span class="token operator">-</span>mb&lt;<span class="token operator">/</span>name>        &lt;value>4096&lt;<span class="token operator">/</span>value>    &lt;<span class="token operator">/</span>property><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>单位是M</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hive架构</title>
      <link href="2019/12/12/hive%E6%9E%B6%E6%9E%84/"/>
      <url>2019/12/12/hive%E6%9E%B6%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Hive架构的理解"><a href="#1-Hive架构的理解" class="headerlink" title="1.Hive架构的理解"></a>1.Hive架构的理解</h1><p>我们只知道Hive是一个数据分析引擎,与HAOOP配合工作,但是对于小白来说,架构具体结构却了解不够清楚,本文将会对此进行一个解析</p><pre class="mermaid">graph TDA[Hive/Driver]--Hive直接访问-->B[JDBC]E[Client_Beeline]-.hive server2服务:10000.->AH[Client_CLI]-->AB-->D[MySQL/Meta Store]A-.meta store服务.->DA--SQL Parser-->F[MapReduce]F-->G[HDFS]D -.映射.-> G</pre><p><img src="images/1600087095586.png" alt="1600087095586"></p><h1 id="2-通常情况下的SQL的执行顺序"><a href="#2-通常情况下的SQL的执行顺序" class="headerlink" title="2.通常情况下的SQL的执行顺序"></a>2.通常情况下的SQL的执行顺序</h1><pre class="mermaid">graph LRfrom-->joinjoin-->wherewhere-->group_bygroup_by-->havinghaving-->selectselect-->order_byorder_by-->limit</pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>hive的基本架构与API</title>
      <link href="2019/11/12/hive%E6%80%BB%E7%BB%93/"/>
      <url>2019/11/12/hive%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="hive"><a href="#hive" class="headerlink" title="hive"></a>hive</h1><h2 id="1-Hive的基本概念"><a href="#1-Hive的基本概念" class="headerlink" title="1. Hive的基本概念"></a>1. Hive的基本概念</h2><h3 id="1-1-Hive的启动"><a href="#1-1-Hive的启动" class="headerlink" title="1.1 Hive的启动"></a>1.1 Hive的启动</h3><h4 id="1-gt-启动的脚本"><a href="#1-gt-启动的脚本" class="headerlink" title="1&gt; 启动的脚本"></a>1&gt; 启动的脚本</h4><p>nohup: 命令开头，表示不挂起,也就是关闭终端进程也继续保持运行状态</p><p>0:标准输入 1:标准输出 2:错误输出</p><p>2&gt;&amp;1 : 表示将错误重定向到标准输出上</p><p>&amp;: 放在命令结尾,表示后台运行,将程序推向后台</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#启动metastore</span><span class="token punctuation">[</span>atguigu@hadoop202 hive<span class="token punctuation">]</span>$ <span class="token function">nohup</span> hive --service metastore <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span class="token comment">#启动jdbc</span><span class="token punctuation">[</span>atguigu@hadoop202 hive<span class="token punctuation">]</span>$ <span class="token function">nohup</span> hive --service hiveserver2 <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span> <span class="token operator">&amp;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-gt-Hive的架构"><a href="#2-gt-Hive的架构" class="headerlink" title="2&gt; Hive的架构"></a>2&gt; Hive的架构</h4><p>Hive本身不存储数据</p><p>Hive提供了自己的客户端与JDBC入口可以连接hive</p><p>无论哪一种方式连接,都需要驱动</p><p>Meta store ==&gt; MySql(默认derby,不支持多窗口)</p><p>Hive主要的工作是对sql的解析,分析,根据Meta store 翻译成MR模板</p><h2 id="2-Hive的数据操作"><a href="#2-Hive的数据操作" class="headerlink" title="2. Hive的数据操作"></a>2. Hive的数据操作</h2><h3 id="2-1-DDL"><a href="#2-1-DDL" class="headerlink" title="2.1 DDL"></a>2.1 DDL</h3><h4 id="1-gt-databases"><a href="#1-gt-databases" class="headerlink" title="1&gt;databases"></a>1&gt;databases</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create database [name]--数据库的名字comment [database_comment]--数据库的备注location &#39;&#x2F;database1&#39;--数据库的位置,存在默认with deproperties(&#39;createtime&#39;&#x3D;&#39;20201009&#39;);--设定数据库的性能alter database [name] set deproperties(&#39;createtime&#39;&#x3D;&#39;20201010&#39;);--修改属性desc database extended [name];--显示数据的详细信息drop database if exists [name] --删除数据库drop database if exists [name] cascade --删除非空数据库<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-gt-tables"><a href="#2-gt-tables" class="headerlink" title="2&gt; tables"></a>2&gt; tables</h4><p>general create</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table if not exists name1(    id int comment &#39;id&#39;,    name string    )row format delimited fields terminated by &#39;\t&#39;stored as textfilelocation &#39;&#x2F;user&#x2F;hive&#x2F;warehouse&#x2F;student&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>creating table by ‘as’ method</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table if not exists students2as select id,name from student;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>creating table by current table structure</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table if not exists students like student;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>query the type of table</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">desc formatted student2;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-2-External-table-and-Managed-table"><a href="#2-2-External-table-and-Managed-table" class="headerlink" title="2.2 External_table and Managed_table"></a>2.2 External_table and Managed_table</h3><p>内部表与外部表可以相互转换</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">alter</span> <span class="token keyword">table</span> student2 <span class="token keyword">set</span> tblproperties<span class="token punctuation">(</span><span class="token string">'EXTERNAL'</span><span class="token operator">=</span><span class="token string">'FALSE'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">--内外表转换</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-3-表的修改"><a href="#2-3-表的修改" class="headerlink" title="2.3 表的修改"></a>2.3 表的修改</h3><h4 id="1-gt-重命名"><a href="#1-gt-重命名" class="headerlink" title="1&gt; 重命名"></a>1&gt; 重命名</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name1 rename to new_table_name1;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-gt-更新列"><a href="#2-gt-更新列" class="headerlink" title="2&gt; 更新列"></a>2&gt; 更新列</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name1 add columns(deptdesc string);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-4-DML"><a href="#2-4-DML" class="headerlink" title="2.4  DML"></a>2.4  DML</h3><h4 id="1-gt-本地上传文件到HDFS"><a href="#1-gt-本地上传文件到HDFS" class="headerlink" title="1&gt;本地上传文件到HDFS"></a>1&gt;本地上传文件到HDFS</h4><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">dfs -put /opt/module/hive/datas/student.txt /user/jinxin/hive<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-gt-加载HDFS上的数据"><a href="#2-gt-加载HDFS上的数据" class="headerlink" title="2&gt;加载HDFS上的数据"></a>2&gt;加载HDFS上的数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">load data inpath &#39;&#x2F;user&#x2F;atguigu&#x2F;hive&#x2F;student.txt&#39; into table default.student;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3-gt-基本插入数据"><a href="#3-gt-基本插入数据" class="headerlink" title="3&gt;基本插入数据"></a>3&gt;基本插入数据</h4><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">insert into table  student_par values(1,&#39;wangwu&#39;),(2,&#39;zhaoliu&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="3-Hive的查询操作"><a href="#3-Hive的查询操作" class="headerlink" title="3.Hive的查询操作"></a>3.Hive的查询操作</h2><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">hive (default)&gt; select * from emp where ename LIKE &#39;A%&#39;;hive (default)&gt; select * from emp where ename LIKE &#39;_A%&#39;;hive (default)&gt; select * from emp where ename  RLIKE &#39;[A]&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>RLike更加强大</p><h4 id="1-gt-having-与-where的区别"><a href="#1-gt-having-与-where的区别" class="headerlink" title="1&gt; having 与 where的区别"></a>1&gt; having 与 where的区别</h4><p>having子句与where都是设定条件筛选的语句，有相似之处也有区别。</p><p>==having与where的区别:==</p><ul><li>having是在分组后对数据进行过滤</li><li>where是在分组前对数据进行过滤</li><li>having后面可以使用聚合函数</li><li>where后面不可以使用聚合</li></ul><p>在查询过程中执行顺序：<strong>from&gt;where&gt;group（含聚合）&gt;having&gt;order&gt;select。</strong></p><p>所以聚合语句(sum,min,max,avg,count)要比having子句优先执行，而where子句在查询过程中执行优先级别优先于聚合语句(sum,min,max,avg,count)</p><p>having后可以跟聚合函数,但是不可以使用select 中的聚合函数的别名,因为select 最后执行</p><h2 id="4-hive的排序"><a href="#4-hive的排序" class="headerlink" title="4.hive的排序"></a>4.hive的排序</h2><p>order by (只有一个reducer) 可以使用别名</p><p>sort by (reduce内部排序)</p><p>distribute by 根据分区的hash码与reduce的个数进行模除后,余数相同的分到一个区,需要与sort by连用</p><p>cluster by 分区表(distribute by 与 sort by 连用)</p><h3 id="4-1-修改分区"><a href="#4-1-修改分区" class="headerlink" title="4.1 修改分区"></a>4.1 修改分区</h3><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name1 add partition(day&#x3D;&#39;20200404)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>同时创建多个分区</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">alter table table_name1 add partition (day&#x3D;&#39;20200405&#39;) partition(day&#x3D;&#39;20200406&#39;);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="4-2-分桶"><a href="#4-2-分桶" class="headerlink" title="4.2 分桶"></a>4.2 分桶</h3><p>创建分桶表</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">create table stu_buck(id int, name string)clustered by(id) into 4 bucketsrow format delimited fields terminated by &#39;\t&#39;;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>分桶规则</p><p>Hive的分桶采用对分桶字段的值进行哈希，然后除以桶的个数求余的方 式决定该条记录存放在哪个桶当中</p><p>根据分桶可以抽样查询</p><pre class="line-numbers language-mysql" data-language="mysql"><code class="language-mysql">select * from stu_buck tablesample(bucket 1 out of 4 on id);<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> hive </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka_架构与流程</title>
      <link href="2019/10/21/Kafka_%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%9F%E7%90%86/"/>
      <url>2019/10/21/Kafka_%E6%9E%B6%E6%9E%84%E4%B8%8E%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<h1 id="1-Kafka概述"><a href="#1-Kafka概述" class="headerlink" title="1.Kafka概述"></a>1.Kafka概述</h1><p>Kafka是一个分布式的基于发布/订阅模式的消息队列（Message Queue），主要应用于大数据实时处理领域。</p><h2 id="1-1-消息队列与其应用场景"><a href="#1-1-消息队列与其应用场景" class="headerlink" title="1.1 消息队列与其应用场景"></a>1.1 消息队列与其应用场景</h2><p>发布/订阅模式</p><p>一对多，消费者消费数据之后不会清除消息</p><p>消息生产者（发布）将消息发布到topic中，同时有多个消息消费者（订阅）消费该消息。</p><h2 id="1-2-Kafka基础架构"><a href="#1-2-Kafka基础架构" class="headerlink" title="1.2 Kafka基础架构"></a>1.2 Kafka基础架构</h2><p>1）Producer ：消息生产者，就是向kafka broker发消息的客户端；<br>2）Consumer ：消息消费者，向kafka broker取消息的客户端；<br>3）Consumer Group （CG）：消费者组，由多个consumer组成。消费者组内每个消费者负责消费不同分区的数据，一个分区只能由一个组内消费者消费；消费者组之间互不影响。所有的消费者都属于某个消费者组，即==消费者组是逻辑上的一个订阅者==。<br>4）Broker ：一台kafka服务器就是一个broker。一个集群由多个broker组成。一个broker可以容纳多个topic。<br>5）Topic ：可以理解为一个队列，生产者和消费者面向的都是一个topic；<br>6）Partition：为了实现扩展性，一个非常大的topic可以分布到多个broker（即服务器）上，一个topic可以分为多个partition，每个partition是一个有序的队列；<br>7）Replica：副本，为保证集群中的某个节点发生故障时，该节点上的partition数据不丢失，且kafka仍然能够继续工作，kafka提供了副本机制，一个topic的每个分区都有若干个副本，一个leader和若干个follower。<br>8）leader：每个分区多个副本的“主”，生产者发送数据的对象，以及消费者消费数据的对象都是leader。<br>9）follower：每个分区多个副本中的“从”，实时从leader中同步数据，保持和leader数据的同步。leader发生故障时，某个follower会成为新的leader。</p><h2 id="1-3-关于Kafka服务器的一些理解"><a href="#1-3-关于Kafka服务器的一些理解" class="headerlink" title="1.3 关于Kafka服务器的一些理解"></a>1.3 关于Kafka服务器的一些理解</h2><p>Kafka存在两个服务器连接操作Kafka内部数据</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">kafka-topics.sh --bootstrap-server hadoop105:9092kafka-topics.sh --list --bootstrap-server hadoop102:9092 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Kafka通过高性能的TCP网络协议进行传输通信,在客户端与服务器之间</p><h2 id="1-4-Kafka安装配置文件"><a href="#1-4-Kafka安装配置文件" class="headerlink" title="1.4 Kafka安装配置文件"></a>1.4 Kafka安装配置文件</h2><p><strong>位置</strong></p><p>kafka/config/server.properties</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#broker的全局唯一编号，不能重复</span><span class="token attr-name">broker.id</span><span class="token punctuation">=</span><span class="token attr-value">0</span><span class="token comment">#删除topic功能使能,当前版本此配置默认为true，已从配置文件移除</span><span class="token attr-name">delete.topic.enable</span><span class="token punctuation">=</span><span class="token attr-value">true</span><span class="token comment">#处理网络请求的线程数量</span><span class="token attr-name">num.network.threads</span><span class="token punctuation">=</span><span class="token attr-value">3</span><span class="token comment">#用来处理磁盘IO的线程数量</span><span class="token attr-name">num.io.threads</span><span class="token punctuation">=</span><span class="token attr-value">8</span><span class="token comment">#发送套接字的缓冲区大小</span><span class="token attr-name">socket.send.buffer.bytes</span><span class="token punctuation">=</span><span class="token attr-value">102400</span><span class="token comment">#接收套接字的缓冲区大小</span><span class="token attr-name">socket.receive.buffer.bytes</span><span class="token punctuation">=</span><span class="token attr-value">102400</span><span class="token comment">#请求套接字的缓冲区大小</span><span class="token attr-name">socket.request.max.bytes</span><span class="token punctuation">=</span><span class="token attr-value">104857600</span><span class="token comment">#kafka运行日志存放的路径</span><span class="token attr-name">log.dirs</span><span class="token punctuation">=</span><span class="token attr-value">/opt/module/kafka/logs</span><span class="token comment">#topic在当前broker上的分区个数</span><span class="token attr-name">num.partitions</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment">#用来恢复和清理data下数据的线程数量</span><span class="token attr-name">num.recovery.threads.per.data.dir</span><span class="token punctuation">=</span><span class="token attr-value">1</span><span class="token comment">#segment文件保留的最长时间，超时将被删除</span><span class="token attr-name">log.retention.hours</span><span class="token punctuation">=</span><span class="token attr-value">168</span><span class="token comment">#配置连接Zookeeper集群地址</span><span class="token attr-name">zookeeper.connect</span><span class="token punctuation">=</span><span class="token attr-value">hadoop102:2181,hadoop103:2181,hadoop104:2181</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分别在hadoop103和hadoop104上修改配置文件</p><p>/opt/module/kafka/config/server.properties中的</p><p>broker.id=1、broker.id=2</p><p>注：broker.id不得重复</p><h1 id="2-Kafka生产者"><a href="#2-Kafka生产者" class="headerlink" title="2.Kafka生产者"></a>2.Kafka生产者</h1><h2 id="2-1分区策略"><a href="#2-1分区策略" class="headerlink" title="2.1分区策略"></a>2.1分区策略</h2><h3 id="2-1-1分区原因"><a href="#2-1-1分区原因" class="headerlink" title="2.1.1分区原因"></a>2.1.1分区原因</h3><p><strong>方便在集群中扩展</strong>,每个partition可以通过调整以适应它所在的机器,而一个topic又可以有多少个Partition组成,因此整个集群就可以适应任意大小的数据了；</p><p><strong>可以提高并发</strong>，因为可以以Partition为单位读写了。</p><h3 id="2-1-2分区原则"><a href="#2-1-2分区原则" class="headerlink" title="2.1.2分区原则"></a>2.1.2分区原则</h3><p>（1）  指明 partition 的情况下，直接将指明的值直接作为 partiton 值；</p><p>（2） 没有指明 partition 值但有 key 的情况下，将 key 的 hash 值与 topic 的 partition 数进行取余得到 partition 值；</p><p>（3）  既没有 partition 值又没有 key 值的情况下， kafka采用Sticky Partition(黏性分区器)，会随机选择一个分区，并尽可能一直使用该分区，待该分区的batch已满或者已完成，kafka再随机一个分区进行使用.</p><h2 id="2-2数据可靠性保证"><a href="#2-2数据可靠性保证" class="headerlink" title="2.2数据可靠性保证"></a>2.2数据可靠性保证</h2><h3 id="2-2-1生产者发送数据到topic-partition的可靠性保证"><a href="#2-2-1生产者发送数据到topic-partition的可靠性保证" class="headerlink" title="2.2.1生产者发送数据到topic partition的可靠性保证"></a>2.2.1生产者发送数据到topic partition的可靠性保证</h3><p>能可靠的发送到指定的topic，topic的每个partition收到producer发送的数据后，都需要向producer发送==ack==（acknowledgement确认收到），如果producer收到ack，就会进行下一轮的发送，否则重新发送数据。</p><h3 id="2-2-2何时发送ack"><a href="#2-2-2何时发送ack" class="headerlink" title="2.2.2何时发送ack"></a>2.2.2何时发送ack</h3><p>确保有follower与leader同步完成</p><p>leader再发送ack,这样才能保证leader挂掉之后,能在follower中选出新的leader</p><h3 id="2-2-3acks"><a href="#2-2-3acks" class="headerlink" title="2.2.3acks"></a>2.2.3acks</h3><p>0：这一操作提供了一个最低的延迟，partition的leader接收到消息还没有写入磁盘就已经返回ack，当leader故障时有可能丢失数据；</p><p>1：<br>partition的leader落盘成功后返回ack，如果在follower同步成功之前leader故障，那么将会<strong>丢失数据</strong>；</p><p>-1（all）： partition的leader和follower全部落盘成功后才返回ack。但是如果在follower同步完成后，broker发送ack之前，leader发生故障，那么会造成<strong>数据重复</strong>。</p><h3 id="2-2-4多少个follower同步完成之后发送ack"><a href="#2-2-4多少个follower同步完成之后发送ack" class="headerlink" title="2.2.4多少个follower同步完成之后发送ack"></a>2.2.4多少个follower同步完成之后发送ack</h3><p>同步方案</p><p>半数</p><p>全部</p><p>ack这里要使用zookeeper进行选举</p><p>Kafka选择全部同步完成,才会发送ack</p><h3 id="2-2-5ISR"><a href="#2-2-5ISR" class="headerlink" title="2.2.5ISR"></a>2.2.5ISR</h3><p>Leader维护了一个动态的in-sync replica set<br>(ISR)，意为和leader保持同步的follower集合。当ISR中的follower完成数据的同步之后，leader就会给producer发送ack。如果follower长时间未向leader同步数据，则该follower将被踢出ISR，该时间阈值由<strong>replica.lag.time.max.ms</strong>参数设定。Leader发生故障之后，就会从ISR中选举新的leader。</p><h2 id="2-3故障处理细节"><a href="#2-3故障处理细节" class="headerlink" title="2.3故障处理细节"></a>2.3故障处理细节</h2><p>leader和 follower故障处理细节</p><p>LEO：指的是每个副本最大的offset； Log End Offset</p><p>HW：指的是消费者能见到的最大的offset，ISR队列中最小的LEO。 High Watermark</p><p>HW是同步速度最慢的分区决定的follower</p><h3 id="2-3-1follower故障"><a href="#2-3-1follower故障" class="headerlink" title="2.3.1follower故障"></a>2.3.1follower故障</h3><p>follower发生故障后会被临时踢出ISR，待该follower恢复后，follower会读取本地磁盘记录的上次的HW，并将log文件高于HW的部分截取掉，从HW开始向leader进行同步。等该follower的LEO大于等于该Partition的HW，即follower追上leader之后，就可以重新加入ISR了。</p><h3 id="2-3-2leader故障"><a href="#2-3-2leader故障" class="headerlink" title="2.3.2leader故障"></a>2.3.2leader故障</h3><p>==数据丢失==</p><p>leader发生故障之后，会从ISR中选出一个新的leader，之后，为保证多个副本之间的数据一致性，其余的follower会先将各自的log文件高于HW的部分截掉，然后从新的leader同步数据。</p><p>注意：这只能保证副本之间的数据一致性，并不能保证数据不丢失或者不重复。</p><p>如果ack等级为0或者是1,此时leader分区已经接受到信息并且提交==ack==(注意broker提交是ack),但是此时发生故障,被踢出ISR,然后follower此时没有落盘成功. 此时重新选举follower自动将使用自己HW让其他分区同步,此时会发生丢失一部分数据</p><h2 id="2-4-Exactly-Once语义"><a href="#2-4-Exactly-Once语义" class="headerlink" title="2.4 Exactly Once语义"></a>2.4 Exactly Once语义</h2><p>将服务器的ACK级别设置为-1，可以保证Producer到Server之间不会丢失数据，即==At Least Once==语义。</p><p>相对的，将服务器ACK级别设置为0，可以保证生产者每条消息只会被发送一次，即==At Most Once==语义。</p><p>At Least Once可以保证数据不丢失，但是不能保证数据不重复；相对的，At Least Once可以保证数据不重复，但是不能保证数据不丢失。</p><p>但是，对于一些非常重要的信息，比如说交易数据，下游数据消费者要求数据既不重复也不丢失，即Exactly Once语义。在0.11版本以前的Kafka，对此是无能为力的，只能保证数据不丢失，再在下游消费者对数据做全局去重。对于多个下游应用的情况，每个都需要单独做全局去重，这就对性能造成了很大影响。</p><h3 id="2-4-1数据是如何发生重复的呢"><a href="#2-4-1数据是如何发生重复的呢" class="headerlink" title="2.4.1数据是如何发生重复的呢?"></a>2.4.1数据是如何发生重复的呢?</h3><pre class="mermaid">graph LRA[Producer]--数据重复-->B[Server]B-->C[Consumer]</pre><p>一般情况在,在ack应答等级为-1时,当leader与follower都已经落盘成功之后,这个时候会发送ack,但是这个时候leader崩掉,无法返回ack,这个时候会发生数据重复</p><p>0.11版本的Kafka，引入了一项重大特性：幂等性。</p><p>所谓的幂等性就是指Producer不论向Server发送多少次重复数据，Server端都只会持久化一条。</p><p>幂等性结合At Least Once语义，就构成了Kafka的Exactly Once语义。即：<strong>At Least Once +</strong> <strong>幂等性 = Exactly Once</strong></p><p>要启用幂等性，只需要将Producer的参数中<strong>enable.idempotence</strong>设置为true即可。</p><p>Kafka的幂等性实现其实就是将原来下游需要做的去重放在了数据上游。开启幂等性的Producer在初始化的时候会被分配一个PID，发往同一Partition的消息会附带Sequence Number。</p><p>而Broker端会对&lt;PID, Partition, SeqNumber&gt;做缓存，当具有相同主键的消息提交时，Broker只会持久化一条。</p><p>但是PID重启就会变化，同时不同的Partition也具有不同主键，所以幂等性无法保证跨分区跨会话的Exactly Once。</p><p>Exactly Once(At least Once + idempotence)</p><p>(PID,Partition,SeqNumber)</p><p>如果Broker检查这个信息,如果相同就不会在持有</p><h3 id="2-4-2Exactly-Once依然存在的问题"><a href="#2-4-2Exactly-Once依然存在的问题" class="headerlink" title="2.4.2Exactly Once依然存在的问题?"></a>2.4.2Exactly Once依然存在的问题?</h3><p>PID是生产者在启动时分配的一个PID,如果这个生产者宕机,重新启动,PID会发生改变,相同信息依然会被broker持有</p><h1 id="3-Kakfa-Broker"><a href="#3-Kakfa-Broker" class="headerlink" title="3.Kakfa Broker"></a>3.Kakfa Broker</h1><p>Kafka是一个分布式集群</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Kafka%E5%88%86%E5%B8%83%E5%BC%8F%E9%9B%86%E7%BE%A4%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84.png" alt="kafkaBroker内部架构"></p><p>kafka内部是由分布式集群组成</p><h2 id="3-1Broker内部文件"><a href="#3-1Broker内部文件" class="headerlink" title="3.1Broker内部文件"></a>3.1Broker内部文件</h2><p>首先Kafka中的消息时以<strong>topic</strong>进行分类的，生产者生产消息，消费者消费消息，都是面向topic的。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#查看kafka内部的数据cd &#x2F;opt&#x2F;module&#x2F;kafka&#x2F;data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#ATLAS使用Kafka的分区drwxrwxr-x  2 atguigu atguigu 4096 11月 25 23:05 ATLAS_ENTITIES-0drwxrwxr-x  2 atguigu atguigu 4096 11月 25 23:05 ATLAS_ENTITIES-1drwxrwxr-x  2 atguigu atguigu 4096 11月 25 23:05 ATLAS_ENTITIES-2...#系统维护偏移量offsets的系统分区drwxrwxr-x. 2 atguigu atguigu 4096 11月 26 15:40 __consumer_offsets-11...#用户自动的topicdrwxrwxr-x  2 atguigu atguigu 4096 11月 26 15:42 testTopic-1drwxrwxr-x. 2 atguigu atguigu 4096 11月 26 15:40 topic_log-0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意topic是一个逻辑概念,并非由topic组成,而是</p><p> 不同分区内的一组文件组成(leader follower)</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">#进入其中一个分区cd topic_log-0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">-rw-rw-r-- 1 atguigu atguigu  0 11月 26 15:42 00000000000000007372.index-rw-rw-r-- 1 atguigu atguigu  0 11月 24 16:38 00000000000000007372.log-rw-rw-r-- 1 atguigu atguigu  0 11月 26 15:42 00000000000000007372.timeindex-rw-rw-r-- 1 atguigu atguigu 12 11月 26 15:40 leader-epoch-checkpoint<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>进入topic的一个分区文件,我们可以发现如上四个文件</p><p><strong>分片与索引机制</strong></p><p>由于生产者生产的消息会不断追加到log文件末尾，为防止log文件过大导致数据定位效率低下，Kafka采取了<strong>分片</strong>和<strong>索引</strong>机制，将每个partition分为多个segment。</p><p>每个segment对应两个文件——“.index”文件和“.log”文件。</p><p>这些文件位于一个文件夹下，该文件夹的命名规则为：topic名称+分区序号。</p><p>例如，first这个topic有三个分区，则其对应的文件夹为first-0,first-1,first-2。</p><p>index和log文件以当前segment的第一条消息的offset命名。下图为index文件和log文件的结构示意图。</p><p>index（数据在log中的索引）</p><p>log（真实的数据）timeindex (数据发送的时间索引) ，</p><p>时间索引和index索引均是用来提高查询数据效率；</p><p>三者密不可分</p><p><strong>分片与索引详情图</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Kafka%E5%86%85%E9%83%A8%E6%96%87%E4%BB%B6%E5%88%86%E5%8C%BA%E5%88%86%E7%89%87.png" alt="索引文件"></p><h2 id="3-2关于leader-epoch-checkpoint"><a href="#3-2关于leader-epoch-checkpoint" class="headerlink" title="3.2关于leader-epoch-checkpoint"></a>3.2关于leader-epoch-checkpoint</h2><p>源码链接</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql">https:<span class="token comment">//github.com/apache/kafka/blob/ba237c5d21abb8b63c5edf53517654a214157582/core/src/main/scala/kafka/server/checkpoints/LeaderEpochCheckpointFile.scala#L43</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">In</span> <span class="token class-name">Kafka</span><span class="token punctuation">,</span> a leader epoch refers <span class="token keyword">to</span> <span class="token namespace">the</span> number of leaders previously assigned by the controller<span class="token punctuation">.</span> <span class="token class-name">Every</span> time a leader fails<span class="token punctuation">,</span> the controller selects the <span class="token keyword">new</span> leader<span class="token punctuation">,</span> increments the current <span class="token string">"leader epoch"</span> by <span class="token number">1</span><span class="token punctuation">,</span> and shares the leader epoch <span class="token keyword">with</span> <span class="token namespace">all</span> replicas<span class="token punctuation">.</span> <span class="token class-name">The</span> replicas use the leader epoch as a means of verifying the current leader<span class="token punctuation">.</span> <span class="token class-name">If</span> a leader fails and returns<span class="token punctuation">,</span> when it tries <span class="token keyword">to</span> <span class="token namespace">contact</span> other replicas<span class="token punctuation">,</span> it will send what it believes is the current leader epoch<span class="token punctuation">.</span> <span class="token class-name">The</span> replicas will ignore the messages sent <span class="token keyword">with</span> <span class="token namespace">outdated</span> leader epochs<span class="token punctuation">.</span><span class="token class-name">The</span> leader<span class="token operator">-</span>epoch<span class="token operator">-</span>checkpoint file contains two columns<span class="token operator">:</span> epochs and offsets<span class="token punctuation">,</span> as shown here<span class="token punctuation">.</span> <span class="token class-name">Each</span> row is a checkpoint <span class="token keyword">for</span> the latest recorded leader epoch and the leader's latest offset upon becoming leader<span class="token punctuation">.</span> <span class="token class-name">Both</span> replicas and leaders contain <span class="token keyword">this</span> file<span class="token punctuation">.</span> <span class="token class-name">Its</span> role is <span class="token keyword">for</span> checking what range of offsets pertain <span class="token keyword">to</span> <span class="token namespace">which</span> epoch<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说白了就是每一个topic维护了一个leader的版本,当心leader选举出来,leader的版本会加1</p><p>一共三台机器一共三行两列,第一列是leader版本,第二行是leader的offset</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token number">1</span><span class="token number">23</span> <span class="token number">7372</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="3-3关于分区与副本的理解"><a href="#3-3关于分区与副本的理解" class="headerlink" title="3.3关于分区与副本的理解"></a>3.3关于分区与副本的理解</h2><p>在kafka中,每个主题可以有多个分区,每个分区又可以有多个副本</p><p>在这个多个副本中.只有一个是leader.其他的都是follower副本,仅有leader副本对外提供服务</p><h1 id="4-Kafka消费者"><a href="#4-Kafka消费者" class="headerlink" title="4.Kafka消费者"></a>4.Kafka消费者</h1><h2 id="4-1拉取模式"><a href="#4-1拉取模式" class="headerlink" title="4.1拉取模式"></a>4.1拉取模式</h2><p>pull</p><p>pull模式不足之处是，如果kafka没有数据，消费者可能会陷入循环中，一直返回空数据。针对这一点，Kafka的消费者在消费数据时会传入一个时长参数timeout，如果当前没有数据可供消费，consumer会等待一段时间之后再返回，这段时长即为timeout。</p><h2 id="4-2分区分配策略"><a href="#4-2分区分配策略" class="headerlink" title="4.2分区分配策略"></a>4.2分区分配策略</h2><p>首先要明白,分区分配策略其实就是指引Kafka的消费者去读取Kafka内的topic分区中的文件</p><p>RoundRobin，Range , Sticky</p><h3 id="4-2-1为什么同一个消费者组内的只有一个消费者消费分区"><a href="#4-2-1为什么同一个消费者组内的只有一个消费者消费分区" class="headerlink" title="4.2.1为什么同一个消费者组内的只有一个消费者消费分区?"></a>4.2.1为什么同一个消费者组内的只有一个消费者消费分区?</h3><p>pull拉取之后提交offset</p><h1 id="5-zookeeper"><a href="#5-zookeeper" class="headerlink" title="5.zookeeper"></a>5.zookeeper</h1><p>Kafka集群中有一个broker会被选举为Controller，负责管理集群broker的上下线，所有topic的分区副本分配和leader选举等工作。</p><p>Controller的管理工作都是依赖于Zookeeper的。</p><p> 以下为partition的leader选举过程：</p><pre class="line-numbers language-规范" data-language="规范"><code class="language-规范">在操作上，我们有一下符合规范的ZooKeeper安装方式：在物理&#x2F;硬件&#x2F;网络上的冗余：尽量不要把他们放在同一个机架上，合适的硬件配置（但不要过分），尽量保持电源，网络等。一个典型的ZooKeeper集群有5或7台服务器，分别允许宕机2台和3台服务器。如果你想部署一个小型集群，3台服务器也可以部署，但是要记住，在这种情况下你只能宕机1台服务器。I&#x2F;O隔离：如果你有大量的写入操作流入，你几乎肯定会把事务日志放在一组特定的磁盘上。写入事物日志是同步的（但为了性能会分批写入），因此并发写入会明显影响性能。数据快照是异步落盘，因此通常可以与操作系统和消息日志文件共享磁盘性能。你可以配置dataLogDir参数单独为服务器配置磁盘组。应用隔离：除非你真的了解其他应用的运行模式，否则不要和ZooKeeper安装在一起，最好是单独部署运行ZooKeeper（尽管ZooKeeper可以均衡的利用硬件资源）。谨慎使用虚拟化：他的运行状况取决于你的集群架构，读写模式和SLA，即便是由虚拟化层引入的微小开销也可能造成ZooKeeper的中断，毕竟ZooKeeper对此十分敏感。ZooKeeper配置: 他是java运行的，首先确保你给他分配足够的堆空间（我们通常配置3-5G，但这是根据我们现有数据实际情况来定的）。不幸的是，我们没有一个好的固定公式来确定他的值，但是要记住分配个ZooKeeper的堆空间越大，快照也就越大，从而会影响快照的恢复时间。实际上，如果快照变得太大（几个G），那你能需要增加initlimit参数的值，以便为服务器提供足够的时间来恢复并加入集群。监控:JMX和4个字母的命令（ZooKeeper提供的一系列命令，如：conf,cons,dump等）非常有用，他们在某些功能上重复了（这种情况下我们更喜欢4lw命令，他们似乎更容易预测情况，至少，他们和基础设施监控兼容性更好）不要过度构建集群：大型集群，尤其是大量写入的情况下，意味着大量的集群内部通信（集群成员节点的写入和后续的仲裁更新），但是过小的将集群将承担不必要的风险。添加更多的服务器可以增加集群的读取能力。总体来看，我们应尽量保持zookeeper尽可能小的处理负载（标准增长容量规划） 并尽可能的简单。与官方版本相比，我们尽量对配置和应用布局不做什么更改，尽可能保持官方原版。基于这些原因，我们倾向于跳过操作系统打包的版本。因为为了有更好的表现，它倾向于把关注点放在可能“混乱”的标准系统层上。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="6-Kafka事务"><a href="#6-Kafka事务" class="headerlink" title="6.Kafka事务"></a>6.Kafka事务</h1><h2 id="3-6-1-Producer事务"><a href="#3-6-1-Producer事务" class="headerlink" title="3.6.1 Producer事务"></a>3.6.1 Producer事务</h2><p>为了实现跨分区跨会话的事务，需要引入一个全局唯一的Transaction ID，并将Producer获得的PID和Transaction ID绑定。</p><p>这样当Producer重启后就可以通过正在进行的Transaction ID获得原来的PID。</p><p>为了管理Transaction，Kafka引入了一个新的组件Transaction Coordinator。</p><p>Producer就是通过和Transaction Coordinator交互获得Transaction ID对应的任务状态。</p><p>Transaction Coordinator还负责将事务所有写入Kafka的一个内部Topic，这样即使整个服务重启，由于事务状态得到保存，进行中的事务状态可以得到恢复，从而继续进行。</p><pre class="mermaid">graph LRA[producer]--Transaction ID&PID-->B[Server]A--交互-->C[Transaction Coordinator]C--写入事务存储事务状态-->D[事务topic]D--读取事务状态-->AD-->B</pre><h2 id="3-6-2事务状态是如何得到保存的呢"><a href="#3-6-2事务状态是如何得到保存的呢" class="headerlink" title="3.6.2事务状态是如何得到保存的呢?"></a>3.6.2事务状态是如何得到保存的呢?</h2><p>看下面Kafka生产流程哦</p><h2 id="3-6-3-Consumer事务（精准一次性消费）"><a href="#3-6-3-Consumer事务（精准一次性消费）" class="headerlink" title="3.6.3 Consumer事务（精准一次性消费）"></a>3.6.3 Consumer事务（精准一次性消费）</h2><p>上述事务机制主要是从Producer方面考虑，对于Consumer而言，事务的保证就会相对较弱，尤其时无法保证Commit的信息被精确消费。</p><p>这是由于Consumer可以通过offset访问任意信息，而且不同的Segment File生命周期不同，同一事务的消息可能会出现重启后被删除的情况。</p><p>如果想完成Consumer端的精准一次性消费，那么需要kafka消费端将消费过程和提交offset过程做原子绑定。此时我们需要将kafka的offset保存到支持事务的自定义介质（比如mysql)。这部分知识会在后续项目部分涉及。</p><h1 id="7-Kafka-API与消息发送流程"><a href="#7-Kafka-API与消息发送流程" class="headerlink" title="7.Kafka API与消息发送流程"></a>7.Kafka API与消息发送流程</h1><h2 id="7-1消息发送流程"><a href="#7-1消息发送流程" class="headerlink" title="7.1消息发送流程"></a>7.1消息发送流程</h2><p>Kafka的Producer发送消息采用的是<strong>异步发送</strong>的方式。</p><p>在消息发送的过程中，涉及到了<strong>两个线程——main线程和Sender线程</strong>，以及<strong>一个线程共享变量——RecordAccumulator</strong>。</p><p>main线程将消息发送给RecordAccumulator，</p><p>Sender线程不断从RecordAccumulator中拉取消息发送到Kafka broker。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Kafka%E6%B6%88%E6%81%AF%E5%8F%91%E9%80%81%E6%B5%81%E7%A8%8B.png" alt="Kafka发送消息流程"></p><h2 id="7-2-API"><a href="#7-2-API" class="headerlink" title="7.2 API"></a>7.2 API</h2><p>需要练习</p><h1 id="8-kafka监控"><a href="#8-kafka监控" class="headerlink" title="8.kafka监控"></a>8.kafka监控</h1><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> [atguigu@hadoop102 eagle]$ bin&#x2F;ke.sh start... ...... ...******************************************************************** Kafka Eagle Service has started success.* Welcome, Now you can visit &#39;http:&#x2F;&#x2F;192.168.202.102:8048&#x2F;ke&#39;* Account:admin ,Password:123456******************************************************************** &lt;Usage&gt; ke.sh [start|status|stop|restart|stats] &lt;&#x2F;Usage&gt;* &lt;Usage&gt; https:&#x2F;&#x2F;www.kafka-eagle.org&#x2F; &lt;&#x2F;Usage&gt;*******************************************************************[atguigu@hadoop102 eagle]$#注意端口号8048<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink10_工作需求整理</title>
      <link href="2019/09/07/Flink10_%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%9C%80%E6%B1%82%E6%95%B4%E7%90%86(DataStreamAPI)/"/>
      <url>2019/09/07/Flink10_%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%9C%80%E6%B1%82%E6%95%B4%E7%90%86(DataStreamAPI)/</url>
      
        <content type="html"><![CDATA[<h2 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h2><p>主要针对一些flink的DataStreamAPI的需求简单实现,如分时PV UV,分时TopN,广告推广的恶意点击监控,<br>订单下单未支付监控与实时对账功能(join与connect方式)</p><h2 id="需求1-ClickCountTopN"><a href="#需求1-ClickCountTopN" class="headerlink" title="需求1-ClickCountTopN"></a>需求1-ClickCountTopN</h2><p>每隔5分钟输出最近一小时内点击量最多的前N个商品</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">解决方案<span class="token attr-name">1</span> <span class="token punctuation">=</span> <span class="token attr-value">抽取出业务时间戳，告诉Flink框架基于业务时间做窗口</span><span class="token attr-name">2</span> <span class="token punctuation">=</span> <span class="token attr-value">过滤出点击行为数据</span><span class="token attr-name">3</span> <span class="token punctuation">=</span> <span class="token attr-value">添加滑动窗口(1h,5min),添加窗口结束时间</span><span class="token attr-name">4</span> <span class="token punctuation">=</span> <span class="token attr-value">按照窗口结束时间分组,添加入状态,添加定时器,窗口结束之后进行计算</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties">程序<span class="token attr-name">1.keyby(id)</span> <span class="token punctuation">=</span> <span class="token attr-value">按key分组</span><span class="token attr-name">2.timeWindow(Time.hours(1),</span> <span class="token attr-value">Time.minutes(5)) = 开窗</span><span class="token attr-name">3.aggregate(new</span> <span class="token attr-value">aggre(),new windowfunc())->itemcount(+windowend) </span><span class="token punctuation">=</span>  获取window结束时间4.keyby(windowtime)5.process()->value->list状态+定时(windowend+1)->ontimer(toArray->排序->out.collect())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/FlinkDataStreamTopN%E8%AE%A1%E7%AE%97%E6%A0%B8%E5%BF%83.png" alt="FlinkDataStreamTopN核心代码"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%80%9D%E8%B7%AF%E6%9E%B6%E6%9E%84%E5%9B%BE.png" alt="思路架构图"></p><h2 id="需求2-基于服务器log页面浏览量统计"><a href="#需求2-基于服务器log页面浏览量统计" class="headerlink" title="需求2-基于服务器log页面浏览量统计"></a>需求2-基于服务器log页面浏览量统计</h2><h3 id="2-1-每隔5秒，输出最近10分钟内访问量最多的前N个URL"><a href="#2-1-每隔5秒，输出最近10分钟内访问量最多的前N个URL" class="headerlink" title="2.1 每隔5秒，输出最近10分钟内访问量最多的前N个URL"></a>2.1 每隔5秒，输出最近10分钟内访问量最多的前N个URL</h3><p>其中包含乱序数据的处理</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">目标</span> <span class="token punctuation">=</span> <span class="token attr-value">HotUrlAPP</span>程序0.指定事件时间语义,<span class="token attr-name">1.keyby(id)</span> <span class="token punctuation">=</span> <span class="token attr-value">按key分组</span><span class="token attr-name">2.timeWindow(Time.hours(1),</span> <span class="token attr-value">Time.minutes(5)) = 开窗,指定迟到数据(60秒)</span><span class="token attr-name">3.aggregate(new</span> <span class="token attr-value">aggre(),new windowfunc())->itemcount(+windowend) </span><span class="token punctuation">=</span>  获取window结束时间4.keyby(windowtime)5.process()->value->map状态+6.定时(windowend+1)->ontimer(toArray->排序->out.collect())7.定时(windowend+60)->ontimer(mapstate.clear())<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%8F%8C%E5%AE%9A%E6%97%B6%E5%99%A8%E5%A4%84%E7%90%86%E8%BF%9F%E5%88%B0%E6%95%B0%E6%8D%AE.png" alt="双定时器处理迟到数据"></p><h2 id="需求3-基于埋点日志数据的网络流量统计"><a href="#需求3-基于埋点日志数据的网络流量统计" class="headerlink" title="需求3 基于埋点日志数据的网络流量统计"></a>需求3 基于埋点日志数据的网络流量统计</h2><h3 id="3-1-网站总浏览量-PV-的统计"><a href="#3-1-网站总浏览量-PV-的统计" class="headerlink" title="3.1 网站总浏览量(PV)的统计"></a>3.1 网站总浏览量(PV)的统计</h3><p>网站用PV</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">思路</span><span class="token punctuation">:</span>用户行为日志->pv<span class="token attr-name">pv->new</span> <span class="token attr-value">tuple()</span><span class="token attr-name">new</span> <span class="token attr-value">tuple()->keyby(0)</span>keyby(0)->timewindow(1h)timewindow(1h)->sum()->print()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="C:%5CUsers%5C89388%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210125082519591.png" alt="DataStreamPV核心代码"></p><p><strong>注意:</strong></p><p>​    这样的<code>keyBy(0)</code>是非常容易产生数据倾斜的,根据本身自主的key来讲,很容易产生数据倾斜</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%95%B0%E6%8D%AE%E5%80%BE%E6%96%9C%E7%9A%84%E8%BE%93%E5%87%BA%E7%BB%93%E6%9E%9C.png" alt="数据倾斜的简单尝试"></p><p><strong>数据倾斜解决方案</strong></p><ol><li>在key前面加随机数</li></ol><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%9C%A8key%E5%89%8D%E9%9D%A2%E5%8A%A0%E4%B8%8A%E9%9A%8F%E6%9C%BA%E6%95%B0.png" alt="key前面加上随机数"></p><ol start="2"><li>添加窗口时间,存在window的话使用</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java">userBehavior    <span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">aggregate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">aggre</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token keyword">new</span> <span class="token function">window</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//windowFunc上加上window时间</span>    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span>windowEnd<span class="token punctuation">)</span><span class="token comment">//根据时间分组</span>    <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PvCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">//定时在窗口结束时,使用定时器清空状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>总结</strong>:</p><p>对于简单的==网站的每小时总PV业务需求==来讲,很容易产生数据倾斜的问题,一般来讲,使用两步来进行解决,首先将PV的key字段加上随机数解决倾斜问题</p><p>这样将数据发送到不同的executor进行开窗处理,然后按照<code>windowend</code>重新分配</p><h3 id="3-2-网站独立访客数（UV）的统计-去重计算"><a href="#3-2-网站独立访客数（UV）的统计-去重计算" class="headerlink" title="3.2 网站独立访客数（UV）的统计(去重计算)"></a>3.2 网站独立访客数（UV）的统计(去重计算)</h3><p>另外一个统计流量的重要指标是网站的独立访客数（Unique Visitor，UV）。UV指的是一段时间（比如一小时）内访问网站的总人数，1天内同一访客的多次访问只记录为一个访客。</p><p>通过<code>IP</code>和cookie一般是判断UV值的两种方式。</p><p>当客户端第一次访问某个网站服务器的时候，网站服务器会给这个客户端的电脑发出一个Cookie，通常放在这个客户端电脑的C盘当中。</p><p>在这个Cookie中会分配一个独一无二的编号，这其中会记录一些访问服务器的信息，如访问时间，访问了哪些页面等等。</p><p>当你下次再访问这个服务器的时候，服务器就可以直接从你的电脑中找到上一次放进去的Cookie文件，并且对其进行一些更新，但那个独一无二的编号是不会变的。</p><p>当然，对于<code>UserBehavior</code>数据源来说，我们直接可以根据<code>userId</code>来区分不同的用户。</p><h2 id="需求4-市场营销的监控与统计"><a href="#需求4-市场营销的监控与统计" class="headerlink" title="需求4 市场营销的监控与统计"></a>需求4 市场营销的监控与统计</h2><h3 id="4-1-App市场推广统计"><a href="#4-1-App市场推广统计" class="headerlink" title="4.1 App市场推广统计"></a>4.1 App市场推广统计</h3><p>每隔5秒钟统计最近一个小时按照渠道的推广量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span>  <span class="token keyword">class</span> <span class="token class-name">MarketBehaviorSource</span> <span class="token keyword">implements</span> <span class="token class-name">ParallelSourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MarketUserBehavior</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 是否运行的标识位</span>    <span class="token keyword">private</span> <span class="token class-name">Boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token comment">// 定义用户行为和推广渠道的集合</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> behaviorList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"CLICK"</span><span class="token punctuation">,</span> <span class="token string">"DOWNLOAD"</span><span class="token punctuation">,</span> <span class="token string">"INSTALL"</span><span class="token punctuation">,</span> <span class="token string">"UNINSTALL"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> channelList <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">asList</span><span class="token punctuation">(</span><span class="token string">"app store"</span><span class="token punctuation">,</span> <span class="token string">"wechat"</span><span class="token punctuation">,</span> <span class="token string">"weibo"</span><span class="token punctuation">,</span> <span class="token string">"tieba"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 定义随机数发生器</span>    <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceFunction</span><span class="token punctuation">.</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">MarketUserBehavior</span><span class="token punctuation">></span></span> ctx<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>running<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">// 随机生成所有字段</span>            <span class="token class-name">Long</span> id <span class="token operator">=</span> random<span class="token punctuation">.</span><span class="token function">nextLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> behavior <span class="token operator">=</span> behaviorList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>behaviorList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> channel <span class="token operator">=</span> channelList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span>channelList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Long</span> timestamp <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 发出数据</span>            ctx<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MarketUserBehavior</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> behavior<span class="token punctuation">,</span> channel<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">100L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        running <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用典型的分组开窗,加<code>windowend</code>时间,然后聚合统计广告推送次数</p><h3 id="4-2-广告点击黑名单监控"><a href="#4-2-广告点击黑名单监控" class="headerlink" title="4.2 广告点击黑名单监控"></a>4.2 广告点击黑名单监控</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E8%BF%87%E6%BB%A4%E5%B9%BF%E5%91%8A%E7%82%B9%E5%87%BB%E8%B6%85%E8%BF%87.png" alt="广告点击黑名单"></p><h2 id="需求5-恶意登录监控-CEP"><a href="#需求5-恶意登录监控-CEP" class="headerlink" title="需求5 恶意登录监控(CEP)"></a>需求5 恶意登录监控(CEP)</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%AE%9A%E4%B9%89%E6%A8%A1%E5%BC%8F%E5%BA%8F%E5%88%97.png" alt="定义模式序列"></p><p>升级版</p><p>循环模式+严格近邻</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%BE%AA%E7%8E%AF%E6%A8%A1%E5%BC%8F%E9%BB%98%E8%AE%A4%E9%9D%9E%E4%B8%A5%E6%A0%BC%E8%BF%91%E9%82%BB.png" alt="非严格近邻"></p><h2 id="需求6-订单支付实时监控"><a href="#需求6-订单支付实时监控" class="headerlink" title="需求6 订单支付实时监控"></a>需求6 订单支付实时监控</h2><h3 id="6-1-15分钟内未支付订单监控"><a href="#6-1-15分钟内未支付订单监控" class="headerlink" title="6.1 15分钟内未支付订单监控"></a>6.1 15分钟内未支付订单监控</h3><p>在15分钟内，事件“create”与“pay”非严格紧邻</p><p><img src="C:%5CUsers%5C89388%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20210127134103898.png" alt="定义模式序列"></p><p>触发侧输出流</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BE%A7%E8%BE%93%E5%87%BA%E6%B5%81.png" alt="触发到测输出流的数据"></p><p>测输出流函数与主流函数</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%B5%8B%E8%BE%93%E5%87%BA%E6%B5%81%E4%B8%8E%E4%B8%BB%E6%B5%81%E5%87%BD%E6%95%B0.png" alt="测输出流与主流函数"></p><p><strong>使用状态方程思路</strong></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">思路</span><span class="token punctuation">:</span><span class="token attr-name">keyBy(OrderEvent</span><span class="token punctuation">:</span><span class="token attr-value">:getOrderId);</span><span class="token attr-name">keyedStream.process(new</span> <span class="token attr-value">OrderTimeOutProcessFunc());</span>如果遇见create就创建定时器,然后15分钟内遇见pay就删除定时器,否则使用定时器的侧输出流输出超时订单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E7%8A%B6%E6%80%81%E6%96%B9%E7%A8%8B%E6%80%9D%E8%B7%AF.png" alt="状态方程思路"></p><h3 id="6-2-实时对账功能的实现"><a href="#6-2-实时对账功能的实现" class="headerlink" title="6.2 实时对账功能的实现"></a>6.2 实时对账功能的实现</h3><p>将支付与到账进行实时对账,防止出现金融问题</p><p>对于订单支付事件，用户支付完成其实并不算完，我们还得确认平台账户上是否到账了。而往往这会来自不同的日志信息，所以我们要同时读入两条流的数据来做合并处理。这里我们利用connect将两条流进行连接，然后用自定义的<code>CoProcessFunction</code>进行处理。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/connect%E6%B5%81%E7%9A%84%E4%BD%BF%E7%94%A8.png" alt="双流join"></p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">思路</span><span class="token punctuation">:</span>对两个流进行处理,一个是ReceiptEvent一个事OrderEvent使用connect进行流连接-->对于order事件然后判断支付数据(orderrEvent)<span class="token attr-name">如果receipt</span> <span class="token punctuation">=</span> <span class="token attr-value">null -->支付数据先到,到账数据还没到,注册定时器,将orderEevent放入状态</span><span class="token attr-name">如果receipt</span> <span class="token attr-value">!= null -->到账数据先到,删除到账先到的[定时器],输出,[清空]流水号状态</span>-->对于receipt事件<span class="token attr-name">如果order</span> <span class="token attr-value">!= null -->正常数据 删除order定时器 清空状态输出</span><span class="token attr-name">如果order</span> <span class="token punctuation">=</span> <span class="token attr-value">null -->到账数据先到/注册网络延迟定时器/等待下单数据 将receipt放入状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%85%B7%E4%BD%93%E7%9A%84%E5%88%A4%E6%96%AD%E9%80%BB%E8%BE%91.png" alt="connect流具体判断逻辑"></p><p><strong>实时对账功能的实现(join)</strong></p><p>flink只有<code>innerjoin</code></p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/interval-join.svg" alt="flink的innnerjoin示意图"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//3.按照事务ID分组之后进行Join</span>       <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">OrderEvent</span><span class="token punctuation">,</span> <span class="token class-name">ReceiptEvent</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> orderEventDS<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">OrderEvent</span><span class="token operator">::</span><span class="token function">getTxId</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">intervalJoin</span><span class="token punctuation">(</span>receiptEventDS<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">ReceiptEvent</span><span class="token operator">::</span><span class="token function">getTxId</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">between</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>               <span class="token punctuation">.</span><span class="token function">process</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PayReceiptJoinFunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%AE%9E%E6%97%B6%E5%AF%B9%E8%B4%A6%E7%9A%84%E5%8F%8C%E6%B5%81join.png" alt="实时对账的双流join"></p><p>双流join或者connect/join</p><p>同时要注意watermark的跳变</p><p>==问题== 双流join解决了watermark跳变问题么</p><p>当出现采集数据出现网络动荡的时候</p>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JDBC</title>
      <link href="2019/06/23/JDBC%E6%80%BB%E7%BB%93/"/>
      <url>2019/06/23/JDBC%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="JDBC"><a href="#JDBC" class="headerlink" title="JDBC"></a>JDBC</h1><p>Java Database Connectivity / JDBC</p><h2 id="1-本质"><a href="#1-本质" class="headerlink" title="1.本质"></a>1.本质</h2><p>sun公司制定的一套接口(interface)</p><p>接口都有调用者跟实现者</p><p>面向接口调用,面向接口写实现类,面向接口编程</p><h3 id="1-1-面向接口编程为什么要面向接口编程"><a href="#1-1-面向接口编程为什么要面向接口编程" class="headerlink" title="1.1 面向接口编程为什么要面向接口编程?"></a>1.1 面向接口编程为什么要面向接口编程?</h3><p>解耦合,降低程序的耦合度,提高程序的拓展力</p><p>多态机制就是非常典型的 面向抽象编程</p><p>接口是完全抽象编程,可以让程序更灵活</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>sql<span class="token punctuation">.</span></span><span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="1-2-JDBC接口-是-一套interface"><a href="#1-2-JDBC接口-是-一套interface" class="headerlink" title="1.2 JDBC接口 是 一套interface"></a>1.2 JDBC接口 是 一套interface</h3><p>厂家将操作通道通过实现java的JDBC 的接口的方法写入,然后使用者直接调用厂家实现的java包既可以使用</p><p>厂家实现的JDBC称为驱动,MySQL驱动,Oracle驱动,所有的驱动都是jar包</p><p>下载数据库需要去厂家下载</p><h2 id="2-模拟JDBC本质"><a href="#2-模拟JDBC本质" class="headerlink" title="2.模拟JDBC本质"></a>2.模拟JDBC本质</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/jdbc1.png" alt="1602499290915"></p><p>数据库厂家是JDBC的实现者.我们是JDBC的调用者,SUN公司是接口定制者</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//SUN公司提供接口</span><span class="token keyword">public</span> <span class="token keyword">interface</span> JDBC <span class="token punctuation">&#123;</span>    <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//MySQL提供的接口</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MySQL</span> <span class="token keyword">implements</span> JDBC<span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"连接MySQL数据库成功"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//只需要面向接口编程,调用MySQL驱动的.class实施具体,然后直接使用</span><span class="token comment">//SUN公司提供方法就可以</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">MySQL</span> mySQL <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MySQL</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mySQL<span class="token punctuation">.</span><span class="token function">getConnection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-源代码-HBase里的JDBC理解"><a href="#2-1-源代码-HBase里的JDBC理解" class="headerlink" title="2.1 源代码:HBase里的JDBC理解"></a>2.1 源代码:HBase里的JDBC理解</h3><p>去HBase看源代码</p><p>过程</p><p>第一步:注册驱动</p><p>第二步:获取连接</p><p>第三步:获取数据库操作对象(专门执行sql语句的对象)</p><p>第四步:执行sql语句(DDL,DML)</p><p>第五步:处理查询的结果集</p><p>第六步:释放资源</p><p>使用完资源之后一定要关闭资源,java和数据库数据进程间的通信,开启之后一定要关闭</p><p>注册驱动-获取连接-获得操作对象-执行语句-处理结果-释放资源</p><h2 id="3-注册驱动测试连接"><a href="#3-注册驱动测试连接" class="headerlink" title="3.注册驱动测试连接"></a>3.注册驱动测试连接</h2><h3 id="3-1百度讲URL"><a href="#3-1百度讲URL" class="headerlink" title="3.1百度讲URL"></a>3.1百度讲URL</h3><p>URL</p><h4 id="jdbc-mysql-协议"><a href="#jdbc-mysql-协议" class="headerlink" title="jdbc:mysql:协议"></a>jdbc:mysql:协议</h4><p>什么是协议,有什么用</p><p>是什么通讯协议</p><p>是通信之前就提前定好的数据传送格式</p><p>数据包具体怎么传数据,格式提前订好</p><p>127.0.0.1 IP地址</p><p>3306 端口号</p><p>jdbc 数据库的实例名</p><p>localhost 与 127.0.0.1 都是本地IP</p><h3 id="3-2-第二种类加载的方法"><a href="#3-2-第二种类加载的方法" class="headerlink" title="3.2 第二种类加载的方法"></a>3.2 第二种类加载的方法</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/jdbc2.png" alt="1602506259856"></p><p>本身具有类加载的动作,</p><p>注册驱动的第二种方式,字符串可以写在配置文件中</p><h2 id="4-DML与DDL的操作"><a href="#4-DML与DDL的操作" class="headerlink" title="4.DML与DDL的操作"></a>4.DML与DDL的操作</h2><p>DML返回int</p><p>提交方式==executeupdate==</p><p>查询返回==resultset==(结果集合)</p><p>提交方法==executequery==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> flag <span class="token operator">=</span> resultset<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">==</span><span class="token operator">></span>返回ture<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>resultset的迭代器集合</p><h2 id="5-回顾"><a href="#5-回顾" class="headerlink" title="5.回顾"></a>5.回顾</h2><p>connection 数据库连接对象</p><p>statement,获得数据库操作对象</p><p>可以执行sql语句</p><p>executeUpdate int (影响条数)</p><p>executeQuery (resultset,处理查询结果集)</p><h2 id="6-行级锁"><a href="#6-行级锁" class="headerlink" title="6.行级锁"></a>6.行级锁</h2><p>for update 悲观锁 锁住</p><p>乐观锁多线程并发都可以进行修改,都可以执行,只不过有版本号</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink09_CEP</title>
      <link href="2019/06/07/Flink09_CEP/"/>
      <url>2019/06/07/Flink09_CEP/</url>
      
        <content type="html"><![CDATA[<p>本文参考:</p><p>官网</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>ci<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>org<span class="token operator">/</span>projects<span class="token operator">/</span>flink<span class="token operator">/</span>flink<span class="token operator">-</span>docs<span class="token operator">-</span>release<span class="token operator">-</span><span class="token number">1.12</span><span class="token operator">/</span>zh<span class="token operator">/</span>dev<span class="token operator">/</span>libs<span class="token operator">/</span>cep<span class="token punctuation">.</span>html<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>阿里云社区(精品)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">https<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>developer<span class="token punctuation">.</span>aliyun<span class="token punctuation">.</span>com<span class="token operator">/</span>article<span class="token operator">/</span><span class="token number">738451</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="0x0开始"><a href="#0x0开始" class="headerlink" title="0x0开始"></a>0x0开始</h1><h2 id="1-概览"><a href="#1-概览" class="headerlink" title="1.概览"></a>1.概览</h2><p>CEP的意思是复杂事件处理，例如：起床–&gt;洗漱–&gt;吃饭–&gt;上班等一系列串联起来的事件流形成的模式称为CEP。如果发现某一次起床后没有刷牙洗脸亦或是吃饭就直接上班，就可以把这种非正常的事件流匹配出来进行分析，看看今天是不是起晚了。</p><p><img src="https://ucc.alicdn.com/pic/developer-ecology/87a308de567546bea7a3ed55d97e66b3.png" alt="CEP应用实例"></p><p>复杂事件处理（Complex Event Processing，CEP）API的基本架构</p><pre class="mermaid">graph LRA[CEP]-->B[格式:Pattern.begin]-->H[时间上下文]B-->G[迟到数据处理]A-->C[next]-->E[时间作用域:within]A-->D[followedBy]-->E[时间作用域:within]</pre><p>是构建在 DataStream API上的，首先需要用户创建定义一个个pattern，然后通过链表将由前后逻辑关系的pattern串在一起，构成模式匹配的逻辑表达。</p><p>然后需要用户利用NFACompiler，将模式进行分拆，创建出NFA(非确定有限自动机)对象，NFA包含了该次模式匹配的各个状态和状态间转换的表达式。整个示意图就像如下：</p><h2 id="2-CEP的使用步骤"><a href="#2-CEP的使用步骤" class="headerlink" title="2.CEP的使用步骤"></a>2.CEP的使用步骤</h2><ol><li><p>首先需要定义一个<strong>模式</strong>(<strong>Pattern</strong>)</p></li><li><p>接着把定义好的模式绑定在DataStream上</p></li><li><p>最后就可以在具有CEP功能的DataStream上将匹配的结果进行处理</p></li></ol><h2 id="3-Flink-CEP-应用场景"><a href="#3-Flink-CEP-应用场景" class="headerlink" title="3.Flink CEP 应用场景"></a>3.Flink CEP 应用场景</h2><ul><li>风险控制：对用户异常行为模式进行实时检测，当一个用户发生了不该发生的行为，判定这个用户是不是有违规操作的嫌疑。</li><li>策略营销：用预先定义好的规则对用户的行为轨迹进行实时跟踪，对行为轨迹匹配预定义规则的用户实时发送相应策略的推广。</li><li>运维监控：灵活配置多指标、多依赖来实现更复杂的监控模式。</li></ul><h2 id="4-Flink-CEP原理"><a href="#4-Flink-CEP原理" class="headerlink" title="4.Flink CEP原理"></a>4.Flink CEP原理</h2><p><img src="https://ucc.alicdn.com/pic/developer-ecology/f202d5b225254cb38bbd63ae7fa38256.png" alt="FlinkCEP原理"></p><p>Flink CEP内部是用<strong>NFA（非确定有限自动机）</strong>来实现的，由点和边组成的一个状态图，以一个初始状态作为起点，经过一系列的中间状态，达到终态。点分为<strong>起始状态</strong>、<strong>中间状态</strong>、<strong>最终状态</strong>三种，边分为<strong>take</strong>、<strong>ignore</strong>、<strong>proceed</strong>三种。</p><ul><li><strong>take</strong>：必须存在一个条件判断，当到来的消息满足take边条件判断时，把这个消息放入结果集，将状态转移到下一状态。</li><li><strong>ignore</strong>：当消息到来时，可以忽略这个消息，将状态自旋在当前不变，是一个自己到自己的状态转移。 </li><li><strong>proceed</strong>：又叫做状态的空转移，当前状态可以不依赖于消息到来而直接转移到下一状态。举个例子，当用户购买商品时，如果购买前有一个咨询客服的行为，需要把咨询客服行为和购买行为两个消息一起放到结果集中向下游输出；如果购买前没有咨询客服的行为，只需把购买行为放到结果集中向下游输出就可以了。 也就是说，如果有咨询客服的行为，就存在咨询客服状态的上的消息保存，如果没有咨询客服的行为，就不存在咨询客服状态的上的消息保存，咨询客服状态是由一条proceed边和下游的购买状态相连。</li></ul><h1 id="0x1模式API"><a href="#0x1模式API" class="headerlink" title="0x1模式API"></a>0x1模式API</h1><p>目标：从有序的简单事件流中发现一些高阶特征</p><p>输入：一个或多个由简单事件构成的事件流</p><p>处理：识别简单事件之间的内在联系，多个符合一定规则的简单事件构成复杂事件</p><p>输出：满足规则的复杂事件</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/CEP%E5%AE%9E%E7%8E%B0%E7%9A%84%E5%8A%9F%E8%83%BD.png" alt="CEP实现的功能"></p><p>处理事件的规则，被叫做“模式”（Pattern）</p><p>Flink CEP 提供了 Pattern API，用于对输入流数据进行复杂事件规则定义，用来提取符合规则的事件序列</p><h1 id="0x2检测模式PatternAPI"><a href="#0x2检测模式PatternAPI" class="headerlink" title="0x2检测模式PatternAPI"></a>0x2检测模式PatternAPI</h1><p>个体模式（Individual Patterns）</p><p>组成复杂规则的每一个单独的模式定义，就是“个体模式”</p><p>组合模式（Combining Patterns，也叫模式序列）</p><p>很多个体模式组合起来，就形成了整个的模式序列</p><p>模式序列必须以一个“初始模式”开始</p><p>模式组（Groups of patterns）</p><p>将一个模式序列作为条件嵌套在个体模式里，成为一组模式</p><h1 id="0x3CEP库中的时间"><a href="#0x3CEP库中的时间" class="headerlink" title="0x3CEP库中的时间"></a>0x3CEP库中的时间</h1><p>当一个模式通过 within 关键字定义了检测窗口时间时，部分事件序列可能因为超过窗口长度而被丢弃；为了能够处理这些超时的部分匹配，select 和 flatSelect API 调用允许指定超时处理程序</p><p>超时处理程序会接收到目前为止由模式匹配到的所有事件，由一个 OutputTag 定义接收到的超时事件序列</p><p>在<code>CEP</code>中，事件的处理顺序很重要。在使用事件时间时，为了保证事件按照正确的顺序被处理，一个事件到来后会先被放到一个缓冲区中， 在缓冲区里事件都按照时间戳从小到大排序，当水位线到达后，缓冲区中所有小于水位线的事件被处理。这意味着水位线之间的数据都按照时间戳被顺序处理。</p><p><strong>注意</strong> 这个库假定按照事件时间时水位线一定是正确的。</p><p>为了保证跨水位线的事件按照事件时间处理，Flink CEP库假定<em>水位线一定是正确的</em>，并且把时间戳小于最新水位线的事件看作是<em>晚到</em>的。 晚到的事件不会被处理。你也可以指定一个侧输出标志来收集比最新水位线晚到的事件，你可以这样做</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">PatternStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">></span></span> patternStream <span class="token operator">=</span> CEP<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span>input<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lateDataOutputTag <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"late-data"</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ComplexEvent</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> patternStream    <span class="token punctuation">.</span><span class="token function">sideOutputLateData</span><span class="token punctuation">(</span>lateDataOutputTag<span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span>        <span class="token keyword">new</span> <span class="token class-name">PatternSelectFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Event</span><span class="token punctuation">,</span> <span class="token class-name">ComplexEvent</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> lateData <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span>lateDataOutputTag<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x4CEP算例"><a href="#0x4CEP算例" class="headerlink" title="0x4CEP算例"></a>0x4CEP算例</h1><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>patternapi</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">SensorReading</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javassist<span class="token punctuation">.</span>compiler<span class="token punctuation">.</span>ast<span class="token punctuation">.</span></span><span class="token class-name">CallExpr</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>cep<span class="token punctuation">.</span></span>CEP<span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>cep<span class="token punctuation">.</span></span><span class="token class-name">PatternSelectFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>cep<span class="token punctuation">.</span></span><span class="token class-name">PatternStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>cep<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span></span><span class="token class-name">Pattern</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>cep<span class="token punctuation">.</span>pattern<span class="token punctuation">.</span>conditions<span class="token punctuation">.</span></span><span class="token class-name">SimpleCondition</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">KeyedStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Iterator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">List</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Set</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-20 9:44 * 需求,探测传感器,五秒内连续两次温度超过30度 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink01_CEP_Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> source <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 个体模式-singleton/looping 找出5秒内,连续两次温度超过30度报警 todo next</span>        <span class="token class-name">Pattern</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> pattern <span class="token operator">=</span> <span class="token class-name">Pattern</span><span class="token punctuation">.</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token function">begin</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span> sensorReading<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token string">"mid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">where</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SimpleCondition</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">filter</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span> sensorReading<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">within</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5000L</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 将数据流映射为样例类</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> operator <span class="token operator">=</span> source<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">SensorReading</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">String</span> id <span class="token operator">=</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> ts <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> temp <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> ts<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 将流进行按key分组</span>        <span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> keyedStream <span class="token operator">=</span> operator<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 将pattern作用于流</span>        <span class="token class-name">PatternStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> patternStream <span class="token operator">=</span> CEP<span class="token punctuation">.</span><span class="token function">pattern</span><span class="token punctuation">(</span>keyedStream<span class="token punctuation">,</span> pattern<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x5 将流选择出来</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> select <span class="token operator">=</span> patternStream<span class="token punctuation">.</span><span class="token function">select</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PatternSelectFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">select</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span><span class="token punctuation">></span></span> map<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//注意这个数据格式Map&lt;定义的模式名,符合模式名的事件列表></span>                <span class="token class-name">SensorReading</span> start <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">SensorReading</span> end <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"mid"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                return start.get(0).getId()+"在"+start.get(0).getTs()+"-"+end.get(0).getTs()+"温度超过30度不下降,当前温度"+end.get(0).getTemp();</span>                <span class="token keyword">return</span> start<span class="token operator">+</span><span class="token string">"-"</span><span class="token operator">+</span>end<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x6 打印</span>        select<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x7 执行计划</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> flink </category>
          
      </categories>
      
      
        <tags>
            
            <tag> flink </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop的入门学习笔记</title>
      <link href="2019/04/16/Hadoop%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/"/>
      <url>2019/04/16/Hadoop%E7%AC%94%E8%AE%B0%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Hadoop入门"><a href="#Hadoop入门" class="headerlink" title="Hadoop入门"></a>Hadoop入门</h1><h2 id="学习目标："><a href="#学习目标：" class="headerlink" title="学习目标："></a>学习目标：</h2><ul><li> 了解大数据的概念以及应用场景和发展前景（这部分还是会讲故事即可）</li><li> 初步掌握大数据部门业务分析流程以及完整的大数据部门的组织架构（还是了解讲故事…）</li><li> 通俗易懂的说明白Hadoop的概念以及发展历史</li><li> 掌握Hadoop的前后的版本迭代更新以及Hadoop的优势</li><li> <strong>重点理解Hadoop框架的三大组成部分，并准确的表述各自的作用</strong></li><li> 掌握大数据生态的概念</li><li> <strong>熟练操作Hadoop运行环境的搭建（重点掌握）</strong></li><li> <strong>熟练掌握Hadoop的运行模式（重点掌握）</strong></li><li> 掌握Hadoop2.x和Hadoop3.x版本的差异</li><li> 能够对Hadoop的源码进行编译</li><li> <strong>掌握常见的错误和问题（重点）</strong></li></ul><h2 id="一、大数据概论"><a href="#一、大数据概论" class="headerlink" title="一、大数据概论"></a>一、大数据概论</h2><p><strong>前言：</strong>这部分主要讲解的就是大数据的概念，以及大数据的应用领域和发展前景，要求大家能够用自己的话去描述，讲给别人听即可！</p><h3 id="1-大数据的发展史"><a href="#1-大数据的发展史" class="headerlink" title="1.大数据的发展史"></a>1.大数据的发展史</h3><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">In pioneer days they used oxen for heavy pulling, and when one ox couldn’t budge a log,they didn’t try to grow a larger ox. We shouldn’t be trying for bigger computers, but formore systems of computers.—Grace Hopper<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-大数据的概念"><a href="#2-大数据的概念" class="headerlink" title="2.大数据的概念"></a>2.大数据的概念</h3><p>​    大数据（big data），IT行业术语，是指无法在一定时间范围内用常规软件工具进行捕捉、管理和处理的数据集合，是需要新处理模式才能具有更强的决策力、洞察发现力和流程优化能力的海量、高增长率和多样化的信息资产。</p><p>​    简单的讲 <strong>大数据</strong> 就是海量数据，我们想要利用这海量数据，必然要对它进行<strong>存储</strong> ，然后又想让其实现价值，必须得通过 <strong>分析计算</strong> 得到结果，而分析计算也不能没有时间限制，那就得在合理的时间内分析计算。最后一句话就是 <strong>大数据技术就是来完成海量数据的存储以及对海量数据在合理时间内进行分析运算的</strong></p><p>​    最小的基本单位是bit，按顺序给出所有单位：bit、Byte、KB、MB、GB、TB、PB、EB、ZB、YB、BB、NB、DB，它们按照进率1024（2的十次方）来计算：</p><p>8bit= 1Byte</p><p>1KB= 1,024 Bytes</p><p>1MB= 1,024 KB = 1,048,576 Bytes</p><p>1GB= 1,024 MB = 1,048,576 KB</p><p><strong>1TB= 1,024 GB = 1,048,576 MB</strong></p><p><strong>1PB= 1,024 TB = 1,048,576 GB</strong></p><p><strong>1EB= 1,024 PB = 1,048,576 TB</strong></p><p>1ZB= 1,024 EB = 1,048,576 PB</p><p>1YB= 1,024 ZB = 1,048,576 EB</p><p>1BB= 1,024 YB = 1,048,576 ZB</p><p>1NB= 1,024 BB = 1,048,576 YB</p><p>1 DB = 1,024 NB = 1,048,576 BB</p><h3 id="3-大数据的特点"><a href="#3-大数据的特点" class="headerlink" title="3.大数据的特点"></a>3.大数据的特点</h3><p>​    <strong>3.1大量（Volume）</strong></p><p>​    想要贴近大数据的概念，必然要求海量数据，用量化的单位来描述的话至少也得PB级别的起步。</p><p>​    <strong>3.2高速（Velocity）</strong></p><p>​    所谓的高速是指海量数据产生的速度是非常快的，例如 <strong>天猫双十一</strong> 大约1分钟左右成交100亿的，100亿背后所涉及的数据可想而知。同时数据产生速度的也要求我们对数据的处理的效率要跟上节奏才可以。</p><p>​    <strong>3.3多样（Variety）</strong></p><p>​    多样是指数据的体现形式是多样化的，大体分为三种形式  <strong>结构化数据</strong>  <strong>半结构化数据</strong>  <strong>非结构化化数据</strong>，这些所说的基本上都是原始数据，我们将来要想地数据更高效的运算都会对原始数据进行清洗。</p><p>​    <strong>3.4低价值密度（Value）</strong></p><p>​    在通常情况下，面对海量数据，往往我们需要的可能只是其中的一小部分，这就是说 <strong>价值密度的高低和数据总量是成反比的</strong> 这也是大数据比较显著的一个特点，所以 高效快速的对有价值的数据进行<strong>“提纯”</strong> 成为目前大数据领域一个攻坚破阻的难题。</p><h3 id="4-大数据的应用场景"><a href="#4-大数据的应用场景" class="headerlink" title="4.大数据的应用场景"></a>4.大数据的应用场景</h3><p>​    本章节主要了解大数据的真实应用场景和领域。这部分大家作为了解即可，推荐下面一片文章作为参考！</p><p>​    <a href="https://www.jianshu.com/p/bb989c2fbc76">https://www.jianshu.com/p/bb989c2fbc76</a></p><h3 id="5-大数据的发展前景"><a href="#5-大数据的发展前景" class="headerlink" title="5.大数据的发展前景"></a>5.大数据的发展前景</h3><p>​    大数据行业的前景毋庸置疑是非常好的，从国家政策的推动再到行业的人才缺口以及未来的发展趋势都让大数据成为一个很有前途的专业。但是还是要求大家稳扎稳打 技术到家 才能翻江倒海！</p><h3 id="6-大数据部门业务流程分析"><a href="#6-大数据部门业务流程分析" class="headerlink" title="6.大数据部门业务流程分析"></a>6.大数据部门业务流程分析</h3><p>​    本小节主要介绍在工作当中我们将来完成一个项目的业务流程，我们大数据的工作在哪一环节崭露头角！我们大数据主要任务就是根据具体的需求对数据进行存储和分析运算，最后获取想要的数据结果。</p><h3 id="7-大数据部门组织结构（重点）"><a href="#7-大数据部门组织结构（重点）" class="headerlink" title="7.大数据部门组织结构（重点）"></a>7.大数据部门组织结构（重点）</h3><p>​    这一小节主要阐述一个公司通常大数据部门的智能分布，可以参考下图：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E5%A4%A7%E6%95%B0%E6%8D%AE%E9%83%A8%E9%97%A8%E7%9A%84%E7%BB%84%E7%BB%87%E6%9E%B6%E6%9E%84.png" alt="大数据部门组织结构"></p><h2 id="二、从Hadoop框架讨论大数据生态"><a href="#二、从Hadoop框架讨论大数据生态" class="headerlink" title="二、从Hadoop框架讨论大数据生态"></a>二、从Hadoop框架讨论大数据生态</h2><h3 id="1-Hadoop的概念"><a href="#1-Hadoop的概念" class="headerlink" title="1. Hadoop的概念"></a>1. Hadoop的概念</h3><p>​    <strong>理解Hadoop是什么要从两个层面去入手：</strong></p><p>​    <strong>1.1 狭义：</strong>Hadoop是Apache旗下的一个用java语言实现开源软件框架，是一个开发和运行处理大规模数据的软件平台。允许使用简单的编程模型在大量计算机集群上对大型数据集进行分布式处理。它的核心组件有：</p><p>HDFS（分布式文件系统）：解决海量数据存储</p><p>YARN（作业调度和集群资源管理的框架）：解决资源任务调度</p><p>MAPREDUCE（分布式运算编程框架）：解决海量数据计算</p><p>​    <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop图表.png" alt="image-20200815231415210" style="zoom:50%;" /></p><p>​    <strong>1.2 广义：</strong>广义上来说，Hadoop通常是指一个更广泛的概念——Hadoop生态圈。 </p><p>​    <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E7%94%9F%E6%80%81%E5%9C%88.png" alt="hadoop生态圈"></p><p>当下的Hadoop已经成长为一个庞大的体系，随着生态系统的成长，新出现的项目越来越多，其中不乏一些非Apache主管的项目，这些项目对HADOOP是很好的补充或者更高层的抽象。比如：</p><p>HDFS：分布式文件系统</p><p>MAPREDUCE：分布式运算程序开发框架</p><p>HIVE：基于HADOOP的分布式数据仓库，提供基于SQL的查询数据操作</p><p>HBASE：基于HADOOP的分布式海量数据库</p><p>ZOOKEEPER：分布式协调服务基础组件</p><p>Mahout：基于mapreduce/spark/flink等分布式运算框架的机器学习算法库</p><p>OOZIE：工作流调度框架</p><p>Sqoop：数据导入导出工具（比如用于mysql和HDFS之间）</p><p>FLUME：日志数据采集框架</p><p>IMPALA：基于hive的实时sql查询分析</p><h3 id="2-Hadoop的发展史"><a href="#2-Hadoop的发展史" class="headerlink" title="2. Hadoop的发展史"></a>2. Hadoop的发展史</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E5%88%9B%E5%BB%BA%E8%80%85.png" alt="hadoop的创建者"></p><ol><li><p>2002年10月，Doug Cutting和Mike Cafarella创建了开源网页爬虫项目Nutch。</p></li><li><p>2003年10月，Google发表Google File System论文。</p></li><li><p>2004年7月，Doug Cutting和Mike Cafarella在Nutch中实现了类似GFS的功能，即后来HDFS的前身。</p></li><li><p>2004年10月，Google发表了MapReduce论文。</p></li><li><p>2005年2月，Mike Cafarella在Nutch中实现了MapReduce的最初版本。</p></li><li><p>2005年12月，开源搜索项目Nutch移植到新框架，使用MapReduce和NDFS在20个节点稳定运行。</p></li><li><p>2006年1月，Doug Cutting加入雅虎，Yahoo!提供一个专门的团队和资源将Hadoop发展成一个可在网络上运行的系统。</p></li><li><p>2006年2月，Apache Hadoop项目正式启动以支持MapReduce和HDFS的独立发展。</p></li><li><p>2006年3月，Yahoo!建设了第一个Hadoop集群用于开发。</p></li></ol><p>10.2006年4月，第一个Apache Hadoop发布。</p><p>11.2006年11月，Google发表了Bigtable论文，激起了Hbase的创建。</p><p>12.2007年10月，第一个Hadoop用户组会议召开，社区贡献开始急剧上升。</p><p>13.2007年，百度开始使用Hadoop做离线处理。</p><p>14.2007年，中国移动开始在“大云”研究中使用Hadoop技术。</p><p>15.2008年，淘宝开始投入研究基于Hadoop的系统——云梯，并将其用于处理电子商务相关数据。</p><p>16.2008年1月，Hadoop成为Apache顶级项目。</p><p>17.2008年2月，Yahoo!运行了世界上最大的Hadoop应用，宣布其搜索引擎产品部署在一个拥有1万个内核的Hadoop集群上。</p><p>18.2008年4月，在900个节点上运行1TB排序测试集仅需209秒，成为世界最快。</p><p>19.2008年8月，第一个Hadoop商业化公司Cloudera成立。</p><p>20.2008年10月，研究集群每天装载10TB的数据。</p><p>21.2009 年3月，Cloudera推出世界上首个Hadoop发行版——CDH（Cloudera’s Distribution including Apache Hadoop）平台，完全由开放源码软件组成。</p><p>22.2009年6月，Cloudera的工程师Tom White编写的《Hadoop权威指南》初版出版，后被誉为Hadoop圣经。</p><p>23.2009年7月 ，Hadoop Core项目更名为Hadoop Common;</p><p>24.2009年7月 ，MapReduce 和 Hadoop Distributed File System (HDFS) 成为Hadoop项目的独立子项目。</p><p>25.2009年8月，Hadoop创始人Doug Cutting加入Cloudera担任首席架构师。</p><p>26.2009年10月，首届Hadoop World大会在纽约召开。</p><p>27.2010年5月，IBM提供了基于Hadoop 的大数据分析软件——InfoSphere BigInsights，包括基础版和企业版。</p><p>28.2011年3月，Apache Hadoop获得Media Guardian Innovation Awards媒体卫报创新奖</p><p>29.2012年3月，企业必须的重要功能HDFS NameNode HA被加入Hadoop主版本。</p><p>30.2012年8月，另外一个重要的企业适用功能YARN成为Hadoop子项目。</p><p>31.2014年2月，Spark逐渐代替MapReduce成为Hadoop的缺省执行引擎，并成为Apache基金会顶级项目。</p><p>2017年12月，Release 3.0.0 generally available</p><h3 id="3-Hadoop三大发行版本"><a href="#3-Hadoop三大发行版本" class="headerlink" title="3. Hadoop三大发行版本"></a>3. Hadoop三大发行版本</h3><p><strong>3.1 Apache</strong></p><p>企业实际使用并不多。最原始（基础）版本。这是学习hadoop的基础。</p><p><strong>3.2 cloudera</strong></p><p>对hadoop的升级，打包，开发了很多框架。flume、hue、impala都是这个公司开发</p><p>2008 年成立的 Cloudera 是最早将 Hadoop 商用的公司，为合作伙伴提 供 Hadoop 的商用解决方案，主要是包括支持，咨询服务，培训。</p><p>2009年Hadoop的创始人 Doug Cutting也加盟 Cloudera公司。Cloudera 产品主要 为 CDH，Cloudera Manager，Cloudera Support</p><p>CDH是Cloudera的Hadoop发行版，完全开源，比Apache Hadoop在兼容性，安全 性，稳定性上有所增强。</p><p>Cloudera Manager是集群的软件分发及管理监控平台，可以在几个小时内部署 好一个Hadoop集群，并对集群的节点及服务进行实时监控。Cloudera Support即 是对Hadoop的技术支持。</p><p>Cloudera 的标价为每年每个节点4000美元。Cloudera开发并贡献了可实时处理大 数据的Impala项目。</p><p><strong>3.3 Hortonworks</strong></p><p>2011年成立的Hortonworks是雅虎与硅谷风投公司Benchmark Capital合资组建</p><p>公司成立之初就吸纳了大约25名至30名专门研究Hadoop的雅虎工程师，上述工 程师均在2005年开始协助雅虎开发Hadoop，贡献了Hadoop 80%的代码。</p><p>雅虎工程副总裁、雅虎Hadoop开发团队负责人Eric Baldeschwieler出任<br> Hortonworks的首席执行官。</p><p>Hortonworks 的主打产品是Hortonworks Data Platform (HDP)，也同样是100%开 源的产品，HDP除常见的项目外还包含了Ambari，一款开源的安装和管理系统</p><p>HCatalog，一个元数据管理系统，HCatalog现已集成到Facebook 开源的Hive中<br> 。Hortonworks的Stinger开创性地极大地优化了Hive项目。Hortonworks为入门提 供了一个非常好的，易于使用的沙盒。</p><p>Hortonworks开发了很多增强特性并提交至核心主干，这使得Apache Hadoop能 够在包括Windows Server和Windows Azure在内的Microsoft Windows平台上本地 运行。定价以集群为基础，每10个节点每年为12500美元。</p><h3 id="4-Hadoop的优势"><a href="#4-Hadoop的优势" class="headerlink" title="4. Hadoop的优势"></a>4. Hadoop的优势</h3><h5 id="4-1-高可靠性"><a href="#4-1-高可靠性" class="headerlink" title="4.1 高可靠性"></a>4.1 高可靠性</h5><p> Hadoop底层维护多个数据副本，所以即使Hadoop某个计算元素或存储出现故障，也不会导致数据的丢失。</p><h5 id="4-2-高可扩展性"><a href="#4-2-高可扩展性" class="headerlink" title="4.2 高可扩展性"></a>4.2 高可扩展性</h5><p> 在集群间分配任务数据，可方便的扩展数以千计的节点。</p><h5 id="4-3-高效性"><a href="#4-3-高效性" class="headerlink" title="4.3 高效性"></a>4.3 高效性</h5><p> 在MapReduce的思想下，Hadoop是并行工作的，以加快任务处理速度。</p><h5 id="4-4-高容错性"><a href="#4-4-高容错性" class="headerlink" title="4.4 高容错性"></a>4.4 高容错性</h5><p> 能够自动将失败的任务重新分配。</p><h3 id="5-Hadoop框架组成"><a href="#5-Hadoop框架组成" class="headerlink" title="5. Hadoop框架组成"></a>5. Hadoop框架组成</h3><p>Hadoop是一个能够对大量数据进行分布式处理的软件框架，以一种可靠、高效、可伸缩的方式进行数据处理，其有许多元素构成，以下是其组成元素：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E6%9E%B6%E6%9E%84.png" alt="hadoop结构"></p><p><strong>注意：</strong> 通过上图我们要掌握的重点是Hadoop是由核心的三大组件构成的，在hadoop1.x的版本中 只有两大组件分别是 <strong>HDFS(负责文件的存储)**和</strong>MapReduce(负责文件的计算和资源调度)** 。后来在hadoop2.x的时候出于架构的解耦考虑以及让 资源调度 工作能更加灵活多样化就把 原来MapReduce中的负责资源调度的功能剥离出来 单独形成 Yarn 这个核心组件。</p><h4 id="5-1HDFS理论概述"><a href="#5-1HDFS理论概述" class="headerlink" title="5.1HDFS理论概述"></a>5.1HDFS理论概述</h4><p><strong>HDFS:</strong> Hadoop Distributed File System(hadoop分布式文件系统)</p><p><strong>注意：</strong> 本小节主要是从理论的角度先去理解HDFS的概念，HDFS中还包含很多概念我们逐个来分析理解。</p><p><strong>1.HDFS的特点：</strong> </p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1. 保存多个副本，且提供容错机制，副本丢失或宕机自动恢复。默认存3份。2. 运行在廉价的机器上。3. 适合大数据的处理。HDFS默认会将文件分割成block，64M为1个block。   然后将block按键值对存储在HDFS上，并将键值对的映射存到内存中。如果小文件太多，那内存的负担会很  重。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>2.在HDFS中有三个重要的角色相互协调工作，分别是NameNode  SecondaryNameNode   DataNode</strong> </p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1.NameNode   Master节点，大领导。  -- 管理数据块映射；  -- 处理客户端的读写请求；  -- 配置副本策略；  -- 管理HDFS的名称空间。   -- namenode 内存中存储的是 &#x3D; fsimage + edits。     其中fsimage元数据镜像文件（文件系统的目录树），edits元数据的操作日志（针对文件系统做的修改操  作记录）  总之：NameNode很重要，在海量数据的存储和管理，NameNode就相当于是所有数据的描述或者指针，有了它才能进一步操作真实数据。  2.SecondaryNameNode  它是个小弟，分担大哥NameNode的工作量。  -- SecondaryNameNode负责定时默认1小时，从namenode上，获取fsimage和edits来进行合并，然后再      发送给namenode。减少namenode的工作量。  -- NameNode的冷备份。  3.DataNode  真实数据的存储位置  -- 存储client发来的数据块block；  -- 执行数据块的读写操作。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5-2-YARN架构概述"><a href="#5-2-YARN架构概述" class="headerlink" title="5.2 YARN架构概述"></a>5.2 YARN架构概述</h4><p>​        本小节主要了解YARN架构中重要的几个 组件。本次接触YARN不要求掌握其本质原理，只要求混个脸熟，大概了解YARN的作用以及组成部分，为后面的学习建立基础。</p><p>​    <strong>1.为什么要用YARN？</strong></p><p>​        首先我们要知道的是在Hadoop1.x时代 是没有YARN的，那时候所有的数据计算以及计算过程的任务分配和资源调度都是在MapReduce中进行的，这样存在很多问题和隐患，典型的就是JobTracker容易存在单点故障和JobTracker负担重，既要负责资源管理，又要进行作业调度；当需处理太多任务时，会造成过多的资源消耗。所以在Hadoop2.x的时候，推出了YARN这套系统，其主要目的就是将Hadoop中的资源调度功能独立的分离出来，这样更方便扩展，也能高效合理的调度资源。</p><p>​    <strong>2.YARN中的几大角色</strong></p><p>​        <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Yarn%E7%BB%93%E6%9E%84.png" alt="yarn结构"></p><p>​        <strong>– ResourceManager</strong></p><p>​            YARN 分层结构的本质是 ResourceManager。这个实体控制整个集群并管理应用程序向基础计算资源的分配。ResourceManager 将各个资源部分（计算、内存、带宽等）精心安排给基础 NodeManager（YARN 的每节点代理）。ResourceManager 还与 ApplicationMaster 一起分配资源，与 NodeManager 一起启动和监视它们的基础应用程序。在此上下文中，ApplicationMaster 承担了以前的 TaskTracker 的一些角色，ResourceManager 承担了 JobTracker 的角色。</p><p>​            <strong>总的来说，RM有以下作用：</strong></p><pre><code>        1）处理客户端请求        2）启动或监控ApplicationMaster</code></pre><p>​            3）监控NodeManager</p><pre><code>        4）资源的分配与调度</code></pre><p>​        <strong>– NodeManager</strong></p><p>​                ApplicationMaster 管理在YARN内运行的每个应用程序实例。ApplicationMaster 负责协调来自 ResourceManager 的资源，并通过 NodeManager 监视容器的执行和资源使用（CPU、内存等的资源分配）。请注意，尽管目前的资源更加传统（CPU 核心、内存），但未来会带来基于手头任务的新资源类型（比如图形处理单元或专用处理设备）。从 YARN 角度讲，ApplicationMaster 是用户代码，因此存在潜在的安全问题。YARN 假设 ApplicationMaster 存在错误或者甚至是恶意的，因此将它们当作无特权的代码对待。</p><p>​                <strong>总的来说,AM有以下作用：</strong></p><pre><code>            1）负责数据的切分</code></pre><p>​                2）为应用程序申请资源并分配给内部的任务</p><p>​                3）任务的监控与容错</p><p>​        <strong>– ApplicationMaster</strong></p><p>​                NodeManager管理YARN集群中的每个节点。NodeManager 提供针对集群中每个节点的服务，从监督对一个容器的终生管理到监视资源和跟踪节点健康。MRv1 通过插槽管理 Map 和 Reduce 任务的执行，而 NodeManager 管理抽象容器，这些容器代表着可供一个特定应用程序使用的针对每个节点的资源。</p><p>​                <strong>总的来说，NM有以下作用：</strong></p><pre><code>            1）管理单个节点上的资源            2）处理来自ResourceManager的命令            3）处理来自ApplicationMaster的命令</code></pre><p>​        <strong>– Container</strong></p><p>​            Container 是 YARN 中的资源抽象，它封装了某个节点上的多维度资源，如内存、CPU、磁盘、网络等，当AM向RM申请资源时，RM为AM返回的资源便是用Container表示的。YARN会为每个任务分配一个Container，且该任务只能使用该Container中描述的资源。</p><p>​            <strong>总的来说，Container有以下作用：</strong></p><pre><code>       1）对任务运行环境进行抽象，封装CPU、内存等多维度的资源以及环境变量、启动命令等任务运行相关的信息</code></pre><p><strong>总结：要使用一个 YARN 集群，首先需要一个包含应用程序的客户的请求。ResourceManager 协商一个容器的必要资源，启动一个 ApplicationMaster 来表示已提交的应用程序。通过使用一个资源请求协议，ApplicationMaster 协商每个节点上供应用程序使用的资源容器。执行应用程序时，ApplicationMaster 监视容器直到完成。当应用程序完成时，ApplicationMaster 从 ResourceManager 注销其容器，执行周期就完成了。</strong></p><h4 id="5-3-MapReduce架构概述"><a href="#5-3-MapReduce架构概述" class="headerlink" title="5.3 MapReduce架构概述"></a>5.3 MapReduce架构概述</h4><h3 id="6-大数据技术生态体系"><a href="#6-大数据技术生态体系" class="headerlink" title="6. 大数据技术生态体系"></a>6. 大数据技术生态体系</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%A4%A7%E6%95%B0%E6%8D%AE%E6%8A%80%E6%9C%AF%E7%94%9F%E6%80%81.png" alt="大数据技术生态"></p><p><strong>小结：</strong>大概描述就是 首先 大数据的根本就是分析计算数据，那一定要定位数据来源，数据来源大体包含三个方面，分别是 正规的数据库（结构化数据），其次还有文件日志（半结构化数据）以及通过一些爬虫手段获取的互联网数据（非结构化数据）这就组成了我们的**<em>数据来源层**</em>。 </p><p>​        有了数据来源接下来就需要将这些数据传输到我们的分布式文件存储系统（HDFS）或者直接通过消息队列（kafka）将数据传输到数据计算层来做数据分析和运算，这里我们把专门做数据传输的技术层称之为*<strong>数据传输层***，同时保存到HDFS中后，我们成这块内容为 *</strong>数据存储层***。</p><p>​        有了具体的数据那后续就可以做数据分析运算了，这时候就要有 <strong><em>数据计算层</em></strong> 来完成，这部分大概根据数据结果的实效性可以分为两类数据分析运算的场景，一种是离线运算，一种实时运算，离线的话我们通常采用MapReduce和Hive来完成。实时的话就会用到Spark体系架构完成或者用Fink框架。</p><p>​        结合上面提到的概念，我们还要加入 <strong><em>资源管理层</em></strong>   主要有 YARN 来完成，它的主要工作就是来分配调度计算资源的，用来协作 MapReduce 作业。同时在实行数据运算的时候 我们考虑到服务器的资源分配以及人物先后执行的顺序，有加入了一个 <strong><em>任务调度层</em></strong>  专门来控制运算作业的执行时间和先后顺序</p><p>​        以上就是大数据架构体系的协作规则和架构说明，但是我们最后又考虑到 分布式集群的操作，各个版块和服务一定会交叉协同工作，所以最后利用Zookeeper来统一管理 分布式集群架构。OK，以上就是关于大数据技术生态体系的话术表现。</p><p>​        </p><h3 id="7-推荐系统框架图"><a href="#7-推荐系统框架图" class="headerlink" title="7. 推荐系统框架图"></a>7. 推荐系统框架图</h3><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/推荐系统架构图.png" alt="image-20200729111555275" style="zoom: 50%;" /><p><strong>小结：</strong>以上的一个推荐系统的大概描述，首先一定从用户的行为开始入手，当用户购买一件商品加入购物车后，我们往往会给用户推荐相关的类似产品或者连带产品，这是目前电商系统很常见的一种营销手段。这个推荐的数据是如何产生的呢？</p><p>1.用户将商品加入购物车，这是会产生购物车数据，这就是我们的数据来源</p><p>2.利用数据传输层的相关技术将数据进行搜集处理然后通过Kafak消息队列直接将数据传输到 实时运算的框架中进行分析运算。</p><p>3.当 数据计算层 把数据分析运算后会得到最终的结果，根据结果为依据找到相关的类似商品的数据进行整合。</p><p>4.最后回到电商系统中 的推荐模块 通过调用接口的方式获取最终的分析处理后整合的商品数据的结果，将其展示到客户端页面中。</p><p>上面大概就是一个推荐的流程，你学到了吗！！！</p><h2 id="三、Hadoop运行环境搭建（重点）"><a href="#三、Hadoop运行环境搭建（重点）" class="headerlink" title="三、Hadoop运行环境搭建（重点）"></a>三、Hadoop运行环境搭建（重点）</h2><h3 id="1-虚拟机环境准备"><a href="#1-虚拟机环境准备" class="headerlink" title="1. 虚拟机环境准备"></a>1. 虚拟机环境准备</h3><ul><li><p><strong>1). 准备模板机</strong>（安装最小化的Linux系统）</p><ul><li><p>yum安装必要的插件</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">sudo yum install -y epel-releasesudo yum install -y psmisc nc net-tools rsync vim lrzsz ntp libzstd openssl-static tree iotop git<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>修改 /etc/hosts 文件</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">192.168.2.100 hadoop100192.168.2.101 hadoop101192.168.2.102 hadoop102192.168.2.103 hadoop103192.168.2.104 hadoop104192.168.2.105 hadoop105192.168.2.106 hadoop106192.168.2.107 hadoop107192.168.2.108 hadoop108<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置Linux的防火墙开机不自启</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">systemctl stop firewalldsystemctl disable firewalld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>创建 atguigu 用户</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">useradd atguigu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>修改/etc/sudoers文件 配置atguigu用户具有root权限</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">在第92行的位置加上以下内容atguigu ALL&#x3D;(ALL)  NOPASSWD:ALL:wq! 强制保存退出。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>在/opt目录下创建两个文件夹 </p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">mkdir &#x2F;opt&#x2F;software   --放置需要安装的软件的安装包madir &#x2F;opt&#x2F;module     --软件的安装目录<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>配置 两个文件夹 属于 atguigu 用户和 atguigu 组</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">chown atguigu:atguigu &#x2F;opt&#x2F;softwarechown atguigu:atguigu &#x2F;opt&#x2F;module<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>2). 准备开发用的虚拟机</strong></p><ul><li><p>根据模板机克隆一台机器</p><ul><li> 根据克隆的步骤进行克隆就可以(参考Linux阶段的克隆操作)</li><li> 启动虚拟机</li></ul></li><li><p>修改克隆机的主机名</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1.编辑hostname文件vim &#x2F;etc&#x2F;hostname2.修改主机名称hadoop1013.重启机器 reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>修改克隆机的ip</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">1.编辑ifcfg-ens33文件vim &#x2F;etc&#x2F;sysconfig&#x2F;network-spcripts&#x2F;ifcfg-ens332.重点修改的一下标注的地方<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BF%AE%E6%94%B9%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE%E7%BD%91%E7%BB%9C.png" alt="修改集群配置网络"></p></li><li><p>利用FinallShell工具连接Linux</p><p> <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E9%9B%86%E7%BE%A4%E6%B5%8B%E8%AF%95.png" alt="集群测试VM"></p></li></ul></li></ul><h3 id="2-在准备好开发机hadoop101安装JDK"><a href="#2-在准备好开发机hadoop101安装JDK" class="headerlink" title="2. 在准备好开发机hadoop101安装JDK"></a>2. 在准备好开发机hadoop101安装JDK</h3><p>​     <strong>概述：</strong>本小节主要讲解在Linux中如何安装jdk，首先要明白Hadoop是用Java开发的，换言之Hadoop就是一款Java写的软件，那么想要运行Hadoop必然需要jdk环境。在Linux中安装Jdk和Windows中安装原理相同，只不过在Linux中Jdk的体现形式是一个 tar.gz的压缩包而Windows中是一个可视化安装程序。</p><ul><li><p><strong>1). 卸载现有JDK</strong></p><p> ​    <strong>注意：如果首次安装就没必要进行这一步，如果想更换jdk,非首次安装则需要先把已有的卸载掉</strong></p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">rpm -qa | grep -i java | xargs -n1 sudo rpm -e --nodeps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>2). 将jdk的tar包导入到Linux中opt目录下的software下</strong></p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">在我们的FinallShell工具中，直接找到opt目录下的software文件夹，将Windows目录下的jdk-8u212-linux-x64.tar.gz 包拖拽到software文件夹里即可<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>3).解压jdk压缩包到opt目录下的module文件夹中</strong></p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">tar -zxvf jdk-8u212-linux-x64.tar.gz -C &#x2F;opt&#x2F;module&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>4). 配置jdk的环境变量</strong></p><p> <strong>概述：</strong>接下来我们就要配置jdk的环境变量，思路和在windows系统下配置环境变量类似。这里注意一下，在Linux中 我们可以通过修改 Linux的核心profile文件来添加jdk的环境变量，但是我们通常不会这么做，原因就是不希望改动Linux原有的核心文件，以免引起不必要的麻烦，那我们怎么做呢？推荐方式就是自己在指定的目录下创建一个xxx.sh文件用来充当我们自己的配置文件。当Linux系统启动后会加载profile 文件，而profile文件中的脚本会循环遍历加载 /etc/profile.d/ 目录下所有以sh为后缀名的文件，所以我们自己创建xxx.sh文件也就被加载到了。固然环境变量也就生效了！</p><ul><li><p>在/etc/profile.d/目录下新建文件 my_env.sh文件</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">sudo vim &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在my_env.sh文件中添加一下内容</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">#JAVA_HOMEexport JAVA_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;jdk1.8.0_212export PATH&#x3D;$PATH:$JAVA_HOME&#x2F;bin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>保存后退出</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">:wq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>source 重新加载 /etc/profile文件，环境变量生效</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证jdk是否安装以及配置成功</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> 如下图就成功了！</p> <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java的linux编译命令.png" alt="image-20200729231158594" style="zoom:80%;" /><p> 如果没成功就reboot重启Linux，如果没问题就不用了重启！</p></li></ul></li></ul><h3 id="3-在开发机hadoop101安装Hadoop"><a href="#3-在开发机hadoop101安装Hadoop" class="headerlink" title="3. 在开发机hadoop101安装Hadoop"></a>3. 在开发机hadoop101安装Hadoop</h3><p><strong>概述：</strong>终于要安装hadoop了，hadoop我们把它看做适合jdk是同一类型的软件，jdk怎么操作hadoop也怎么操作就可以！</p><ul><li><p> <strong>1). 将hadoop的tar包拖拽到/opt/software目录下</strong></p></li><li><p><strong>2). 将hadoop解压缩到/opt/module目录下</strong></p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">tar -zxvf hadoop-3.1.3.tar.gz -C &#x2F;opt&#x2F;module&#x2F;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p><strong>3).配置hadoop的环境变量</strong></p><p> <strong>注意：</strong>hadoop中有一个特别之处，就是在hadoop的目录下的bin目录和sbin目录都是hadoop的执行脚本，所以我们在配置hadoop的环境变量的时候要注意把这两个都配上才可以！剩下其他的操作都和jdk一样了！</p><ul><li><p>打开/etc/profile.d/my_env.sh文件</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">sudo vim &#x2F;etc&#x2F;profile.d&#x2F;my_env.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在my_env.sh文件末尾添加如下内容：（shift+g）</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">#HADOOP_HOMEexport HADOOP_HOME&#x3D;&#x2F;opt&#x2F;module&#x2F;hadoop-3.1.3export PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;binexport PATH&#x3D;$PATH:$HADOOP_HOME&#x2F;sbin<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>保存退出</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">:wq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>source 重新加载 /etc/profile文件，环境变量生效</p> <pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">source &#x2F;etc&#x2F;profile<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>验证hadoop是否安装以及配置成功</p> <pre class="line-numbers language-markdown" data-language="markdown"><code class="language-markdown">hadoop version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E7%BC%96%E8%AF%91%E9%A2%86%E5%91%BD.png" alt="hadoop编译命令"></p><p> 如图所示表示安装成功！</p></li></ul></li></ul><h3 id="4-Hadoop目录结构"><a href="#4-Hadoop目录结构" class="headerlink" title="4. Hadoop目录结构"></a>4. Hadoop目录结构</h3><ul><li> <strong>bin：</strong> bin目录是Hadoop最基本的管理脚本和使用脚本所在的目录，这些脚本是sbin目录下管理脚本的基础实现，用户可以直接使用这些脚本管理和使用Hadoop</li><li> <strong>etc：</strong> Hadoop配置文件所在的目录，包括：core-site.xml、hdfs-site.xml、mapred-site.xml和yarn-site.xml等配置文件。</li><li> <strong>include：</strong>对外提供的编程库头文件（具体的动态库和静态库在lib目录中），这些文件都是用C++定义的，通常用于C++程序访问HDFS或者编写MapReduce程序。</li><li> <strong>lib：</strong>包含了Hadoop对外提供的编程动态库和静态库，与include目录中的头文件结合使用。</li><li> <strong>libexec：</strong>各个服务对应的shell配置文件所在的目录，可用于配置日志输出目录、启动参数（比如JVM参数）等基本信息。</li><li> <strong>sbin：</strong> Hadoop管理脚本所在目录，主要包含HDFS和YARN中各类服务启动/关闭的脚本。</li><li> <strong>share：</strong> Hadoop各个模块编译后的Jar包所在目录，这个目录中也包含了Hadoop文档。</li></ul><h2 id="四、Hadoop运行模式"><a href="#四、Hadoop运行模式" class="headerlink" title="四、Hadoop运行模式"></a>四、Hadoop运行模式</h2><p><strong>前言：</strong>本章节主要来学习Hadoop的运行模式，何谓运行模式呢？简单的讲就是Hadoop该如何运作起来，或者理解为玩Hadoop的游戏规则，是单台机器运行，还是多台协作运行，不同的运行模式有不一样的配置和处理。Hadoop中一共存在三种运行模式， 本地模式、伪分布式模式、完全分布式模式。</p><p><strong>本地模式：</strong>在一台单机上运行，没有分布式文件系统，而是直接读写本地操作系统的文件系统。</p><p><strong>伪分布式：</strong>这种模式也是在一台单机上运行，但用不同的Java进程模仿分布式运行中的各类结点: (NameNode,DataNode,JobTracker,TaskTracker,SecondaryNameNode) ，同理 集群中的结点由一个JobTracker和若干个TaskTracker组成，JobTracker负责任务的调度，TaskTracker负责并行执行任务。TaskTracker必须运行在DataNode上，这样便于数据的本地计算。JobTracker和NameNode则无须在同一台机器上。一个机器上，既当namenode，又当datanode,或者说 既 是jobtracker,又是tasktracker。没有所谓的在多台机器上进行真正的分布式计算，故称为”伪分布式”。</p><p><strong>完全分布式：</strong>真正的分布式，由3个及以上的实体机或者虚拟机组件的机群。</p><p><strong>注意：</strong>我们在课程中 用本地模式来入门开胃，然后集中火力做 <strong>完全分布式</strong> 伪分布式只做了解即可，没有太大意义！</p><h3 id="1-本地运行模式"><a href="#1-本地运行模式" class="headerlink" title="1.本地运行模式"></a>1.本地运行模式</h3><p>​    本小节主要就是感受一把Hadoop的运行过程，根据Hadoop官方提供的示例来操作几个Hadoop的基本功能点。更重要的是掌握基本操作Hadoop的步骤和思路。</p><p><strong>案例1需求描述：</strong>利用hadoop的grep过滤功能，将一批文件中的一些内容过滤出来。</p><p><strong>实现步骤：</strong></p><p><strong>1.1 在hadoop的解压目录创建一个文件夹input，作为需要过滤的文件的输入目录</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">mkdir input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>*<em>1.2 将hadoop目录下的 etc/hadoop/</em>.xml文件都复制到 input目录下，作为被过滤文件**</p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">cp &#x2F;etc&#x2F;hadoop&#x2F;*.xml input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.3 执行 bin/hadoop 命令，运行share/hadoop/mapreduce/目录下的hadoop-mapreduce-examples-3.1.3.jar包中的 grep 过滤功能，并限制一定的规则</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">bin&#x2F;hadoop jar share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.3.jar grep input output &#39;dfs[a-z.]+&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.4 最后在output目录下查看过滤的结果即可！</strong></p><p><strong>案例2需求描述：</strong>利用Hadoop完成经典wordcount(单词统计)，就是针对一些文件计算统计里面相同单词的个数。</p><p><strong>实现步骤：</strong></p><p><strong>1.1 创建在hadoop-3.1.3文件下面创建一个wcinput文件夹</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">mkdir wcinput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.2 在wcinput文件下创建一个word.txt文件</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">cd wcinput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.3 编辑word.txt文件</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">vim word.txt在文件中输入如下内容(内容随意)hadoop yarnhadoop mapreduceatguiguatguigu<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>1.4 回到Hadoop目录/opt/module/hadoop-3.1.3</strong>  <strong>执行程序</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">hadoop jar share&#x2F;hadoop&#x2F;mapreduce&#x2F;hadoop-mapreduce-examples-3.1.3.jar wordcount wcinput wcoutput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>1.5 查看结果</strong></p><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark"> cat wcoutput&#x2F;part-r-00000 看到如下结果：atguigu 2hadoop  2mapreduce 1yarn    1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-完全分布式运行模式-重点掌握"><a href="#2-完全分布式运行模式-重点掌握" class="headerlink" title="2.完全分布式运行模式(重点掌握)"></a>2.完全分布式运行模式(重点掌握)</h3><p>​    本章节是重中之重，主要讲解完全分布式运行模式。</p><h4 id="2-1-准备3台服务器"><a href="#2-1-准备3台服务器" class="headerlink" title="2.1 准备3台服务器"></a>2.1 准备3台服务器</h4><p>为了满足集群的环境，我们需要准备三台服务器，准备方式就是根据我们之前做好的模板机进行克隆即可，但是需要注意，三台服务器的的 静态ip地址和主机名都要修改一下，以便区分！</p><h5 id="2-1-1-克隆第一台"><a href="#2-1-1-克隆第一台" class="headerlink" title="2.1.1 克隆第一台"></a>2.1.1 克隆第一台</h5><p>修改主机名为hadoop102</p><p>修改ip地址为：192.168.2.102</p><h5 id="2-1-2-克隆第二台"><a href="#2-1-2-克隆第二台" class="headerlink" title="2.1.2 克隆第二台"></a>2.1.2 克隆第二台</h5><p>修改主机名为hadoop103</p><p>修改ip地址为：192.168.2.103</p><h5 id="2-1-3-克隆第三台"><a href="#2-1-3-克隆第三台" class="headerlink" title="2.1.3 克隆第三台"></a>2.1.3 克隆第三台</h5><p>修改主机名为hadoop104</p><p>修改ip地址为：192.168.2.104</p><h4 id="2-2-集群分发脚本的应用场景"><a href="#2-2-集群分发脚本的应用场景" class="headerlink" title="2.2 集群分发脚本的应用场景"></a>2.2 集群分发脚本的应用场景</h4><p><strong>场景介绍：</strong></p><p>​        上面我们已经准备好了三台服务器，并且都各自修改了主机名和ip地址。但是我们知道 需要额必备软件以及环境变量还没有配置，如果机械的一台一台配置也可以但是这样会引发大量的重复性工作，没有必要。如何能避免重复配置呢，最好是值在一台机器进行修改 然后将修改的配置信息同步到集群的所有机器那就完美了！这时候就要用到 分发脚本 的方案！</p><h5 id="2-2-1-scp-安全拷贝"><a href="#2-2-1-scp-安全拷贝" class="headerlink" title="2.2.1 scp 安全拷贝"></a>2.2.1 scp 安全拷贝</h5><p><strong>scp含义：</strong></p><p>​    scp命令可以实现服务器与服务器之间的数据拷贝</p><p><strong>基本语法：</strong></p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span>-r<span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$user</span>@hadoop<span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>/<span class="token variable">$fname</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​    命令  递归    要拷贝的文件路径/名称   目的用户@主机:目的路径/名称</p><p><strong>案例实操：</strong></p><p>前提：在 hadoop102 hadoop103 hadoop104 都已经创建好的 /opt/module</p><p>​      /opt/software 两个目录， 并且已经把这两个目录修改为atguigu:atguigu</p><p>​      sudo chown atguigu:atguigu -R /opt/module</p><p>1).在hadoop101上，将hadoop101中/opt/module/目录下所有内容拷贝到hadoop102上的/opt/module/目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r /opt/module/* atguigu@hadoop102:/opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2).在hadoop103上，将hadoop101中/opt/module/目录下的所有内容拷贝到hadoop103的/opt/module/目录下。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">scp</span> -r atguigu@hadoop101:/opt/module/* /opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3).在hadoop103上，将hadoop101中/opt/module/目录下的所有内容拷贝到hadoop104的/opt/module/目录下。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">scp</span> -r atguigu@hadoop101:/opt/module/* atguigu@hadoop104:/opt/module/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4).在任意一台机器上，将hadoop101中的/etc/profile.d目录下的my_env.sh配置文件分别复制到hadoop102、hadoop103、hadoop104上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token number">1</span>. <span class="token function">scp</span> -r /etc/profile.d/my_env.sh root@hadoop102:/etc/profile.d/<span class="token number">2</span>. <span class="token function">scp</span> -r /etc/profile.d/my_env.sh root@hadoop103:/etc/profile.d/<span class="token number">3</span>. <span class="token function">scp</span> -r /etc/profile.d/my_env.sh root@hadoop104:/etc/profile.d/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h5 id="2-2-2-rsync远程同步工具"><a href="#2-2-2-rsync远程同步工具" class="headerlink" title="2.2.2 rsync远程同步工具"></a>2.2.2 rsync远程同步工具</h5><p><strong>功能描述：</strong></p><p>​        rsync主要用于备份和镜像。具有速度快、避免复制相同内容和支持符号链接的优点。</p><p><strong>rsync和scp区别：</strong></p><p>​        用rsync做文件的复制要比scp的速度快，rsync只对差异文件做更新。scp是把所有文件都复制过去。</p><p><strong>基本语法：</strong></p><p>rsync   -av    $pdir/$fname        $user@hadoop$host:$pdir/$fname</p><p>命令  选项参数  要拷贝的文件路径/名称  目的用户@主机:目的路径/名称</p><p>​     选项参数说明</p><table><thead><tr><th>选项</th><th>功能</th></tr></thead><tbody><tr><td>-a</td><td>归档拷贝</td></tr><tr><td>-v</td><td>显示复制过程</td></tr></tbody></table><p><strong>案例实操:</strong></p><p>把hadoop102机器上的/opt/software目录同步到hadoop103服务器的/opt/software目录下（没有实际意义的操作只是为了练手）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">rsync</span> -av /opt/software/* atguigu@hadoop103:/opt/software/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="2-2-3-分发脚本的应用"><a href="#2-2-3-分发脚本的应用" class="headerlink" title="2.2.3 分发脚本的应用"></a>2.2.3 分发脚本的应用</h5><p><strong>概述：</strong>前面其实我们已经是实现了服务器之间的文件目录拷贝传递了，但是每次都得执行命令来实现，还是比较麻烦的，干脆一步到位，通过编写一个脚本 通过执行脚本来实现信息拷贝。</p><p><strong>前提：</strong> 在/home/atguigu/bin这个目录下存放的脚本，atguigu用户可以在系统任何地方直接执行。</p><p><strong>脚本实现：</strong></p><p>1). 在/home/atguigu/bin目录下创建xsync文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 opt<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home/atguigu<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">mkdir</span> bin<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> bin<span class="token punctuation">[</span>atguigu@hadoop102 bin<span class="token punctuation">]</span>$ <span class="token function">vim</span> xsync<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>2). 在该文件中编写如下代码</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token comment">#1. 判断参数个数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>  <span class="token builtin class-name">echo</span> Not Enough Arguement<span class="token operator">!</span>  <span class="token builtin class-name">exit</span><span class="token punctuation">;</span><span class="token keyword">fi</span><span class="token comment">#2. 遍历集群所有机器</span><span class="token keyword">for</span> <span class="token for-or-select variable">host</span> <span class="token keyword">in</span> hadoop102 hadoop103 hadoop104<span class="token keyword">do</span>  <span class="token builtin class-name">echo</span> <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  <span class="token variable">$host</span>  <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>  <span class="token comment">#3. 遍历所有目录，挨个发送</span>  <span class="token keyword">for</span> <span class="token for-or-select variable">file</span> <span class="token keyword">in</span> <span class="token variable">$@</span>  <span class="token keyword">do</span>    <span class="token comment">#4. 判断文件是否存在</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> -e <span class="token variable">$file</span> <span class="token punctuation">]</span>    <span class="token keyword">then</span>      <span class="token comment">#5. 获取父目录</span>      <span class="token assign-left variable">pdir</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">cd</span> -P <span class="token punctuation">$(</span>dirname $file<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token builtin class-name">pwd</span><span class="token variable">)</span></span>      <span class="token comment">#6. 获取当前文件的名称</span>      <span class="token assign-left variable">fname</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token function">basename</span> $file<span class="token variable">)</span></span>      <span class="token function">ssh</span> <span class="token variable">$host</span> <span class="token string">"mkdir -p <span class="token variable">$pdir</span>"</span>      <span class="token function">rsync</span> -av <span class="token variable">$pdir</span>/<span class="token variable">$fname</span> <span class="token variable">$host</span><span class="token builtin class-name">:</span><span class="token variable">$pdir</span>    <span class="token keyword">else</span>      <span class="token builtin class-name">echo</span> <span class="token variable">$file</span> does not exists<span class="token operator">!</span>    <span class="token keyword">fi</span>  <span class="token keyword">done</span><span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3). 修改文件的执行权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">chmod</span> <span class="token number">777</span> xsync<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4). 将脚本复制到/bin中，以便全局调用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token function">sudo</span> <span class="token function">cp</span> xsync /bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5). 测试脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">xsync test.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2-3-分布式集群规划"><a href="#2-3-分布式集群规划" class="headerlink" title="2.3 分布式集群规划"></a>2.3 分布式集群规划</h4><p>​    <strong>概述：</strong>接下来我们就要搭建Hadoop集群了，在操作之前一定要有具体的集群规划，集群规划其实就是把Hadoop中的核心组件如何安排到每台机器上。</p><p>​    <strong>分析：</strong> 通过前面的介绍我们知道 在Hadoop集群当中先要考虑数据的存储以及资源调度的安排。那就会涉及到NameNode 、ResourceManager 、SecondaryNameNode 、DataNode 、 NodeManager。如何把这些组件分布到每一台机器上，就得合理分析一下。</p><p>NameNode 、ResourceManager 、SecondaryNameNode 这三个组件相对来说比较耗费资源，我们通常把他们分布到不同的机器上。所以三台机器每一台分布一个。</p><p>DataNode是具体存储数据的，因为三台机器都具备存储空间，那每一台都分布一个DataNode</p><p>NodeManager是负责每一台机器的资源的管理，因此三台机器每一台也分布一个NodeManager</p><p><strong>hadoop102            NameNode                         DataNode              NodeManager</strong></p><p><strong>hadoop103            ResourceManager              DataNode              NodeManager</strong></p><p><strong>hadoop104            SecondaryNameNode      DataNode                NodeManager</strong></p><h4 id="2-4-搭建完全集群"><a href="#2-4-搭建完全集群" class="headerlink" title="2.4 搭建完全集群"></a>2.4 搭建完全集群</h4><h5 id="1-先删除每个节点中hadoop安装目录下的-data-和-logs目录，如果是最新解压配置的hadoop集群，并没有这两个目录就不需要进行删除这步。"><a href="#1-先删除每个节点中hadoop安装目录下的-data-和-logs目录，如果是最新解压配置的hadoop集群，并没有这两个目录就不需要进行删除这步。" class="headerlink" title="1.先删除每个节点中hadoop安装目录下的 data 和 logs目录，如果是最新解压配置的hadoop集群，并没有这两个目录就不需要进行删除这步。"></a><strong>1.先删除每个节点中hadoop安装目录下的 data 和 logs目录，如果是最新解压配置的hadoop集群，并没有这两个目录就不需要进行删除这步。</strong></h5><h5 id="2-在hadoop-env-sh文件中，配置JAVA-HOME-的环境变量，这是因为Hadoop运行的时候需要java的环境变量。"><a href="#2-在hadoop-env-sh文件中，配置JAVA-HOME-的环境变量，这是因为Hadoop运行的时候需要java的环境变量。" class="headerlink" title="2.在hadoop-env.sh文件中，配置JAVA_HOME 的环境变量，这是因为Hadoop运行的时候需要java的环境变量。"></a><strong>2.在hadoop-env.sh文件中，配置JAVA_HOME 的环境变量，这是因为Hadoop运行的时候需要java的环境变量。</strong></h5><h5 id="3-配置Hadoop的4大核心配置文件"><a href="#3-配置Hadoop的4大核心配置文件" class="headerlink" title="3.配置Hadoop的4大核心配置文件"></a><strong>3.配置Hadoop的4大核心配置文件</strong></h5><ul><li><p><strong>core-site.xml</strong>  这个是hadoop总的核心配置文件，集群加载启动的时候首先会加载解析此配置文件，具体配置内容如下：</p> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment">&lt;!--  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token comment">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--cmeNode的地址 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop102:9820<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 指定hadoop数据的存储目录 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>/opt/module/hadoop-3.1.3/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>        <span class="token comment">&lt;!-- 配置该atguigu(superUser)允许通过代理访问的主机节点 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.atguigu.hosts<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置该atguigu(superUser)允许通过代理用户所属组 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.atguigu.groups<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 配置该atguigu(superUser)允许通过代理的用户--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>hadoop.proxyuser.atguigu.users<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>*<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>hdfs-site.xml</strong> 这个是hdfs的核心配置文件，具体配置内容如下：</p> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"> <span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span> <span class="token comment">&lt;!--   Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token comment">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定NameNode数据的存储目录--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.name.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file://$&#123;hadoop.data.dir&#125;/name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定DataNode数据的存储目录--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.datanode.data.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file://$&#123;hadoop.data.dir&#125;/data<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!--指定SecondaryNameNode数据的存储目录--></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.checkpoint.dir<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file://$&#123;hadoop.data.dir&#125;/namesecondary<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- nn web端访问地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop102:9870<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token comment">&lt;!-- 2nn web端访问地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>dfs.namenode.secondary.http-address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop104:9868<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>yarn-site.xml 这个是Yarn的核心配置文件,具体内容如下：</p> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token comment">&lt;!--  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- Site specific YARN configuration properties --></span>        <span class="token comment">&lt;!-- 指定MR走shuffle --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.aux-services<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>mapreduce_shuffle<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定ResourceManager的地址--></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.resourcemanager.hostname<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop103<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 环境变量的继承 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.env-whitelist<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>                         <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>JAVA_HOME,HADOOP_COMMON_HOME,HADOOP_HDFS_HOME,HADOOP_CONF_DIR,CLASSPATH_PREPEND_DISTCACHE,HADOOP_YARN_HOME,HADOOP_MAPRED_HOME<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- yarn容器允许分配的最大最小内存 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.minimum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>512<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.scheduler.maximum-allocation-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- yarn容器允许管理的物理内存大小 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.resource.memory-mb<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>4096<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 关闭yarn对物理内存和虚拟内存的限制检查 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.pmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.nodemanager.vmem-check-enabled<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>false<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>mapred-site.xml  这是MapReduce配置文件，配置内容如下：</p> <pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0"?></span><span class="token prolog">&lt;?xml-stylesheet type="text/xsl" href="configuration.xsl"?></span><span class="token comment">&lt;!--  Licensed under the Apache License, Version 2.0 (the "License");  you may not use this file except in compliance with the License.  You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software  distributed under the License is distributed on an "AS IS" BASIS,  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.  See the License for the specific language governing permissions and  limitations under the License. See accompanying LICENSE file.--></span><span class="token comment">&lt;!-- Put site-specific property overrides in this file. --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>configuration</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 指定MapReduce程序运行在Yarn上 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.framework.name<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>yarn<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>configuration</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-启动HDFS，单独启动每一台机器上的组件（重点）"><a href="#4-启动HDFS，单独启动每一台机器上的组件（重点）" class="headerlink" title="4. 启动HDFS，单独启动每一台机器上的组件（重点）"></a><strong>4. 启动HDFS，单独启动每一台机器上的组件（重点）</strong></h5></li><li><ol><li><p>因为hdfs分布式文件系统本质是一个文件系统，固然在使用之前要进行格式化，那么在哪台机器格式化呢，就是hdfs的大哥NameNode所在的节点进行格式化，格式化命令如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol></li><li><ol start="2"><li>启动HDFS文件系统，注意：我们现在是每台机器逐个启动所以一定要清晰之前定的集群规划的方案，现在要启动HDFS文件系统，而HDFS系统又包含 NameNode、SecondaryNameNode、DataNode，这三大组件有分别被规划在 NameNode在hadoop102、SecondaryNameNode在hadoop104、以及每一台机器上都有DataNode，所以启动流程如下：</li></ol><ul><li><p>在hadoop102上 启动NameNode 命令如下：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在hadoop104上 启动SecondaryNameNode 命令如下：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop104 ~<span class="token punctuation">]</span>$ hdfs --daemon start secondarynamenode<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>在hadoop102 hadoop103 hadoop104 都启动DataNode 命令如下：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start datanode<span class="token punctuation">[</span>atguigu@hadoop103 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start namenode<span class="token punctuation">[</span>atguigu@hadoop104 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start namenode<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul></li><li><ol start="3"><li>检测hdfs是否启动成功 Web端查看HDFS的NameNode</li></ol></li></ul><p>（a）浏览器中输入：<a href="http://hadoop102:9870/">http://hadoop102:9870</a></p><p>（b）查看HDFS上存储的数据信息</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hdfs%E9%A1%B5%E9%9D%A2%E5%9B%BE.png" alt="hdfs的页面图"></p><h5 id="5-启动Yarn"><a href="#5-启动Yarn" class="headerlink" title="5. 启动Yarn"></a><strong>5. 启动Yarn</strong></h5><p>​        根据集群规划，Yarn的ResourceManager我们分布在hadoop103上，NodeManager每一台机器上都存在所以启动流程如下：</p><ul><li><p>1). 在hadoop103 启动resourcemanager 命令如下：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 hadoop<span class="token punctuation">]</span>$ <span class="token function">yarn</span> --daemon start resourcemanager<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>2). 分别在hadoop102、hadoop103、hadoop104 启动nodemanager 命令如下：</p> <pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start nodemanager<span class="token punctuation">[</span>atguigu@hadoop103 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start nodemanager<span class="token punctuation">[</span>atguigu@hadoop104 hadoop<span class="token punctuation">]</span>$ hdfs --daemon start nodemanager<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>3). 检测Yarn是否启动成功 Web端查看YARN的ResourceManager</p><p> （a）浏览器中输入：<a href="http://hadoop103:8088/">http://hadoop103:8088</a></p><p> （b）查看YARN上运行的Job信息</p><p> <img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Yarn%E9%A1%B5%E9%9D%A2%E4%BF%A1%E6%81%AF.png" alt="yarn页面信息"></p></li></ul><h5 id="6-简单测试使用集群"><a href="#6-简单测试使用集群" class="headerlink" title="6.简单测试使用集群"></a>6.简单测试使用集群</h5><p>​    <strong>前言：</strong> 接下来简单测试试用一下我们搭建好的集群环境，操作的目标就是在HDFS 文件系统上上传文件以及运行一下简单的MapReduce程序即可！但是这里需要我们注意的一个 <strong>问题就是 HDFS系统所指向的物理路径究竟是哪 一会应该往哪个路径下上传文件！</strong></p><p>​    <strong>问题一：HDFS文件系统怎么定位？</strong></p><p>​    首先我们清楚，当前集群是运行在Linux上的，而Linux又是在Windows系统中的通过虚拟机的方式运行的，所以HDFS文件系统本质上也是占用了我们当前电脑硬盘的一部分，通过hadoop体系为HDFS分配出的一块存储空间。但是一定要注意它具有独立性，是由Hadoop独立来管理的。</p><p>​    <strong>问题二：在操作HDFS文件系统的时候如何理解它的输入路径和输出路径？</strong></p><p>​    Hadoop如何识别是Linux路径还是HDFS路径呢？本质上还得看 Hadoop的核心配置文件的fs.defaultFS的配置信息。</p><p>当前我们搭建的集群配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hdfs://hadoop102:9820<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参考官网默认配置如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>fs.defaultFS<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>file:///<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>对比分析：</strong></p><p>1). Hadoop的fs.defaultFS的默认配置是file:///  如果解析的是这个配置，file:/// 本质上所表示的就是Linux本地路径，那么在操作中写输入输出就按照Linux的规则正常写就行，例如编写执行wordcount程序的命令如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hadoop jar share/hadoop/mapredece/hadoop-mapreduce-ecanples.jar wordcount wcinput/wc.input wcoutput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2). 如果我们自己修改了core-site.xml 核心配置文件配置 fs.defaultFS 的值为hdfs://hadoop102:9820 那么意味着在解析输入输出路径的时候指向的是HDFS系统维护的目录结构 在HDFS系统底层维护的路径是  <strong>/user/atguigu/wcinput</strong> 所以如果是在这个情况下我们要操作wordcount程序就应该这么写了 命令如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ hadoop jar share/hadoop/mapredece/hadoop-mapreduce-ecanples.jar wordcount /user/atguigu/wcinput/wc.input /user/atguigu/wcoutput<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>OK! 有了上面的内容作为支撑，下面我们就正式对Hadoop集群进行简单测试操作！！！</strong></p><h6 id="6-1-在HDFS中创建一个目录-user-atguigu-input-目录"><a href="#6-1-在HDFS中创建一个目录-user-atguigu-input-目录" class="headerlink" title="6.1 在HDFS中创建一个目录 /user/atguigu/input 目录"></a>6.1 在HDFS中创建一个目录 /user/atguigu/input 目录</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop-3.1.3<span class="token punctuation">]</span>$ hdfs dfs -rm -R /user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="6-2-将hadoop安装目下的wcinput-wc-input-文件上传到HDFS文件系统上的-user-atguigu-input-目录下"><a href="#6-2-将hadoop安装目下的wcinput-wc-input-文件上传到HDFS文件系统上的-user-atguigu-input-目录下" class="headerlink" title="6.2 将hadoop安装目下的wcinput/wc.input 文件上传到HDFS文件系统上的 /user/atguigu/input 目录下"></a>6.2 将hadoop安装目下的wcinput/wc.input 文件上传到HDFS文件系统上的 /user/atguigu/input 目录下</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop-3.1.3<span class="token punctuation">]</span>$ hdfs dfs -put wciput/wc.input /user/atguigu/input<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="6-3-如何在HDFS上查看具体存储的文件"><a href="#6-3-如何在HDFS上查看具体存储的文件" class="headerlink" title="6.3 如何在HDFS上查看具体存储的文件"></a>6.3 如何在HDFS上查看具体存储的文件</h6><p>DataNode的存储目录：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 hadoop-3.1.3<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> data/data/current/BP-1528516923-192.168.2.102-1597943910514/current/finalized/subdir0/subdir0/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h6 id="6-4-测试Yarn是否能正常使用-还是以Mapreduce的wordcount程序为例"><a href="#6-4-测试Yarn是否能正常使用-还是以Mapreduce的wordcount程序为例" class="headerlink" title="6.4 测试Yarn是否能正常使用 还是以Mapreduce的wordcount程序为例"></a>6.4 测试Yarn是否能正常使用 还是以Mapreduce的wordcount程序为例</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop104 hadoop-3.1.3<span class="token punctuation">]</span>$ hadoop jar share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /user/atguigu/input /user/atguigu/output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6.5 在hdfs上面查看执行后的结果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop-3.1.3<span class="token punctuation">]</span>$ hdfs dfs -cat /user/atguigu/output/part-r-00000<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="7-SSH免密登录"><a href="#7-SSH免密登录" class="headerlink" title="7. SSH免密登录"></a>7. SSH免密登录</h5><p><strong>存在的问题：</strong> 集群启动和关闭，目前我们都是通过单点操作完成的，这样很不方便，于是就考虑能不能在一台机器上就能搞定集群的启动和关闭？</p><p><strong>分析：</strong></p><p>参照之前的脚本分发的思路，我们可以编写一个集群启动和关闭的脚本，就是把哪些在每一台机器上输入的命令封装到一个脚本中，然后通过执行脚本来实现集群启动关闭的目的。</p><p><strong>脚本的大概思路：</strong></p><p>​    登录到hadoop102  启动/关闭 namenode</p><p>​    登录到hadoop104  启动/关闭 secondarynamenode</p><p>​    登录到hadoop102   hadoop103   hadoop104  启动/关闭 datanode</p><p>​    登录到hadoop103 启动/关闭 resourcemanager </p><p>​    登录到hadoop102 hadoop103 hadoop104  启动/关闭 nodemanager</p><p><strong>如何登录远程的机器：</strong></p><p>语法：ssh ip/主机名 </p><p><strong>无密钥配置：</strong> 单纯的 ssh 命令操作，虽然可以只在一台机器操作了但是操作步骤较多，而且登录的时候每次都需要输入密码，我们接下来要做到免密登录+脚本控制</p><p><strong>免密登录的原理：</strong></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%85%8D%E5%AF%86%E7%99%BB%E5%BD%95%E5%8E%9F%E7%90%86.png" alt="免密登录原理"></p><p><strong>实现步骤：</strong></p><p>1). 生成公钥和私钥：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 .ssh<span class="token punctuation">]</span>$ ssh-keygen -t rsa<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后敲（四次回车），就会生成两个文件id_rsa（私钥）、id_rsa.pub（公钥）</p><p>2). 将公钥拷贝到要免密登录的目标机器上</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 .ssh<span class="token punctuation">]</span>$ ssh-copy-id hadoop102<span class="token punctuation">[</span>atguigu@hadoop102 .ssh<span class="token punctuation">]</span>$ ssh-copy-id hadoop103<span class="token punctuation">[</span>atguigu@hadoop102 .ssh<span class="token punctuation">]</span>$ ssh-copy-id hadoop104<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>3). 注意，集群机器的配置</p><ul><li><p> 还需要在hadoop103上采用atguigu账号配置一下无密登录到hadoop102、hadoop103、hadoop104服务器上。</p></li><li><p> 还需要在hadoop104上采用atguigu账号配置一下无密登录到hadoop102、hadoop103、hadoop104服务器上。</p></li><li><p> 还需要在hadoop102上采用atguigu账号，配置一下无密登录到hadoop102、hadoop103、hadoop104；</p></li></ul><p>4).  .ssh文件夹下（~/.ssh）的文件功能解释</p><table><thead><tr><th>known_hosts</th><th>记录ssh访问过计算机的公钥(public  key)</th></tr></thead><tbody><tr><td>id_rsa</td><td>生成的私钥</td></tr><tr><td>id_rsa.pub</td><td>生成的公钥</td></tr><tr><td>authorized_keys</td><td>存放授权过的无密登录服务器公钥</td></tr></tbody></table><h5 id="8-集群的群起操作"><a href="#8-集群的群起操作" class="headerlink" title="8.集群的群起操作"></a>8.集群的群起操作</h5><p>​    当配置过了ssh免密登录，就可以对hadoop进行群起了（多台机器通过脚本一起启动），群起的脚本hadoop已经帮我们内置好了直接使用即可！但是要最终完成群起操作我们必须让启动/关闭脚本知道 NameNode  SecondaryNameNode  DataNode ResourceManager  NodeManager都在哪一台机器上分配，这个怎么做到呢？这个是由  hadoop安装目录下的 etc/hadoop/workers 配置文件来控制。</p><ul><li> 配置 workers 文件，内容如下：</li></ul><pre class="line-numbers language-mark" data-language="mark"><code class="language-mark">hadoop102hadoop103hadoop104<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>注意：</strong>该文件中添加的内容结尾不允许有空格，文件中不允许有空行。</p><ul><li><p>启动集群</p><p>1). <strong>如果集群是第一次启动</strong>，需要在hadoop102节点格式化NameNode（注意格式化NameNode，会产生新的集群id，导致NameNode和DataNode的集群id不一致，集群找不到已往数据。如果集群在运行过程中报错，需要重新格式化NameNode的话，一定要先停止namenode和datanode进程，并且要删除所有机器的data和logs目录，然后再进行格式化。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ hdfs namenode -format<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>2). 启动HDFS</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop-3.1.3<span class="token punctuation">]</span>$ sbin/start-dfs.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3). 在配置了ResourceManager的节点（hadoop103）启动YARN</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 hadoop-3.1.3<span class="token punctuation">]</span>$ sbin/start-yarn.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="9-群起群停脚本的编写"><a href="#9-群起群停脚本的编写" class="headerlink" title="9.群起群停脚本的编写"></a>9.群起群停脚本的编写</h5></li></ul><p>​    上面我们已经完成对集群的群起，但是还不够完美，我们操作执行了两个脚本才启动了hdfs和yarn，虽然hadoop也给我们提供了start-all.sh 脚本，但是通常开发中不建议使用，因为start-all.sh脚本启动的话会默认启动一些不必要的组件。我们想更加完美的群起 只执行一个脚本就能把hdfs和yarn都启动或者停止。接下来我们自己封装一个脚本来实现，步骤如下：</p><p>1). 进入到/home/atguigu/bin目录下创建一个<strong>群起/群停</strong>脚本，这样操作为了在任何位置都能执行脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home/atguigu/bin<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">vim</span> mycluster.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2). 编写脚本内容：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$#</span> -lt <span class="token number">1</span> <span class="token punctuation">]</span><span class="token keyword">then</span>         <span class="token builtin class-name">echo</span> <span class="token string">"No Args Input..."</span>         <span class="token builtin class-name">exit</span><span class="token keyword">fi</span><span class="token keyword">case</span> <span class="token variable">$1</span> <span class="token keyword">in</span><span class="token string">"start"</span><span class="token punctuation">)</span>         <span class="token builtin class-name">echo</span> <span class="token string">"==================START HDFS==================="</span>          <span class="token function">ssh</span> hadoop102 /opt/module/hadoop-3.1.3/sbin/start-dfs.sh         <span class="token builtin class-name">echo</span> <span class="token string">"==================START YARN==================="</span>         <span class="token function">ssh</span> hadoop103 /opt/module/hadoop-3.1.3/sbin/start-yarn.sh<span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token string">"stop"</span><span class="token punctuation">)</span>         <span class="token builtin class-name">echo</span> <span class="token string">"==================STOP YARN==================="</span>         <span class="token function">ssh</span> hadoop103 /opt/module/hadoop-3.1.3/sbin/stop-yarn.sh         <span class="token builtin class-name">echo</span> <span class="token string">"==================STOP HDFS==================="</span>          <span class="token function">ssh</span> hadoop102 /opt/module/hadoop-3.1.3/sbin/stop-dfs.sh<span class="token punctuation">;</span><span class="token punctuation">;</span>*<span class="token punctuation">)</span>  <span class="token builtin class-name">echo</span> <span class="token string">"Input Args Error!!!!"</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token keyword">esac</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3). 保存后退出，然后赋予脚本执行权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 bin<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">777</span> myhadoop.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4). 分发/home/atguigu/bin目录，保证自定义脚本在三台机器上都可以使用</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ xsync /home/atguigu/bin/<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="10-编写统一查看jps的脚本"><a href="#10-编写统一查看jps的脚本" class="headerlink" title="10.编写统一查看jps的脚本"></a>10.编写统一查看jps的脚本</h5><p>​    上面我们做了一个频繁的操作，就是总是在每一机器上输入 jps 命令，来查看当前机器的java进程，而且每次输入都是切换到服务器上输入，很麻烦，接下来我们要实现在一台机器就能查看整个集群的java进程。</p><p>1). 进入到/home/atguigu/bin目录下创建一个查看jps的脚本</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token builtin class-name">cd</span> /home/atguigu/bin<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">vim</span> jpsall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2). 编辑脚本内容如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token shebang important">#!/bin/bash</span><span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> hadoop102 hadoop103 hadoop104<span class="token keyword">do</span><span class="token builtin class-name">echo</span> <span class="token string">"***************<span class="token variable">$i</span> JPS****************"</span><span class="token function">ssh</span> <span class="token variable">$i</span> /opt/module/jkd1.8.0_212/bin/jps<span class="token keyword">done</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3).  保存后退出，然后赋予脚本执行权限</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 bin<span class="token punctuation">]</span>$ <span class="token function">chmod</span> <span class="token number">777</span> jpsall.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4). 测试</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 bin<span class="token punctuation">]</span>$ jpsall.sh <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>结果如下：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E5%90%AF%E5%8A%A8%E7%A8%8B%E5%BA%8F%E5%B1%95%E7%A4%BA.png" alt="hadoop进程展示"></p><h5 id="11-历史服务器的使用"><a href="#11-历史服务器的使用" class="headerlink" title="11.历史服务器的使用"></a>11.历史服务器的使用</h5><p>​    这一小节主要介绍hadoop的历史服务器的使用！什么是历史服务器呢？举个例子就是我们在YARN上跑的一些job的历史记录，当重启YARN后之前执行过的job任务记录就会消失，hadoop为了更好的追溯和记录这些job执行记录专门提供了一个历史服务器，只要我们在Hadoop中配置了历史服务器那么以后就可以很方便查看执行过的所有job。</p><p>1).配置mapred-site.xml</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ <span class="token function">vim</span> mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在该文件里面增加如下配置:</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 历史服务器端地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop102:10020<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 历史服务器web端地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>mapreduce.jobhistory.webapp.address<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>hadoop102:19888<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2). 分发配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ xsync <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/mapred-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3). 在hadoop102启动历史服务器</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ mapred --daemon start historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4). 查看历史服务器是否启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ jps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="5"><li>web端查看历史服务器的图形化界面</li></ol><p><a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p><h5 id="12-配置日志的聚集"><a href="#12-配置日志的聚集" class="headerlink" title="12.配置日志的聚集"></a>12.配置日志的聚集</h5><p>​    本小节主要对hadoop中的日志进行合理性的管理，方便我们更好的查阅。默认情况下 Hadoop作业执行的日志保存在hadoop的安装目录下logs下面。我们可以在linux上直接查看，但是这样操作不够人性化，查阅起来也比较麻烦。所以我们可以在执行job任务的时候产生日志后，让它自动的保存到hdfs系统中，这样就可以在网页中通过访问HDFS系统的web端地址来查看日志了！如果想完成上述操作需要我们进行以下几步配置和操作。</p><p>1）配置yarn-site.xml</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ <span class="token function">vim</span> yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>内容如下：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- 开启日志聚集功能 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation-enable<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>true<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设置日志聚集服务器地址 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log.server.url<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>http://hadoop102:19888/jobhistory/logs<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 设置日志保留时间为7天 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>property</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>name</span><span class="token punctuation">></span></span>yarn.log-aggregation.retain-seconds<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>name</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>value</span><span class="token punctuation">></span></span>604800<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>value</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>property</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2）分发配置</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 hadoop<span class="token punctuation">]</span>$ xsync <span class="token variable">$HADOOP_HOME</span>/etc/hadoop/yarn-site.xml<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>3）关闭NodeManager、ResourceManager和HistoryServer</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 ~<span class="token punctuation">]</span>$ stop-yarn.sh<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ mapred --daemon stop historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4）启动NodeManager 、ResourceManage和HistoryServer </p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 ~<span class="token punctuation">]</span>$ start-yarn.sh<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ mapred --daemon start historyserver<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>5）执行wordcount程序</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ hadoop jar  <span class="token variable">$HADOOP_HOME</span>/share/hadoop/mapreduce/hadoop-mapreduce-examples-3.1.3.jar wordcount /input /output<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>6）Web端查看日志</p><p>​    <a href="http://hadoop102:19888/jobhistory">http://hadoop102:19888/jobhistory</a></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/web%E6%9F%A5%E7%9C%8B%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="web端查看历史服务器"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/jobManager.png" alt="job页面"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/hadoop%E5%8E%86%E5%8F%B2%E6%9C%8D%E5%8A%A1%E5%99%A8.png" alt="历史服务器"></p><h5 id="13-集群时间同步"><a href="#13-集群时间同步" class="headerlink" title="13. 集群时间同步"></a>13. 集群时间同步</h5><p>​    本小节主要操作在集群环境下，每一台服务器之间的时间同步。时间同步是很有必要的，因为在多台机器协同工作的时候，必然要求时间统一 要不然就会出问题。以下内容只要求大致了解 这项工作一般在运维的范畴。</p><p><strong>1）时间服务器配置(必须root用户</strong>)</p><p>（0）查看所有节点ntpd服务状态和开机自启动状态</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl status ntpd<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl is-enabled ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（1）在所有节点关闭ntpd服务和自启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl stop ntpd<span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl disable ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（2）修改hadoop102的ntp.conf配置文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/ntp.conf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>修改内容如下:</p><p>​    a）修改1（授权192.168.1.0-192.168.1.255网段上的所有机器可以从这台机器上查询和同步时间）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token comment">#restrict 192.168.1.0 mask 255.255.255.0 nomodify notrap</span>改为（就是把注释去掉）：restrict <span class="token number">192.168</span>.1.0 mask <span class="token number">255.255</span>.255.0 nomodify notrap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>​    b）修改2（集群在局域网中，不使用其他互联网上的时间）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server <span class="token number">0</span>.centos.pool.ntp.org iburstserver <span class="token number">1</span>.centos.pool.ntp.org iburstserver <span class="token number">2</span>.centos.pool.ntp.org iburstserver <span class="token number">3</span>.centos.pool.ntp.org iburst改为（都加上注释）：<span class="token comment">#server 0.centos.pool.ntp.org iburst</span><span class="token comment">#server 1.centos.pool.ntp.org iburst</span><span class="token comment">#server 2.centos.pool.ntp.org iburst</span><span class="token comment">#server 3.centos.pool.ntp.org iburst</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    c）添加3（当该节点丢失网络连接，依然可以采用本地时间作为时间服务器为集群中的其他节点提供时间同步）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">server <span class="token number">127.127</span>.1.0fudge <span class="token number">127.127</span>.1.0 stratum <span class="token number">10</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>（3）修改hadoop102的/etc/sysconfig/ntpd 文件</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">vim</span> /etc/sysconfig/ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>增加内容如下（让硬件时间与系统时间一起同步）</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token assign-left variable">SYNC_HWCLOCK</span><span class="token operator">=</span>yes<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（4）重新启动ntpd服务</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl start ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（5）设置ntpd服务开机启动</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop102 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> systemctl <span class="token builtin class-name">enable</span> ntpd<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>2）在其他机器进行时间同步操作（必须root用户）</strong></p><p>（1）在其他机器配置1分钟与时间服务器同步一次</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">crontab</span> -e<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>编写定时任务如下：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">*/1 * * * * /usr/sbin/ntpdate hadoop102<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（2）修改任意机器时间</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">date</span> -s <span class="token string">"2018-8-08 08:08:08"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>（3）一分钟后查看机器是否与时间服务器同步</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"><span class="token punctuation">[</span>atguigu@hadoop103 ~<span class="token punctuation">]</span>$ <span class="token function">sudo</span> <span class="token function">date</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="五、Hadoop编译源码"><a href="#五、Hadoop编译源码" class="headerlink" title="五、Hadoop编译源码"></a>五、Hadoop编译源码</h2><h2 id="六、常见错误及解决方案"><a href="#六、常见错误及解决方案" class="headerlink" title="六、常见错误及解决方案"></a>六、常见错误及解决方案</h2>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Flink04_Timestamp与window的实战与源码分析</title>
      <link href="2019/03/07/Flink04_Timestamp%E4%B8%8EWindow/"/>
      <url>2019/03/07/Flink04_Timestamp%E4%B8%8EWindow/</url>
      
        <content type="html"><![CDATA[<pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">Table</span> <span class="token keyword">table</span> <span class="token operator">=</span> input  <span class="token punctuation">.</span>window<span class="token punctuation">(</span><span class="token punctuation">[</span>GroupWindow w<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">// define window with alias w</span>  <span class="token punctuation">.</span>groupBy<span class="token punctuation">(</span><span class="token string">"w, a"</span><span class="token punctuation">)</span>  <span class="token comment">// group the table by attribute a and window w </span>  <span class="token punctuation">.</span><span class="token keyword">select</span><span class="token punctuation">(</span><span class="token string">"a, w.start, w.end, w.rowtime, b.count"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// aggregate and add window start, end, and rowtime timestamps</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token comment">//Tumble ----------</span><span class="token comment">// Tumbling Event-time Window</span><span class="token punctuation">.</span>window<span class="token punctuation">(</span>Tumble<span class="token punctuation">.</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token string">"10.minutes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">(</span><span class="token string">"rowtime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tumbling Processing-time Window (assuming a processing-time attribute "proctime")</span><span class="token punctuation">.</span>window<span class="token punctuation">(</span>Tumble<span class="token punctuation">.</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token string">"10.minutes"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">(</span><span class="token string">"proctime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Tumbling Row-count Window (assuming a processing-time attribute "proctime")</span><span class="token punctuation">.</span>window<span class="token punctuation">(</span>Tumble<span class="token punctuation">.</span><span class="token keyword">over</span><span class="token punctuation">(</span><span class="token string">"10.rows"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">(</span><span class="token string">"proctime"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">as</span><span class="token punctuation">(</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="0x1-Windows概述"><a href="#0x1-Windows概述" class="headerlink" title="0x1.Windows概述"></a>0x1.Windows概述</h1><p>Streaming流式计算是一种被设计用于处理无限数据集的数据处理引擎，而无限数据集是指一种不断增长的本质上无限的数据集，而window是一种<strong>切割无限数据为有限块进行处理</strong>的手段。</p><p>Window是无限数据流处理的核心，Window将一个无限的stream拆分成有限大小的”buckets”桶，我们可以在这些桶上做计算操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author JueQian * @create 01-12 11:59 * 概述: * 窗口类型分两种:时间窗口 计数窗口 * 窗口功能分三种:滚动 滑动 会话(时间窗口特有) * 窗口方法分两种:增量(aggregate:sum,min,max)全量(apply) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink01_TimeWindow</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 从执行环境中获取</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> sensorSource <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flink05_Source_UDFSource</span><span class="token punctuation">.</span><span class="token class-name">MySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 使用时间窗口统计每个窗口的最高温度</span>        <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> windowStream <span class="token operator">=</span> sensorSource<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> temp <span class="token operator">=</span> windowStream<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 打印</span>        temp<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"最高温度"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>窗口函数分两种</p><pre class="mermaid">graph LRA[窗口函数]-->B[增量窗口函数]A-->C[全量窗口函数]</pre><p>Window可以分成两类：</p><p>CountWindow：按照指定的数据条数生成一个Window，与时间无关。</p><p>TimeWindow：按照时间生成Window。</p><p><strong>注意</strong></p><p>CountWindow没有Session,比如隔着几条没有来数据???显然不符合逻辑</p><pre class="mermaid">graph LRA[window]-->B[CountWindow]A-->C[TimeWindow]C-->D[Tumbing Window]C-->E[Sliding window]C-->F[Session Window]B-->G[Tumbing Window]B-->H[Sliding window]</pre><h2 id="1-TimeWindow"><a href="#1-TimeWindow" class="headerlink" title="1.TimeWindow"></a>1.TimeWindow</h2><p>对于TimeWindow，可以根据窗口实现原理的不同分成三类：滚动窗口（Tumbling Window）、滑动窗口（Sliding Window）和会话窗口（Session Window）。</p><h3 id="1-滚动窗口（Tumbling-Windows）"><a href="#1-滚动窗口（Tumbling-Windows）" class="headerlink" title="1.滚动窗口（Tumbling Windows）"></a>1.滚动窗口（Tumbling Windows）</h3><p>将数据依据固定的窗口长度对数据进行切片。</p><p><strong>特点：时间对齐，窗口长度固定，没有重叠。</strong></p><p>滚动窗口分配器将每个元素分配到一个指定窗口大小的窗口中，滚动窗口有一个固定的大小，并且不会出现重叠。例如：如果你指定了一个5分钟大小的滚动窗口，窗口的创建如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%BB%9A%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="滚动窗口示意图"></p><p>适用场景：适合做BI统计等（做每个时间段的聚合计算）。</p><h3 id="2-滑动窗口（Sliding-Windows）"><a href="#2-滑动窗口（Sliding-Windows）" class="headerlink" title="2.滑动窗口（Sliding Windows）"></a>2.滑动窗口（Sliding Windows）</h3><p>滑动窗口是固定窗口的更广义的一种形式，滑动窗口由固定的窗口长度和滑动间隔组成。</p><p><strong>特点：时间对齐，窗口长度固定，可以有重叠。</strong></p><p>滑动窗口分配器将元素分配到固定长度的窗口中，与滚动窗口类似，窗口的大小由窗口大小参数来配置，另一个窗口滑动参数控制滑动窗口开始的频率。</p><p>因此，滑动窗口如果滑动参数小于窗口大小的话，窗口是可以重叠的，在这种情况下元素会被分配到多个窗口中。</p><p>例如，你有10分钟的窗口和5分钟的滑动，那么每个窗口中5分钟的窗口里包含着上个10分钟产生的数据，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="滑动窗口示意图"></p><p>适用场景：对最近一个时间段内的统计（求某接口最近5min的失败率来决定是否要报警)。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%97%B6%E9%97%B4%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E7%9A%84%E5%B0%8F%E5%9D%97%E5%BD%92%E5%B1%9E%E9%97%AE%E9%A2%98.png" alt="image-20210112170315668"></p><h3 id="3-会话窗口（Session-Windows）"><a href="#3-会话窗口（Session-Windows）" class="headerlink" title="3. 会话窗口（Session Windows）"></a>3. 会话窗口（Session Windows）</h3><p>由一系列事件组合一个指定时间长度的timeout间隙组成，类似于web应用的session，也就是一段时间没有接收到新数据就会生成新的窗口。</p><p><strong>特点：时间无对齐。</strong></p><p>session窗口分配器通过session活动来对元素进行分组，session窗口跟滚动窗口和滑动窗口相比，不会有重叠和固定的开始时间和结束时间的情况，相反，当它在一个固定的时间周期内不再收到元素，即非活动间隔产生，那个这个窗口就会关闭。</p><p>一个session窗口通过一个session间隔来配置，这个session间隔定义了非活跃周期的长度，当这个非活跃周期产生，那么当前的session将关闭并且后续的元素将被分配到新的session窗口中去。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E4%BC%9A%E8%AF%9D%E7%AA%97%E5%8F%A3%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="时间回话窗口"></p><h2 id="2-CountWindow"><a href="#2-CountWindow" class="headerlink" title="2.CountWindow"></a>2.CountWindow</h2><p>CountWindow根据窗口中相同key元素的数量来触发执行，执行时只计算元素数量达到窗口大小的key对应的结果。</p><p>注意：CountWindow的window_size指的是相同Key的元素的个数，不是输入的所有元素的总数。</p><h3 id="1-滚动窗口"><a href="#1-滚动窗口" class="headerlink" title="1.滚动窗口"></a>1.滚动窗口</h3><p>默认的CountWindow是一个滚动窗口，只需要指定窗口大小即可，当元素数量达到窗口大小时，就会触发窗口的执行。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> minTempPerWindowStream <span class="token operator">=</span>     dataStream    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">countWindow</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token string">"temperature"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-滑动窗口"><a href="#2-滑动窗口" class="headerlink" title="2.滑动窗口"></a>2.滑动窗口</h3><p>滑动窗口和滚动窗口的函数名是完全一致的，只是在传参数时需要传入两个参数，一个是window_size，一个是sliding_size。</p><p>下面代码中的sliding_size设置为了2，也就是说，每收到两个相同key的数据就计算一次，每一次计算的window范围是10个元素。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">DataStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> minTempPerWindowStream <span class="token operator">=</span>     dataStream    <span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">countWindow</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">.</span><span class="token function">minBy</span><span class="token punctuation">(</span><span class="token string">"temperature"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-WindowFunction"><a href="#3-WindowFunction" class="headerlink" title="3.WindowFunction"></a>3.WindowFunction</h3><p>window function 定义了要对窗口中收集的数据做的计算操作，主要可以分为两类：</p><p>增量聚合函数（incremental aggregation functions）</p><p>每条数据到来就进行计算，保持一个简单的状态。典型的增量聚合函数有<strong>ReduceFunction</strong>, <strong>AggregateFunction</strong>。</p><p>全窗口函数（full window functions）</p><p>先把窗口所有数据收集起来，等到计算的时候会遍历所有数据。ProcessWindowFunction就是一个全窗口函数。</p><h2 id="4-功能API"><a href="#4-功能API" class="headerlink" title="4.功能API"></a>4.功能API</h2><h3 id="KeyedWindows"><a href="#KeyedWindows" class="headerlink" title="KeyedWindows"></a>KeyedWindows</h3><p>1.trigger() —— 触发器</p><p>定义 window 什么时候关闭，触发计算并输出结果</p><p>2.evitor() —— 移除器</p><p>定义移除某些数据的逻辑</p><p>3.allowedLateness() —— 允许处理迟到的数据</p><p>4.sideOutputLateData() —— 将迟到的数据放入侧输出流</p><p>5.getSideOutput() —— 获取侧输出流</p><h3 id="Non-KeyedWindows"><a href="#Non-KeyedWindows" class="headerlink" title="Non_KeyedWindows"></a>Non_KeyedWindows</h3><p>WindowAll()</p><p>trigger()</p><p>evictor()</p><p>allowedLateness()</p><p>sideOutoutLateData()</p><p>getSideOutput</p><h1 id="0x2-时间语义与Watermark"><a href="#0x2-时间语义与Watermark" class="headerlink" title="0x2.时间语义与Watermark"></a>0x2.时间语义与Watermark</h1><h2 id="1-Flink中的时间语义"><a href="#1-Flink中的时间语义" class="headerlink" title="1.Flink中的时间语义"></a>1.Flink中的时间语义</h2><p>在Flink的流式处理中，会涉及到时间的不同概念，如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Flink%E7%9A%84%E6%97%B6%E9%97%B4%E8%AF%AD%E4%B9%89.png" alt="Flink的时间语义"></p><p><strong>Event Time</strong>:日志自己记录的时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span>    <span class="token punctuation">.</span>getExecutionEnvironment    <span class="token comment">// 从调用时刻开始给env创建的每一个stream追加时间特性</span>    env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span>    <span class="token comment">//在后续指定时间时间语义</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Ingestion Time</strong>:是数据进入Flink的时间</p><p><strong>Processing Time</strong>:是每一个执行基于时间操作的算子的本地系统时间，与机器相关，默认的时间属性就是Processing Time。</p><h2 id="2-乱序数据的产生"><a href="#2-乱序数据的产生" class="headerlink" title="2.乱序数据的产生"></a>2.乱序数据的产生</h2><p>原因:由于网络、分布式等原因，导致乱序的产生,接受数据时间不按照实际时间</p><p>测试Kafka</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">34</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">36</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">38</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">40</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">42</span><span class="token number">1</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">53</span><span class="token comment">//跑到12.56.44前面</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">44</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">46</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">48</span><span class="token number">1</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">55</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">50</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">52</span><span class="token number">1</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">57</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">54</span><span class="token number">1</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">52</span><span class="token operator">:</span><span class="token number">59</span><span class="token number">2</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">12</span><span class="token operator">:</span><span class="token number">56</span><span class="token operator">:</span><span class="token number">56</span><span class="token number">1</span><span class="token operator">></span> sensor_0<span class="token operator">:</span><span class="token number">2021</span><span class="token operator">-</span><span class="token number">01</span><span class="token operator">-</span><span class="token number">13</span> <span class="token number">15</span><span class="token operator">:</span><span class="token number">53</span><span class="token operator">:</span><span class="token number">01</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-waterMark的引入"><a href="#3-waterMark的引入" class="headerlink" title="3.waterMark的引入"></a>3.waterMark的引入</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//0x0 要求使用时间语义</span><span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span>    <span class="token punctuation">.</span>getExecutionEnvironment    <span class="token comment">//从调用时刻开始给env创建的每一个stream追加时间特性</span>    env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span>    <span class="token comment">//在后续指定时间时间语义</span>    <span class="token comment">//0x1 要求指定时间语义</span>dataStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span>    <span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span>    <span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span>element<span class="token operator">:</span> <span class="token class-name">SensorReading</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token class-name">Long</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> element<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>翻译成水印水位线</p><p>WaterMark用于关闭窗口</p><p><strong>重点</strong></p><p>Watermark本质是一个插入到流中的时间戳,规定了窗口关闭的时间.</p><p>在00:00开始5min窗口</p><p>定义Watermark+1min</p><p>则窗口关闭时间为00:06</p><p>在这延迟的一分钟内,如果到达时间依然在0-5min之内,依然可以进入窗口</p><p>(目的是为了让延迟数据也能进入窗口,因为比timestamp要小)</p><p><strong>说白了</strong></p><p>窗口:存储规定时间段内发生的事件</p><p>WaterMark:让时间字段发生在窗口内,但是迟到了的数据进入窗口</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/WaterMark%E4%B8%8E%E7%AA%97%E5%8F%A3.png" alt="WaterMark与窗口"></p><h1 id="0x3-Window的源码解析"><a href="#0x3-Window的源码解析" class="headerlink" title="0x3.Window的源码解析"></a>0x3.Window的源码解析</h1><h2 id="1-格林威治时间"><a href="#1-格林威治时间" class="headerlink" title="1.格林威治时间"></a>1.格林威治时间</h2><p>点击</p><p>timewindow-&gt;of</p><p>滑动窗口代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">TumblingProcessingTimeWindows</span> <span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span> size<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TumblingProcessingTimeWindows</span><span class="token punctuation">(</span>size<span class="token punctuation">.</span><span class="token function">toMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果开一天窗口</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//0x3 分组</span>      <span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span> one2Sensor <span class="token operator">=</span> sensorWithTime<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//0x4 开窗</span>      <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> result <span class="token operator">=</span> one2Sensor<span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//由于是UTC格林兰治的时间</span>      one2Sensor<span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">days</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个window是早八点到八点</span>      <span class="token comment">//如果国内想开一天的窗口</span>  one2Sensor<span class="token punctuation">.</span><span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">TumblingProcessingTimeWindows</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">days</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">hours</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-关于窗口整点问题"><a href="#2-关于窗口整点问题" class="headerlink" title="2.关于窗口整点问题"></a>2.关于窗口整点问题</h2><p>左闭右开</p><p>窗口是一个桶</p><h3 id="2-1窗口整数问题源码处理"><a href="#2-1窗口整数问题源码处理" class="headerlink" title="2.1窗口整数问题源码处理"></a>2.1窗口整数问题源码处理</h3><p><strong>源码</strong></p><p>timewindow-&gt;TumblingProcessingTimeWindows-&gt;assignWindows-&gt;getWindowStartWithOffset</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token comment">//计算第一个窗口的开始时间</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getWindowStartWithOffset</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> timestamp <span class="token operator">-</span> <span class="token punctuation">(</span>timestamp <span class="token operator">-</span> offset <span class="token operator">+</span> windowSize<span class="token punctuation">)</span> <span class="token operator">%</span> windowSize<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>参数解析:</p><p>offset=0 (关于东八区偏移时间)</p><p>timestamp=0(关于时间戳)</p><p>windowSize保证时间为正数</p><p>计算,假如我们在20:36输入15min的 滚动窗口</p><p>可以将上述公式简化为下面公式<br>$$<br>timestamp - timestamp/windowSize<br>$$<br>举例:</p><p>10-10/6 = 6</p><p>先使用时间戳对窗口大小取余</p><p>然后减去这个余数,为第一个窗口开始时间</p><h3 id="2-2左闭右开源码-end-1"><a href="#2-2左闭右开源码-end-1" class="headerlink" title="2.2左闭右开源码(end-1)"></a>2.2左闭右开源码(end-1)</h3><p>timewindow.java-&gt;end</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//当前窗口所属的最大时间</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">maxTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3滑动窗口属于多个窗口源码解析"><a href="#2-3滑动窗口属于多个窗口源码解析" class="headerlink" title="2.3滑动窗口属于多个窗口源码解析"></a>2.3滑动窗口属于多个窗口源码解析</h3><p>timeWindow-&gt;SlidingProcessingTimeWindows.class-&gt;assignWindows</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> <span class="token function">assignWindows</span><span class="token punctuation">(</span><span class="token class-name">Object</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token class-name">WindowAssignerContext</span> context<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        timestamp <span class="token operator">=</span> context<span class="token punctuation">.</span><span class="token function">getCurrentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> windows <span class="token operator">=</span>             <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>size <span class="token operator">/</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一下子计算出将数据属于的窗口</span>        <span class="token keyword">long</span> lastStart <span class="token operator">=</span> <span class="token class-name">TimeWindow</span>            <span class="token punctuation">.</span><span class="token function">getWindowStartWithOffset</span><span class="token punctuation">(</span>            timestamp<span class="token punctuation">,</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>offset<span class="token punctuation">,</span>             <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//windowsize是把滑动步长当做slide</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">long</span> start <span class="token operator">=</span> lastStart<span class="token punctuation">;</span> <span class="token comment">//遍历</span>            start <span class="token operator">></span> timestamp <span class="token operator">-</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">;</span>             start <span class="token operator">-=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>slide<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//进去slide</span>            windows<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> start <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> windows<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//getWindowStartWithOffset</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">getWindowStartWithOffset</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">,</span> <span class="token keyword">long</span> offset<span class="token punctuation">,</span> <span class="token keyword">long</span> windowSize<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> timestamp <span class="token operator">-</span> <span class="token punctuation">(</span>timestamp <span class="token operator">-</span> offset <span class="token operator">+</span> windowSize<span class="token punctuation">)</span> <span class="token operator">%</span> windowSize<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%BA%90%E7%A0%81.png" alt="滑动窗口源码"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E6%BB%91%E5%8A%A8%E7%AA%97%E5%8F%A3%E6%BA%90%E7%A0%81%E7%A4%BA%E6%84%8F%E5%9B%BE.png" alt="滑动窗口源码示意图"></p><p><strong>总结</strong></p><p>一个窗口15秒,滑动步长为5秒,此时存在三个滑动小窗口</p><p>源码内是吧滑动的一步当做一个滚动窗口进行计算,</p><p>然后把滚动计算放置到一个ArrayList中,统计计算</p><p>源码是当一个15秒窗口,先计算出最后的一个小窗口,往前推</p><h1 id="0x4-深入了解WaterMark使用与源码"><a href="#0x4-深入了解WaterMark使用与源码" class="headerlink" title="0x4.==深入了解WaterMark使用与源码=="></a>0x4.==深入了解WaterMark使用与源码==</h1><p>问题还没解决!!!!</p><p>简单解析</p><p>waterMark的时间戳本质:延长窗口关闭时间</p><p>[window:0-5]</p><p>[watermark:2]</p><p>接受数据[0-5]</p><p>关闭时间[7]</p><h2 id="1-WaterMark使用Example"><a href="#1-WaterMark使用Example" class="headerlink" title="1.WaterMark使用Example"></a>1.WaterMark使用Example</h2><p>数据案例 求5秒内,2秒watermark,2秒网络延迟条件下的最大延迟时间</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml">sensor_1,1610506280,10sensor_1,1610506281,20sensor_1,1610506282,30sensor_1,1610506283,40sensor_1,1610506284,50sensor_1,1610506285,60sensor_1,1610506286,70sensor_1,1610506287,80sensor_1,1610506288,90sensor_1,1610506290,100<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">WindowedStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span></span><span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span></span><span class="token class-name">TimeWindow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">OutputTag</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-13 11:43 * 延迟发车 waterMark 包容数据的混乱度 * 允许迟到时间发车等人 allowedLateness 允许迟到数据,包容网络的延迟 * 侧输出流 sideOutputStream 保证数据的准确一致性(牺牲了一点准确性,保证了高效性) * todo 测输出流不参与计算,需要统计然后单独处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink02_Window_WaterMark_Lateness</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 定义执行环境,并且从端口读取数据</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> socketSource <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 将数据添加上数据结构</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapStream <span class="token operator">=</span> socketSource<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 指定时间语义 设定waterMark为两秒</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> watermarks <span class="token operator">=</span> mapStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> stringLongDoubleTuple3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> stringLongDoubleTuple3<span class="token punctuation">.</span>f1<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 开窗,设定窗口时间与测输出流</span>        <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> timeWindow <span class="token operator">=</span> watermarks<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> windowedStream <span class="token operator">=</span> timeWindow                <span class="token punctuation">.</span><span class="token function">allowedLateness</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sideOutputLateData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"side"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//计算窗口时间内的温度的最大值</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamOperator <span class="token operator">=</span> windowedStream<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 打印</span>        streamOperator<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamOperator<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"side"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"测输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x5 执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-源码解析assignTimestampsAndWatermarks"><a href="#2-源码解析assignTimestampsAndWatermarks" class="headerlink" title="2.源码解析assignTimestampsAndWatermarks"></a>2.源码解析assignTimestampsAndWatermarks</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java">assignTimestampsAndWatermarks<span class="token operator">-></span>    <span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token operator">-></span>    ctrl<span class="token operator">+</span><span class="token class-name">H</span><span class="token operator">-></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/%E5%91%A8%E6%9C%9F%E6%80%A7waterMark%E7%BB%A7%E6%89%BF%E5%85%B3%E7%B3%BB%E5%9B%BE.png" alt="周期性waterMark继承关系图"></p><p>自增时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">AscendingTimestampExtractor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//自增</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>使用自己的时间 ,时间自增</p><p><strong>源码:</strong></p><p>waterMark是一个衡量时间进展机制</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> elementPrevTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> newTimestamp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">extractAscendingTimestamp</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newTimestamp <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>currentTimestamp <span class="token operator">=</span> newTimestamp<span class="token punctuation">;</span>            <span class="token keyword">return</span> newTimestamp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>violationHandler<span class="token punctuation">.</span><span class="token function">handleViolation</span><span class="token punctuation">(</span>newTimestamp<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTimestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> newTimestamp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Watermark</span> <span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentTimestamp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">9223372036854775808L</span> <span class="token operator">?</span> <span class="token operator">-</span><span class="token number">9223372036854775808L</span> <span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>currentTimestamp <span class="token operator">-</span> <span class="token number">1L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-WaterMark的传递"><a href="#3-WaterMark的传递" class="headerlink" title="3.WaterMark的传递"></a>3.WaterMark的传递</h2><p> Such an operator’s current event time is the minimum of its input streams’ event times. As its input streams update their event times, so does the operator.</p><p>算子的执行时间取输入流中最小的事件时间</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/WaterMark%E4%BC%A0%E9%80%92%E9%97%AE%E9%A2%98.png" alt="WaterMark传递机制"></p><p>周期性每200ms产生一个新数据</p><ol><li>watermark是往下游广播的</li><li>当所有waterMark中的最小的WaterMark</li></ol><p><strong>测试</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">WindowedStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span></span><span class="token class-name">AscendingTimestampExtractor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span></span><span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>windows<span class="token punctuation">.</span></span><span class="token class-name">TimeWindow</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">OutputTag</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-13 11:43 * 测试一下在文件流经常使用的自增时间 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink04_Window_WaterMark_AscendingTimes</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 定义执行环境,并且从端口读取数据</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> socketSource <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用自增时间语义</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> assignTimestampsAndWatermarks <span class="token operator">=</span> socketSource<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AscendingTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractAscendingTimestamp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 将数据添加上数据结构 进行第一个map的时候是进行hash分布</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> mapStream <span class="token operator">=</span> assignTimestampsAndWatermarks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple3</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 开窗,设定窗口时间与测输出流</span>        <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> timeWindow <span class="token operator">=</span> mapStream<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">,</span> <span class="token class-name">Tuple</span><span class="token punctuation">,</span> <span class="token class-name">TimeWindow</span><span class="token punctuation">></span></span> windowedStream <span class="token operator">=</span> timeWindow                <span class="token punctuation">.</span><span class="token function">allowedLateness</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">sideOutputLateData</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"side"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span> streamOperator <span class="token operator">=</span> windowedStream<span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 打印</span>        streamOperator<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"主输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        streamOperator<span class="token punctuation">.</span><span class="token function">getSideOutput</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OutputTag</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple3</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Long</span><span class="token punctuation">,</span> <span class="token class-name">Double</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"side"</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"测输出流"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x5 执行</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment">#测试数据信息----------------</span><span class="token attr-name">waterMark</span> <span class="token punctuation">=</span> <span class="token attr-value">2</span><span class="token attr-name">window</span><span class="token punctuation">=</span><span class="token attr-value">5</span><span class="token comment">#-------------------------</span>sensor_1,1610506279,5sensor_1,1610506282,30sensor_1,1610506283,40<span class="token comment">#在282理应生成数据,但是输入283之后才会生成数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-AssignerWithPeriodicWatermarks"><a href="#4-AssignerWithPeriodicWatermarks" class="headerlink" title="4.AssignerWithPeriodicWatermarks"></a>4.AssignerWithPeriodicWatermarks</h3><p>会定时抽取waterMark</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//默认200ms</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span> characteristic<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>timeCharacteristic <span class="token operator">=</span> <span class="token class-name">Preconditions</span><span class="token punctuation">.</span><span class="token function">checkNotNull</span><span class="token punctuation">(</span>characteristic<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>characteristic <span class="token operator">==</span> <span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">ProcessingTime</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>触发机制</strong></p><p>window的触发要符合以下几个条件：</p><ol><li>watermark时间 &gt;= window_end_time</li><li>在[window_start_time,window_end_time)中有数据存在</li></ol><p>同时满足了以上2个条件，window才会触发。</p><p>watermark是一个全局的值，不是某一个key下的值，所以即使不是同一个key的数据，其warmark也会增加.</p><p>WaterMark在数据中表示小于等于WaterMark的数据全部到齐</p><h2 id="5-WaterMark源码"><a href="#5-WaterMark源码" class="headerlink" title="5.WaterMark源码"></a>5.WaterMark源码</h2><p><strong>example</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//指定时间语义</span><span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> assignTimestampsAndWatermarks <span class="token operator">=</span> socketSource<span class="token punctuation">.</span>                <span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span>                        <span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>                                <span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">milliseconds</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">1000L</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-获取WaterMark的方法类"><a href="#5-1-获取WaterMark的方法类" class="headerlink" title="5.1 获取WaterMark的方法类"></a>5.1 获取WaterMark的方法类</h3><p><strong>点击方式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token operator">-></span>    <span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>WaterMark生成机制</p><p><strong>BoundedOutOfOrdernessTimestampExtractor源码</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">implements</span> <span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token comment">/** 目前为止最大的时间戳 */</span><span class="token keyword">private</span> <span class="token keyword">long</span> currentMaxTimestamp<span class="token punctuation">;</span><span class="token comment">/** 最近从上游提交的时间戳,默认为Long的最小值*/</span><span class="token keyword">private</span> <span class="token keyword">long</span> lastEmittedWatermark <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span><span class="token comment">/**最大无序度*/</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> maxOutOfOrderness<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token punctuation">(</span><span class="token class-name">Time</span> maxOutOfOrderness<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>maxOutOfOrderness<span class="token punctuation">.</span><span class="token function">toMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"Tried to set the maximum allowed "</span> <span class="token operator">+</span><span class="token string">"lateness to "</span> <span class="token operator">+</span> maxOutOfOrderness <span class="token operator">+</span> <span class="token string">". This parameter cannot be negative."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//给无序度赋值</span><span class="token keyword">this</span><span class="token punctuation">.</span>maxOutOfOrderness <span class="token operator">=</span> maxOutOfOrderness<span class="token punctuation">.</span><span class="token function">toMilliseconds</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>currentMaxTimestamp <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>maxOutOfOrderness<span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//得到最大的无序度,在程序的参数里指定的</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getMaxOutOfOrdernessInMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> maxOutOfOrderness<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Extracts the timestamp from the given element. */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Watermark</span> <span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// this guarantees that the watermark never goes backwards.</span>        <span class="token comment">// 因为存在乱序数据,所以需要保持时间戳不能倒退</span>        <span class="token comment">// 保证时间戳不会倒退 一直使用最小的水位线作为真正的水位线</span>                <span class="token comment">//自增原理:只有生成的waterMark,比当前的waterMark大的时候才会进行赋值</span><span class="token keyword">long</span> potentialWM <span class="token operator">=</span> currentMaxTimestamp <span class="token operator">-</span> maxOutOfOrderness<span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>potentialWM <span class="token operator">>=</span> lastEmittedWatermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>lastEmittedWatermark <span class="token operator">=</span> potentialWM<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">T</span> element<span class="token punctuation">,</span> <span class="token keyword">long</span> previousElementTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> timestamp <span class="token operator">=</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span>element<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>timestamp <span class="token operator">></span> currentMaxTimestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>currentMaxTimestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="WaterMark类"><a href="#WaterMark类" class="headerlink" title="WaterMark类"></a><strong>WaterMark类</strong></h3><p><strong>点击方式</strong></p><p>直接搜waterMark</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** 不缓存元素的算子在他们得到watermark之后会向下游算子发送waterMark 缓存元素的算子比如window operators,必须waterMark之后往下游发送数据,需要watermark触发计算 */</span><span class="token annotation punctuation">@PublicEvolving</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">class</span> <span class="token class-name">Watermark</span> <span class="token keyword">extends</span> <span class="token class-name">StreamElement</span> <span class="token punctuation">&#123;</span><span class="token comment">/** The watermark that signifies end-of-event-time. */</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">Watermark</span> MAX_WATERMARK <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span><span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ------------------------------------------------------------------------</span><span class="token comment">/** The timestamp of the watermark in milliseconds. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">long</span> timestamp<span class="token punctuation">;</span><span class="token comment">/** * Creates a new watermark with the given timestamp in milliseconds. */</span><span class="token keyword">public</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>timestamp <span class="token operator">=</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Returns the timestamp associated with this &#123;@link Watermark&#125; in milliseconds. */</span><span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> timestamp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>RDD中有很多实现类,每一个RDD的实现类里</p><p>SparkRDD中都有一个compute方法,我们传入逻辑,改变compute方法,才能进行计算</p><p>Flink中所有的map与flatmap都对应一个(StreamOperator的实现类)</p><h3 id="WaterMark生成算子"><a href="#WaterMark生成算子" class="headerlink" title="WaterMark生成算子"></a>WaterMark生成算子</h3><p><strong>点击方式</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">map<span class="token punctuation">.</span>assignTimestampsAndWatermarks<span class="token operator">-></span>    <span class="token keyword">new</span> <span class="token class-name">TimestampsAndPeriodicWatermarksOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>cleanedAssigner<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">StreamOperator</span><span class="token operator">-></span>     <span class="token class-name">TimestampsAndPeriodicWatermarksOperator</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>源码解析</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 流操作算子,抓取流中的元素生成waterMark * @param &lt;T> The type of the input elements */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TimestampsAndPeriodicWatermarksOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token keyword">extends</span> <span class="token class-name">AbstractUdfStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token keyword">implements</span> <span class="token class-name">OneInputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">T</span><span class="token punctuation">></span></span><span class="token punctuation">,</span> <span class="token class-name">ProcessingTimeCallback</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token number">1L</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">long</span> watermarkInterval<span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">transient</span> <span class="token keyword">long</span> currentWatermark<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">TimestampsAndPeriodicWatermarksOperator</span><span class="token punctuation">(</span><span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> assigner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span>assigner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>chainingStrategy <span class="token operator">=</span> <span class="token class-name">ChainingStrategy</span><span class="token punctuation">.</span>ALWAYS<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token keyword">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>currentWatermark <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">;</span>watermarkInterval <span class="token operator">=</span> <span class="token function">getExecutionConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>watermarkInterval <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token function">getProcessingTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getProcessingTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerTimer</span><span class="token punctuation">(</span>now <span class="token operator">+</span> watermarkInterval<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processElement</span><span class="token punctuation">(</span><span class="token class-name">StreamRecord</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> element<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">final</span> <span class="token keyword">long</span> newTimestamp <span class="token operator">=</span> userFunction<span class="token punctuation">.</span><span class="token function">extractTimestamp</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>element<span class="token punctuation">.</span><span class="token function">hasTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">?</span> element<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MIN_VALUE<span class="token punctuation">)</span><span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span>element<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> newTimestamp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onProcessingTime</span><span class="token punctuation">(</span><span class="token keyword">long</span> timestamp<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// register next timer</span><span class="token class-name">Watermark</span> newWatermark <span class="token operator">=</span> userFunction<span class="token punctuation">.</span><span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newWatermark <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newWatermark<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> currentWatermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>currentWatermark <span class="token operator">=</span> newWatermark<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// emit watermark</span>output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span>newWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">long</span> now <span class="token operator">=</span> <span class="token function">getProcessingTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getCurrentProcessingTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getProcessingTimeService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">registerTimer</span><span class="token punctuation">(</span>now <span class="token operator">+</span> watermarkInterval<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Override the base implementation to completely ignore watermarks propagated from * upstream (we rely only on the &#123;@link AssignerWithPeriodicWatermarks&#125; to emit * watermarks from here). */</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">processWatermark</span><span class="token punctuation">(</span><span class="token class-name">Watermark</span> mark<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token comment">// if we receive a Long.MAX_VALUE watermark we forward it since it is used</span><span class="token comment">// to signal the end of input and to not block watermark progress downstream</span><span class="token keyword">if</span> <span class="token punctuation">(</span>mark<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE <span class="token operator">&amp;&amp;</span> currentWatermark <span class="token operator">!=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>currentWatermark <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span>mark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// emit a final watermark 如果新的waterMark比当前的waterMark大,就发送waterMark</span><span class="token class-name">Watermark</span> newWatermark <span class="token operator">=</span> userFunction<span class="token punctuation">.</span><span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>newWatermark <span class="token operator">!=</span> <span class="token keyword">null</span> <span class="token operator">&amp;&amp;</span> newWatermark<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">></span> currentWatermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>currentWatermark <span class="token operator">=</span> newWatermark<span class="token punctuation">.</span><span class="token function">getTimestamp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// emit watermark</span>output<span class="token punctuation">.</span><span class="token function">emitWatermark</span><span class="token punctuation">(</span>newWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-waterMark实战分析"><a href="#6-waterMark实战分析" class="headerlink" title="6.waterMark实战分析"></a>6.waterMark实战分析</h2><p><strong>数据</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">sensor_1<span class="token punctuation">,</span><span class="token number">1610506279</span><span class="token punctuation">,</span><span class="token number">5</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506280</span><span class="token punctuation">,</span><span class="token number">10</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506281</span><span class="token punctuation">,</span><span class="token number">20</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506282</span><span class="token punctuation">,</span><span class="token number">30</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506283</span><span class="token punctuation">,</span><span class="token number">40</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506284</span><span class="token punctuation">,</span><span class="token number">50</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506285</span><span class="token punctuation">,</span><span class="token number">60</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506286</span><span class="token punctuation">,</span><span class="token number">70</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506287</span><span class="token punctuation">,</span><span class="token number">80</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506290</span><span class="token punctuation">,</span><span class="token number">100</span>sensor_1<span class="token punctuation">,</span><span class="token number">1610506292</span><span class="token punctuation">,</span><span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>程序</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">FoldFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>timestamps<span class="token punctuation">.</span></span><span class="token class-name">BoundedOutOfOrdernessTimestampExtractor</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>watermark<span class="token punctuation">.</span></span><span class="token class-name">Watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>assigners<span class="token punctuation">.</span></span><span class="token class-name">TumblingEventTimeWindows</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-14 15:17 * 这个程序主要根据源码重写waterMark方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink07_Window_WaterMark_MyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 设定事件时间语义</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 设置生成watermark的周期</span>        env<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 获取nc数据</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> socketTextStream <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">socketTextStream</span><span class="token punctuation">(</span><span class="token string">"hadoop102"</span><span class="token punctuation">,</span> <span class="token number">9999</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 指定事件时间字段</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> watermarks <span class="token operator">=</span> socketTextStream<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">long</span> currentTimeStamp <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span><span class="token comment">//用于存储当前元素的时间语义</span>            <span class="token comment">//允许迟到的数据</span>            <span class="token keyword">long</span> maxDelayAllowed <span class="token operator">=</span> <span class="token number">2000L</span><span class="token punctuation">;</span>            <span class="token comment">//当前水位线</span>            <span class="token keyword">long</span> currentWaterMark<span class="token punctuation">;</span>            <span class="token keyword">private</span> <span class="token keyword">long</span> lastEmittedWatermark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9223372036854775808L</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Nullable</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Watermark</span> <span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> potentialWM<span class="token punctuation">;</span><span class="token comment">//定义判断水位线</span>                potentialWM <span class="token operator">=</span> currentTimeStamp <span class="token operator">-</span> maxDelayAllowed<span class="token punctuation">;</span>                <span class="token comment">//保证waterMark自增</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>potentialWM <span class="token operator">>=</span> lastEmittedWatermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    lastEmittedWatermark <span class="token operator">=</span> potentialWM<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前水位线:"</span> <span class="token operator">+</span> lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">long</span> timeStamp <span class="token operator">=</span> <span class="token class-name">Long</span><span class="token punctuation">.</span><span class="token function">parseLong</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000L</span><span class="token punctuation">;</span>                <span class="token comment">//取最大的作为当前时间戳</span>                currentTimeStamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>timeStamp<span class="token punctuation">,</span> currentTimeStamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">",EventTime:"</span> <span class="token operator">+</span> timeStamp <span class="token operator">+</span> <span class="token string">",水位线:"</span> <span class="token operator">+</span> currentWaterMark<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> timeStamp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x4 转换为键值对</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> string2One <span class="token operator">=</span> watermarks<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Tuple2</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> fields <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Tuple2</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x5 分组开窗处理数据</span>        string2One<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">">>>>>>>>>>>>输出数据>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x6 执行数据</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>Windowing</strong>：就是负责该如何生成Window，比如Fixed Window、Slide Window，当你配置好生成Window的策略时，Window就会根据时间动态生成，最终得到一个一个的Window，包含一个时间范围：[起始时间, 结束时间)，它们是一个一个受限于该时间范围的事件记录的容器，每个Window会收集一堆记录，满足指定条件会触发Window内事件记录集合的计算处理。</p><p><strong>WaterMark</strong>：它其实不太好理解，可以将它定义为一个函数E=f(P)，当前处理系统的处理时间P，根据一定的策略f会映射到一个事件时间E，可见E在坐标系中的表现形式是一条曲线，根据f的不同曲线形状也不同。假设，处理时间12:00:00，我希望映射到事件时间11:59:30，这时对于延迟30秒以内（事件时范围11:59:30~12:00:00）的事件记录到达处理系统，都指派到时间范围包含处理时间12:00:00这个Window中。事件时间超过12:00:00的就会由Trigger去做补偿了。</p><p><strong>Trigger</strong>：为了满足实际不同的业务需求，对上述事件记录指派给Window未能达到实际效果，而做出的一种补偿，比如事件记录在WaterMark时间戳之后到达事件处理系统，因为已经在对应的Window时间范围之后，我有很多选择：选择丢弃，选择是满足延迟3秒后还是指派给该Window，选择只接受对应的Window时间范围之后的5个事件记录，等等，这都是满足业务需要而制定的触发Window重新计算的策略，所以非常灵活。</p><h3 id="6-1-总结"><a href="#6-1-总结" class="headerlink" title="6.1 总结"></a>6.1 总结</h3><p>watermark本质是一个不断生成的在流中的时间戳</p><p>waterMark是真正触发缓存算子计算的时间</p><p>用于处理乱序数据</p><h2 id="7-WaterMark实战分析2"><a href="#7-WaterMark实战分析2" class="headerlink" title="7.WaterMark实战分析2"></a>7.WaterMark实战分析2</h2><p><strong>自定义数据源</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>source</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">SensorReading</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>source<span class="token punctuation">.</span></span><span class="token class-name">SourceFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">HashMap</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Map</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Random</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2021-01-08 21:07 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink05_Source_UDFSource</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 创建执行环境</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 获取执行环境</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> sensorDS <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x2 打印环境</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> sensorDS<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MapFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">map</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span> sensorReading<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> sensorReading<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x3 启动环境</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//0x0 定义自定义数据源</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MySource</span> <span class="token keyword">implements</span> <span class="token class-name">SourceFunction</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>        <span class="token comment">//定义标记控制数据的运行</span>        <span class="token keyword">private</span> <span class="token keyword">boolean</span> running <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token comment">//定义一个随机数据</span>        <span class="token keyword">private</span> <span class="token class-name">Random</span> random <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//定义基准温度数组</span>        <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token class-name">SourceContext</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> sourceContext<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//0x0 造数据 给传感器赋值</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">SensorReading</span> sensorReading <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"sensor_"</span> <span class="token operator">+</span> i<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span><span class="token string">"sensor_"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">10000000L</span><span class="token punctuation">,</span> <span class="token number">60D</span><span class="token operator">+</span>random<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>running<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//0x1 发送数据</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token operator">:</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//设定温度</span>                    <span class="token keyword">double</span> v <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTemp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextGaussian</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span><span class="token punctuation">;</span>                    <span class="token comment">//每次温度都要增大</span>                    map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setTemp</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//设定时间每次都要增大</span>                    <span class="token keyword">long</span> ts <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> random<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token class-name">SensorReading</span> sensorReading <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                    sensorReading<span class="token punctuation">.</span><span class="token function">setTs</span><span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                    System.out.println(i);</span><span class="token comment">//                    System.out.println(map.get(s).getTs());</span>                    <span class="token comment">//写出数据</span>                    sourceContext<span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span>sensorReading<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//停顿一下</span>                    <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token annotation punctuation">@Override</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">cancel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            running<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>模拟实战数据</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>beans<span class="token punctuation">.</span></span><span class="token class-name">SensorReading</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">com<span class="token punctuation">.</span>ecust<span class="token punctuation">.</span>source<span class="token punctuation">.</span></span><span class="token class-name">Flink05_Source_UDFSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>common<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">MapFunction</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>api<span class="token punctuation">.</span>java<span class="token punctuation">.</span>tuple<span class="token punctuation">.</span></span><span class="token class-name">Tuple2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span></span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">DataStreamSource</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>datastream<span class="token punctuation">.</span></span><span class="token class-name">SingleOutputStreamOperator</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>environment<span class="token punctuation">.</span></span><span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span></span><span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>watermark<span class="token punctuation">.</span></span><span class="token class-name">Watermark</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span>time<span class="token punctuation">.</span></span><span class="token class-name">Time</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">javax<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">Nullable</span><span class="token punctuation">;</span><span class="token comment">/** * @author JueQian * @create 01-14 15:17 * 这个程序主要根据源码重写waterMark方法 * 在上个程序中,主要测试了watermark的生成 * 但是使用的是端口数据 * 端口数据发送较慢,一般一个数据后面会生成多个waterMark,不符合正常使用 * 使用自定义数据源 * * 参数:watermark间隔:2s * 滚动窗口:5s * 无序度:2s * 事件产生速率:0.3s */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Flink08_Window_WaterMark_MyTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//0x0 获取执行环境 并配置一些环境参数</span>        <span class="token class-name">StreamExecutionEnvironment</span> env <span class="token operator">=</span> <span class="token class-name">StreamExecutionEnvironment</span><span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">setParallelism</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">getConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAutoWatermarkInterval</span><span class="token punctuation">(</span><span class="token number">2000L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//好像没用 啊,亲</span>        env<span class="token punctuation">.</span><span class="token function">setStreamTimeCharacteristic</span><span class="token punctuation">(</span><span class="token class-name">TimeCharacteristic</span><span class="token punctuation">.</span><span class="token class-name">EventTime</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//0x1 获取自定义数据源</span>        <span class="token class-name">DataStreamSource</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> sensor <span class="token operator">=</span> env<span class="token punctuation">.</span><span class="token function">addSource</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flink05_Source_UDFSource</span><span class="token punctuation">.</span><span class="token class-name">MySource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SingleOutputStreamOperator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span> singleOutputStreamOperator <span class="token operator">=</span> sensor<span class="token punctuation">.</span><span class="token function">assignTimestampsAndWatermarks</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">AssignerWithPeriodicWatermarks</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">SensorReading</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//当前流时间</span>            <span class="token keyword">long</span> currentMaxTimestamp <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>            <span class="token comment">//当前流waterMark</span>            <span class="token keyword">long</span> lastEmittedWatermark <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">9223372036854775808L</span><span class="token punctuation">;</span>            <span class="token comment">//当前流无序度</span>            <span class="token keyword">long</span> maxOutOfOrderness <span class="token operator">=</span> <span class="token number">2000L</span><span class="token punctuation">;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token class-name">Watermark</span> <span class="token function">getCurrentWatermark</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">long</span> potentialWM <span class="token operator">=</span> currentMaxTimestamp <span class="token operator">-</span> maxOutOfOrderness<span class="token punctuation">;</span>                <span class="token comment">//保证自增</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>potentialWM <span class="token operator">>=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastEmittedWatermark<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    lastEmittedWatermark <span class="token operator">=</span> potentialWM<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"当前WaterMark为:"</span> <span class="token operator">+</span> lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Watermark</span><span class="token punctuation">(</span>lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">extractTimestamp</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span> sensorReading<span class="token punctuation">,</span> <span class="token keyword">long</span> l<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Long</span> timestamp <span class="token operator">=</span> sensorReading<span class="token punctuation">.</span><span class="token function">getTs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">//如果事件的时间比较小,则不会更新时间戳</span>                currentMaxTimestamp <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>currentMaxTimestamp<span class="token punctuation">,</span> timestamp<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"key:"</span> <span class="token operator">+</span> sensorReading<span class="token punctuation">.</span><span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">",EventTime:"</span> <span class="token operator">+</span> timestamp <span class="token operator">+</span> <span class="token string">",水位线:"</span> <span class="token operator">+</span> lastEmittedWatermark<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> timestamp<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        singleOutputStreamOperator<span class="token punctuation">.</span><span class="token function">keyBy</span><span class="token punctuation">(</span><span class="token class-name">SensorReading</span><span class="token operator">::</span><span class="token function">getId</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">timeWindow</span><span class="token punctuation">(</span><span class="token class-name">Time</span><span class="token punctuation">.</span><span class="token function">seconds</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">maxBy</span><span class="token punctuation">(</span><span class="token string">"temp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"输出结果>>>>>>>>>>>>>"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        env<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token string">"test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>结果</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">当前<span class="token class-name">WaterMark</span>为<span class="token operator">:</span><span class="token number">1610660784344</span>    <span class="token comment">//更新水位线 结束水位线之前的时间戳的窗口 </span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660787098</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[85000,90000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660787819</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[85000,90000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660788714</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[85000,90000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660789119</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[85000,90000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660789771</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[85000,90000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660790678</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[90000,95000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660791328</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[90000,95000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660791645</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[90000,95000]</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660795319</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[95000,100000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660795944</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[95000,100000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660796642</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[95000,100000]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660796926</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660784344</span><span class="token comment">//[95000,100000]</span>当前<span class="token class-name">WaterMark</span>为<span class="token operator">:</span><span class="token number">1610660794926</span> <span class="token comment">//[更新水位线时间是94926>90000 关闭90000之前的窗口]</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660797035</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660794926</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660797673</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660794926</span>key<span class="token operator">:</span>sensor_1<span class="token punctuation">,</span><span class="token class-name">EventTime</span><span class="token operator">:</span><span class="token number">1610660798467</span><span class="token punctuation">,</span>水位线<span class="token operator">:</span><span class="token number">1610660794926</span>输出<span class="token operator">>></span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>id<span class="token operator">=</span>sensor_1<span class="token punctuation">,</span> ts<span class="token operator">=</span><span class="token number">1610660782065</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">71.80984937005488</span><span class="token punctuation">)</span>输出<span class="token operator">>></span> <span class="token class-name">SensorReading</span><span class="token punctuation">(</span>id<span class="token operator">=</span>sensor_1<span class="token punctuation">,</span> ts<span class="token operator">=</span><span class="token number">1610660789119</span><span class="token punctuation">,</span> temp<span class="token operator">=</span><span class="token number">93.17010762180462</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-1总结"><a href="#7-1总结" class="headerlink" title="7.1总结"></a>7.1总结</h3><p>问题:不知道为什么水位线不更新(200ms)</p><p>每200ms更新一次水位线,如果水位线更新之后时间,存在窗口没有关闭,则触发计算</p><p>window是一种缓存算子</p><pre class="mermaid">graph LRA[window]-->B[timeWindow]A-->C[globalWindow]</pre><ul><li>Collections.singletonList()返回的是不可变的集合，但是这个长度的集合只有1，可以减少内存空间。但是返回的值依然是Collections的内部实现类，同样没有add的方法，调用add，set方法会报错</li></ul><h1 id="0x5-WaterMark与Window的源码结构总结"><a href="#0x5-WaterMark与Window的源码结构总结" class="headerlink" title="0x5 WaterMark与Window的源码结构总结"></a>0x5 WaterMark与Window的源码结构总结</h1><h2 id="1-WaterMark与时间戳提取器源码结构"><a href="#1-WaterMark与时间戳提取器源码结构" class="headerlink" title="1.WaterMark与时间戳提取器源码结构"></a>1.WaterMark与时间戳提取器源码结构</h2><p>用于提取时间戳与waterMark</p><pre class="mermaid">graph TDA[TimestampAssigner]-->B[AssignerWithPeriodicWatermarks]A-->C[AssignerWithPunctuatedWatermarks]B-->D[AscendingTimestampExtractor]B-->G[BoundedOutOfOrdernessTImestamoExtractor]</pre><h2 id="2-数据流源码结构"><a href="#2-数据流源码结构" class="headerlink" title="2.数据流源码结构"></a>2.数据流源码结构</h2><p>数据流种类</p><pre class="mermaid">graph TDA[DataStream]-->B[SingleOutputStreamOperator]A-->C[SplitStream]A-->D[KeyedStream]B-->G[IterativeStream]B-->E[DataStreamSource]</pre><h2 id="3-算子源码结构"><a href="#3-算子源码结构" class="headerlink" title="3.算子源码结构"></a>3.算子源码结构</h2><p>算子源码种类与结构</p><pre class="mermaid">graph TDA[StreamOperator]-->B[TwoInputOperator]A-->C[OneInputStreamOperator]C-->D[TimestampsAndPeriodicWaterMarksOperator]C-->F[WindowOperator]C-->G[StreamMap]C-->I[...]</pre><h2 id="4-WaterMark使用源码流程"><a href="#4-WaterMark使用源码流程" class="headerlink" title="4.WaterMark使用源码流程"></a>4.WaterMark使用源码流程</h2><p>如果获取WaterMark以及如何往下级发送</p><p>先提取事件事件,然后获得当前的WaterMark</p><pre class="mermaid">graph TDA[提取-AssignerWithPeriodicWatermarks]-->B[extractTimestamp]-->C[getCurrentWatermark]</pre><p><strong>结论</strong>:所以每个record的waterMark都是上一级的waterMark,因为每次获取事件的时间戳之后都要减去无序度</p><p>循环发送waterMark</p><p><strong>执行:TimestampsAndPeriodicWatermarksOperator</strong></p><pre class="mermaid">graph TDA[提取-Operator]-->B[open-定时200ms]--响应-->C[onTime-getCurrentWaterMark]C--回调-->D[定时200ms]D--响应-->CC-->E{new>current}E--emitWatermark-->F[下级算子]</pre><p><strong>结论</strong>:使用定时器来回调实现每隔200s进行发送,可以设置,但是只有当取生成的waterMark比现在的waterMark大才会进行往下级发送</p><h2 id="5-WaterMark类源码继承树结构"><a href="#5-WaterMark类源码继承树结构" class="headerlink" title="5.WaterMark类源码继承树结构"></a>5.WaterMark类源码继承树结构</h2><pre class="mermaid">graph TDA[StreamElement]-->B[StreamRecord]A-->C[StreamStatus]A-->D[WaterMark]A-->E[latencyMarker]</pre><p>**结论:**waterMark本质是时间戳,跟Record一样,在流中</p><h2 id="6-总结-使用WaterMark具体流程-抽象"><a href="#6-总结-使用WaterMark具体流程-抽象" class="headerlink" title="6.总结:使用WaterMark具体流程 抽象"></a>6.总结:使用WaterMark具体流程 抽象</h2><p>指定-提取-发送</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/Watermark.png" alt="water抽象示意图"></p><h1 id="0x6-Window源码继承关系"><a href="#0x6-Window源码继承关系" class="headerlink" title="0x6 Window源码继承关系"></a>0x6 Window源码继承关系</h1><p>上面图已经讲明白,KeyedStream继承于DataStream</p><h2 id="1-KeyedStream的Window方法"><a href="#1-KeyedStream的Window方法" class="headerlink" title="1.KeyedStream的Window方法"></a>1.KeyedStream的Window方法</h2><pre class="mermaid">graph LRA[KeyedStream]-->B[m-timeWindow]-->H[window/TumblingEventTimeWindows]A-->C[m-countwindow]-->I[window/GlobalWindows.create]A-->D[m-window]-->E[WindowedStream/this assigner]</pre><p>**结论:**window的方法比如<code>timewindow</code>,底层都是<code>window(windowAssigner)</code>执行的</p><p>而window的底层是windowStream</p><h2 id="2-windowAssigner的作用与源码"><a href="#2-windowAssigner的作用与源码" class="headerlink" title="2.windowAssigner的作用与源码"></a>2.windowAssigner的作用与源码</h2><p>Flink has several built-in types of window assigners, which are illustrated below:</p><p><img src="https://ci.apache.org/projects/flink/flink-docs-release-1.12/fig/window-assigners.svg" alt="Window assigners"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">*</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@code</span> <span class="token class-name">WindowAssigner</span><span class="token punctuation">&#125;</span> assigns zero or more <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@link</span> <span class="token class-name">Window</span> <span class="token class-name">Windows</span><span class="token punctuation">&#125;</span> <span class="token keyword">to</span> <span class="token namespace">an</span> element<span class="token punctuation">.</span><span class="token operator">*</span><span class="token operator">*</span> <span class="token generics"><span class="token punctuation">&lt;</span>p<span class="token punctuation">></span></span><span class="token class-name">In</span> a window operation<span class="token punctuation">,</span> elements are grouped by their key <span class="token punctuation">(</span><span class="token keyword">if</span> available<span class="token punctuation">)</span> and by the windows <span class="token keyword">to</span> <span class="token namespace">which</span> it was assigned<span class="token punctuation">.</span> <span class="token class-name">The</span> set of elements <span class="token keyword">with</span> <span class="token namespace">the</span> same key and window is called a pane<span class="token punctuation">.</span><span class="token operator">*</span> <span class="token class-name">When</span> a <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@link</span> <span class="token class-name">Trigger</span><span class="token punctuation">&#125;</span> decides that a certain pane should fire the<span class="token operator">*</span> <span class="token punctuation">&#123;</span><span class="token annotation punctuation">@link</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>flink<span class="token punctuation">.</span>streaming<span class="token punctuation">.</span>api<span class="token punctuation">.</span>functions<span class="token punctuation">.</span>windowing<span class="token punctuation">.</span><span class="token class-name">WindowFunction</span><span class="token punctuation">&#125;</span> is applied<span class="token operator">*</span> <span class="token keyword">to</span> <span class="token namespace">produce</span> output elements <span class="token keyword">for</span> that pane<span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>主要用是分配一个或者多个窗口给新来的元素</p><p>一个元素的集合拥有相同的key与窗口称为窗格</p><p>watermark之后Trigger触发WindowFunction的计算</p><pre class="mermaid">graph LRA[WindowAssigner]-->B[SildingEventTimeWIndows]A-->C[TumbingEventTimeWIndows]A-->D[...]</pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** The window assigner. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token class-name">WindowAssigner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> windowAssigner<span class="token punctuation">;</span><span class="token comment">/** The trigger that is used for window evaluation/emission. */</span><span class="token keyword">private</span> <span class="token class-name">Trigger</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> trigger<span class="token punctuation">;</span><span class="token comment">/** The evictor that is used for evicting elements before window evaluation. */</span><span class="token keyword">private</span> <span class="token class-name">Evictor</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> evictor<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-总结"><a href="#3-总结" class="headerlink" title="3.总结"></a>3.总结</h3><p>window其实就两种类型:timeWindow与Globalwindow</p><p>countWindow是GlobalWindow+定制的trigger+evictor实现的</p><p>timeWindow这些方法底层都是<code>window(windowAssigner)</code></p><p>windowAssigner是各种各样的窗口类型</p><p>window的底层是WindowStream</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//keyedStream->countwindow 调用方法底层是window</span><span class="token keyword">public</span> <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> KEY<span class="token punctuation">,</span> <span class="token class-name">GlobalWindow</span><span class="token punctuation">></span></span> <span class="token function">countWindow</span><span class="token punctuation">(</span><span class="token keyword">long</span> size<span class="token punctuation">,</span> <span class="token keyword">long</span> slide<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">GlobalWindows</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">evictor</span><span class="token punctuation">(</span><span class="token class-name">CountEvictor</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>size<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token class-name">CountTrigger</span><span class="token punctuation">.</span><span class="token function">of</span><span class="token punctuation">(</span>slide<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//keyedStream window底层是WindowedStream</span><span class="token annotation punctuation">@PublicEvolving</span><span class="token keyword">public</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">W</span> <span class="token keyword">extends</span> <span class="token class-name">Window</span><span class="token punctuation">></span></span> <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> KEY<span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> <span class="token function">window</span><span class="token punctuation">(</span><span class="token class-name">WindowAssigner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> assigner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">WindowedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> assigner<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//--></span><span class="token punctuation">&#125;</span><span class="token comment">//----------------------------------------------------</span><span class="token comment">//WindowedStream</span><span class="token comment">/*the stream of elements is split into windows based on a &#123;windowing.assigners.WindowAssigner&#125;. Window emission is triggered based on a &#123;windowing.triggers.Trigger&#125;.*/</span><span class="token annotation punctuation">@PublicEvolving</span><span class="token keyword">public</span> <span class="token class-name">WindowedStream</span><span class="token punctuation">(</span><span class="token class-name">KeyedStream</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">K</span><span class="token punctuation">></span></span> input<span class="token punctuation">,</span><span class="token class-name">WindowAssigner</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">T</span><span class="token punctuation">,</span> <span class="token class-name">W</span><span class="token punctuation">></span></span> windowAssigner<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>input <span class="token operator">=</span> input<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>windowAssigner <span class="token operator">=</span> windowAssigner<span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>trigger <span class="token operator">=</span> windowAssigner<span class="token punctuation">.</span><span class="token function">getDefaultTrigger</span><span class="token punctuation">(</span>input<span class="token punctuation">.</span><span class="token function">getExecutionEnvironment</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>各种window的继承树</p><pre class="mermaid">graph LRA[window]-->B[windowAssigner]-->C[各种window]</pre><h2 id="3-windowAssigner的理解-更新20210125"><a href="#3-windowAssigner的理解-更新20210125" class="headerlink" title="3.windowAssigner的理解(更新20210125)"></a>3.windowAssigner的理解(更新20210125)</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/windowAssigner%E7%9A%84%E7%90%86%E8%A7%A3.png" alt="windowAssigner的理解"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/WindowAssigner%E6%BA%90%E7%A0%81%E5%88%86%E9%85%8D.png" alt="windowAssigner的源码理解"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java02_中级</title>
      <link href="2018/06/12/Java%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/"/>
      <url>2018/06/12/Java%E9%AB%98%E7%BA%A7%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="第11章-枚举"><a href="#第11章-枚举" class="headerlink" title="第11章 枚举"></a>第11章 枚举</h1><h2 id="10-1-什么是枚举"><a href="#10-1-什么是枚举" class="headerlink" title="10.1 什么是枚举"></a>10.1 什么是枚举</h2><p>对象是固定个数，可以穷举的类型是枚举</p><p>枚举类不能创建新的对象</p><p>枚举项之间用逗号隔开</p><p>枚举量要大写（final）</p><h4 id="示例："><a href="#示例：" class="headerlink" title="示例："></a>示例：</h4><p>季节</p><p>性别</p><p>月份</p><h2 id="10-2-如何定义枚举类型"><a href="#10-2-如何定义枚举类型" class="headerlink" title="10.2 如何定义枚举类型"></a>10.2 如何定义枚举类型</h2><p>枚举类型与其他类型一样，对象在堆空间中，栈针中的变量名指向枚举类的首地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TrafficSignal</span> trafficSignal <span class="token operator">=</span> <span class="token class-name">TrafficSignal</span><span class="token punctuation">.</span>CAUTION<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>trafficSignal<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">TrafficSignal</span><span class="token punctuation">&#123;</span>    STOP<span class="token punctuation">,</span>GO<span class="token punctuation">,</span>CAUTION<span class="token punctuation">;</span><span class="token comment">//以在类外只能使用类名.枚举项。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-2-1-原理说明"><a href="#10-2-1-原理说明" class="headerlink" title="10.2.1 原理说明"></a>10.2.1 原理说明</h3><p>枚举类中，成员变量被final和static修饰，默认的，不用写</p><p>本质是类，很特殊的类</p><p>本省不能创建new对象，不能被继承</p><p>枚举类中写的都是==成员变量== ,本质属于类变量</p><h3 id="10-2-2-知识补充-成员变量"><a href="#10-2-2-知识补充-成员变量" class="headerlink" title="10.2.2 知识补充 成员变量"></a>10.2.2 知识补充 成员变量</h3><p>成员变量只与类相关，与对象的创建无关，随着类的加载而加载，不在内存的空间中，在调用时最好使用类调用，放置误解</p><h4 id="lt-1-gt-初始化成员变量"><a href="#lt-1-gt-初始化成员变量" class="headerlink" title="&lt;1&gt; 初始化成员变量"></a>&lt;1&gt; 初始化成员变量</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170012.png" alt="img"></p><h4 id="lt-2-gt-第一步类加载（加载成员变量）"><a href="#lt-2-gt-第一步类加载（加载成员变量）" class="headerlink" title="&lt;2&gt; 第一步类加载（加载成员变量）"></a>&lt;2&gt; 第一步类加载（加载成员变量）</h4><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200810182333381.png" alt="image-20200810182333381"></p><h4 id="lt-3-gt-第二步创建类对象-成员变量归属于类内存"><a href="#lt-3-gt-第二步创建类对象-成员变量归属于类内存" class="headerlink" title="&lt;3&gt; 第二步创建类对象 成员变量归属于类内存"></a>&lt;3&gt; 第二步创建类对象 成员变量归属于类内存</h4><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200810182419379.png" alt="image-20200810182419379" style="zoom:80%;" /><blockquote><p>参考：<a href="https://blog.csdn.net/weixin_37012881/article/details/82699089">https://blog.csdn.net/weixin_37012881/article/details/82699089</a></p></blockquote><h2 id="10-3-枚举类的常用方法"><a href="#10-3-枚举类的常用方法" class="headerlink" title="10.3 枚举类的常用方法"></a>10.3 枚举类的常用方法</h2><p><code>enum</code> 定义的枚举类默认继承了 <code>java.lang.Enum </code>类，并实现了 <code>java.lang.Seriablizable</code> 和 <code>java.lang.Comparable </code>两个接口。</p><p><code>values()</code>, <code>ordinal() </code>和 <code>valueOf() </code>方法位于 <code>java.lang.Enum </code>类中：</p><ul><li><code>values() </code>返回枚举类中所有的值，获得枚举对象的数组。</li><li><code>ordinal()</code>方法可以找到每个枚举常量的索引，就像数组索引一样。</li><li><code>valueOf()</code>方法返回指定字符串值的枚举常量。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170021.png" alt="image-20200810191351613"></p><h3 id="10-3-1-values-ordinal-与-枚举数组的成员迭代-增强for"><a href="#10-3-1-values-ordinal-与-枚举数组的成员迭代-增强for" class="headerlink" title="10.3.1 values()  ordinal() 与 枚举数组的成员迭代 ==增强for=="></a>10.3.1 values()  ordinal() 与 枚举数组的成员迭代 ==增强for==</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weekends</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Week</span><span class="token punctuation">[</span><span class="token punctuation">]</span> weeks <span class="token operator">=</span> <span class="token class-name">Week</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Values()返回枚举数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Week</span> week <span class="token operator">:</span> weeks<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//枚举数组的成员迭代方法</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> week<span class="token punctuation">.</span><span class="token function">ordinal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取week枚举项的索引</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>week <span class="token operator">+</span> <span class="token string">": "</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">Week</span><span class="token punctuation">&#123;</span>    MON<span class="token punctuation">,</span>TUE<span class="token punctuation">,</span>WED<span class="token punctuation">,</span>THU<span class="token punctuation">,</span>FRI<span class="token punctuation">,</span>SAT<span class="token punctuation">,</span>SUN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="10-3-2-value-of-返回指定字符串的枚举常量"><a href="#10-3-2-value-of-返回指定字符串的枚举常量" class="headerlink" title="10.3.2 value of() 返回指定字符串的枚举常量"></a>10.3.2 value of() 返回指定字符串的枚举常量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weekends</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Week</span> a <span class="token operator">=</span> <span class="token class-name">Week</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token string">"FRI"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">Week</span><span class="token punctuation">&#123;</span>    MON<span class="token punctuation">,</span>TUE<span class="token punctuation">,</span>WED<span class="token punctuation">,</span>THU<span class="token punctuation">,</span>FRI<span class="token punctuation">,</span>SAT<span class="token punctuation">,</span>SUN<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-4-在switch中使用枚举方法与-常量"><a href="#10-4-在switch中使用枚举方法与-常量" class="headerlink" title="10.4 在switch中使用枚举方法与==常量=="></a>10.4 在switch中使用枚举方法与==常量==</h2><p> 穷举变量可能的值. 变量的数据类型必须是byte, short, int , char, String, 枚举类</p><p>​    case 常量1 :    常量 : ==字面量（int之类）==和被==final修饰的量==<br>​    case 常量2 :</p><p>常量：内存空间的值不能刷新都常量</p><p>常量：字面量 5 “123” 和 被final修饰的量</p><p>如果不用break，则会直接full through倒底</p><p>&lt;1&gt; 常量：程序在执行过程中其值是不可以改变的量叫做常量。</p><p>&lt;2&gt; Java中的常量： Java中常量是分两种的一种是字面值常量一种是面向对象常量，今天我要记载的是字面值常量。</p><p>&lt;3&gt; 字面值常量：</p><ul><li> 字符串常量 ：双引号内包括的内容，特点是双引号内。</li><li>整数常量   ： 所有整数</li><li>小数常量   ：所有小数</li><li>布尔常量   ：其值比较特殊，只有两个值一个是true（正确的），一个是false（错误的），特点是单词不能拼写错误。</li><li>空常量     ：null</li><li>char字符常量   ：单引号内包括的内容，只能是单个数字，单个字母或者单个字符</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EnumTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TrafficSignal</span><span class="token punctuation">[</span><span class="token punctuation">]</span> tss <span class="token operator">=</span> <span class="token class-name">TrafficSignal</span><span class="token punctuation">.</span><span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">TrafficSignal</span> sign <span class="token operator">=</span> tss<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span> <span class="token punctuation">(</span>sign<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> STOP<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"红灯停"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> GO<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"绿灯行"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> CAUTION<span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"黄灯等一等"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">enum</span> <span class="token class-name">TrafficSignal</span><span class="token punctuation">&#123;</span>    STOP<span class="token punctuation">,</span>GO<span class="token punctuation">,</span>CAUTION<span class="token punctuation">;</span><span class="token comment">//以在类外只能使用类名.枚举项。</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-5-命令行参数的使用"><a href="#10-5-命令行参数的使用" class="headerlink" title="10.5 命令行参数的使用"></a>10.5 命令行参数的使用</h2><p>执行命令带参数</p><p><code>args[0]</code>命令行参数第一个 </p><p>arguments 实参</p><p>parameter 形参</p><p>方法在调用时，方法的形参在调用时变成实参、</p><p>传递用命令行参数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//接受参数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="10-6-枚举的属性添加-重点"><a href="#10-6-枚举的属性添加-重点" class="headerlink" title="10.6 枚举的属性添加==重点=="></a>10.6 枚举的属性添加==重点==</h2><p>给week枚举加上属性</p><p>String feel；</p><p>反编译的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">enum</span> <span class="token class-name">Season</span> <span class="token punctuation">&#123;</span>    <span class="token function">SPRING</span><span class="token punctuation">(</span><span class="token string">"绿色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">SUMMER</span><span class="token punctuation">(</span><span class="token string">"红色"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AUTUMN<span class="token punctuation">,</span> WINTER<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color <span class="token operator">=</span> <span class="token string">"黑色"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token class-name">Season</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"Season&#123;"</span> <span class="token operator">+</span>                <span class="token string">"color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SeasonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Season</span> summer <span class="token operator">=</span> <span class="token class-name">Season</span><span class="token punctuation">.</span>SUMMER<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>summer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第11章-java常用类"><a href="#第11章-java常用类" class="headerlink" title="第11章 java常用类"></a>第11章 java常用类</h1><h2 id="11-1-object类"><a href="#11-1-object类" class="headerlink" title="11.1 object类"></a>11.1 object类</h2><p>object是所有类的父类 root</p><h3 id="11-1-1-方法equals"><a href="#11-1-1-方法equals" class="headerlink" title="11.1.1 方法equals()"></a>11.1.1 方法equals()</h3><h4 id="1-equals不写成抽象方法的原因"><a href="#1-equals不写成抽象方法的原因" class="headerlink" title="1 equals不写成抽象方法的原因"></a>1 equals不写成抽象方法的原因</h4><p>不写成抽象方法有些子类不需要比较不用实现</p><p>，要想使用必须重写，这种称为==虚拟方法==</p><p>这是Object父类中的写法, 这个写法的代码很烂. 必须重写才能完成内容的比较</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>重写之后的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token class-name">Point</span> point <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Point</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>    <span class="token keyword">return</span> x <span class="token operator">==</span> point<span class="token punctuation">.</span>x <span class="token operator">&amp;&amp;</span> y <span class="token operator">==</span> point<span class="token punctuation">.</span>y<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-1-2-hashCode"><a href="#11-1-2-hashCode" class="headerlink" title="11.1.2 ==hashCode=="></a>11.1.2 ==hashCode==</h3><p><img src="images/image-20200813102143834.png" alt="image-20200813102143834"></p><p>哈希码 又称 散列码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>equals 是比较两个对象的内容是否相等</p><p>hashCode称为散列码, 又称为特征码, 特征码是根据内容计算的</p><p>如果两个对象的equals为true,说明两个对象内容相等, 内容相等,两个对象的特征码必须一致</p><p>如果两个对象的equals为false,说明两个对象内容不等, 内容不等,两个对象必须散列</p><p>如果两个对象的哈希码相等, 则两个对象的equals必须为true</p><p>如果两个对象的哈希码不等, 则两个对象的equals必须为false</p><h4 id="lt-1-gt-原始的哈希码"><a href="#lt-1-gt-原始的哈希码" class="headerlink" title="&lt;1&gt; 原始的哈希码"></a>&lt;1&gt; 原始的哈希码</h4><p> 这是原始的哈希码, 返回的码值是根据物理地址散列出来的, 必须重写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">native</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>绝对的散列不存在</p><h4 id="lt-2-gt-代码演示"><a href="#lt-2-gt-代码演示" class="headerlink" title="&lt;2&gt; 代码演示"></a>&lt;2&gt; 代码演示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-2-包装类"><a href="#11-2-包装类" class="headerlink" title="11.2 包装类"></a>11.2 包装类</h2><p>有了类的特点，就可以调用类中的方法</p><table><thead><tr><th><strong>基本数据类型</strong></th><th><strong>包装类</strong></th></tr></thead><tbody><tr><td><strong>boolean</strong></td><td><strong>Boolean</strong></td></tr><tr><td><strong>byte</strong></td><td><strong>Byte</strong></td></tr><tr><td><strong>short</strong></td><td><strong>Short</strong></td></tr><tr><td><strong>int</strong></td><td><strong>Integer</strong></td></tr><tr><td><strong>long</strong></td><td><strong>Long</strong></td></tr><tr><td><strong>char</strong></td><td><strong>Character</strong></td></tr><tr><td><strong>float</strong></td><td><strong>Float</strong></td></tr><tr><td><strong>double</strong></td><td><strong>Double</strong></td></tr></tbody></table><h3 id="11-2-1-包装类的类型转换"><a href="#11-2-1-包装类的类型转换" class="headerlink" title="11.2.1 包装类的类型转换"></a>11.2.1 包装类的类型转换</h3><h4 id="lt-1-gt-基本数据类型–-gt-包装类"><a href="#lt-1-gt-基本数据类型–-gt-包装类" class="headerlink" title="&lt;1&gt; 基本数据类型–&gt;包装类"></a>&lt;1&gt; 基本数据类型–&gt;包装类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Integer</span> t1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动装箱</span><span class="token class-name">Integer</span> t2 <span class="token operator">=</span> <span class="token number">500</span><span class="token punctuation">;</span><span class="token comment">//自动装箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="lt-2-gt-字符串参数-–-gt-包装类"><a href="#lt-2-gt-字符串参数-–-gt-包装类" class="headerlink" title="&lt;2&gt; ==字符串参数==–&gt;包装类"></a>&lt;2&gt; ==字符串参数==–&gt;包装类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Float</span> f <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Float</span><span class="token punctuation">(</span><span class="token string">"4.56"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Long</span> l <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Long</span><span class="token punctuation">(</span><span class="token string">"782a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//Exception in thread "main" java.lang.NumberFormatException: For input string: "789a"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-3-gt-包装类–-gt-基本数据类型"><a href="#lt-3-gt-包装类–-gt-基本数据类型" class="headerlink" title="&lt;3&gt; 包装类–&gt;基本数据类型"></a>&lt;3&gt; 包装类–&gt;基本数据类型</h4><p>拆箱</p><p>调用包装类中的方法：<code>.xxxValue</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b <span class="token operator">=</span> bObj<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动拆箱</span><span class="token keyword">boolean</span> n <span class="token operator">=</span> bObj<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="lt-4-gt-字符串–-gt-基本数据类型"><a href="#lt-4-gt-字符串–-gt-基本数据类型" class="headerlink" title="&lt;4&gt; 字符串–&gt;基本数据类型"></a>&lt;4&gt; 字符串–&gt;基本数据类型</h4><p>通过包装类的构造器实现：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token string">"12"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>通过包装类的<code>parseXxx(String s)</code>静态方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Float</span> f <span class="token operator">=</span> <span class="token class-name">Float</span><span class="token punctuation">.</span><span class="token function">parseFloat</span><span class="token punctuation">(</span><span class="token string">"12.1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-5-gt-基本数据类型–-gt-字符串"><a href="#lt-5-gt-基本数据类型–-gt-字符串" class="headerlink" title="&lt;5&gt; 基本数据类型–&gt;字符串"></a>&lt;5&gt; 基本数据类型–&gt;字符串</h4><p>调用字符串重载的<code>valueOf()</code>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> fstr <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token number">2.34f</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>更直接的方式：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> intStr <span class="token operator">=</span> <span class="token number">5</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="11-2-2-面试题目"><a href="#11-2-2-面试题目" class="headerlink" title="11.2.2 面试题目"></a>11.2.2 面试题目</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flase</span><span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//ture</span><span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//flase</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-3-String类"><a href="#11-3-String类" class="headerlink" title="11.3 String类"></a>11.3 String类</h2><p>String 是内容不可以改变的 ==unicode 字符序列==</p><p>内部是用一个 char[] 数组来保存所有字符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        str <span class="token operator">+=</span> <span class="token string">"def"</span><span class="token punctuation">;</span>        str <span class="token operator">+=</span> <span class="token string">"ghi"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>字符串的拼接在底部进行时，生成了 StringBuilder 的进行拼接</p><p>在底层任何对于字符串的修改都会产生新对象</p><p>适用于简单的应用场景</p><p>字符串 研究下标（偏移量）offset</p><h3 id="11-3-1-字符串常量定义"><a href="#11-3-1-字符串常量定义" class="headerlink" title="11.3.1 字符串常量定义"></a>11.3.1 字符串常量定义</h3><p>双引号引起来的都是字面量，都是字符串常量，事物唯一的，保存在虚拟机的常量区当中，常量区在方法区里</p><p>方法区数据永不卸载，</p><p>String : 内容不可改变的Unicode字符序列. 所以任何对于字符串内容的修改都会导致产生新对象.</p><ul><li>内部使用一个char[]来保存所有字符, 所以每个字符都有下标.</li><li>字符串常量 包括字面量, 都是默认保存在常量区中. 为的是提高效率,多次使用方便快捷.<h3 id="11-3-2-构造器创建字符串对象"><a href="#11-3-2-构造器创建字符串对象" class="headerlink" title="11.3.2 构造器创建字符串对象"></a>11.3.2 构造器创建字符串对象</h3>String类较常用构造方法</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span>value<span class="token punctuation">,</span><span class="token keyword">int</span> startIndex<span class="token punctuation">,</span><span class="token keyword">int</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//可以通过构造器进行截断,把字符数组编程字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>创建了新对象之后，在GC堆里</p><p>String重写了equals，全部换成了char数组，</p><h3 id="11-3-3-String底层"><a href="#11-3-3-String底层" class="headerlink" title="11.3.3 String底层"></a>11.3.3 String底层</h3><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200811112817943.png" alt="image-20200811112817943"></p><h4 id="lt-1-gt-String-str-“abc”与-String-str1-new-String-“abc”-区别"><a href="#lt-1-gt-String-str-“abc”与-String-str1-new-String-“abc”-区别" class="headerlink" title="&lt;1&gt; String str  = “abc”与 String str1 = new String(“abc”)==区别=="></a>&lt;1&gt; String str  = “abc”与 String str1 = new String(“abc”)==区别==</h4><p>String str = “abc”;</p><p>只创建了一个对象 在常量池里</p><p>而String str1 = new String（”abc”)创建了两个对象</p><p>一个在常量池，一个在GC堆</p><pre class="mermaid">graph LRA[Str1]-->B[GC堆]B--属性 charSequence-->C</pre><p>==为假 地址一个GC堆里的地址</p><p>equals为真</p><h4 id="lt-2-gt-内存解析"><a href="#lt-2-gt-内存解析" class="headerlink" title="&lt;2&gt; 内存解析"></a>&lt;2&gt; 内存解析</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170046.png" alt="image-20200813132822046"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170040.png" alt="image-20200813133053418"></p><p>只要在变量的参与就会进去GC堆</p><h3 id="11-3-4-String类字符串的-操作方法"><a href="#11-3-4-String类字符串的-操作方法" class="headerlink" title="11.3.4 String类字符串的==操作方法=="></a>11.3.4 String类字符串的==操作方法==</h3><p>参考</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"  abcQYz12 我喜欢你,你喜欢我吗? 我不喜欢你, zzQQyy  "</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-1-gt-length"><a href="#lt-1-gt-length" class="headerlink" title="&lt;1&gt; length()"></a>&lt;1&gt; length()</h4><p>字符串的长度 字符个数 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-2-gt-charAt-int-index"><a href="#lt-2-gt-charAt-int-index" class="headerlink" title="&lt;2&gt; charAt(int index)"></a>&lt;2&gt; charAt(int index)</h4><p>获取指定参数下标出的字符 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">char</span> <span class="token function">charAt</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">char</span> a <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> b <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">27</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-3-gt-toCharArray"><a href="#lt-3-gt-toCharArray" class="headerlink" title="&lt;3&gt; toCharArray"></a>&lt;3&gt; toCharArray</h4><p> 返回字符串内部char[]的副本</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">char</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>value<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/*系统中的复制操作第一个参数value是源数组对象, 第二个参数0是源数组准备复制的开始下标第三个参数result是目标数组对象, 第四个参数0是目标数组复制元素的开始下标.第五个参数value.length是复制的元素的个数.System.arraycopy(value, 0, result, 0, value.length);*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-4-gt-equals"><a href="#lt-4-gt-equals" class="headerlink" title="&lt;4&gt; equals"></a>&lt;4&gt; equals</h4><p> 操作</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-5-gt-equals"><a href="#lt-5-gt-equals" class="headerlink" title="&lt;5&gt; equals"></a>&lt;5&gt; equals</h4><p>操作忽略大小写</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">equalsIgnoreCase</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-6-gt-compareTo"><a href="#lt-6-gt-compareTo" class="headerlink" title="&lt;6&gt; compareTo"></a>&lt;6&gt; compareTo</h4><p>比较大小</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">String</span> anotherString<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-7-gt-indexOf"><a href="#lt-7-gt-indexOf" class="headerlink" title="&lt;7&gt; indexOf"></a>&lt;7&gt; indexOf</h4><p>返回参数中的子串s在当前字符串中首次出现的下标</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"喜欢"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => 12</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-8-gt-index-Of"><a href="#lt-8-gt-index-Of" class="headerlink" title="&lt;8&gt; index Of()"></a>&lt;8&gt; index Of()</h4><p>返回参数中的子串s在当前字符串中首次出现的下标, 但是是从startPoint下标开始搜索</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token punctuation">,</span><span class="token keyword">int</span> startpoint<span class="token punctuation">)</span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span><span class="token comment">// => 17, </span>string<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">"喜欢"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span><span class="token comment">// => 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-9-gt-lastIndexOf"><a href="#lt-9-gt-lastIndexOf" class="headerlink" title="&lt;9&gt; lastIndexOf()"></a>&lt;9&gt; lastIndexOf()</h4><p>返回回参数中的子串s在当前字符串中首次出现的下标, 但是是从右向左搜索的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-10-gt-lastIndexOf-String-s-int-startpoint"><a href="#lt-10-gt-lastIndexOf-String-s-int-startpoint" class="headerlink" title="&lt;10&gt; lastIndexOf(String s ,int startpoint)"></a>&lt;10&gt; lastIndexOf(String s ,int startpoint)</h4><p>返回参数中的子串s在当前字符串中首次出现的下标, 但是是从右向左搜索的,并且从指定下标开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">String</span> s <span class="token punctuation">,</span><span class="token keyword">int</span> startpoint<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-11-gt-startsWith"><a href="#lt-11-gt-startsWith" class="headerlink" title="&lt;11&gt; startsWith"></a>&lt;11&gt; startsWith</h4><p>判断当前字符串是否以参数中的子串为前缀</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> prefix<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-12-gt-endsWith"><a href="#lt-12-gt-endsWith" class="headerlink" title="&lt;12&gt; endsWith"></a>&lt;12&gt; endsWith</h4><p>判断当前字符串是否以参数中的子串为后缀</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token class-name">String</span> suffix<span class="token punctuation">)</span> string<span class="token punctuation">.</span><span class="token function">startsWith</span><span class="token punctuation">(</span><span class="token string">"  abc"</span><span class="token punctuation">)</span><span class="token comment">//=> true</span> string<span class="token punctuation">.</span><span class="token function">endsWith</span><span class="token punctuation">(</span><span class="token string">"zzQQyy"</span><span class="token punctuation">)</span><span class="token comment">//=> false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-13-gt-substring"><a href="#lt-13-gt-substring" class="headerlink" title="&lt;13&gt; substring"></a>&lt;13&gt; substring</h4><p>从当前字符串中获取子串, 从start开始(包含) ,到end结束(不包含) 注意：substring写法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> start<span class="token punctuation">,</span><span class="token keyword">int</span> end<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-14-gt-substring"><a href="#lt-14-gt-substring" class="headerlink" title="&lt;14&gt; substring(..)"></a>&lt;14&gt; substring(..)</h4><p>从当前字符串中获取子串, 从start开始(包含) 到末尾</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">int</span> startpoint<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-15-gt-repalce"><a href="#lt-15-gt-repalce" class="headerlink" title="&lt;15&gt; repalce"></a>&lt;15&gt; repalce</h4><p>替换当前字符串中的所有oldChar字符为newChar字符. 替换char</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replace</span><span class="token punctuation">(</span><span class="token keyword">char</span> oldChar<span class="token punctuation">,</span><span class="token keyword">char</span> newChar<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-16-gt-replaceAll"><a href="#lt-16-gt-replaceAll" class="headerlink" title="&lt;16&gt; replaceAll"></a>&lt;16&gt; replaceAll</h4><p>替换字符串的所有old为new串 支持正则表达式 替换串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token class-name">String</span> old<span class="token punctuation">,</span><span class="token class-name">String</span> <span class="token keyword">new</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-17-gt-trim"><a href="#lt-17-gt-trim" class="headerlink" title="&lt;17&gt; trim()"></a>&lt;17&gt; trim()</h4><p>修剪首尾的空白字符, 码值小于等于32的所有字符.</p><p>功能有限，一些中文或者日文中的空格去不掉</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-18-gt-concat"><a href="#lt-18-gt-concat" class="headerlink" title="&lt;18&gt; concat"></a>&lt;18&gt; concat</h4><p>拼接</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">concat</span><span class="token punctuation">(</span><span class="token class-name">String</span> str<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-19-gt-toUpperCase"><a href="#lt-19-gt-toUpperCase" class="headerlink" title="&lt;19&gt; toUpperCase"></a>&lt;19&gt; toUpperCase</h4><p>把所有小写字母变成大写字母</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-20-gt-toLowerCase"><a href="#lt-20-gt-toLowerCase" class="headerlink" title="&lt;20&gt; toLowerCase"></a>&lt;20&gt; toLowerCase</h4><p>把所有大写字母变成小写字母</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toLowerCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-21-gt-split"><a href="#lt-21-gt-split" class="headerlink" title="&lt;21&gt; split"></a>&lt;21&gt; split</h4><p>以参数中的子串为切割器,把字符串切割成多个部分</p><p>分割的字符会舍弃掉</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">split</span><span class="token punctuation">(</span><span class="token class-name">String</span> regex<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"abc,你和他,yyy,111,333"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>       <span class="token class-name">String</span> path <span class="token operator">=</span> <span class="token string">"C:\\Program Files\\Java\\jdk1.8.0_251\\bin;C:\\Program Files (x86)\\NetSarang\\Xftp 6\\;C:\\Program Files (x86)\\NetSarang\\Xshell 6\\;D:\\MyProgram\\Database\\Oracle\\MyOracle11G\\product\\11.2.0\\dbhome_1\\bin;C:\\MyProgram\\_MyBin;C:\\Windows\\system32;C:\\Windows;C:\\Windows\\System32\\Wbem;C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\;D:\\MyProgram\\LLVM\\bin;D:\\MyProgram\\CMake\\bin;C:\\Program Files\\Git\\cmd;C:\\Program Files\\Bandizip\\"</span><span class="token punctuation">;</span>       <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> split1 <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">";"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> split1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>split1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-22-gt-valueOf"><a href="#lt-22-gt-valueOf" class="headerlink" title="&lt;22&gt; valueOf"></a>&lt;22&gt; valueOf</h4><p>把任意的数据转换成字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-23-gt-intern"><a href="#lt-23-gt-intern" class="headerlink" title="&lt;23&gt; intern()"></a>&lt;23&gt; intern()</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170055.png" alt="image-20200811113735528"></p><p>在参入变量时，仍然让数据保存在常量池内部，会导致大量数据保存在常量区</p><p>所以不要爆掉常量区</p><p>常量区一旦溢出。就会波及到类模板</p><p>JDK1.7 以后把类模板区拿出来，放在元空间，只放类模板</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"atguigu"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"java"</span><span class="token punctuation">;</span> <span class="token comment">// 常量区</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"java"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// gc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2 <span class="token operator">==</span> s4<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"atguigujava"</span><span class="token punctuation">;</span> <span class="token comment">// 常量区</span>        <span class="token comment">// intern方法的作用就是把字符串强制保存在常量区中</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token punctuation">(</span>s1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 字符串拼接时,如果有变量参与, 它一定生成在GC堆中.</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-3-5-字符串的复杂操作"><a href="#11-3-5-字符串的复杂操作" class="headerlink" title="11.3.5 字符串的复杂操作"></a>11.3.5 字符串的复杂操作</h3><h4 id="lt-1-gt-自动装箱"><a href="#lt-1-gt-自动装箱" class="headerlink" title="&lt;1&gt; 自动装箱"></a>&lt;1&gt; 自动装箱</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span>        str <span class="token operator">+=</span> <span class="token number">100</span><span class="token punctuation">;</span>        str <span class="token operator">+=</span> <span class="token string">"qqq"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// 自动装箱</span>        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-遍历字符串"><a href="#lt-2-gt-遍历字符串" class="headerlink" title="&lt;2&gt; 遍历字符串"></a>&lt;2&gt; 遍历字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// string[i]</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-3-gt-反向遍历字符串"><a href="#lt-3-gt-反向遍历字符串" class="headerlink" title="&lt;3&gt; 反向遍历字符串"></a>&lt;3&gt; 反向遍历字符串</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 反向遍历字符串, 把字符串接在string2后面, 循环结束就OK.</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token keyword">char</span> ch <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>     string2 <span class="token operator">=</span> string2 <span class="token operator">+</span> ch<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-4-gt-反向拼接字符串"><a href="#lt-4-gt-反向拼接字符串" class="headerlink" title="&lt;4&gt; 反向拼接字符串"></a>&lt;4&gt; 反向拼接字符串</h4><p>​    可以直接倒着拼接即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//char ch = string.charAt(string.length() - 1  - i);</span>            <span class="token comment">//string2 += ch;</span>    <span class="token keyword">char</span> ch <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    string2 <span class="token operator">=</span> ch <span class="token operator">+</span> string2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    分成char数组进行交换即可</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// i, length - 1 - i</span>    <span class="token keyword">char</span> tmp <span class="token operator">=</span> chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> chars<span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>    chars<span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>chars<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​    反向加字符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"  abcQYz12 我喜欢你,你喜欢我吗? 我不喜欢你, zzQQyy  "</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> string2 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            string2 <span class="token operator">+=</span> string<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>string2<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 反向遍历字符串, 把字符串接在string2后面, 循环结束就OK.</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-5-gt-获取一个字符串在另一个字符串中出现的次数"><a href="#lt-5-gt-获取一个字符串在另一个字符串中出现的次数" class="headerlink" title="&lt;5&gt; 获取一个字符串在另一个字符串中出现的次数"></a>&lt;5&gt; 获取一个字符串在另一个字符串中出现的次数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"abkkcadkabkebfkabkskab"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            index <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>                index<span class="token operator">++</span><span class="token punctuation">;</span><span class="token comment">//从第一次找的下一步开始</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-6-gt-将一个字符串进行反转。将字符串中指定部分进行反转。比如将“abcdefg”反转为”abfedcg”"><a href="#lt-6-gt-将一个字符串进行反转。将字符串中指定部分进行反转。比如将“abcdefg”反转为”abfedcg”" class="headerlink" title="&lt;6&gt; 将一个字符串进行反转。将字符串中指定部分进行反转。比如将“abcdefg”反转为”abfedcg”"></a>&lt;6&gt; 将一个字符串进行反转。将字符串中指定部分进行反转。比如将“abcdefg”反转为”abfedcg”</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">exer3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"abcdefghijklmn"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> begin <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> end <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> begin<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>begin<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> string<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 反转中间的s2</span>        <span class="token comment">/*char[] chars = s2.toCharArray();        for (int i = 0; i &lt; chars.length / 2; i++) &#123;            char tmp = chars[i];            chars[i] = chars[chars.length - 1 - i];            chars[chars.length - 1 - i] = tmp;        &#125;*/</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>    <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> chars <span class="token operator">=</span> s3<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> chars<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          s4 <span class="token operator">=</span> chars<span class="token punctuation">[</span>chars<span class="token punctuation">.</span>length<span class="token operator">-</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> s4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">String</span> result <span class="token operator">=</span> s1 <span class="token operator">+</span> s4 <span class="token operator">+</span> s3<span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-4-数据结构-之-链表"><a href="#11-4-数据结构-之-链表" class="headerlink" title="11.4 数据结构 之 ==链表=="></a>11.4 数据结构 之 ==链表==</h2><p>使用特殊类node</p><h3 id="11-4-1-内存图示"><a href="#11-4-1-内存图示" class="headerlink" title="11.4.1 内存图示"></a>11.4.1 内存图示</h3><h4 id="lt-1-gt-链表的内存图-链接方法"><a href="#lt-1-gt-链表的内存图-链接方法" class="headerlink" title="&lt;1&gt;链表的内存图 链接方法"></a>&lt;1&gt;链表的内存图 链接方法</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170103.png" alt="image-20200811210836169"></p><p>自己关联自己的新对象</p><h4 id="lt-2-gt-创建方法"><a href="#lt-2-gt-创建方法" class="headerlink" title="&lt;2&gt;创建方法"></a>&lt;2&gt;创建方法</h4><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200811211101795.png" alt="image-20200811211101795"></p><h4 id="lt-3-gt-最终形态"><a href="#lt-3-gt-最终形态" class="headerlink" title="&lt;3&gt;最终形态"></a>&lt;3&gt;最终形态</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170116.png" alt="image-20200811211216982"></p><h3 id="11-4-2-代码演示"><a href="#11-4-2-代码演示" class="headerlink" title="11.4.2 代码演示"></a>11.4.2 代码演示</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Node</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span> <span class="token comment">// 数据域</span>    <span class="token class-name">Node</span> next<span class="token punctuation">;</span> <span class="token comment">// 指针域</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Link</span> <span class="token punctuation">&#123;</span><span class="token comment">//定义link类</span>    <span class="token comment">//创建link类的两个属性</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> head<span class="token punctuation">;</span><span class="token comment">//创建头部引用 = null</span>    <span class="token keyword">private</span> <span class="token class-name">Node</span> tail<span class="token punctuation">;</span><span class="token comment">//创建尾部引用 = null</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//在链表中添加新值</span>        <span class="token class-name">Node</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Node</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token comment">// 携带数据</span>        <span class="token comment">// 如果是第一次插入</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// 让老尾的next指向新结点</span>            tail<span class="token punctuation">.</span>next <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token comment">// 刷新老尾为新结点.</span>            tail <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span><span class="token comment">//head是链表的第一个地址</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span><span class="token comment">//让引用变成下一个</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Node</span> tmp <span class="token operator">=</span> head<span class="token punctuation">;</span>        <span class="token keyword">int</span> count<span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>tmp <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tmp <span class="token operator">=</span> tmp<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> count<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>head<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            head <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Node</span> prev <span class="token operator">=</span> head<span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>value <span class="token operator">==</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    prev<span class="token punctuation">.</span>next <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//continue;</span>                    <span class="token comment">// 在这里删除节点</span>                    <span class="token comment">// 删除目标节点的next地址回刷给prev.next</span>                <span class="token punctuation">&#125;</span>                prev <span class="token operator">=</span> prev<span class="token punctuation">.</span>next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LinkTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Link</span> link <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Link</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> link<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"----------------------------------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        link<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"count = "</span> <span class="token operator">+</span> link<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-5-StringBuffer类"><a href="#11-5-StringBuffer类" class="headerlink" title="11.5 StringBuffer类"></a>11.5 StringBuffer类</h2><p>java.lang.StringBuffer代表可变的字符序列，可以对字符串内容进行增删。</p><p>很多方法与String相同，但StringBuffer是可变长度的。</p><p>StringBuffer是一个容器</p><h3 id="11-5-1-StringBuffer类有三个构造方法"><a href="#11-5-1-StringBuffer类有三个构造方法" class="headerlink" title="11.5.1 StringBuffer类有三个构造方法"></a>11.5.1 StringBuffer类有三个构造方法</h3><ol><li>StringBuffer() 初始容量为 16 的字符串缓冲区 </li><li>StringBuffer(int size）构造指定容量的字符串缓冲区</li><li>StringBuffer(String str) 将内容初始化为指定字符串内容</li></ol><h3 id="11-5-2-StringBuffer的一些方法"><a href="#11-5-2-StringBuffer的一些方法" class="headerlink" title="11.5.2 StringBuffer的一些方法"></a>11.5.2 StringBuffer的一些方法</h3><ol><li>StringBuffer是内容可以改变的Unicode字符序列, 可以看成是一个无限量的字符容器.</li><li>StringBuilder append(…) 在当前字符串末尾追加参数中的数据, 数据可以是任意类型</li><li>StringBuilder insert(int index, …) 在指定下标处插入新内容</li><li>StringBuilder delete(int begin, int end) 删除指定的区间</li><li>void setCharAt(int index, char ch) 替换指定位置的字符</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringBufferTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始容量是16, 内部数组长度也是16</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.22</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"我是汉字"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始容量是16, 内部数组长度也是16</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// "abc200false3.22"</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"我是汉字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "abc我是汉字200false3.22"</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// "abc我是汉字alse3.22"</span>        stringBuilder<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-6-StringBuilder类"><a href="#11-6-StringBuilder类" class="headerlink" title="11.6 StringBuilder类"></a>11.6 StringBuilder类</h2><h3 id="11-6-1-StringBuilder与StringBuffer的区别"><a href="#11-6-1-StringBuilder与StringBuffer的区别" class="headerlink" title="11.6.1 StringBuilder与StringBuffer的区别"></a>11.6.1 StringBuilder与StringBuffer的区别</h3><table><thead><tr><th>String</th><th>StringBuffer</th><th>StringBuilder</th></tr></thead><tbody><tr><td>String的值是不可变的，这就导致每次对String的操作都会生成新的String对象，不仅效率低下，而且浪费大量优先的内存空间</td><td>StringBuffer是可变类，和线程安全的字符串操作类，任何对它指向的字符串的操作都不会产生新的对象。每个StringBuffer对象都有一定的缓冲区容量，当字符串大小没有超过容量时，不会分配新的容量，当字符串大小超过容量时，会自动增加容量</td><td>可变类，速度更快</td></tr><tr><td>不可变</td><td>可变</td><td>可变</td></tr><tr><td></td><td>线程安全</td><td>线程不安全</td></tr><tr><td></td><td>多线程操作字符串</td><td>单线程操作字符串</td></tr></tbody></table><h3 id="11-6-1-程序运行的执行时间判断"><a href="#11-6-1-程序运行的执行时间判断" class="headerlink" title="11.6.1 程序运行的执行时间判断"></a>11.6.1 程序运行的执行时间判断</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> text <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> startTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> endTime <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuffer</span> buffer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">StringBuilder</span> builder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取系统当前时间</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            buffer<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StartBuffer的运行时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        startTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            builder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        endTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"StartBuilder的运行时间:"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>endTime<span class="token operator">-</span>startTime<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170134.png" alt="image-20200813154530913"></p><h3 id="11-6-2-StringBuilder的扩容机制"><a href="#11-6-2-StringBuilder的扩容机制" class="headerlink" title="11.6.2 StringBuilder的扩容机制"></a>11.6.2 StringBuilder的扩容机制</h3><h4 id="lt-1-gt-刚开始传输字符串"><a href="#lt-1-gt-刚开始传输字符串" class="headerlink" title="&lt;1&gt; 刚开始传输字符串"></a>&lt;1&gt; 刚开始传输字符串</h4><p>在传输一个字符串之后，还会留一个16的余量</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170139.png" alt="image-20200812090613173"></p><h4 id="lt-2-gt-在容量不够时"><a href="#lt-2-gt-在容量不够时" class="headerlink" title="&lt;2&gt; 在容量不够时"></a>&lt;2&gt; 在容量不够时</h4><p>扩容机制 是&lt;&lt;1 + 2 ;</p><h3 id="11-6-3-StringBuilder的操作方法"><a href="#11-6-3-StringBuilder的操作方法" class="headerlink" title="11.6.3 StringBuilder的操作方法"></a>11.6.3 StringBuilder的操作方法</h3><h4 id="lt-1-gt-StringBuilder-append-…"><a href="#lt-1-gt-StringBuilder-append-…" class="headerlink" title="&lt;1&gt; StringBuilder append(…)"></a>&lt;1&gt; StringBuilder append(…)</h4><p>在当前字符串末尾追加参数中的数据, 数据可以是任意类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-2-gt-StringBuilder-insert-int-index-…"><a href="#lt-2-gt-StringBuilder-insert-int-index-…" class="headerlink" title="&lt;2&gt; StringBuilder insert(int index, …)"></a>&lt;2&gt; StringBuilder insert(int index, …)</h4><p>在指定下标处插入新内容</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringBuilder<span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"我是汉字"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-3-gt-StringBuilder-delete-int-begin-int-end"><a href="#lt-3-gt-StringBuilder-delete-int-begin-int-end" class="headerlink" title="&lt;3&gt; StringBuilder delete(int begin, int end)"></a>&lt;3&gt; StringBuilder delete(int begin, int end)</h4><p>删除指定的区间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringBuilder<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-4-gt-void-setCharAt-int-index-char-ch"><a href="#lt-4-gt-void-setCharAt-int-index-char-ch" class="headerlink" title="&lt;4&gt; void setCharAt(int index, char ch)"></a>&lt;4&gt; void setCharAt(int index, char ch)</h4><p>替换指定位置的字符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">stringBuilder<span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-5-gt-可以连续处理"><a href="#lt-5-gt-可以连续处理" class="headerlink" title="&lt;5&gt; 可以连续处理"></a>&lt;5&gt; 可以连续处理</h4><p>因为处理之后依然返回自己，所以可以反复处理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Test</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">StringBuilder</span> stringBuilder <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuilder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 初始容量是16, 内部数组长度也是16</span> stringBuilder<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token number">3.22</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">insert</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">"我是汉字"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setCharAt</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'大'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>stringBuilder<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-7-日期类"><a href="#11-7-日期类" class="headerlink" title="11.7 日期类"></a>11.7 日期类</h2><h3 id="11-7-1-Java-lang-System-currentTimeMillis-获取系统当前时间"><a href="#11-7-1-Java-lang-System-currentTimeMillis-获取系统当前时间" class="headerlink" title="11.7.1 Java.lang.System.currentTimeMillis()获取系统当前时间"></a>11.7.1 Java.lang.System.currentTimeMillis()获取系统当前时间</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">long</span> <span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>用来返回当前时间与1970年1月1日0时0分0秒之间以毫秒为单位的时间差</p><p>此方法用于计算时间差</p><h4 id="lt-1-gt-计算世界时间的标准"><a href="#lt-1-gt-计算世界时间的标准" class="headerlink" title="&lt;1&gt; 计算世界时间的标准"></a>&lt;1&gt; 计算世界时间的标准</h4><p>计算世界时间的主要标准有：</p><ul><li>UTC(Universal Time Coordinated)</li><li>GMT(Greenwich Mean Time)</li><li>CST(Central Standard Time)</li></ul><h3 id="11-7-2-日期格式化器"><a href="#11-7-2-日期格式化器" class="headerlink" title="11.7.2 日期格式化器"></a>11.7.2 日期格式化器</h3><h4 id="lt-1-gt-SimpleDateFormat格式化类"><a href="#lt-1-gt-SimpleDateFormat格式化类" class="headerlink" title="&lt;1&gt; SimpleDateFormat格式化类"></a>&lt;1&gt; SimpleDateFormat格式化类</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>定义格式标准化示例</p><h4 id="lt-2-gt-关于-格式化器-的说明"><a href="#lt-2-gt-关于-格式化器-的说明" class="headerlink" title="&lt;2&gt; 关于==格式化器==的说明"></a>&lt;2&gt; 关于==格式化器==的说明</h4><p>写一个y也可以，y是用来补0，多余的字母是用来补0的</p><p>格式化器可以直接格式化显式<code>currentTimeMillis()</code>的时间</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170144.png" alt="image-20200812132054170"></p><h4 id="lt-3-gt-可以将currentTimeMillis-格式化称当前时间"><a href="#lt-3-gt-可以将currentTimeMillis-格式化称当前时间" class="headerlink" title="&lt;3&gt; 可以将currentTimeMillis()格式化称当前时间"></a>&lt;3&gt; 可以将currentTimeMillis()格式化称当前时间</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 当前时间, 以1970-01-01 00:00:00.000为0, 距离当前时间的毫秒数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义格式标准化示例</span><span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>程序运行结果</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170149.png" alt="image-20200813160059867"></p><h3 id="11-7-2-java-util-Date类"><a href="#11-7-2-java-util-Date类" class="headerlink" title="11.7.2 java.util.Date类"></a>11.7.2 java.util.Date类</h3><p>  表示特定的瞬间，精确到毫秒</p><h4 id="lt-1-gt-构造方法"><a href="#lt-1-gt-构造方法" class="headerlink" title="&lt;1&gt; 构造方法"></a>&lt;1&gt; 构造方法</h4><p>Date( ) 使用Date类的无参数构造方法创建的对象可以获取本地当前时间。</p><p>Date(long date) 参数为当前一个L整数，代表毫秒，给换算出时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2343214351245L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其余的构造方法</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170158.png" alt="image-20200813160727055"></p><h4 id="lt-2-gt-常用方法"><a href="#lt-2-gt-常用方法" class="headerlink" title="&lt;2&gt; 常用方法"></a>&lt;2&gt; 常用方法</h4><p>==getTime():==</p><p>返回自 1970 年 1 月 1 日 00:00:00 GMT 以来此 Date 对象表示的毫秒数。</p><p>==toString():==</p><p>把此 Date 对象转换为以下形式的 String： dow mon dd hh:mm:ss zzz yyyy 其中： dow 是一周中的某一天 (Su0n, Mon, Tue, Wed, Thu, Fri, Sat)，zzz是时间标准。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">ParseException</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> time <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// 当前时间, 以1970-01-01 00:00:00.000为0, 距离当前时间的毫秒数</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SimpleDateFormat</span> simpleDateFormat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义格式标准化示例</span>        <span class="token class-name">String</span> format <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>format<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> string <span class="token operator">=</span> <span class="token string">"1972-05-12 12:33:50"</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> parse <span class="token operator">=</span> simpleDateFormat<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>string<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//解析字符串</span>    <span class="token comment">// 解析转换字符串为日期对象</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>parse<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Date</span> date2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token number">2008</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值+1900</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>simpleDateFormat<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//赋值会出问题</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-3-gt-Date的问题"><a href="#lt-3-gt-Date的问题" class="headerlink" title="&lt;3&gt; Date的问题"></a>&lt;3&gt; Date的问题</h4><p>Date 缺点 : 显示不友好, 年有1900问题, 月是少1</p><p><img src="images/image-20200812131254957.png" alt="image-20200812131254957"></p><p>可以看见Date的构造器中年份给添加了1900</p><h4 id="lt-4-gt-使用Date类写小时钟"><a href="#lt-4-gt-使用Date类写小时钟" class="headerlink" title="&lt;4&gt; 使用Date类写小时钟"></a>&lt;4&gt; 使用Date类写小时钟</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span>  <span class="token class-name">Clock</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>java<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token class-name">SimpleDateFormat</span> sdf <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>text<span class="token punctuation">.</span><span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd HH:mm:ss a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义格式化器</span>java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Date</span> date <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">String</span> format <span class="token operator">=</span> sdf<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\r"</span> <span class="token operator">+</span> format<span class="token punctuation">)</span><span class="token punctuation">;</span>date <span class="token operator">=</span> <span class="token keyword">new</span> java<span class="token punctuation">.</span>util<span class="token punctuation">.</span><span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-7-3-Calendar时间类"><a href="#11-7-3-Calendar时间类" class="headerlink" title="11.7.3 Calendar时间类"></a>11.7.3 Calendar时间类</h3><p>Calendar的本质把他的属性放置在数组里</p><p>calendar属性都放在数组里，获取的时候获取下标</p><p>Calendar是一个抽象基类，主用用于完成日期字段之间相互操作的功能。</p><h4 id="lt-1-gt-获取Calendar实例的方法"><a href="#lt-1-gt-获取Calendar实例的方法" class="headerlink" title="&lt;1&gt; 获取Calendar实例的方法"></a>&lt;1&gt; 获取Calendar实例的方法</h4><p>使用Calendar.getInstance()方法</p><p>调用它的子类GregorianCalendar的构造器。</p><p>一个Calendar的实例是系统时间的抽象表示，通过get(int field)方法来取得想要的时间信息。</p><p>比如YEAR、MONTH、DAY_OF_WEEK、HOUR_OF_DAY 、MINUTE、SECOND</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> value<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> field<span class="token punctuation">,</span><span class="token keyword">int</span> amount<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token class-name">Date</span> <span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">setTime</span><span class="token punctuation">(</span><span class="token class-name">Date</span> date<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Calendar 缺点 : 显示不友好, 月有小1, 内部用数组保存数据不好. 致命缺点: 内容可以改变, 不好.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">Calendar</span> calendar <span class="token operator">=</span> <span class="token class-name">Calendar</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new Calendar(); // 不能直接new对象的时候.</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//int year = calendar.getYear();</span>      <span class="token keyword">int</span> year <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取年</span>      <span class="token keyword">int</span> month <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 存储的月比实际要小1</span>      <span class="token keyword">int</span> day <span class="token operator">=</span> calendar<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>year<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>day<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 设置为1992,10,22</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>YEAR<span class="token punctuation">,</span> <span class="token number">1992</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//设置月需求减1</span>      calendar<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 转换成date对象</span>      calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>MONTH<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 10个月后</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      calendar<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Calendar</span><span class="token punctuation">.</span>DAY_OF_MONTH<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 500天以前</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>calendar<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="11-7-4-LocalDate类-java8新增"><a href="#11-7-4-LocalDate类-java8新增" class="headerlink" title="11.7.4 ==LocalDate类== java8新增"></a>11.7.4 ==LocalDate类== java8新增</h3><p> Java 的日期与时间 API 问题由来已久，Java 8 之前的版本中关于时间、日期及其他时间日期格式化类由于线程安全、重量级、序列化成本高等问题而饱受批评。</p><p>Java 8 吸收了 Joda-Time 的精华，以一个新的开始为 Java 创建优秀的 API。</p><h4 id="lt-1-gt-新的-java-time-的包含"><a href="#lt-1-gt-新的-java-time-的包含" class="headerlink" title="&lt;1&gt; 新的 java.time 的包含"></a>&lt;1&gt; 新的 java.time 的包含</h4><ol><li>于时钟（Clock）</li><li>本地日期（LocalDate）</li><li>本地时间（LocalTime）</li><li>本地日期时间（LocalDateTime）</li><li>时区（ZonedDateTime）</li><li>持续时间（Duration）的类。</li></ol><p>历史悠久的 Date 类新增了 toInstant() 方法，用于把 Date 转换成新的表示形式。</p><p>这些新增的本地化时间日期 API 大大简化了了日期时间和本地化的管理。</p><h4 id="lt-2-gt-localTime的操作"><a href="#lt-2-gt-localTime的操作" class="headerlink" title="&lt;2&gt; localTime的操作"></a>&lt;2&gt; localTime的操作</h4><p>提供get-set方法，并且显示当前时间</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> date <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//new LocalDate();获取当前时间</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getYear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取年份</span><span class="token keyword">int</span> month <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getMonthValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取月份</span><span class="token keyword">int</span> day <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">getDayOfMonth</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取天数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"year = "</span> <span class="token operator">+</span> year<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"month = "</span> <span class="token operator">+</span> month<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"day = "</span> <span class="token operator">+</span> day<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170207.png" alt="image-20200813163501819"></p><p>提供with 设定，plus加法，minus减法</p><p>每一次运算都会产生新的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">LocalDate</span> localDate1 <span class="token operator">=</span> date<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//with</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 推算日期</span><span class="token class-name">LocalDate</span> localDate2 <span class="token operator">=</span> localDate1<span class="token punctuation">.</span><span class="token function">minusDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//减法</span><span class="token class-name">LocalDate</span> localDate3 <span class="token operator">=</span> localDate1<span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//加法</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>localDate4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>方法</th><th>描述</th><th>示例</th></tr></thead><tbody><tr><td>now()</td><td>静态方法，根据当前时间创建对象</td><td>LocalDate  localDate = LocalDate.now();  LocalTime  localTime = LocalTime.now();  LocalDateTime  localDateTime = LocalDateTime.now();</td></tr><tr><td>of()</td><td>静态方法，根据指定日期/时间创建对象</td><td>LocalDate  localDate = LocalDate.of(2016, 10, 26);  <br />LocalTime  localTime = LocalTime.of(02, 22, 56);  <br />LocalDateTime  localDateTime = LocalDateTime.of(2016, 10, 26, 12, 10, 55);</td></tr><tr><td>plusDays,  <br />plusWeeks,<br />plusMonths,  <br />plusYears</td><td>向当前 LocalDate 对象添加几天、几周、几个月、几年</td><td></td></tr><tr><td>minusDays,<br />minusWeeks,<br />minusMonths,<br />minusYears</td><td>从当前 LocalDate 对象减去几天、几周、几个月、几年</td><td></td></tr><tr><td>plus,<br />minus</td><td>添加或减少一个 Duration 或 Period</td><td></td></tr><tr><td>withDayOfMonth,<br />withDayOfYear,<br />withMonth,<br />withYear</td><td>将月份天数、年份天数、月份、年份修改为指定的值并返回新的 LocalDate 对象</td><td></td></tr><tr><td>getDayOfMonth</td><td>获得月份天数(1-31)</td><td></td></tr><tr><td>getDayOfYear</td><td>获得年份天数(1-366)</td><td></td></tr><tr><td>getDayOfWeek</td><td>获得星期几(返回一个 DayOfWeek 枚举值)</td><td></td></tr><tr><td>getMonth</td><td>获得月份, 返回一个 Month 枚举值</td><td></td></tr><tr><td>getMonthValue</td><td>获得月份(1-12)</td><td></td></tr><tr><td>getYear</td><td>获得年份</td><td></td></tr><tr><td>until</td><td>获得两个日期之间的 Period 对象，或者指定 ChronoUnits 的数字</td><td></td></tr><tr><td>isBefore, <br />isAfter</td><td>比较两个 LocalDate</td><td>booelan类型判断是前是后</td></tr><tr><td>isLeapYear</td><td>判断是否是闰年</td><td></td></tr></tbody></table><h4 id="lt-3-gt-练习-设置生日，然后求百岁"><a href="#lt-3-gt-练习-设置生日，然后求百岁" class="headerlink" title="&lt;3&gt;练习 设置生日，然后求百岁"></a>&lt;3&gt;练习 设置生日，然后求百岁</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token class-name">LocalDate</span> date1 <span class="token operator">=</span> <span class="token class-name">LocalDate</span><span class="token punctuation">.</span><span class="token function">now</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>date1<span class="token punctuation">.</span><span class="token function">withYear</span><span class="token punctuation">(</span><span class="token number">1995</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withMonth</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">withDayOfMonth</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">plusDays</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-8-Math类"><a href="#11-8-Math类" class="headerlink" title="11.8 Math类"></a>11.8 Math类</h2><p><code>java.lang.Math</code>提供了一系列静态方法用于科学计算；其方法的参数和返回值类型一般为double型。</p><p><code>abs</code>绝对值</p><p><code>acos, asin, atan, cos,sin,tan</code> <strong>三角函数</strong></p><p><code>sqrt </code>  平方根</p><p><code>pow(double a,doble b) </code>  a的b次幂</p><p><code>log </code> 自然对数</p><p><code>exp  e</code>为底指数</p><p><code>max(double a,double b)</code></p><p><code>min(double a,double b)</code></p><p><code>random() </code>  返回0.0到1.0的随机数</p><p><code>long round(double a) double</code>型数据a转换为long型（四舍五入）</p><p><code>toDegrees(double angrad) </code>  弧度–&gt;角度</p><p><code>toRadians(double angdeg)</code>  角度–&gt;弧度</p><p>静态方法称为工具方法</p><p>round</p><p>进行四舍五入</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170213.png" alt="image-20200812142821639"></p><h2 id="11-8-BigInteger类"><a href="#11-8-BigInteger类" class="headerlink" title="11.8 BigInteger类"></a>11.8 BigInteger类</h2><p><code>Integer</code>类作为<code>int</code>的包装类，</p><p>能存储的最大整型值为<code>2^31-1</code>，</p><p><code>BigInteger</code>类的数字范围较<code>Integer</code>类的数字范围要大得多，可以支持任意精度的整数。</p><h4 id="lt-1-gt-构造器"><a href="#lt-1-gt-构造器" class="headerlink" title="&lt;1&gt; 构造器"></a>&lt;1&gt; 构造器</h4><p>BigInteger(Stringval)</p><h4 id="lt-2-gt-常用方法-1"><a href="#lt-2-gt-常用方法-1" class="headerlink" title="&lt;2&gt; 常用方法"></a>&lt;2&gt; 常用方法</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">abs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> 绝对值<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> add <span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span> 添加<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">subtract</span><span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span> 减法<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span> 乘法<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">divide</span><span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span> 除法<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">remainder</span><span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span> 余数<span class="token keyword">public</span> <span class="token class-name">BigInteger</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token keyword">int</span> exponent<span class="token punctuation">)</span> 次方幂<span class="token keyword">public</span> <span class="token class-name">BigInteger</span><span class="token punctuation">[</span><span class="token punctuation">]</span> divideAndRemainder <span class="token punctuation">(</span><span class="token class-name">BigIntegerval</span><span class="token punctuation">)</span>返回数组 保存余数跟除数<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="11-9-BigDecimal类"><a href="#11-9-BigDecimal类" class="headerlink" title="11.9 BigDecimal类"></a>11.9 BigDecimal类</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigInteger</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MathTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">BigInteger</span> bi1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"847239847958230982385098235098235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigInteger</span> bi2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigInteger</span><span class="token punctuation">(</span><span class="token string">"134234234229835675785098235098235"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigInteger</span> multiply <span class="token operator">=</span> bi1<span class="token punctuation">.</span><span class="token function">multiply</span><span class="token punctuation">(</span>bi2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>multiply<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigDecimal</span> bd1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"293842398472874208348273.239842394823482734829374927349827492873498274928734928374987234234234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigDecimal</span> bd2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span><span class="token string">"293842392342342348472874208348273.23234234234234234234239842394823482734829374927349827492873498274928734928374987234234234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">BigDecimal</span> add <span class="token operator">=</span> bd1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>bd2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9.5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">9.6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">0</span>x7FFFFFFFFFFFFFFFL<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 0111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111 1111</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第12章-集合"><a href="#第12章-集合" class="headerlink" title="第12章 集合"></a>第12章 集合</h1><p>数组 : 解决批量数据的存储问题</p><p>集合 : 解决批量对象的存储问题, 可以简单把集合看成是一个可变长的Object数组, Object意味着任意对象都可以保存</p><h2 id="12-1集合的框架"><a href="#12-1集合的框架" class="headerlink" title="12.1集合的框架"></a>12.1集合的框架</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170220.png" alt="PPT中集合分类"></p><p>Collection接口, 表示的集合只能保存一个一个的对象. 特点 : 无序可重复<br>无序 : 不按添加顺序保存元素, 可重复 : 内容相等的元素可以重复放入</p><h2 id="12-2-数据结构-之-二叉树"><a href="#12-2-数据结构-之-二叉树" class="headerlink" title="12.2 数据结构 之 ==二叉树=="></a>12.2 数据结构 之 ==二叉树==</h2><h3 id="12-2-1-内存分析图"><a href="#12-2-1-内存分析图" class="headerlink" title="12.2.1 内存分析图"></a>12.2.1 内存分析图</h3><h3 id="12-2-2-代码演示图"><a href="#12-2-2-代码演示图" class="headerlink" title="12.2.2 代码演示图"></a>12.2.2 代码演示图</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>javase<span class="token punctuation">.</span>collection</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> value<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Tree</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">TreeNode</span> root<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">insert</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> target<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> newNode<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newNode<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> target<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 向左走</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>left <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 左子为空, 新结点直接插入</span>                target<span class="token punctuation">.</span>left <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 左子非空, 把左子作为根当成子树进一步插入</span>                <span class="token function">insert</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>left<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 向右走</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>target<span class="token punctuation">.</span>right <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                target<span class="token punctuation">.</span>right <span class="token operator">=</span> newNode<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token function">insert</span><span class="token punctuation">(</span>target<span class="token punctuation">.</span>right<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> newNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        newNode<span class="token punctuation">.</span>value <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            root <span class="token operator">=</span> newNode<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token function">insert</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> newNode<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> node<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">view</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">view</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">view</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TreeTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Tree</span> tree <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Tree</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        tree<span class="token punctuation">.</span><span class="token function">travel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-3-Collection接口"><a href="#12-3-Collection接口" class="headerlink" title="12.3 Collection接口"></a>12.3 Collection接口</h2><p>Collection 接口是 List、Set 和 Queue 接口的父接口，该接口里定义的==方法==既可用于操作 Set 集合，也可用于操作 List 和 Queue 集合</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170228" alt="集合继承分类树"></p><p>JDK不提供此接口的任何直接实现，而是提供更具体的子接口(如：Set和List)实现。</p><p>在 Java5 之前，Java 集合会丢失容器中所有对象的数据类型，把所有对象都当成 Object 类型处理；</p><p>从 Java5 增加了<strong>泛型</strong>以后，Java 集合可以记住容器中对象的数据类型</p><p>SortedSet是个接口，它里面的（只有TreeSet这一个实现可用）中的元素一定是有序的。</p><h2 id="12-4-Set与List集合比较"><a href="#12-4-Set与List集合比较" class="headerlink" title="12.4 Set与List集合比较"></a>12.4 Set与List集合比较</h2><h3 id="12-4-1-特点"><a href="#12-4-1-特点" class="headerlink" title="12.4.1 特点"></a>12.4.1 特点</h3><h4 id="lt-1-gt-List-有序-可重复"><a href="#lt-1-gt-List-有序-可重复" class="headerlink" title="&lt;1&gt; List 有序,可重复"></a>&lt;1&gt; List 有序,可重复</h4><ul><li><strong>ArrayList</strong><br><strong>优点:</strong> 底层数据结构是数组，查询快，增删慢。<br><strong>缺点:</strong> 线程不安全，效率高</li><li><strong>Vector</strong><br><strong>优点:</strong> 底层数据结构是数组，查询快，增删慢。<br><strong>缺点:</strong> 线程==安全==，效率低</li><li><strong>LinkedList</strong><br><strong>优点:</strong> 底层数据结构是链表，查询慢，增删快。<br><strong>缺点:</strong> 线程不安全，效率高 </li></ul><h4 id="lt-2-gt-Set-无序-唯一"><a href="#lt-2-gt-Set-无序-唯一" class="headerlink" title="&lt;2&gt; Set 无序,唯一"></a>&lt;2&gt; Set 无序,唯一</h4><ul><li><strong>HashSet</strong><br>  底层数据结构是哈希表。（哈希与equals）<br>  (无序,唯一）<br>  如何来保证元素唯一性?<br>  依赖两个方法：hashCode()和equals()</li><li><strong>LinkedHashSet</strong><br>  底层数据结构是链表和哈希表。<br>  (FIFO插入有序,唯一)<br>  由链表保证元素==有序==<br>  由哈希表保证元素唯一</li><li><strong>TreeSet</strong><br>  底层数据结构是二树。(唯一，==有序==) 又称为二叉搜索树<br>  如何保证元素排序的呢?<br>  自然排序<br>  比较器排序<br>  如何保证元素唯一性的呢?根据比较的返回值是否是0来决定</li></ul><h3 id="12-4-2-数组的一些操作"><a href="#12-4-2-数组的一些操作" class="headerlink" title="12.4.2 数组的一些操作"></a>12.4.2 数组的一些操作</h3><h4 id="lt-1-gt-collection"><a href="#lt-1-gt-collection" class="headerlink" title="&lt;1&gt; collection"></a>&lt;1&gt; collection</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170238.png" alt="image-20200813172857476"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170248.png" alt="image-20200813173024817"></p><h4 id="lt-2-gt-List-子接口"><a href="#lt-2-gt-List-子接口" class="headerlink" title="&lt;2&gt; List 子接口"></a>&lt;2&gt; List 子接口</h4><p>List 集合里添加了一些根据索引来操作集合元素的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//在指定的index下标处插入新元素</span><span class="token keyword">boolean</span> <span class="token function">addAll</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Collection</span> eles<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得指定下标的元素，并返回该下标的对象</span><span class="token keyword">int</span> <span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//删除指定的index下标处的元素并返回元素</span><span class="token class-name">Object</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">,</span> <span class="token class-name">Object</span> ele<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//替换指定的index下标处的元素为新ele元素, 被替换的老元素作为返回值返回</span><span class="token class-name">List</span> <span class="token function">subList</span><span class="token punctuation">(</span><span class="token keyword">int</span> fromIndex<span class="token punctuation">,</span> <span class="token keyword">int</span> toIndex<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//截取子字符串</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-5-List-实现类之一：ArrayList"><a href="#12-5-List-实现类之一：ArrayList" class="headerlink" title="12.5 List 实现类之一：ArrayList"></a>12.5 List 实现类之一：ArrayList</h2><p>ArrayList 是 List 接口的典型实现类</p><p>本质上，ArrayList是对象引用的一个变长数组</p><p>ArrayList 是线程不安全的，而 Vector 是线程安全的，即使为保证 List 集合线程安全，也不推荐使用Vector</p><p>Arrays.asList(…) 方法返回的 List 集合既不是 ArrayList 实例，也不是 Vector 实例。 Arrays.asList(…) 返回值是一个固定长度的 List 集合</p><h2 id="12-6-List实现类之二：LinkedList"><a href="#12-6-List实现类之二：LinkedList" class="headerlink" title="12.6 List实现类之二：LinkedList"></a>12.6 List实现类之二：LinkedList</h2><p>对于<strong>频繁的插入或删除元素</strong>的操作，建议使用LinkedList类，效率较高</p><p>新增方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addFirst</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> addLast <span class="token punctuation">(</span><span class="token class-name">Object</span>  obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> getFirst <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">getLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">removeFirst</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">removeLast</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-7-List实现类之三：Vector"><a href="#12-7-List实现类之三：Vector" class="headerlink" title="12.7 List实现类之三：Vector"></a>12.7 List实现类之三：Vector</h2><p>各种list中，最好把ArrayList作为缺省选择。当插入、删除频繁时，使用LinkedList；Vector总是比ArrayList慢，所以尽量避免使用。</p><p>新增方法: (这些方法是冗余的,有替代方法,了解即可 )</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">void</span> <span class="token function">addElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">insertElementAt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">setElementAt</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">,</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeElement</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token keyword">void</span> <span class="token function">removeAllElements</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-3-6-使用-Iterator-接口遍历集合元素"><a href="#12-3-6-使用-Iterator-接口遍历集合元素" class="headerlink" title="12.3.6 使用 Iterator 接口遍历集合元素"></a>12.3.6 使用 Iterator 接口遍历集合元素</h3><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素</p><p>所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p><p>Iterator 仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</p><h2 id="12-8-使用泛型-Generic"><a href="#12-8-使用泛型-Generic" class="headerlink" title="12.8 使用泛型(Generic)"></a>12.8 使用泛型(Generic)</h2><p>集合类中的元素使用Object类型，以允许不同的添加和获取类型。当获取集合中所需对象时，必须进行强制类型转型。</p><h4 id="例如："><a href="#例如：" class="headerlink" title="例如："></a>例如：</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>“<span class="token class-name">Hello</span> world”<span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//产生异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型机制为编写代码提供了便利，同时提供了编译时的类型安全检查。</p><p>使用集合编程时，应结合使用泛型。例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//String[]</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>“<span class="token class-name">Hello</span> world”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>•<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>泛型以&lt; &gt;形式呈现， &lt; &gt;中的类型约束了集合所能存储的对象类型。</p><p>这样在获取集合中对象时，不必再进行强制类型转型。</p><p>&lt; &gt;中的类称为泛型的类型参数</p><h2 id="12-9-Set实现类之一-HashSet"><a href="#12-9-Set实现类之一-HashSet" class="headerlink" title="12.9 Set实现类之一: HashSet"></a>12.9 Set实现类之一: HashSet</h2><p>HashSet 是 Set 接口的典型实现，大多数时候使用 Set 集合时都使用这个实现类。</p><p>HashSet 按 Hash 算法来存储集合中的元素，因此具有很好的存取和查找性能。</p><h3 id="12-19-1-HashSet-具有以下-特点-："><a href="#12-19-1-HashSet-具有以下-特点-：" class="headerlink" title="12.19.1 HashSet 具有以下==特点==："></a>12.19.1 HashSet 具有以下==特点==：</h3><ul><li>不能保证元素的排列顺序</li><li>HashSet 不是线程安全的</li><li>集合元素可以是 null</li></ul><p>当向 HashSet 集合中存入一个元素时，HashSet 会调用该对象的 hashCode() 方法来得到该对象的 hashCode 值，然后根据 hashCode 值决定该对象在 HashSet 中的存储位置。</p><p>HashSet 集合判断两个元素相等的标准：两个对象通过 hashCode() 方法比较相等，并且两个对象的 equals() 方法返回值也相等</p><h2 id="12-10-Set实现类之二：LinkedHashSet"><a href="#12-10-Set实现类之二：LinkedHashSet" class="headerlink" title="12.10 Set实现类之二：LinkedHashSet"></a>12.10 Set实现类之二：LinkedHashSet</h2><p>LinkedHashSet 是 HashSet 的子类</p><p>LinkedHashSet 根据元素的 hashCode 值来决定元素的存储位置，但它同时使用链表维护元素的次序，这使得元素看起来是以插入顺序保存的。</p><p>LinkedHashSet插入性能略低于 HashSet，但在迭代访问 Set 里的全部元素时有很好的性能。</p><p>LinkedHashSet 不允许集合元素重复。</p><h2 id="12-12-Set实现类之三：TreeSet"><a href="#12-12-Set实现类之三：TreeSet" class="headerlink" title="12.12 Set实现类之三：TreeSet"></a>12.12 Set实现类之三：TreeSet</h2><p>有序 不可重复</p><p>TreeSet 是 ==SortedSet==接口的实现类，TreeSet 可以确保集合元素处于排序状态。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Comparator</span> <span class="token function">comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Object</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Object</span> <span class="token function">last</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Object</span> <span class="token function">lower</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token class-name">Object</span> <span class="token function">higher</span><span class="token punctuation">(</span><span class="token class-name">Object</span> e<span class="token punctuation">)</span><span class="token class-name">SortedSet</span> <span class="token function">subSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">,</span> toElement<span class="token punctuation">)</span><span class="token class-name">SortedSet</span> <span class="token function">headSet</span><span class="token punctuation">(</span>toElement<span class="token punctuation">)</span><span class="token class-name">SortedSet</span> <span class="token function">tailSet</span><span class="token punctuation">(</span>fromElement<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>TreeSet 两种排序方法：<strong>自然排序</strong>和<strong>定制排序</strong>。默认情况下，TreeSet 采用自然排序。</p><h3 id="12-9-1-自然排序"><a href="#12-9-1-自然排序" class="headerlink" title="12.9.1 自然排序"></a>12.9.1 自然排序</h3><h4 id="lt-1-gt-自然排序："><a href="#lt-1-gt-自然排序：" class="headerlink" title="&lt;1&gt; 自然排序："></a>&lt;1&gt; 自然排序：</h4><p>TreeSet 会调用集合元素的 compareTo(Object obj) 方法来比较元素之间的大小关系，然后将集合元素按升序排列</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@org</span><span class="token punctuation">.</span>junit<span class="token punctuation">.</span><span class="token class-name">Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// treeSet涉及到排序，输入的内容要一致,存在自然排序；</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>[23, 78, 231] //程序运行结果按照自然排序进行</p></blockquote><h4 id="lt-2-gt-添加不同类型的对象"><a href="#lt-2-gt-添加不同类型的对象" class="headerlink" title="&lt;2&gt; 添加不同类型的对象"></a>&lt;2&gt; 添加不同类型的对象</h4><p>当继续使用其他类型的字符串型对象添加进TreeSet集合时，就会报错，因为无法进行比较，因为自然排序采用统一的compareTo进行排序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">231</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// treeSet涉及到排序，输入的内容要一致,存在自然排序；</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java.lang.ClassCastException: java.lang.Integer cannot be cast to java.lang.String</p></blockquote><h4 id="lt-3-gt-TreeSet放置字符串"><a href="#lt-3-gt-TreeSet放置字符串" class="headerlink" title="&lt;3&gt; TreeSet放置字符串"></a>&lt;3&gt; TreeSet放置字符串</h4><p>全放置字符串就可以</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170256.png" alt="在treeSet全部放置字符串"></p><h4 id="lt-4-gt-treeSet放置对象"><a href="#lt-4-gt-treeSet放置对象" class="headerlink" title="&lt;4&gt; treeSet放置对象"></a>&lt;4&gt; treeSet放置对象</h4><p>当使用treeSet直接放置对象时，会直接报错，因为自定义的对象没有实现comparable接口，没有比较大小的能力，无法通过二叉树进行数据存入</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetListTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Students</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>java.lang.ClassCastException</p></blockquote><h4 id="lt-5-gt-让对象实现comparable接口"><a href="#lt-5-gt-让对象实现comparable接口" class="headerlink" title="&lt;5&gt; 让对象实现comparable接口"></a>&lt;5&gt; 让对象实现comparable接口</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetListTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果试图把一个对象添加到 TreeSet 时，则该对象的类必须实现 Comparable 接口。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170301.png" alt="image-20200814092715355"></p><p>实现 Comparable 的类必须实现 compareTo(Object obj) 方法，两个对象即通过 compareTo(Object obj) 方法的返回值来比较大小。</p><h4 id="lt-6-gt-treeSet的去重，判断对象相等，通过compareTo"><a href="#lt-6-gt-treeSet的去重，判断对象相等，通过compareTo" class="headerlink" title="&lt;6&gt; treeSet的去重，判断对象相等，通过compareTo"></a>&lt;6&gt; treeSet的去重，判断对象相等，通过compareTo</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170310.png" alt="image-20200814092520363"></p><p>出现compareTo = 0时会失效</p><h3 id="12-6-2-定制排序-Comparator第三方比较器（接口）"><a href="#12-6-2-定制排序-Comparator第三方比较器（接口）" class="headerlink" title="12.6.2 定制排序 Comparator第三方比较器（接口）"></a>12.6.2 定制排序 Comparator第三方比较器（接口）</h3><p>含义相近</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170319.png" alt="image-20200814100148623"></p><p>自定义比较器 写一个类，实现Comparator</p><h4 id="lt-1-gt-实现comparator"><a href="#lt-1-gt-实现comparator" class="headerlink" title="&lt;1&gt; 实现comparator"></a>&lt;1&gt; 实现comparator</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170327.png" alt="image-20200814100743919"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetListTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Students</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"马超"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyComparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyComparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将重写后的比较器直接传入形参使用</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Students</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> <span class="token class-name">Students</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"age="</span> <span class="token operator">+</span> age<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"salary="</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Students</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"type exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MyComparator</span> <span class="token keyword">implements</span> <span class="token class-name">Comparator</span> <span class="token punctuation">&#123;</span><span class="token comment">//实现比较器类</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Students</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Students</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSalary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"type exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果有比较器和对象，对象自己也会重写了comparable，以比较器为准</p><h4 id="lt-2-gt-String自己本身具有compareTo"><a href="#lt-2-gt-String自己本身具有compareTo" class="headerlink" title="&lt;2&gt; String自己本身具有compareTo"></a>&lt;2&gt; String自己本身具有compareTo</h4><p>匿名内部类 与 String的大小比较</p><p>unicode不靠谱 不会按照汉字的字母进行排序</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170334.png" alt="image-20200814103012805"></p><h4 id="lt-3-gt-Comparator的匿名内部类的使用"><a href="#lt-3-gt-Comparator的匿名内部类的使用" class="headerlink" title="&lt;3&gt; Comparator的匿名内部类的使用"></a>&lt;3&gt; Comparator的匿名内部类的使用</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170343.png" alt="image-20200814102752185"></p><p>还可以把匿名内部类可以直接放进集合构造器的形参列表</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170353.png" alt="image-20200814103145878"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SetListTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Students</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"张飞"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"关羽"</span><span class="token punctuation">,</span><span class="token number">46</span><span class="token punctuation">,</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Students</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token string">"马超"</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Comparator</span> comparator <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Comparator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compare</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o1<span class="token punctuation">,</span> <span class="token class-name">Object</span> o2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>o1 <span class="token keyword">instanceof</span> <span class="token class-name">Students</span> <span class="token operator">&amp;&amp;</span> o2 <span class="token keyword">instanceof</span> <span class="token class-name">Students</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o1<span class="token punctuation">)</span><span class="token punctuation">.</span>salary <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o2<span class="token punctuation">)</span><span class="token punctuation">.</span>salary<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                    <span class="token keyword">return</span> num<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"type exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将重写后的比较器直接传入形参使用</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Students</span> <span class="token keyword">implements</span> <span class="token class-name">Comparable</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">int</span> salary<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Students</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token keyword">int</span> salary<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">=</span> salary<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">StringJoiner</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">,</span> <span class="token class-name">Students</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">.</span><span class="token function">getSimpleName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"["</span><span class="token punctuation">,</span> <span class="token string">"]"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">"'"</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"age="</span> <span class="token operator">+</span> age<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"salary="</span> <span class="token operator">+</span> salary<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">compareTo</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token keyword">instanceof</span> <span class="token class-name">Students</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>salary <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token class-name">Students</span><span class="token punctuation">)</span> o<span class="token punctuation">)</span><span class="token punctuation">.</span>salary<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"type exception"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-4-gt-Comparable的典型实现"><a href="#lt-4-gt-Comparable的典型实现" class="headerlink" title="&lt;4&gt; Comparable的典型实现"></a>&lt;4&gt; Comparable的典型实现</h4><p>BigDecimal、BigInteger 以及所有的数值型对应的包装类：按它们对应的数值大小进行比较</p><p>Character：按字符的 unicode值来进行比较</p><p>Boolean：true 对应的包装类实例大于 false 对应的包装类实例</p><p>String：按字符串中字符的 unicode 值进行比较</p><p>Date、Time：后边的时间、日期比前面的时间、日期大</p><p>向 TreeSet 中添加元素时，只有第一个元素无须比较compareTo()方法，后面添加的所有元素都会调用compareTo()方法进行比较。</p><p><strong>因为只有相同类的两个实例才会比较大小，所以向</strong> <strong>TreeSet</strong> <strong>中添加的应该是同一个类的对象</strong></p><p>对于 ==TreeSet==集合而言，它判断两个对象是否相等的==唯一标准==是：</p><ul><li>两个对象通过 compareTo(Object obj) 方法比较返回值</li></ul><p>当需要把一个对象放入 TreeSet 中，重写该对象对应的 equals() 方法时，应保证该方法与 compareTo(Object obj) 方法有一致的结果：如果两个对象通过 equals() 方法比较返回 true，则通过 compareTo(Object obj) 方法比较应返回 0</p><h2 id="12-13-迭代器Iterator"><a href="#12-13-迭代器Iterator" class="headerlink" title="12.13 迭代器Iterator"></a>12.13 迭代器Iterator</h2><p>Iterator对象称为迭代器(设计模式的一种)，主要用于遍历 Collection 集合中的元素。</p><p>所有实现了Collection接口的集合类都有一个iterator()方法，用以返回一个实现了Iterator接口的对象。</p><p>Iterator仅用于遍历集合，Iterator 本身并不提供承装对象的能力。如果需要创建 Iterator 对象，则必须有一个被迭代的集合。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170400.png" alt="image-20200814104152104"></p><p><img src="images/image-20200814104207202.png" alt="image-20200814104207202"></p><p>在调用it.next()方法之前必须要调用it.hasNext()进行检测。若不调用，且下一条记录无效，直接调用it.next()会抛出</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//NoSuchElementException异常。</span><span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> coll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span> obj <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170409.png" alt="迭代器运行图"></p><h3 id="12-11-1-迭代器的使用"><a href="#12-11-1-迭代器的使用" class="headerlink" title="12.11.1 迭代器的使用"></a>12.11.1 迭代器的使用</h3><p>通过集合对象的iterator方法获取迭代器对象</p><p>while循环不断检测迭代器是否还有下一个元素</p><p>如果有，真的调用next()获取下一个元素，并同时移动游标</p><p>增强for本质上使用了迭代器</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170415.png" alt="image-20200814104839027"></p><h4 id="lt-1-gt-迭代器的注意事项"><a href="#lt-1-gt-迭代器的注意事项" class="headerlink" title="&lt;1&gt; 迭代器的注意事项"></a>&lt;1&gt; 迭代器的注意事项</h4><ol><li>不能new 必须向集合要迭代器</li><li>迭代器拿到之后尽快使用，不要再修改集合（set.add(100))</li><li>再循环中，next()方法只能调用一次</li><li>否则游标越界</li><li>迭代器只能使用一次，用过就不能再用</li></ol><h4 id="lt-2-gt-增强for"><a href="#lt-2-gt-增强for" class="headerlink" title="&lt;2&gt; 增强for"></a>&lt;2&gt; 增强for</h4><p>把数组跟集合整合在一起</p><p>增强for为了写法简单</p><h4 id="lt-3-gt-注意事项"><a href="#lt-3-gt-注意事项" class="headerlink" title="&lt;3&gt; 注意事项"></a>&lt;3&gt; 注意事项</h4><ul><li>迭代出来的元素都是原来集合元素的拷贝。</li><li>Java集合中保存的元素实质是对象的引用，而非对象本身。</li><li>迭代出的对象也是引用的拷贝，结果还是引用。那么如果集合中保存的元素是可变类型的，那么可以通过迭代出的元素修改原集合中的对象。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeSet</span><span class="token punctuation">(</span>comparator<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//将重写后的比较器直接传入形参使用</span>set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span> set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>s3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Students</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Students</span> i <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token punctuation">.</span>salary <span class="token operator">&lt;</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        iterator<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-4-gt-迭代器的remove的使用-如上"><a href="#lt-4-gt-迭代器的remove的使用-如上" class="headerlink" title="&lt;4&gt; 迭代器的remove的使用 如上"></a>&lt;4&gt; 迭代器的remove的使用 如上</h4><h2 id="12-14-泛型"><a href="#12-14-泛型" class="headerlink" title="12.14 泛型"></a>12.14 泛型</h2><h3 id="12-12-1-为什么要有泛型"><a href="#12-12-1-为什么要有泛型" class="headerlink" title="12.12.1 为什么要有泛型"></a>12.12.1 为什么要有泛型</h3><ul><li>解决类型安全问题. </li><li>解决获取数据元素时，需要类型强转的问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170422.png" alt="当没有泛型时的集合应用"></p><p>使用泛型之后</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170428.png" alt="当使用泛型时集合的使用变得更加简便"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170432.png" alt="image-20200814112459363"></p><h4 id="lt-1-gt-类型安全的说明"><a href="#lt-1-gt-类型安全的说明" class="headerlink" title="&lt;1&gt; 类型安全的说明"></a>&lt;1&gt; 类型安全的说明</h4><p>类型一旦使用泛型，集合中只能保存泛型中保存的元素</p><p>集合类中的元素使用Object类型，以允许不同的添加和获取类型。</p><p>当获取集合中所需对象时，必须进行强制类型转型。</p><p>例如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"Hello world"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//产生异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="12-15-Map接口"><a href="#12-15-Map接口" class="headerlink" title="12.15 Map接口"></a>12.15 Map接口</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170442.png" alt="image-20200814203310215"></p><p>Map与Collection并列存在。用于保存具有<strong>映射关系</strong>的数据:Key-Value</p><p>Map 中的 key 和 value 都可以是任何引用类型的数据</p><p>Map 中的 key 用Set来存放，<strong>不允许重复</strong>，即同一个 Map 对象所对应的类，须重写hashCode()和equals()方法。</p><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</p><p>Map接口的常用实现类：HashMap、TreeMap和Properties。</p><p>==HashMap==是 Map 接口<strong>使用频率最高</strong>的实现类。</p><p>允许使用null键和null值，与HashSet一样，不保证映射的顺序。</p><ul><li>HashMap 判断两个 key 相等的标准是：两个 key 通过 equals() 方法返回 true，hashCode 值也相等。</li><li>HashMap 判断两个 value相等的标准是：两个 value 通过 equals() 方法返回 true。</li></ul><h3 id="12-15-1-Map的基本操作"><a href="#12-15-1-Map的基本操作" class="headerlink" title="12.15.1 Map的基本操作"></a>12.15.1 Map的基本操作</h3><p>key 和 value 之间存在单向一对一关系，即通过指定的 key 总能找到唯一的、确定的 value。</p><p>内部有2个子集合, 一个是Set保存所有键对象, 另一个是Collection保存所有值对象.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token comment">//写入词条</span><span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token comment">//查词典, 根据给定的键对象 获取它映射的值对象</span><span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token comment">//删除词条</span><span class="token class-name">Set</span> <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回保存所有键对象的Set子集合.</span><span class="token class-name">Set</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">//返回的是保存所有条目对象的Set集合</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加、删除操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">put</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">,</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Object</span> <span class="token function">remove</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">putAll</span><span class="token punctuation">(</span><span class="token class-name">Map</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>元视图操作的方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span>  <span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//返回键值对象数组</span><span class="token class-name">Collection</span> <span class="token function">values</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span> <span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>元素查询的操作：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Object</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">containsKey</span><span class="token punctuation">(</span><span class="token class-name">Object</span> key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">containsValue</span><span class="token punctuation">(</span><span class="token class-name">Object</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-5-2-添加的覆盖"><a href="#12-5-2-添加的覆盖" class="headerlink" title="12.5.2 添加的覆盖"></a>12.5.2 添加的覆盖</h3><p>put具有覆盖效果，新值会覆盖老值</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170449.png" alt="image-20200814120701343"></p><h2 id="12-16-Map实现类之一-HashMap"><a href="#12-16-Map实现类之一-HashMap" class="headerlink" title="12.16 Map实现类之一 HashMap"></a>12.16 Map实现类之一 HashMap</h2><p>使用哈希算法实现的Map集合, 对所有键对象保存规则就是无序不可重复.</p><h3 id="12-16-1-练习-创建HashMap并且使用泛型"><a href="#12-16-1-练习-创建HashMap并且使用泛型" class="headerlink" title="12.16.1 练习 创建HashMap并且使用泛型"></a>12.16.1 练习 创建HashMap并且使用泛型</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//使用泛型</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> radius <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">*</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">Set</span> set <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> set<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"半径为"</span> <span class="token operator">+</span> next<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">" 面积为"</span> <span class="token operator">+</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/*for (Object o :set)&#123;            System.out.print("半径为" + o);            System.out.println(" 面积为" + map.get(o));        &#125;*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-6-2-keySet-与entrySet-的应用（entrySet-需要理解）"><a href="#12-6-2-keySet-与entrySet-的应用（entrySet-需要理解）" class="headerlink" title="12.6.2 keySet()与entrySet()的应用（entrySet()需要理解）"></a>12.6.2 keySet()与entrySet()的应用（entrySet()需要理解）</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">50</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span> radius <span class="token operator">=</span> i<span class="token punctuation">;</span>                <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">*</span><span class="token number">3.14</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>radius<span class="token punctuation">,</span>area<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有条目对象</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> tmp <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integers <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">keySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> integers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Integer</span> key <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> value <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 根据键对象动态获取值对象.</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"**********************************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">></span><span class="token punctuation">></span></span> entries <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 所有条目对象</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span> tmp <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>tmp<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span> tmp<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="12-17-Map实现类之二-TreeMap"><a href="#12-17-Map实现类之二-TreeMap" class="headerlink" title="12.17 Map实现类之二 TreeMap"></a>12.17 Map实现类之二 TreeMap</h3><p>TreeMap存储 Key-Value 对时，需要根据 key-value 对进行排序。TreeMap 可以保证所有的 Key-Value 对处于有序状态。</p><p>TreeMap 的 Key 的排序：</p><p>自然排序：TreeMap 的所有的 Key 必须实现 Comparable 接口，而且所有的 Key 应该是同一个类的对象，否则将会抛出 ClasssCastException</p><p>定制排序：创建 TreeMap 时，传入一个 Comparator 对象，该对象负责对 TreeMap 中的所有 key 进行排序。此时不需要 Map 的 Key 实现 Comparable 接口</p><h2 id="12-18-Map实现类之三-LinkedHashMap"><a href="#12-18-Map实现类之三-LinkedHashMap" class="headerlink" title="12.18 Map实现类之三 LinkedHashMap"></a>12.18 Map实现类之三 LinkedHashMap</h2><p>lLinkedHashMap 是 HashMap 的子类</p><p>l与LinkedHashSet类似，LinkedHashMap 可以维护 Map 的迭代顺序：迭代顺序与 Key-Value 对的插入顺序一致</p><h2 id="12-18-Map实现类之四-HashTable"><a href="#12-18-Map实现类之四-HashTable" class="headerlink" title="12.18 Map实现类之四 HashTable"></a>12.18 Map实现类之四 HashTable</h2><p>Hashtable是个古老的 Map 实现类，线程安全。</p><p>与HashMap不同，Hashtable 不允许使用 null 作为 key 和 value</p><p>与HashMap一样，Hashtable 也不能保证其中 Key-Value 对的顺序</p><p>Hashtable判断两个key相等、两个value相等的标准，与hashMap一致。</p><h2 id="12-19-Map实现类之五-Properties"><a href="#12-19-Map实现类之五-Properties" class="headerlink" title="12.19 Map实现类之五 Properties"></a>12.19 Map实现类之五 Properties</h2><p>Properties 类是 Hashtable 的子类，该对象用于处理属性文件</p><p>由于属性文件里的 key、value 都是字符串类型，所以 Properties 里的 key 和 value 都是字符串类型</p><p>存取数据时，建议使用setProperty(String key,String value)方法和getProperty(String key)方法</p><p>能够自动读取存储信息</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170459.png" alt="image-20200814143742402"></p><p>创建一个配置文件，用properties</p><h2 id="12-20-工具类-Collections-Arrays"><a href="#12-20-工具类-Collections-Arrays" class="headerlink" title="12.20 工具类 Collections Arrays"></a>12.20 工具类 Collections Arrays</h2><p>Collections 是一个操作 Set、List 和 Map 等集合的工具类</p><p>Collections 中提供了一系列静态的方法对集合元素进行排序、查询和修改等操作，还提供了对集合对象设置不可变、对集合对象实现同步控制等方法</p><p>排序操作：（均为static方法）</p><p>reverse(List)：反转 List 中元素的顺序</p><p>shuffle(List)：对 List 集合元素进行随机排序</p><p>sort(List)：根据元素的自然顺序对指定 List 集合元素按升序排序</p><p>sort(List，Comparator)：根据指定的 Comparator 产生的顺序对 List 集合元素进行排序</p><p>swap(List，int， int)：将指定 list 集合中的 i 处元素和 j 处元素进行交换</p><h4 id="lt-1-gt-sort"><a href="#lt-1-gt-sort" class="headerlink" title="&lt;1&gt; sort"></a>&lt;1&gt; sort</h4><p>可以提供比较器</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170510.png" alt="image-20200814144141915"></p><h2 id="12-21-ArrayList集合内部-底层代码"><a href="#12-21-ArrayList集合内部-底层代码" class="headerlink" title="12.21  ArrayList集合内部==底层代码=="></a>12.21  ArrayList集合内部==底层代码==</h2><p>基于数组实现内部集合</p><p>数组的缺省容量是10</p><h3 id="属性"><a href="#属性" class="headerlink" title="属性"></a>属性</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170514.png" alt="image-20200815102457804"></p><p>数组容量判断<img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170522.png" alt="image-20200815102852453"></p><h4 id="计算所需容量"><a href="#计算所需容量" class="headerlink" title="计算所需容量"></a>计算所需容量</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170540.png" alt="image-20200815103026663"></p><h4 id="返回参数10"><a href="#返回参数10" class="headerlink" title="返回参数10"></a>返回参数10</h4><p>扩容</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170547.png" alt="image-20200815103212320"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170556.png" alt="image-20200815103436384"></p><p>有序可重复</p><p>扩容是1.5倍</p><h4 id="删除的流程"><a href="#删除的流程" class="headerlink" title="删除的流程"></a>删除的流程</h4><p>前移补空洞</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170600.png" alt="image-20200815104920016"></p><h3 id="迭代器原理"><a href="#迭代器原理" class="headerlink" title="迭代器原理"></a>迭代器原理</h3><p>为啥修改错误</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170612.png" alt="image-20200815105513924">迭代器的内部类itr</p><h3 id="今晚代码把代码找出来"><a href="#今晚代码把代码找出来" class="headerlink" title="今晚代码把代码找出来"></a>今晚代码把代码找出来</h3><h1 id="第13章-泛型"><a href="#第13章-泛型" class="headerlink" title="第13章 泛型"></a>第13章 泛型</h1><p>泛型即为参数化类型</p><ol><li><p>解决元素存储的安全性问题</p></li><li><p>解决获取数据元素时，需要类型强转的问题</p></li></ol><p>泛型，JDK1.5新加入的，解决数据类型的安全性问题，其主要原理是在类声明时通过一个标识表示类中某个属性的类型或者是某个方法的返回值及参数类型。</p><p>这样在类声明或实例化时只要指定好需要的具体的类型即可。</p><p> Java泛型可以保证如果程序在编译时没有发出警告，运行时就不会产生ClassCastException异常。</p><p>同时，代码更加简洁、健壮。</p><h2 id="13-1-在集合中使用泛型"><a href="#13-1-在集合中使用泛型" class="headerlink" title="13.1 在集合中使用泛型"></a>13.1 在集合中使用泛型</h2><p>在集合中，可以在添加时固定类型，获取类型不要再造型</p><h3 id="13-1-1-泛型的声明"><a href="#13-1-1-泛型的声明" class="headerlink" title="13.1.1 泛型的声明"></a>13.1.1 泛型的声明</h3><p> interface List<T> 和 class TestGen&lt;K,V&gt;</p><p> 其中，T,K,V不代表值，而是表示类型。这里使</p><p>​      用任意字母都可以。</p><p>常用T表示，是Type的缩写。</p><h3 id="13-2-2-泛型的实例化"><a href="#13-2-2-泛型的实例化" class="headerlink" title="13.2.2 泛型的实例化"></a>13.2.2 泛型的实例化</h3><p>   一定要在类名后面指定类型参数的值（类型）。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span>strList<span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Customer</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> customers<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>能是类，不能用基本数据类型填充。</p><p>类型不安全</p><h3 id="13-2-3-集合中泛型的深度理解"><a href="#13-2-3-集合中泛型的深度理解" class="headerlink" title="13.2.3 集合中泛型的深度理解"></a>13.2.3 集合中泛型的深度理解</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> generic <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> stringArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> integerArrayList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> classStringArrayList <span class="token operator">=</span> stringArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> classIntegerArrayList <span class="token operator">=</span> integerArrayList<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>classStringArrayList<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>classIntegerArrayList<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"类型相同"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果：类型相同</p></blockquote><p>通过上面的例子可以证明，在编译之后程序会采取去泛型化的措施。也就是说Java中的泛型，==只在编译阶段有效。==</p><p>在编译过程中，正确检验泛型结果后，会将泛型的相关信息擦出，并且在对象进入和离开方法的边界处添加类型检查和类型转换的方法。也就是说，泛型信息不会进入到运行时阶段。</p><p>对此总结成一句话：泛型类型在逻辑上看以看成是多个不同的类型，实际上都是相同的基本类型。</p><h2 id="13-2-在类中使用泛型"><a href="#13-2-在类中使用泛型" class="headerlink" title="13.2 在类中使用泛型"></a>13.2 在类中使用泛型</h2><h3 id="13-2-1-自定义泛型类"><a href="#13-2-1-自定义泛型类" class="headerlink" title="13.2.1 自定义泛型类"></a>13.2.1 自定义泛型类</h3><p>泛型类型只能对象相关, 和类无关, 所以不可以在静态方法中或静态属性中使用泛型类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">X</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span> <span class="token comment">// X就是这个类的泛型参数, 作用是表示某种类类型. 是一个形参, 此时并不知道X的具体类型是什么.</span>    <span class="token comment">// 在创建对象时由创建者指定X的具体类型. 所以X类型和对象相关.</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token comment">//private Object info; // 类型不安全.</span>    <span class="token keyword">private</span> <span class="token class-name">X</span> info<span class="token punctuation">;</span> <span class="token comment">// X既然是数据类型, 就可以声明属性.</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token class-name">X</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">X</span> <span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setInfo</span><span class="token punctuation">(</span><span class="token class-name">X</span> info<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>info <span class="token operator">=</span> info<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Person&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", info="</span> <span class="token operator">+</span> info <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 泛型类型只能对象相关, 和类无关, 所以不可以在静态方法中或静态属性中使用泛型类型    public static void test(X x) &#123;    &#125;*/</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-1-自定义泛型类的对象声明"><a href="#13-2-1-自定义泛型类的对象声明" class="headerlink" title="13.2.1 自定义泛型类的对象声明"></a>13.2.1 自定义泛型类的对象声明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"张三"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型安全, 因为在创建对象时指定了具体的类型</span>        <span class="token class-name">Integer</span> info1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型安全了.</span>        <span class="token comment">//p1.setInfo("男");</span>        <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"李四"</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型安全, 指定了具体类型</span>        <span class="token class-name">String</span> info2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Boolean</span><span class="token punctuation">></span></span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王五"</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 类型不安全, 因为没有指定, 所以只能用类型最模糊的Object.</span>        <span class="token class-name">Boolean</span> info3 <span class="token operator">=</span> p3<span class="token punctuation">.</span><span class="token function">getInfo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-2-2-是否能够在静态方法中使用X-泛型"><a href="#13-2-2-是否能够在静态方法中使用X-泛型" class="headerlink" title="13.2.2 是否能够在静态方法中使用X(泛型)"></a>13.2.2 是否能够在静态方法中使用X(泛型)</h3><p>泛型类型只能对象相关, 和类无关, 所以不可以在静态方法中或静态属性中使用泛型类型</p><p>成员变量（可以声明泛型）</p><p>类变量（静态变量）</p><p>局部变量（可以声明泛型）</p><h2 id="13-3-泛型方法"><a href="#13-3-泛型方法" class="headerlink" title="13.3 泛型方法"></a>13.3 泛型方法</h2><p>在返回值左面使用&lt;泛型类型A&gt;, 和局部变量类似 , </p><p>泛型类型A只能在本方法中使用, 所以是局部泛型</p><p> 泛型方法必须通过参数来确定类型, 所以必须要有泛型类型的一个参数, </p><p>将来在调用时由调用者的实参的具体值进一步确定真正的类型.</p><p>==类 MyMethod==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// 泛型方法</span><span class="token keyword">class</span> <span class="token class-name">MyMethod</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 在返回值左面使用&lt;泛型类型A>, 和局部变量类似 , 泛型类型A只能在本方法中使用, 所以是局部泛型</span>    <span class="token comment">// 泛型方法必须通过参数来确定类型, 所以必须要有泛型类型的一个参数, 将来在调用时由调用者的实参的具体值进一步确定真正的类型.</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">A</span><span class="token punctuation">></span></span> <span class="token class-name">A</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token class-name">A</span> a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">A</span> a2 <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test()..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> a2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//A a = null;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>实参避免传入null值。根据null值无法感知具体类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> test <span class="token operator">=</span> <span class="token class-name">MyMethod</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> abc <span class="token operator">=</span> <span class="token class-name">MyMethod</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> test1 <span class="token operator">=</span> <span class="token class-name">MyMethod</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 实参避免传入 null值, 因为根据null值无法它的具体类型.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过传入的实参确认返回类型</p><h2 id="13-4-泛型转数组-toArray-泛型方法"><a href="#13-4-泛型转数组-toArray-泛型方法" class="headerlink" title="13.4 泛型转数组 toArray 泛型方法"></a>13.4 泛型转数组 toArray 泛型方法</h2><p>ArrayList的toArray(其他数组也具有这种方法)</p><p>ArrayList提供了一个将List转为数组的一个非常方便的方法toArray。toArray有两个重载的方法：</p><p>(1）list.toArray();</p><p>(2）list.toArray(T[] a);</p><p>对于第一个重载方法，是将list直接转为Object[] 数组；</p><p>第二种方法是将list转化为你所需要类型的数组，当然我们用的时候会转化为与list内容相同的类型。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170627.png" alt="image-20200814154958819"></p><p>集合在转数组时必须进行对toArray(传入一个数组的类型，用来判断类型)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToArrayTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span>list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Object</span><span class="token punctuation">[</span><span class="token punctuation">]</span> objects <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span><span class="token punctuation">[</span><span class="token punctuation">]</span> integers <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//必须传入一个可以参考的格式</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> integers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>integers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token class-name">Integer</span> integer<span class="token operator">:</span>integers<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>integer <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>integers<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果这个数组能用，就用。如果传入数组不嗯能够用，我就不用</p><h2 id="13-5-泛型与继承"><a href="#13-5-泛型与继承" class="headerlink" title="13.5 泛型与继承"></a>13.5 泛型与继承</h2><p>泛型与继承的关系</p><p>子类在继承泛型父类时，没有明确泛型类型，父类中的泛型类型只能是最模糊的Object类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">T</span> t<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">getT</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setT</span><span class="token punctuation">(</span><span class="token class-name">T</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>t <span class="token operator">=</span> t<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> B1 <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 子类在继承泛型父类时, 没有明确泛型类型, 父类中的泛型类型只能是最模糊的Object类型.</span><span class="token keyword">class</span> B2 <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 子类在继承泛型父类时, 直接写死泛型. 不够灵活, 但是使用简单.</span><span class="token keyword">class</span> B3 <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> B4<span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token keyword">extends</span> <span class="token class-name">A</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">T</span><span class="token punctuation">></span></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span> <span class="token comment">// 子类在继承时没有固定,也是继续泛型. 是最灵活的写法. 对于使用者要求高</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-6-通配符-lt-gt-的使用"><a href="#13-6-通配符-lt-gt-的使用" class="headerlink" title="13.6 通配符&lt;?&gt;的使用"></a>13.6 通配符&lt;?&gt;的使用</h2><p>权限不行，父类引用反而可以添加更多</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">view</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"aflksj"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"2384234"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">view</span><span class="token punctuation">(</span>list2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//List&lt;Number> list2 = new ArrayList&lt;Integer>();</span>        <span class="token comment">//list2可以添加Number的其他子类对象, 而实际的List集合对象只能放Integer</span>        <span class="token comment">//List&lt;Object> list = list1;</span>        <span class="token comment">//list = list2;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-6-1-lt-gt-模糊类型的说明"><a href="#13-6-1-lt-gt-模糊类型的说明" class="headerlink" title="13.6.1 &lt;?&gt;模糊类型的说明"></a>13.6.1 &lt;?&gt;模糊类型的说明</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">// list集合因为类型的未知性, 使得它不便于添加元素. 但是可以获取类型模糊的元素.</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> list1<span class="token punctuation">;</span> <span class="token comment">// ? 表示未知. list里可以保存任意未知对象.</span>        <span class="token comment">//list = list2;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已知类型 报错</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"abds"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已知类型 报错</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//已知类型 报错</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> o <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已知类型不能放在&lt;?&gt;</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170637.png" alt="image-20200814162507529"></p><p>不适合于添加元素，但是适合于读取元素，放置用户随意添加删除</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ListGenericTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span> numbers <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        numbers<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">219371L</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        numbers.add("sadad");</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>numbers<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ArrayList</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> objects <span class="token operator">=</span> list<span class="token punctuation">;</span><span class="token comment">//此时添加元素受到限制，所有已知类型的元素都会被限制加入</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> objects<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        objects<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//但是可以删除元素</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>objects<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为类型的未执行</p><p>获取时失去泛型</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170643.png" alt="image-20200814162731128"></p><p>可以获取类型模糊的元素</p><p>可以用于</p><p>获取元素</p><p>获取不同类型的集合</p><p>专门用来遍历</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">view</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// List&lt;?>写法只适用于遍历集合, 只读的.</span>       <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="13-6-2-给通配符？-限定作用"><a href="#13-6-2-给通配符？-限定作用" class="headerlink" title="13.6.2 给通配符？+ 限定作用"></a>13.6.2 给通配符？+ 限定作用</h3><p><strong>&lt;?&gt;</strong></p><p>允许所有泛型的引用调用</p><p>举例：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> <span class="token punctuation">(</span>无穷小<span class="token punctuation">,</span> <span class="token class-name">Number</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只允许泛型为Number及Number子类的引用调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span>   <span class="token punctuation">[</span><span class="token class-name">Number</span> <span class="token punctuation">,</span>无穷大<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只允许泛型为Number及Number父类的引用调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>只允许泛型为实现Comparable接口的实现类的引用调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// list1集合中可以保存Number及其未知父类类型的对象.</span>        <span class="token comment">// &lt;? super Number> 写法可以添加元素, 但是获取元素不方便.</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">super</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">3.22</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Object</span> object <span class="token operator">=</span> list1<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// list2集合中可以保存Number及其未知子类类型的对象</span>        <span class="token comment">// &lt;? extends Number> 写法不适合添加元素, 但是适合获取元素</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Number</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Number</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//list2.add(200); // 200是已知类型</span>        <span class="token class-name">Number</span> num <span class="token operator">=</span> list2<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="13-7-泛型用于灵活的比较-实现Comparator-Comparable接口"><a href="#13-7-泛型用于灵活的比较-实现Comparator-Comparable接口" class="headerlink" title="13.7 泛型用于灵活的比较 实现Comparator  Comparable接口"></a>13.7 泛型用于灵活的比较 实现Comparator  Comparable接口</h2><h4 id="泛型在比较上的用途"><a href="#泛型在比较上的用途" class="headerlink" title="泛型在比较上的用途"></a>泛型在比较上的用途</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompareTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Set</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Double</span><span class="token punctuation">></span></span> list2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>count <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            list1<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            list2<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            count<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">CompareTools</span><span class="token punctuation">.</span><span class="token class-name">Max</span><span class="token punctuation">(</span>list1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CompareTools</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Comparable</span> <span class="token class-name">Max</span><span class="token punctuation">(</span><span class="token class-name">Collection</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">></span></span> list<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//表示可以传入Comparable的子类</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token operator">?</span> <span class="token keyword">extends</span> <span class="token class-name">Comparable</span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//传入的迭代器也要有相同的类型</span>        <span class="token class-name">Comparable</span> max <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Comparable</span> next <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>max<span class="token punctuation">.</span><span class="token function">compareTo</span><span class="token punctuation">(</span>next<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> next<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>为了更好地兼容性</p><p>不写基于类型推断</p><h4 id="通配符适用于可比较器用于比较"><a href="#通配符适用于可比较器用于比较" class="headerlink" title="通配符适用于可比较器用于比较"></a>通配符适用于可比较器用于比较</h4><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200815095437294.png" alt="image-20200815095437294"></p><h4 id="用于找最大值，最小值"><a href="#用于找最大值，最小值" class="headerlink" title="用于找最大值，最小值"></a>用于找最大值，最小值</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170659.png" alt="image-20200815101942881"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h1 id="第14章-IO流"><a href="#第14章-IO流" class="headerlink" title="第14章 IO流"></a>第14章 IO流</h1><p>输入跟输出</p><h2 id="14-1-IO原理"><a href="#14-1-IO原理" class="headerlink" title="14.1 IO原理"></a>14.1 IO原理</h2><p>IO流用来处理设备之间的数据传输。</p><p>Java程序中，对于数据的输入/输出操作以”流(stream)” 的方式进行。是指从==源节点到目标节点的数据流动==</p><p>源节点和目标节点可以是文件、网络、内存、键盘、显示器等等。</p><p>java.io包下提供了各种“流”类和接口，用以获取不同种类的数据，并通过标准的方法输入或输出数据。</p><h2 id="14-2-流的分类"><a href="#14-2-流的分类" class="headerlink" title="14.2 流的分类"></a>14.2 流的分类</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170703.png" alt="img"></p><p>按操作数据单位不同分为：字节流(8 bit)，字符流(16 bit)<br>按数据流的流向不同分为：输入流，输出流</p><table><thead><tr><th></th><th><strong>字节流</strong></th><th><strong>字符流</strong></th></tr></thead><tbody><tr><td>输入流</td><td>InputStream（基类）</td><td>Reader（基类）</td></tr><tr><td>输出流</td><td>OutputStream （基类）</td><td>Writer（基类）</td></tr><tr><td>流中的数据</td><td>二进制字节（8位）</td><td>Unicode字符（16位）</td></tr></tbody></table><ol><li><p>Java的IO流共涉及40多个类，实际上非常规则，都是从如下4个抽象基类派生的。</p></li><li><p>由这四个类派生出来的子类名称都是以其父类名作为子类名后缀。</p></li></ol><h2 id="14-3-fileReader-文本文件输入流-char"><a href="#14-3-fileReader-文本文件输入流-char" class="headerlink" title="14.3 fileReader 文本文件输入流 ==char=="></a>14.3 fileReader 文本文件输入流 ==char==</h2><p>无论是文本文件还是二进制文件，当需要读取文件数据时，需要完成以下步骤：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170710.png" alt="fileReader"></p><p>返回第一次字符的unicode的码值</p><p>char</p><p>使用文件输入流打开指定文件</p><h3 id="14-3-1-换行符"><a href="#14-3-1-换行符" class="headerlink" title="14.3.1 换行符"></a>14.3.1 换行符</h3><p>0d 0a是换行 0a 是10</p><p>\r 13 \n 10</p><h2 id="14-4-使用IOfileWriter写文本文件"><a href="#14-4-使用IOfileWriter写文本文件" class="headerlink" title="14.4 使用IOfileWriter写文本文件"></a>14.4 使用IOfileWriter写文本文件</h2><p>写文件会自动创建文件</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170726.png" alt="image-20200815141341225"></p><p>13 、\r 10 \t</p><p>记事本具有\r\t</p><h3 id="14-4-1-提高效率使用缓冲区-100"><a href="#14-4-1-提高效率使用缓冲区-100" class="headerlink" title="14.4.1 提高效率使用缓冲区[] 100"></a>14.4.1 提高效率使用缓冲区[] 100</h3><p>最后一次会剩下一部分上一次已经处理过的数据</p><h4 id="lt-1-gt-如果使用缓冲区读文本文件应该怎么做"><a href="#lt-1-gt-如果使用缓冲区读文本文件应该怎么做" class="headerlink" title="&lt;1&gt; 如果使用缓冲区读文本文件应该怎么做"></a>&lt;1&gt; 如果使用缓冲区读文本文件应该怎么做</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170737.png" alt="image-20200815145301306"></p><h4 id="lt-2-gt-使用缓冲区写文件"><a href="#lt-2-gt-使用缓冲区写文件" class="headerlink" title="&lt;2&gt; 使用缓冲区写文件"></a>&lt;2&gt; 使用缓冲区写文件</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170750.png" alt="image-20200815152248221"></p><h2 id="14-5-缓冲流"><a href="#14-5-缓冲流" class="headerlink" title="14.5 缓冲流"></a>14.5 缓冲流</h2><p>为了提高数据读写的速度，Java API提供了带缓冲功能的流类，在使用这些流类时，会创建一个内部缓冲区数组</p><p>根据数据操作单位可以把缓冲流分为：</p><p>BufferedReader 和 BufferedWriter</p><p>BufferedInputStream 和 BufferedOutputStream</p><p>缓冲流要“套接”在相应的节点流之上，对读写的数据提供了缓冲的功能，提高了读写的效率，同时增加了一些新的方法, 增强了流处理能力.<br>对于输出的缓冲流，写出的数据会先在内存中缓存，使用flush()将会使内存中的数据立刻写出</p><p>二进制文件不能使用字符流</p><h3 id="节点流-处理流"><a href="#节点流-处理流" class="headerlink" title="节点流 处理流"></a>节点流 处理流</h3><p>高级流</p><p>低级流作为一个属性在高级流内，完成对象关联</p><p>只关闭高级流即可</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170804.png" alt="image-20200815164031403"></p><p>readline是最高级的方法</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170816.png" alt="image-20200815164427900"></p><p>ctri+alt + t</p><p>通常包装都是兑现关联</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170829.png" alt="image-20200815164959321"></p><h2 id="14-6-处理流之六-对象流"><a href="#14-6-处理流之六-对象流" class="headerlink" title="14.6 处理流之六 对象流"></a>14.6 处理流之六 对象流</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170836.png" alt="image-20200815170507303"><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170846.png" alt="image-20200815170810425"></p><p>标识</p><h3 id="class文件"><a href="#class文件" class="headerlink" title="class文件"></a>class文件</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170853.png" alt="image-20200815171245690"></p><h2 id="14-7-对象的序列化"><a href="#14-7-对象的序列化" class="headerlink" title="14.7 对象的序列化"></a>14.7 对象的序列化</h2><p>序列化对象在GC堆中的数据</p><p>ObjectInputStream和OjbectOutputSteam</p><p>用于存储和读取对象的处理流。它的强大之处就是可以把Java中的对象写入到数据源中，也能把对象从数据源中还原回来。</p><p>==序列化(Serialize)==：用ObjectOutputStream类将一个Java对象写入IO流中</p><p>==反序列化(Deserialize)==：用ObjectInputStream类从IO流中恢复该Java对象</p><p>ObjectOutputStream和ObjectInputStream不能序列化static和transient修饰的成员变量</p><p>为了防止对象消失，从GC堆里写入硬盘</p><p>对象序列化机制允许把内存中的Java对象转换成平台无关的二进制流，从而允许把这种二进制流持久地保存在磁盘上，或通过网络将这种二进制流传输到另一个网络节点。当其它程序获取了这种二进制流，就可以恢复成原来的Java对象</p><p>序列化的好处在于可将任何实现了Serializable接口的对象转化为字节数据，使其在保存和传输时可被还原</p><p>序列化是 RMI（Remote Method Invoke – 远程方法调用）过程的参数和返回值都必须实现的机制，而 RMI 是 JavaEE 的基础。因此序列化机制是 JavaEE 平台的基础</p><p>如果需要让某个对象支持序列化机制，则必须让其类是可序列化的，为了让某个类是可序列化的，该类必须实现如下两个接口之一：</p><ul><li>Serializable</li><li>Externalizable</li></ul><hr><p>对象序列化是序列化对象在GC堆中的数据</p><p>要想实现序列化对象，这个对象所属的类必须实现序列化接口</p><p>serializable</p><p>类的全限定名称（）</p><h3 id="版本号"><a href="#版本号" class="headerlink" title="版本号"></a>版本号</h3><p>凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>serialVersionUID用来表明类的不同版本间的兼容性</p><p>如果类没有显示定义这个静态变量，它的值是Java运行时环境</p><p>根据类的内部细节自动生成的。若类的源代码作了修改，</p><p>serialVersionUID 可能发生变化。故建议，显示声明</p><p>显示定义serialVersionUID的用途</p><p>希望类的不同版本对序列化兼容，因此需确保类的不同版本具</p><p>有相同的serialVersionUID</p><p>不希望类的不同版本对序列化兼容，因此需确保类的不同版本</p><p>具有不同的serialVersionUID</p><p>静态属性不能序列化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonSerializedTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Set</span> set <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashSet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"王平"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"廖化"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">2000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"陆机"</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"张昭"</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">4000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"陈宫"</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p3<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p4<span class="token punctuation">)</span><span class="token punctuation">;</span>        set<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>p5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileOutputStream</span> fps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedOutputStream</span> bps <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token comment">//对对象序列化的意思就是把对象通过写出对象的方式写入文件</span>            fps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"对象序列化文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bps <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedOutputStream</span><span class="token punctuation">(</span>fps<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>bps<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeObject</span><span class="token punctuation">(</span>set<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">BufferedInputStream</span> bis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectInputStream</span> ois <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span><span class="token string">"对象序列化文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            bis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BufferedInputStream</span><span class="token punctuation">(</span>fis<span class="token punctuation">)</span><span class="token punctuation">;</span>            ois <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectInputStream</span><span class="token punctuation">(</span>bis<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Set</span> sets <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Set</span><span class="token punctuation">)</span>ois<span class="token punctuation">.</span><span class="token function">readObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Iterator</span> iterator <span class="token operator">=</span> sets<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">Object</span> person<span class="token operator">:</span>sets<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="transient-短暂的"><a href="#transient-短暂的" class="headerlink" title="transient 短暂的"></a>transient 短暂的</h3><p>指针不能持久</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170903.png" alt="image-20200817115152709"></p><p>链表可以序列化</p><h3 id="写几个read几个-数组的反序列化"><a href="#写几个read几个-数组的反序列化" class="headerlink" title="写几个read几个 数组的反序列化"></a>写几个read几个 数组的反序列化</h3><h3 id="集合的反序列化"><a href="#集合的反序列化" class="headerlink" title="集合的反序列化"></a>集合的反序列化</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127170944.png" alt="image-20200817115638710"></p><h3 id="对象的获取途径"><a href="#对象的获取途径" class="headerlink" title="对象的获取途径"></a>对象的获取途径</h3><p>&lt;1&gt;第一种 是new</p><p>&lt;2&gt;第二种 工具方法 工厂方法 getBank</p><p>&lt;3&gt;反序列化</p><p>&lt;4&gt;反射</p><h4 id="作业"><a href="#作业" class="headerlink" title="作业"></a>作业</h4><p>保存50个随机数</p><p>写一个二进制文件，写入随机个随机数，如何正确的读取？</p><p>linkedlist的源码研究</p><h2 id="14-8-链表的插入操作详解"><a href="#14-8-链表的插入操作详解" class="headerlink" title="14.8 链表的插入操作详解"></a>14.8 链表的插入操作详解</h2><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200817090747253.png" alt="image-20200817090747253"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">first <span class="token operator">=</span> newnode<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171001.png" alt="image-20200817090007448"></p><p>如果一个节点的prev为null头</p><p>next为null 尾</p><h3 id="如何删除"><a href="#如何删除" class="headerlink" title="如何删除"></a>如何删除</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171009.png" alt="image-20200817091055243"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java">prev<span class="token punctuation">.</span>next <span class="token operator">=</span> target<span class="token punctuation">.</span>next<span class="token punctuation">;</span>next<span class="token punctuation">.</span>prev <span class="token operator">=</span> target<span class="token punctuation">.</span>prev<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171020.png" alt="image-20200817091752040"></p><p>链表的删除就是用删除两个指针</p><p>数组当中的删除用的是 arraycopy 数组比较多</p><p>linkedlist的优点，添加或者删除元素都是非常快的</p><p>删除过程</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">上<span class="token punctuation">.</span>next <span class="token operator">=</span> o<span class="token punctuation">.</span>nexto<span class="token punctuation">.</span>next  <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>下<span class="token punctuation">.</span>prev <span class="token operator">=</span> o<span class="token punctuation">.</span>prevo<span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>o<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="ArrayList与Linkedlist的比较，优缺点"><a href="#ArrayList与Linkedlist的比较，优缺点" class="headerlink" title="ArrayList与Linkedlist的比较，优缺点"></a>ArrayList与Linkedlist的比较，优缺点</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171033.png" alt="image-20200817093518520"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171040.png" alt="image-20200817093537502"></p><p>JDK内部底层用于红黑树，用于平衡</p><h3 id="hashSet"><a href="#hashSet" class="headerlink" title="hashSet"></a>hashSet</h3><p>使用hashCode特征码，设计存储数据的地址</p><p>对元素计算哈希码直接得到内存地址</p><p>散列表</p><p>内存必须连续</p><p>hashMap与hashSet一回事</p><h2 id="14-9-UTF-8-编码与解码"><a href="#14-9-UTF-8-编码与解码" class="headerlink" title="14.9 UTF-8 编码与解码"></a>14.9 UTF-8 编码与解码</h2><p>Unicode是[字符集]</p><p>UTF-8是[编码规则]</p><p>其中</p><p>字符集：为每个[字符]分配一个唯一的ID（学名为码位/码点/Code Point）</p><p>编码规则：将[码位]转换为字节序列的规则（编码/解码 可以理解为加密/解密的过程）</p><p>UTF-8顾名思义，是一套以8位位一个编码单位的可边长编码，会将一个码位为1到4个字节</p><pre class="line-numbers language-none"><code class="language-none">U+ 0000 ~ U+ 007F:0XXX XXXX;U+ 0080 ~ U+ 07FF:110X XXXX 10XX XXXX;U+ 0800 ~ U+ 007F:1110 XXXX 10XX XXXX 10XX XXXX; U+ 10000 ~ U+ 007F:1111 0XXX,10XX XXXX 10XX XXXX 10XX XXXX;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171047.png" alt="image-20200817192028232"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171058.png" alt="image-20200817104637636"></p><p>汉字三个字节（说明数据）</p><p>编码：为了让字符串保存在文件中，或者通过网络传输</p><p>字符串 -&gt; 字节数组</p><p>解码：让文件中或网络中的编码数据还原成字符串</p><p>在java程序中，String字符串永远是unicode字符序列</p><h3 id="GBK编码"><a href="#GBK编码" class="headerlink" title="GBK编码"></a>GBK编码</h3><p>的转换</p><p>码值按字母顺序</p><p>gbk优点：本土化，省空间</p><p>utf8： 国际化</p><h2 id="14-10-二进制文件的解读-UTF8-chars-与-writeInt"><a href="#14-10-二进制文件的解读-UTF8-chars-与-writeInt" class="headerlink" title="14.10 二进制文件的解读 UTF8 chars 与 writeInt"></a>14.10 二进制文件的解读 UTF8 chars 与 writeInt</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171104.png" alt="writeInt的写入文件"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">FileOutputStream</span> fos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">ObjectOutputStream</span> oos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            fos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileOutputStream</span><span class="token punctuation">(</span><span class="token string">"二进制文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ObjectOutputStream</span><span class="token punctuation">(</span>fos<span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeShort</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeDouble</span><span class="token punctuation">(</span><span class="token number">2.2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeBoolean</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeLong</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeUTF</span><span class="token punctuation">(</span><span class="token string">"abc我和你qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            oos<span class="token punctuation">.</span><span class="token function">writeChars</span><span class="token punctuation">(</span><span class="token string">"abc我和你qqq"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 当成Unicode字符序列写文件.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>oos <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                    oos<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171112.png" alt="程序结果"></p><p><img src="images/image-20200817190745716.png" alt="二进制文件解读"></p><p>跟着项目走</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171116.png" alt="image-20200817110734656"></p><p>utf8编码</p><p>使用字符流可以自动进行解码？？？</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171121.png" alt="image-20200817111538135"></p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>unicode只是一个符号集，他只规定了符号的二进制代码，并没有规定这个二进制代码应该如何进行存储，简单的讲就是，unicode为所有字符提供一个唯一的编号，然后utf8只是将字符的unicode编号编码成相应的二进制代码进行存储或运算</p><p>所以相同的unicode编号若用不同的编码方式进行编码，最后产生不同的二进制代码，这就是有时候文件造成乱码的原因</p><h2 id="14-11-处理流之二-转换流"><a href="#14-11-处理流之二-转换流" class="headerlink" title="14.11 处理流之二 转换流"></a>14.11 处理流之二 转换流</h2><p>转换流提供了在字节流和字符流之间的转换</p><p>Java API提供了两个转换流：<br>InputStreamReader和OutputStreamWriter</p><p>字节流中的数据都是字符时，转成字符流操作更高效。</p><p>==IOTEST2==</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171128.png" alt="image-20200817141538090"></p><p>fileReader不能用</p><p>不靠谱</p><p>还是utf8编码</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171132.png" alt="image-20200817141816910"></p><p>需指定编码方式</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171139.png" alt="image-20200817142011016"></p><p>要想写不同文本，就要写转换流</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171143.png" alt="image-20200817142520266"></p><h3 id="书写数据的缓存机制"><a href="#书写数据的缓存机制" class="headerlink" title="书写数据的缓存机制"></a>书写数据的缓存机制</h3><p>一般来说缓存的flush放置在close里，如果忘记关闭，会导致文件的写入的失败</p><p>调用write写在缓冲区里</p><p>flush，刷一下</p><p>把缓冲区的数据强刷到硬盘里</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171148.png" alt="image-20200817145026758"></p><p>所有的打印流可以自动刷新flush</p><h2 id="14-12-在原来文件的基础上追加（true）"><a href="#14-12-在原来文件的基础上追加（true）" class="headerlink" title="14.12 在原来文件的基础上追加（true）"></a>14.12 在原来文件的基础上追加（true）</h2><p>以追加的方式写文件</p><p>默认是</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171153.png" alt="image-20200817145309484"></p><p>是否追加，默认指定为false；</p><p>在OutPutStream的形参列表里加上true，表示追加</p><h2 id="14-13-处理流之三-标准输入输出流-System-in-System-out"><a href="#14-13-处理流之三-标准输入输出流-System-in-System-out" class="headerlink" title="14.13 处理流之三 标准输入输出流 System.in System.out"></a>14.13 处理流之三 标准输入输出流 System.in System.out</h2><p>流的一段链接键盘</p><p>处理输入的转换</p><p>2</p><h3 id="问题：-bufferedreader从哪里来的-文件读取的缓冲"><a href="#问题：-bufferedreader从哪里来的-文件读取的缓冲" class="headerlink" title="问题：==bufferedreader从哪里来的==文件读取的缓冲"></a>问题：==bufferedreader从哪里来的==文件读取的缓冲</h3><p><img src="C:%5CUsers%5C89388%5CDesktop%5CMY_POSTS%5Cimages%5Cimage-20200817145732009.png" alt="image-20200817145732009"></p><p>键盘输入用流操作</p><p>System.in</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171206.png" alt=" dsfsdf">打印的</p><h3 id="system-out"><a href="#system-out" class="headerlink" title="system.out"></a>system.out</h3><p>system.err</p><p>也是</p><p>发生错误，就是错误流</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171211.png" alt="image-20200817154348612"></p><p>双线程，并发，多个任务同时执行</p><p>system.in有时可以不用new，直接使用</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171215.png" alt="image-20200817235023075"></p><h2 id="14-14-数据流（可以用object替代）"><a href="#14-14-数据流（可以用object替代）" class="headerlink" title="14.14 数据流（可以用object替代）"></a>14.14 数据流（可以用object替代）</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171220.png" alt="image-20200817154430168"></p><p>对象流都能包含这些东西</p><h2 id="14-15-adomAccessFile-类（了解）麻烦"><a href="#14-15-adomAccessFile-类（了解）麻烦" class="headerlink" title="14.15 adomAccessFile 类（了解）麻烦"></a>14.15 adomAccessFile 类（了解）麻烦</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171232.png" alt="image-20200817154824290"></p><h2 id="14-16-file类"><a href="#14-16-file类" class="headerlink" title="14.16 file类"></a>14.16 file类</h2><p>File类的常见构造方法：<br>public File(String pathname)<br>         以pathname为路径创建File对象，可以是绝对路径或者相对路径，如果pathname是相对路径，则默认的当前路径在系统属性user.dir中存储。<br>public File(String parent,String child)<br>          以parent为父路径，child为子路径创建File对象。</p><p>File的静态属性String separator存储了当前系统的路径分隔符。<br>在UNIX中，此字段为‘/’，在Windows中，为‘\’</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171237.png" alt="image-20200818224356767"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FileTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"aaa/bbb/cc/dd/ee"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打开文件</span>        <span class="token comment">//file.createNewFile(); // 创建文件</span>        <span class="token comment">//file.mkdir(); // make directory, 单层目录</span>        file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// make directories, 创建多层目录</span>        <span class="token comment">// 针对目录的操作</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 列出file目录下的所有File子对象, 包括子目录和子文件</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"是目录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main2</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"一个文本文件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 针对文件的操作, 创建文件, 删除文件, 重命名文件....</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.getAbsolutePath() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.canRead() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">canRead</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 是否能读</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.isFile() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是不是文件</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.isDirectory() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">isDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否是目录</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.exists() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 是否存在</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.length() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取文件长度</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.lastModified() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">lastModified</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.getTotalSpace() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getTotalSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.getFreeSpace() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getFreeSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file.getName() : "</span> <span class="token operator">+</span> file<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//System.out.println("file.delete() : " + file.delete());</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171242.png" alt="image-20200817162300801"></p><h4 id="递归删除文件"><a href="#递归删除文件" class="headerlink" title="递归删除文件"></a>递归删除文件</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DeleteFileTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"D:/classppt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">DeleteFileTest</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span>files<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">delete</span><span class="token punctuation">(</span><span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已删除文件:"</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"已进入文件夹："</span> <span class="token operator">+</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files1 <span class="token operator">=</span> files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                 <span class="token function">delete</span><span class="token punctuation">(</span>files1<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="14-17-作业-之-目录的复制"><a href="#14-17-作业-之-目录的复制" class="headerlink" title="14.17 作业 之 目录的复制"></a>14.17 作业 之 目录的复制</h2><h1 id="第15-章-多线程"><a href="#第15-章-多线程" class="headerlink" title="第15 章 多线程"></a>第15 章 多线程</h1><p>程序(program)是为完成特定任务、用某种语言编写的一组指令的集合。即指一段静态的代码，静态对象。</p><p>进程(process)是程序的一次执行过程，或是正在运行的一个程序。动态过程：有它自身的产生、存在和消亡的过程。</p><p>如：运行中的QQ，运行中的MP3播放器</p><p>程序是静态的，进程是动态的</p><p>线程(thread)，进程可进一步细化为线程，是一个程序内部的一条执行路径。</p><p>若一个程序可同一时间执行多个线程，就是支持多线程的</p><p>多进程实现多任务</p><p>比较复杂</p><p>cpu实现多线程</p><p>线程间通信更容易，更方便</p><h2 id="15-1-线程的创建与使用"><a href="#15-1-线程的创建与使用" class="headerlink" title="15.1  线程的创建与使用"></a>15.1  线程的创建与使用</h2><h4 id="1-写一个具体类-实现Runnable接口-并实现其中的run方法-这个方法就称为线程体"><a href="#1-写一个具体类-实现Runnable接口-并实现其中的run方法-这个方法就称为线程体" class="headerlink" title="1.写一个具体类, 实现Runnable接口, 并实现其中的run方法, 这个方法就称为线程体"></a>1.写一个具体类, 实现Runnable接口, 并实现其中的run方法, 这个方法就称为线程体</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171252.png" alt="image-20200818082556030"></p><p>多线程就是多个栈</p><h4 id="2-创建上面的具体类对象-并以它为实参继续创建Thread线程对象"><a href="#2-创建上面的具体类对象-并以它为实参继续创建Thread线程对象" class="headerlink" title="2 创建上面的具体类对象, 并以它为实参继续创建Thread线程对象"></a>2 创建上面的具体类对象, 并以它为实参继续创建Thread线程对象</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171257.png" alt="image-20200818083147865"></p><h4 id="创建线程的两种方式"><a href="#创建线程的两种方式" class="headerlink" title="创建线程的两种方式"></a>创建线程的两种方式</h4><p>实现的方式</p><p>继承的方式</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171302.png" alt="image-20200817170046095"></p><p>注意什么时候激活子栈</p><p>start压进栈里瞬间弹出</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171306.png" alt="image-20200817170255281"></p><p>静态方法，跟调用者没关系</p><p>跟那个栈有关系</p><h4 id="修改名字"><a href="#修改名字" class="headerlink" title="修改名字"></a>修改名字</h4><p>currentThread返回当前线程</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171316.png" alt="是否能够改名字"></p><p>并发</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloRunnerTest</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/*     *  1) 实现的方式     *      1) 写一个具体类, 实现Runnable接口, 并实现其中的run方法, 这个方法就称为线程体     *      2) 创建上面的具体类对象, 并以它为实参继续创建Thread线程对象     *      3) 调用线程对象的start()方法 启动线程.     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Runnable</span> runner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HelloRunner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>runner<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 创建子栈</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// start才能激活栈, 并把run压入子栈执行.</span>        thread<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"子线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"主线程"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">200</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" : "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="15-2-hashMap的源码"><a href="#15-2-hashMap的源码" class="headerlink" title="15.2 hashMap的源码"></a>15.2 hashMap的源码</h2><h3 id="15-2-1-hashSet"><a href="#15-2-1-hashSet" class="headerlink" title="15.2.1 hashSet"></a>15.2.1 hashSet</h3><h4 id="1-hashSet底层是hashMap"><a href="#1-hashSet底层是hashMap" class="headerlink" title="1.hashSet底层是hashMap"></a>1.hashSet底层是hashMap</h4><ul><li>底层使用hashMap的键</li><li>值都是虚拟的普通对象 </li><li>只使用键值，保证不可重复性</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171323.png" alt="image-20200818085707965"></p><h3 id="15-2-2-HashMap"><a href="#15-2-2-HashMap" class="headerlink" title="15.2.2 HashMap"></a>15.2.2 HashMap</h3><p>1 容量</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171334.png" alt="image-20200818090244256"></p><p>2 加载因子 数组加载的什么程度就不加载了，数组的使用率 要散列就要有余量</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171331.png" alt="image-20200818090357076"></p><p>3 变树值</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171339.png" alt="image-20200818090630260">4.当红黑树的值，小于此值时，变会链表</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171349.png" alt="image-20200818090722734"></p><p>5.最小变树容量</p><p>要求容量变成64以上的数组容量才会变树</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171343.png" alt="image-20200818090744316"></p><p>6.组成数组的元素类型是节点类型，其实就是继承了entry的node</p><p>这是最重要的，最核心的哈希表，Node类的数组</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171358.png" alt="image-20200818091049242"></p><p>计数器</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171408.png" alt="image-20200818091326413"></p><p>修改次数</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171414.png" alt="image-20200818091356100"></p><p>加载因子</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171420.png" alt="image-20200818091414366"></p><p>数组的使用门槛 数组长度*加载因子，计数器超过此值就会扩容</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171431.png" alt="image-20200818091432970"></p><h4 id="添加元素"><a href="#添加元素" class="headerlink" title="添加元素"></a>添加元素</h4><p>先装箱</p><p>put放入方法</p><p>求键对象哈希码值</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171437.png" alt="image-20200818091746707"></p><p>使得低于16位的数更加散列</p><h4 id="putVal"><a href="#putVal" class="headerlink" title="putVal"></a>putVal</h4><p>tab是内部哈希表</p><h4 id="resize调整容量"><a href="#resize调整容量" class="headerlink" title="resize调整容量"></a>resize调整容量</h4><p>哈希值通过与最大容量-1 与hash取&amp;  按位与</p><p>让哈希值落入数组范围之内，放置越界</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171444.png" alt="image-20200818094120903"></p><p>继续插入，位置相同时应该怎么做</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171448.png" alt="image-20200818095139997"></p><p>重复不为modcount++</p><h3 id="15-2-3-练习题-讨论-？？？？"><a href="#15-2-3-练习题-讨论-？？？？" class="headerlink" title="15.2.3 练习题 讨论==？？？？=="></a>15.2.3 练习题 讨论==？？？？==</h3><p>删除问题</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171459.png" alt="image-20200818200708991"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171505.png" alt="image-20200818102225459"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171513.png" alt="image-20200818102549889"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171524.png" alt="image-20200818102841893"></p><h2 id="15-3-继承类线程的共享"><a href="#15-3-继承类线程的共享" class="headerlink" title="15.3 继承类线程的共享"></a>15.3 继承类线程的共享</h2><p>可以使用同一个runnable对象创建不同的thread对象</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171534.png" alt="image-20200818134235332"></p><h2 id="15-4-线程的停止"><a href="#15-4-线程的停止" class="headerlink" title="15.4 线程的停止"></a>15.4 线程的停止</h2><p>stop直接把程序按死</p><p>使用boolean变量进行停止</p><p>控制线程的boolean</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171544.png" alt="设置线程的停止"></p><p>线程与线程的交互是柔和</p><p>避免Runnable可以实现多线程共享</p><h2 id="15-5-线程的调度"><a href="#15-5-线程的调度" class="headerlink" title="15.5 线程的调度"></a>15.5 线程的调度</h2><p>时间片</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171549.png" alt="image-20200818120539206"></p><h2 id="15-6-多线程的使用放置之二-继承"><a href="#15-6-多线程的使用放置之二-继承" class="headerlink" title="15.6 多线程的使用放置之二 继承"></a>15.6 多线程的使用放置之二 继承</h2><h4 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a>继承Thread类</h4><ul><li>写一个类继承Thread并重写Thread类中的run方法</li><li>创建Thread子类对象，即创建了线程对象。</li><li>调用线程对象start方法：启动线程，调用run方法。</li></ul><h2 id="15-7-Thread方法"><a href="#15-7-Thread方法" class="headerlink" title="15.7 Thread方法"></a>15.7 Thread方法</h2><h4 id="static-void-yield"><a href="#static-void-yield" class="headerlink" title="static  void  yield()"></a>static  void  yield()</h4><p>线程让步</p><p>暂停当前正在执行的线程，把执行机会让给优先级相同或更高的线程<br>若队列中没有同优先级的线程，忽略此方法</p><h4 id="join"><a href="#join" class="headerlink" title="join()"></a>join()</h4><p>当某个程序执行流中调用其他线程的 join() 方法时，调用线程将被阻塞，直到 join() 方法加入的 join 线程执行完为止   </p><p>（在那个栈里发生，那个栈阻塞 join，a 阻塞）</p><p>低优先级的线程也可以获得执行 </p><h2 id="15-8-Thread方法-sleep-and-interrupt"><a href="#15-8-Thread方法-sleep-and-interrupt" class="headerlink" title="15.8 Thread方法 sleep and interrupt"></a>15.8 Thread方法 sleep and interrupt</h2><p>static  void  sleep(long millis)：(指定时间:毫秒)（取决于那个栈，当前线程）</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171556.png" alt="image-20200818141404390"></p><p>其他子线程可以可以打断主线程的睡觉</p><p>令当前活动线程在指定时间段内放弃对CPU控制,使其他线程有机会被执行,时间到后重排队。</p><p>抛出InterruptedException异常</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171600.png" alt="image-20200818142059193"></p><p>并发</p><p>如果想要两者搭配，就要睡足够的时间</p><h3 id="练习-sleep"><a href="#练习-sleep" class="headerlink" title="练习 sleep"></a>练习 sleep</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171611.png" alt="image-20200818142909684"></p><h3 id="主线程编程观察者模式"><a href="#主线程编程观察者模式" class="headerlink" title="主线程编程观察者模式"></a>主线程编程观察者模式</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171618.png" alt="image-20200818145319446"></p><p>必须设定沉睡时间</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171629.png" alt="image-20200818145615541"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadSleep</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThreadPrint</span> threadPrint <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPrint</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>threadPrint<span class="token punctuation">)</span><span class="token punctuation">;</span>        t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">/*try &#123;            while (threadPrint.flag)&#123;                Thread.sleep(10);            &#125;        &#125; catch (InterruptedException e) &#123;            e.printStackTrace();        &#125;        t.interrupt();*/</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>threadPrint<span class="token punctuation">.</span>flag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//观察程序</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        t<span class="token punctuation">.</span><span class="token function">interrupt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>子程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreadPrint</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span><span class="token punctuation">&#123;</span>    <span class="token class-name">Boolean</span> flag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">currentThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span>            list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">Long</span> start <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token class-name">Long</span> end <span class="token operator">=</span> <span class="token number">0L</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始睡眠30秒"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            flag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">30000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"被打断了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"线程运行完毕"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"在执行完随机数之后睡了"</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="stop"><a href="#stop" class="headerlink" title="stop"></a>stop</h4><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171640.png" alt="image-20200818142622883"></p><p>stop(): 强制线程生命期结束</p><p>boolean isAlive()：返回boolean，判断线程是否还活着</p><h3 id="state-线程的生命周期"><a href="#state-线程的生命周期" class="headerlink" title="state 线程的生命周期"></a>state 线程的生命周期</h3><p>JDK中用Thread.State枚举表示了线程的几种状态</p><p>要想实现多线程，必须在主线程中创建新的线程对象。</p><p>Java语言使用Thread类及其子类的对象来表示线程，在它的一个完整的生命周期中通常要经历如下的五种状态：</p><p>新建： 当一个Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</p><p>就绪：处于新建状态的线程被start()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件</p><p>运行：当就绪的线程被调度并获得处理器资源时,便进入运行状态， run()方法定义了线程的操作和功能（拿到了cpu执行权）</p><p>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出 CPU 并临时中止自己的执行，进入阻塞状态</p><p>死亡：线程完成了它的全部工作或线程被提前强制性地中止   </p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171646.png" alt="image-20200818151414290"></p><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><pre class="mermaid">graph LR;A[new]</pre><h4 id="线程的生命周期"><a href="#线程的生命周期" class="headerlink" title="线程的生命周期"></a>线程的生命周期</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">State</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>wait - notify</p><h3 id="线程的分类"><a href="#线程的分类" class="headerlink" title="线程的分类"></a>线程的分类</h3><p>Java中的线程分为两类：一种是守护线程，一种是用户线程。</p><p>它们在几乎每个方面都是相同的，唯一的区别是判断JVM何时离开。</p><p>守护线程是用来服务用户线程的，通过在start()方法前调用</p><p>thread.setDaemon(true)可以把一个用户线程变成一个守护线程。</p><p>Java垃圾回收就是一个典型的守护线程。</p><p>若JVM中都是守护线程，当前JVM将退出。</p><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171655.png" alt="image-20200818152845267"></p><h2 id="15-9-线程的同步-与-对象互斥锁"><a href="#15-9-线程的同步-与-对象互斥锁" class="headerlink" title="15.9 线程的同步 与 对象互斥锁"></a>15.9 线程的同步 与 对象互斥锁</h2><h3 id="问题的提出"><a href="#问题的提出" class="headerlink" title="问题的提出"></a>问题的提出</h3><ul><li>多个线程执行的不确定性引起执行结果的不稳定</li><li>多个线程对账本的共享，会造成操作的不完整性，会破坏数据。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171659.png" alt="image-20200818153042806"></p><h3 id="线程同步提出的代码"><a href="#线程同步提出的代码" class="headerlink" title="线程同步提出的代码"></a>线程同步提出的代码</h3><h3 id="synchronized-同步"><a href="#synchronized-同步" class="headerlink" title="synchronized 同步"></a>synchronized 同步</h3><p>//需要被同步的代码</p><p>只要是对象都可以做锁</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171705.png" alt="image-20200818160643704"></p><p>多线程会带来效率问题</p><h3 id="互斥锁-隐式锁"><a href="#互斥锁-隐式锁" class="headerlink" title="互斥锁 隐式锁"></a>互斥锁 隐式锁</h3><p>在Java语言中，引入了对象互斥锁的概念，来保证共享数据操作的完整性。</p><p>每个对象都对应于一个可称为“互斥锁”的标记，这个标记用来保证在任一时刻，只能有一个线程访问该对象。</p><p>关键字synchronized 来与对象的互斥锁联系。当某个对象用synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。</p><p>同步的局限性：导致程序的执行效率要降低</p><p>同步方法（非静态的）的锁为this。</p><p>同步方法（静态的）的锁为当前类本身。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171711.png" alt="线程保护安全机制"></p><h3 id="锁的力度"><a href="#锁的力度" class="headerlink" title="锁的力度"></a>锁的力度</h3><p>![锁的力度](images/image-20200818161446032.png</p><p>字符串常量是全程唯一</p><p>只要是全局唯一对象都能锁上</p><p>保证多个线程用的是同一个锁才有意义</p><p>用常量对象更方便一些</p><h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171717.png" alt="image-20200818164701230"></p><h3 id="锁对象-线程同步，注意锁，每个对相同对象的锁都是锁"><a href="#锁对象-线程同步，注意锁，每个对相同对象的锁都是锁" class="headerlink" title="锁对象 线程同步，注意锁，每个对相同对象的锁都是锁"></a>锁对象 线程同步，注意锁，每个对相同对象的锁都是锁</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171725.png" alt="image-20200818172052703"></p><h3 id="放锁的操作"><a href="#放锁的操作" class="headerlink" title="放锁的操作"></a>放锁的操作</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171737.png" alt="image-20200818172246932"></p><h3 id="线程的死锁问题"><a href="#线程的死锁问题" class="headerlink" title="线程的死锁问题"></a>线程的死锁问题</h3><p>死锁</p><p>不同的线程分别占用对方需要的同步资源不放弃，都在等待对方放弃自己需要的同步资源，就形成了线程的死锁</p><p>解决方法</p><p>专门的算法、原则</p><p>尽量减少同步资源的定义</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171742.png" alt="image-20200818173003674"></p><h2 id="15-10-线程通信"><a href="#15-10-线程通信" class="headerlink" title="15.10 线程通信"></a>15.10 线程通信</h2><h1 id="第13章-反射机制"><a href="#第13章-反射机制" class="headerlink" title="第13章 反射机制"></a>第13章 反射机制</h1><h2 id="13-1-概述"><a href="#13-1-概述" class="headerlink" title="13.1 概述"></a>13.1 概述</h2><h4 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h4><p>Reflection（反射）是被视为==动态语言==的关键</p><p>反射机制允许程序在执行期借助于Reflection API取得任何类的内部信息</p><p>并能直接操作任意对象的内部属性及方法</p><h4 id="Java反射机制提供的功能"><a href="#Java反射机制提供的功能" class="headerlink" title="Java反射机制提供的功能"></a>Java反射机制提供的功能</h4><p>在运行时判断任意一个对象所属的类</p><p>在运行时构造任意一个类的对象</p><p>在运行时判断任意一个类所具有的成员变量和方法</p><p>在运行时调用任意一个对象的成员变量和方法</p><p>生成动态代理</p><h2 id="13-2-Java反射机制研究及应用"><a href="#13-2-Java反射机制研究及应用" class="headerlink" title="13.2 Java反射机制研究及应用"></a>13.2 Java反射机制研究及应用</h2><p>反射相关的主要API：</p><p>java.lang.Class:代表一个类</p><p>java.lang.reflect.Method:代表类的方法</p><p>java.lang.reflect.Field:代表类的成员变量</p><p>java.lang.reflect.Constructor:代表类的构造方法<br>。。。</p><h2 id="13-3-Class类"><a href="#13-3-Class类" class="headerlink" title="13.3 Class类"></a>13.3 Class类</h2><p>在Object类中定义了以下的方法，此方法将被所有子类继承：</p><p>● public final Class getClass()</p><p>以上的方法返回值的类型是一个Class类，此类是Java反射的源头，实际上所谓反射从程序的运行结果来看也很好理解，即：可以通过对象反射求出类的名称。</p><p>对照镜子后可以得到的信息：某个类的属性、方法和构造器、某个类到底实现了哪些接口。对于每个类而言，JRE 都为其保留一个不变的 Class 类型的对象。</p><p>一个 Class 对象包含了特定某个类的有关信息。</p><ul><li>Class本身也是一个类</li><li>Class 对象只能由系统建立对象</li><li>一个类在 JVM 中只会有一个Class实例 </li><li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li><li>每个类的实例都会记得自己是由哪个 Class 实例所生成</li><li>通过Class可以完整地得到一个类中的完整结构</li></ul><h2 id="13-4-class类的常用方法"><a href="#13-4-class类的常用方法" class="headerlink" title="13.4 class类的常用方法"></a>13.4 class类的常用方法</h2><table><thead><tr><th><strong>方法名</strong></th><th><strong>功能说明</strong></th></tr></thead><tbody><tr><td>static  Class for Name (String  name)</td><td>返回指定类名  name  的  Class  对象</td></tr><tr><td>Object  newInstance()</td><td>调用缺省构造函数，返回该Class对象的一个实例</td></tr><tr><td>String  getName()</td><td>返回此Class对象所表示的实体（类、接口、数组类、基本类型或void）名称</td></tr><tr><td>Class  [] getInterfaces()</td><td>获取当前Class对象的接口</td></tr><tr><td>ClassLoader  getClassLoader()</td><td>返回该类的类加载器</td></tr><tr><td>Class  getSuperclass()</td><td>返回表示此Class所表示的实体的超类的Class</td></tr><tr><td>Constructor[]  getConstructors()</td><td>返回一个包含某些Constructor对象的数组</td></tr><tr><td>Field[]  getDeclaredFields()</td><td>返回Field对象的一个数组</td></tr><tr><td>Method  getMethod(String  name,Class … paramTypes)</td><td>返回一个Method对象，此对象的形参类型为paramType</td></tr></tbody></table><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171750.png" alt="image-20200819085408860"></p><h2 id="13-5-反射-课上笔记"><a href="#13-5-反射-课上笔记" class="headerlink" title="13.5 反射(课上笔记)"></a>13.5 反射(课上笔记)</h2><p>反射能够让编译时错误推迟到运行错误</p><ul><li>类不存在</li><li>没有无参构造器</li><li>私有化构造器</li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171755.png" alt="1597891037450"></p><p>只要在运行时搞好</p><p>类名必须使用全限定</p><h2 id="如何修改反射属性"><a href="#如何修改反射属性" class="headerlink" title="如何修改反射属性"></a>如何修改反射属性</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> reflectTest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.practice.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> object <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span> nameField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从类模板中获取属性</span>            nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"宋宋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义属性中的名称</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> name <span class="token operator">=</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取名称</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>getField方法只能获得本类中的公共属性,也能获得父类中的公共属性</p><h2 id="如何获得私有属性并进行更改"><a href="#如何获得私有属性并进行更改" class="headerlink" title="如何获得私有属性并进行更改"></a>如何获得私有属性并进行更改</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171800.png" alt="1597898663820"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> reflectTest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.practice.Student"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> object <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            Field nameField = clazz.getField("name");//从类模板中获取属性</span>            <span class="token class-name">Field</span> nameField <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredField</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取私有属性,</span>            nameField<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取权限</span>            nameField<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span><span class="token string">"宋宋"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//定义属性中的名称</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> name <span class="token operator">=</span> nameField<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取名称</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchFieldException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="获取类模板对象的几种途径"><a href="#获取类模板对象的几种途径" class="headerlink" title="获取类模板对象的几种途径"></a>获取类模板对象的几种途径</h2><h3 id="1-类的class属性"><a href="#1-类的class属性" class="headerlink" title="1 类的class属性"></a>1 类的class属性</h3><p>1）前提：若已知具体的类，通过类的class属性获取，该方法<br>                    最为安全可靠，程序性能最高<br>       实例：Class clazz = String.class;</p><h3 id="2-对象的getClass属性"><a href="#2-对象的getClass属性" class="headerlink" title="2 对象的getClass属性"></a>2 对象的getClass属性</h3><p>2）前提：已知某个类的实例，调用该实例的getClass()方法获<br>                    取Class对象<br>       实例：Class clazz = “<a href="http://www.atguigu.com”.getclass()/">www.atguigu.com”.getClass()</a>;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Teacher</span> teacher <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Teacher</span><span class="token punctuation">(</span><span class="token string">"佟刚"</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Class</span> clazz2 <span class="token operator">=</span> teacher<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>clazz1 <span class="token operator">==</span> clazz2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="通过类型的路径"><a href="#通过类型的路径" class="headerlink" title="通过类型的路径"></a>通过类型的路径</h3><p>3）前提：已知一个类的全类名，且该类在类路径下，可通过<br>       Class类的静态方法forName()获取，可能抛出ClassNotFoundException<br>       实例：Class clazz = Class.forName(“java.lang.String”);</p><h3 id="4）其他方式-不做要求"><a href="#4）其他方式-不做要求" class="headerlink" title="4）其他方式(不做要求)"></a>4）其他方式(不做要求)</h3><p>ClassLoader cl = this.getClass().getClassLoader();</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171809.png" alt="1597900632475">Class clazz4 = cl.loadClass(“类的全类名”);</p><p>类模板对象是绝对的单例</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171819.png" alt="1597901839161"></p><h2 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h2><p>当程序主动使用某个类时，如果该类还未被加载到内存中，则系统会通过如下三个步骤来对该类进行初始化。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171819.png" alt="1597902570295"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171828.png" alt="1597902583944"></p><h2 id="类加载器与三个层次"><a href="#类加载器与三个层次" class="headerlink" title="类加载器与三个层次"></a>类加载器与三个层次</h2><p>类加载器是用来把类(class)装载进内存的。</p><p>JVM 规范定义了两种类型的类加载器：启动类加载器(bootstrap)和用户自定义加载器</p><p>(user-definedclass loader)。</p><p>JVM在运行时会产生3个类加载器组成的初始化加载器层次结构</p><p>如下图所示：</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171842.png" alt="1597902660530"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test8</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token comment">// 系统类加载器是最常用, 主要用于加载我们自定义类</span>       <span class="token class-name">ClassLoader</span> systemClassLoader <span class="token operator">=</span> <span class="token class-name">ClassLoader</span><span class="token punctuation">.</span><span class="token function">getSystemClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>systemClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 扩展类加载器, 负责加载jre/lib/ext目录下的所有jar</span>       <span class="token class-name">ClassLoader</span> extClassLoader <span class="token operator">=</span> systemClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>extClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 引导类加载器, 是最底层最核心的类加载器, 负责加载jre/lib目录下的所有.jar.</span>       <span class="token class-name">ClassLoader</span> boostrapClassLoader <span class="token operator">=</span> extClassLoader<span class="token punctuation">.</span><span class="token function">getParent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>boostrapClassLoader<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">// 双亲委派机制</span>       <span class="token comment">// 1) 首先由系统类加载器发起类加载请求.</span>       <span class="token comment">// 2) 把加载任务委托给父类加载器:扩展类加载器</span>       <span class="token comment">// 3) 扩展类加载器委托给引导类加载器, 此时引导类加载器要判断, 如果不是核心类, 驳回请求</span>       <span class="token comment">// 4) 扩展类加载器进一步也要判断, 是我该由加载, 如果也不该我加载, 驳回请求</span>       <span class="token comment">// 5) 系统类加载器发现全部被驳回后, 自己直接加载了.</span>       <span class="token comment">// 1) 首先由系统类加载器发起类加载请求.</span>       <span class="token comment">// 2) 把加载任务委托给父类加载器:扩展类加载器</span>       <span class="token comment">// 3) 扩展类加载器委托给引导类加载器, 此时引导类加载器要判断, 是核心类, 当仁不让, 立刻加载</span>       <span class="token comment">// 4) 扩展类加载器发现已经加载过了, 不加载并返回</span>       <span class="token comment">// 5) 系统类加载器发现已经加载过了, 不加载并返回.</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="类加载器对源文件进行数据传输"><a href="#类加载器对源文件进行数据传输" class="headerlink" title="类加载器对源文件进行数据传输"></a>类加载器对源文件进行数据传输</h2><p>rt.jar最重要</p><p>引导类加载器负责加载jre中所有的jar</p><p>使用类加载器获取资源</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test9</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 类加载可以 加载各种资源, 只要是项目所包含的.jar文件或src目录下的所有资源.</span>        <span class="token comment">// 它可以加载classpath路径中的任意文件</span>        <span class="token comment">//InputStream is = this.getClass().getClassLoader().getResourceAsStream("com/sun/corba/se/impl/logging/LogStrings.properties");</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"com/atguigu/javase/hello.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span> <span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//"javax/sql/rowset/rowset.properties"</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="哈希map的迭代器的使用"><a href="#哈希map的迭代器的使用" class="headerlink" title="哈希map的迭代器的使用"></a>哈希map的迭代器的使用</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> getClassLoaderTest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> student <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">InputStream</span> is <span class="token operator">=</span> student<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResourceAsStream</span><span class="token punctuation">(</span><span class="token string">"com/practice/rowset.properties"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Properties</span> properties <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Properties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//map底下的性能器      //十分注意地址的写法</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            properties<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>is<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//哈希map的迭代器的使用</span>        <span class="token class-name">Iterator</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">.</span><span class="token class-name">Entry</span><span class="token punctuation">&lt;</span><span class="token class-name">Object</span><span class="token punctuation">,</span><span class="token class-name">Object</span><span class="token punctuation">></span><span class="token punctuation">></span></span> iterator <span class="token operator">=</span> properties<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射获取构造器-创建实体对象"><a href="#反射获取构造器-创建实体对象" class="headerlink" title="反射获取构造器 创建实体对象"></a>反射获取构造器 创建实体对象</h2><p>创建实体对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test10</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.javase.reflect.Teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//Object object = clazz.newInstance();</span>            <span class="token comment">//public Teacher(String name, int age, String gender) &#123;</span>            <span class="token comment">// 找到指定的构造器, 参数中提供构造方法的形参类型列表</span>            <span class="token class-name">Constructor</span> constructor <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getConstructor</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// newInstance()调用时必须传递和形参一致的实参列表</span>            <span class="token class-name">Object</span> object <span class="token operator">=</span> constructor<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token string">"宋宋"</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 相当于new Teacher("宋宋", 30, "男");</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射调方法"><a href="#反射调方法" class="headerlink" title="反射调方法"></a>反射调方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test11</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.javase.reflect.Teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Object</span> object <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">newInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//((Teacher)object).lesson("Mysql", "302", 2);</span>            <span class="token comment">// 必须提供方法名, 和方法的形参类型列表</span>            <span class="token comment">// getMethod()只能获取公共方法, 包括父类继承的.</span>            <span class="token comment">//Method m1 = clazz.getMethod("lesson", String.class, String.class, int.class);</span>            <span class="token comment">// getDeclaredMethod获取本类中声明的所有方法, 包括私有的.</span>            <span class="token class-name">Method</span> m1 <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getDeclaredMethod</span><span class="token punctuation">(</span><span class="token string">"lesson"</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            m1<span class="token punctuation">.</span><span class="token function">setAccessible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 必须再通过m1调用, 如果方法是void, 它的返回值就是null, 提供实参列表</span>            <span class="token class-name">Object</span> retValue <span class="token operator">=</span> m1<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> <span class="token string">"MySQL"</span><span class="token punctuation">,</span> <span class="token string">"302"</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//object.lesson("Mysql", "302", 2);</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>retValue<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Method</span> hashCode <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getMethod</span><span class="token punctuation">(</span><span class="token string">"hashCode"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 获取父类继承来的公共方法. 方法没有参数, 不需要提供参数列表</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hashCode<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// object.hashCode(), 方法没有参数, 也不需要提供实参列表.</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IllegalAccessException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有访问权限</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InstantiationException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 创建对象失败</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NoSuchMethodException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 没有找到方法.</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InvocationTargetException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// 调用的目标方法出问题时.</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="反射调静态的属性与方法"><a href="#反射调静态的属性与方法" class="headerlink" title="反射调静态的属性与方法"></a>反射调静态的属性与方法</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test12</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"com.atguigu.javase.reflect.Teacher"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Field</span> school <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getField</span><span class="token punctuation">(</span><span class="token string">"school"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            school<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token string">"尚硅谷"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Teacher.school = "尚硅谷";, 第一个参数会被完全忽略</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>school<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 静态属性的访问不需要对象, 所以参数中数据被忽略</span>            <span class="token class-name">Class</span> superclass <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 获取父类</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>superclass<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span> interfaces <span class="token operator">=</span> clazz<span class="token punctuation">.</span><span class="token function">getInterfaces</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> interfaces<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>interfaces<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第14章-网络编程"><a href="#第14章-网络编程" class="headerlink" title="第14章 网络编程"></a>第14章 网络编程</h1><p>端口号 定位应用</p><p>ipv6的号码 16位</p><p>域名与ip转换有DNS转换 DNS相当于哈希map</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171852.png" alt="1597972653071"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127171856.png" alt="1597974799989"></p><p>4/5/6/9/14/18/19/28</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Java01_初级</title>
      <link href="2018/05/31/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/"/>
      <url>2018/05/31/Java%E5%9F%BA%E7%A1%80%E7%BC%96%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<p>title: Java基础（第一遍）</p><h1 id="绪"><a href="#绪" class="headerlink" title="绪"></a>绪</h1><h4 id="内存分布图-3-2-6-一维数组的-内存解析"><a href="#内存分布图-3-2-6-一维数组的-内存解析" class="headerlink" title="[内存分布图](#3.2.6 一维数组的==内存解析==)"></a>[内存分布图](#3.2.6 一维数组的==内存解析==)</h4><h4 id="流程图的绘画-数据自动类型转换默认-int-double"><a href="#流程图的绘画-数据自动类型转换默认-int-double" class="headerlink" title="[流程图的绘画](数据自动类型转换默认==int double==)"></a>[流程图的绘画](数据自动类型转换默认==int double==)</h4><h1 id="第1章-Java语言概述"><a href="#第1章-Java语言概述" class="headerlink" title="第1章 Java语言概述"></a>第1章 Java语言概述</h1><h2 id="1-1软件开发介绍"><a href="#1-1软件开发介绍" class="headerlink" title="1.1软件开发介绍"></a>1.1软件开发介绍</h2><h3 id="软件"><a href="#软件" class="headerlink" title="软件"></a>软件</h3><p>一系列按照==特定顺序组织==的计算机==数据==与==指令==的集合</p><ul><li>系统软件-Windows Linux Mac Android</li><li>应用软件</li></ul><h3 id="流程图"><a href="#流程图" class="headerlink" title="==流程图=="></a>==流程图==</h3><pre class="mermaid">graph TDA("递归函数")-->B("执行语句")B-->C{"条件"}C-->|TRUE|AC-->|FALSE|D["执行语句"]D-->E("退出")</pre><h3 id="人机交互方式"><a href="#人机交互方式" class="headerlink" title="人机交互方式"></a>人机交互方式</h3><p>图形化界面（Graphical User Interface ==GUI==)</p><p>命令行方式（Command Line Interface ==CLI==）</p><h3 id="命令行指令"><a href="#命令行指令" class="headerlink" title="命令行指令"></a>命令行指令</h3><p>切换盘符 <code>d:</code></p><p>列出子目录 <code>dir</code></p><p>退出当前目录 <code>cd..</code></p><p>打开文档 <code>cd</code></p><p>创建目录（文件夹）<code>md</code></p><p>一次性退出到根目录 <code>cd\</code></p><p>创建文件 <code>echo name : tom &gt;1.doc</code> <code>name : tom</code>是需要写入的东西，可以不写\</p><p>删除文件目录<code>rd</code>（如果里面有内容删除不了，需要进入然后删除文件）</p><p>删除文件 <code>del  del *.txt</code>(删除同类文件)，如果直接del删除文件内的内容</p><p>退出 exit</p><p>常用快捷键 </p><ul><li>←  →：移动光标</li><li>↑  ↓：调阅历史操作命令</li><li>Delete和Backspace：删除字符</li></ul><h2 id="1-2计算机语言介绍"><a href="#1-2计算机语言介绍" class="headerlink" title="1.2计算机语言介绍"></a>1.2计算机语言介绍</h2><h3 id="什么是计算机语言"><a href="#什么是计算机语言" class="headerlink" title="什么是计算机语言"></a>什么是计算机语言</h3><p>人与计算机交流的方式</p><p>语言 = 语法 + 逻辑</p><p>C，C++，Java，PHP，Kotlin，Python，Scala .et al</p><pre class="mermaid">graph LR登录界面-->HTTP-->数据库数据库-->登录界面</pre><h3 id="语言的分代"><a href="#语言的分代" class="headerlink" title="语言的分代"></a>语言的分代</h3><p>第一代 机器语言</p><p>第二代 汇编语言 使用助记符表示一条机器指令</p><p>第三代 高级语言</p><ol><li>面向过程 C</li><li>C ++ Cpp</li><li>面向对象 Java</li></ol><pre class="mermaid">graph TDA(高级语言)-->B{汇编语言}-->|调用|C[机器指令]-->|调用|D(调用CPU)</pre><h3 id="Android-why-is-Java"><a href="#Android-why-is-Java" class="headerlink" title="Android/why is Java?"></a>Android/why is Java?</h3><p>市场需求</p><blockquote><p><a href="https://www.tiobe.com/tiobe-index/">https://www.tiobe.com/tiobe-index/</a></p></blockquote><p>C 运行效率高</p><ul><li>操作系统</li><li>嵌入式设备（汽车，洗衣机）</li><li>动画制图</li></ul><p>Python 开发效率快，运行速度更低</p><ul><li>爬虫</li><li>==数据分析==</li><li>==AI==</li><li>后台</li><li>自动化运维</li></ul><p>PHP</p><ul><li>后台</li></ul><p>C# 不开源</p><p>Java 社区最活跃</p><p>JavaScript 前端</p><p>SQL</p><p>Swift 与 OC Apple</p><p>Go Google （头条替换成Go）</p><h2 id="1-3-Java语言概述"><a href="#1-3-Java语言概述" class="headerlink" title="1.3 Java语言概述"></a>1.3 Java语言概述</h2><p>1995 SUN（Stanford University Network）</p><h3 id="简史"><a href="#简史" class="headerlink" title="简史"></a>简史</h3><p>1991 Oak（橡树）</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/sun.png" alt="sun"></p><p>爪哇岛 生产咖啡</p><p>2004 JDK 1.5 突破版本 更名JDK 5.0</p><p>2009 74亿美元 Oracle收购</p><p>2014 JDK8.0 使用量最大</p><p>LTS 8 11 长期维护版本</p><p>每隔三年发布一个LTS</p><h3 id="Java技术体系平台"><a href="#Java技术体系平台" class="headerlink" title="Java技术体系平台"></a>Java技术体系平台</h3><table><thead><tr><th>Java SE (Java  Standard Edition)标准版</th></tr></thead><tbody><tr><td>支持面向桌面级应用（如Windows下的应用程序）的Java平台，提供了完整的Java核心API，此版本以前称为==J2SE==</td></tr><tr><td>**Java EE(Java  Enterprise Edition)企业版  **</td></tr><tr><td>是为开发企业环境下的应用程序提供的一套解决方案。该技术体系中包含的技术如:Servlet  、Jsp等，主要针对于Web应用程序开发。版本以前称为J2EE</td></tr><tr><td><strong>Java  ME(Java  Micro Edition)小型版</strong></td></tr><tr><td>支持Java程序运行在移动终端（手机、PDA）上的平台，对Java API有所精简，并加入了针对移动终端的支持，此版本以前称为J2ME</td></tr><tr><td><strong>Java  Card</strong></td></tr><tr><td>支持一些Java小程序（Applets）运行在小内存设备（如智能卡）上的平台</td></tr></tbody></table><h3 id="Java语言特点"><a href="#Java语言特点" class="headerlink" title="Java语言特点"></a>Java语言特点</h3><p>面向对象</p><p>健壮性</p><ul><li>去除了指针</li><li>增加了内存管理</li></ul><p>跨平台（write once run anywhere)</p><ul><li>JVM Java虚拟机 实现Java语言跨平台</li><li>不同系统的JVM不一样（Win、Linux、Mac）</li></ul><h2 id="1-4-运行机制及其运行过程"><a href="#1-4-运行机制及其运行过程" class="headerlink" title="1.4 运行机制及其运行过程"></a>1.4 运行机制及其运行过程</h2><p>JVM是一个虚拟的计算机</p><p>Java舍弃了C的指针</p><p>增加了垃圾回收机制//自动的内存管理</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165140.png" alt="java的结构"></p><h2 id="1-5-Java语言的环境的搭建"><a href="#1-5-Java语言的环境的搭建" class="headerlink" title="1.5 Java语言的环境的搭建"></a>1.5 Java语言的环境的搭建</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java%E7%9A%84%E7%8E%AF%E5%A2%83.png" alt="java的运行环境"></p><p><img src="images/image-20200721180531394.png" alt="java的三层架构"></p><h3 id="配置环境变量"><a href="#配置环境变量" class="headerlink" title="配置环境变量"></a>配置环境变量</h3><p>需在任何文件路径下能够执行javac与java文件</p><p>path：windows在执行命令时要搜寻的路径</p><ol><li>我的电脑–属性–高级系统设置–环境变量</li><li>编辑 path 环境变量，在变量值开始处加上java工具所在目录，后面用 “ ; ”和其他值分隔开即可。</li><li>打开DOS命令行，任意目录下敲入javac。如果出现javac 的参数信息，配置成功。</li></ol><h3 id="设置-JAVA-HOME"><a href="#设置-JAVA-HOME" class="headerlink" title="设置==JAVA_HOME=="></a>设置==JAVA_HOME==</h3><p>新建环境变量JAVA_HOME</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">JAVA_HOME <span class="token operator">=</span> <span class="token class-name">C</span><span class="token operator">:</span>\<span class="token class-name">Program</span> <span class="token class-name">Files</span>\<span class="token class-name">Java</span>\jdk1<span class="token punctuation">.</span><span class="token number">8.0_131</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>新增Path环境变量，将</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">D</span><span class="token operator">:</span>\developer_tools\<span class="token class-name">Java</span>\jdk1<span class="token punctuation">.</span><span class="token number">8.0_131</span>\bin<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>替换为</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">%</span>JAVA_HOME<span class="token operator">%</span>\bin<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>测试</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">java <span class="token operator">-</span>version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么要使用JAVA_HOME?</p><p>为了以后默认寻找JAVA_HOME的方便</p><p>注意：要把JAVA_HOME放在前面</p><h2 id="1-6-开发体验-Hello-World"><a href="#1-6-开发体验-Hello-World" class="headerlink" title="1.6 开发体验-Hello World"></a>1.6 开发体验-Hello World</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java%E7%9A%84%E7%BC%96%E8%AF%91.png" alt="java编译过程"></p><p>ln为line的意思，属于单行打印</p><p>想当于打印与换行符同时进行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloChina</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello world!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ln是相当于print+line，属于单行打印的意思</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">HelloChina</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//单行注释，此行没有换行符</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//相当于换行符</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello WOrld!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>写完之后注意保存</p><h2 id="1-7-Java注释信息"><a href="#1-7-Java注释信息" class="headerlink" title="1.7 Java注释信息"></a>1.7 Java注释信息</h2><h3 id="文档注释的注意事项"><a href="#文档注释的注意事项" class="headerlink" title="==文档注释的注意事项=="></a>==文档注释的注意事项==</h3><ul><li>文档注释需要用于==放置于类的前面==用于标记声明类，放置于类后面@不展现</li><li>一个java源文件声明多个类编译之后会生成==多个字节码文件==（对应原文件中不同的类）</li><li>要想使用java.exe命令解释运行成功，必须保证对应的类中声明==有main()方法。==<br>main()的格式是固定的！</li><li>main()作为程序的==入口！==</li><li>如果源文件中的一个类想用==public==修饰，则要求此类的==类名必须与源文件的文件名相同。==</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*一、测试Java中的三种注释1. 单行注释 //2. 多行注释3. 文档注释（java特有）二、单行和多行注释的作用：① 对编写的代码进行解释说明② 进行代码的调试三、说明1. 单行注释和多行注释，被注释掉的信息，是不参与编译的。2. 多行注释是不能嵌套使用的。四、文档注释特点：注释内容可以被JDK提供的工具 javadoc 所解析，生成一套以网页文件形式体现的该程序的说明文档。*/</span>    <span class="token comment">/**文档注释：放置于类的前面，用于声明类的注释这是我的第一个Java程序！@author shkstart@version 1.0*/</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CommentTest</span><span class="token punctuation">&#123;</span><span class="token comment">/**如下的方法是main()方法，作为程序的入口*/</span>    <span class="token comment">/*main()的格式是固定的！*/</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//单行注释</span><span class="token comment">//System.out.println("Hello World!")</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对编写的代码进行解释说明</p><p>注释相当于药的说明书</p><p>多行注释不能嵌套使用</p><p>文档注释内容可以被JDK提供的工具 <code>javadoc</code> 所解析，生成一套以网页文件形式体现的该程序的说明文档。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/javadoc.png" alt="javadoc"></p><p><code>mydoc</code>是自己起的名字,生成文件目录</p><p>打开index首页</p><h2 id="1-9-Java-API文档"><a href="#1-9-Java-API文档" class="headerlink" title="1.9 Java API文档"></a>1.9 Java API文档</h2><p>API （Application Programming Interface,应用程序编程接口）是 Java 提供的基本编程接口。</p><p>Java语言提供了大量的基础类，因此 Oracle 也为这些基础类提供了相应的API文档，用于告诉开发者如何使用这些类，以及这些类里包含的方法。类似于学习汉字使用的《新华字典》</p><p>注意搜索查看</p><p>相当于辞典</p><h2 id="1-10-良好的编程风格"><a href="#1-10-良好的编程风格" class="headerlink" title="1.10 良好的编程风格"></a>1.10 良好的编程风格</h2><p>使用文档注释来注释整个类或整个方法</p><p>使用注释方法注释某一个步骤</p><p>使用TAB操作进行缩进</p><p>运算符两端加空格</p><p>块的风格可以做选择</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC.png" alt="java的编程风格"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">1.</span>编写<span class="token operator">-</span>编译<span class="token operator">-</span>运行三个步骤：① 编写：将编写的java程序保存在<span class="token punctuation">.</span>java结尾的源文件中。比如：<span class="token class-name">Hello</span><span class="token punctuation">.</span>java② 编译：使用javac<span class="token punctuation">.</span>exe指令对编写的java源文件进行编译。比如：javac <span class="token class-name">Hello</span><span class="token punctuation">.</span>java        编译之后，生成<span class="token punctuation">.</span><span class="token keyword">class</span>结尾的字节码文件。③ 运行：使用java<span class="token punctuation">.</span>exe指令对生成的字节码文件，进行解释运行。比如：java <span class="token class-name">HelloShangHai</span><span class="token number">2.</span> 在一个java源文件中，是可以声明多个类的。那么编译之后，就会生成对应的类名的多个字节码文件。<span class="token number">3.</span> 要想使用java<span class="token punctuation">.</span>exe命令解释运行成功，必须保证对应的类中声明有<span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>方法。   <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>的格式是固定的！<span class="token number">4.</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span>作为程序的入口！<span class="token number">5.</span> 如果源文件中的一个类想用<span class="token keyword">public</span>修饰，则要求此类的类名必须与源文件的文件名相同。   <span class="token operator">></span> 结论：一个源文件中，最多只能有一个类声明为<span class="token keyword">public</span>的<span class="token number">6.</span> 输出语句：   类型一：<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  在执行完输出语句之后，会换行   类型二：<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   在执行完输出语句之后，不会换行<span class="token number">7.</span> 所有的执行语句，必须以<span class="token string">";"</span>结尾<span class="token operator">*</span><span class="token operator">/</span><span class="token keyword">class</span> <span class="token class-name">HelloShangHai</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//args: arguments,参数</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//"Hello World!" : 字符串</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloBeiJing</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloShenZhen</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">HelloGuangZhou</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Hello</span><span class="token punctuation">&#123;</span><span class="token comment">//public修饰与否，影响的是Hello类被调用时的权限的大小</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第2章-Java基本语法"><a href="#第2章-Java基本语法" class="headerlink" title="第2章 Java基本语法"></a>第2章 Java基本语法</h1><h2 id="2-1-关键字和保留字"><a href="#2-1-关键字和保留字" class="headerlink" title="2.1 关键字和保留字"></a>2.1 关键字和保留字</h2><p><strong>关键字(Keyword)</strong></p><ul><li>定义：被<strong>Java</strong>语言赋予了特殊含义，用做专门用途的字符串（单词）</li><li>特点：<strong>关键字中所有字母都为小写</strong></li></ul><p><strong>保留字(reserved word)</strong></p><ul><li>现有Java版本尚未使用，但以后版本可能会作为关键字使用。自己命名标识符时要避免使用这些保留字 </li><li> goto 、const</li></ul><table><thead><tr><th>关键字</th><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td>byte</td><td>单字节类型</td><td>1个字节（8位）[-128,127]</td></tr><tr><td>short</td><td>短整型</td><td>2个字节（16位）[-2^15^,2^15^-1]</td></tr><tr><td>int</td><td>整型</td><td>4个字节（32位）[-2^31^,2^31^-1]</td></tr><tr><td>long</td><td>长整型</td><td>8个字节（64位）[-2^63^,2^63^-1]</td></tr><tr><td>char</td><td>单字符类型</td><td>2个字节（16位）</td></tr><tr><td>float</td><td>单精度浮点型</td><td>4个字节 科学计数法保留小数点6-7位+F或者f</td></tr><tr><td>double</td><td>双精度浮点型</td><td>8个字节 科学计数法表示小数点15-16位</td></tr><tr><td>boolean</td><td>布尔类型</td><td>true and false</td></tr></tbody></table><h2 id="2-2-标识符"><a href="#2-2-标识符" class="headerlink" title="2.2 标识符"></a>2.2 标识符</h2><p>Java 对各种<strong>变量</strong>、<strong>方法</strong>和<strong>类</strong>等要素命名时使用的字符序列称为标识符</p><p><strong>技巧：凡是自己可以起名字的地方都叫标识符</strong>。</p><h3 id="2-2-1-定义合法标识符规则："><a href="#2-2-1-定义合法标识符规则：" class="headerlink" title="2.2.1 定义合法标识符规则："></a>2.2.1 定义合法标识符规则：</h3><ul><li><p>由26个英文字母大小写，0-9，_ 或 $ 组成</p></li><li><p>数字不可以开头</p></li><li><p>不可以使用关键字和保留字，但能包含关键字和保留字</p></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> public1<span class="token comment">//public不行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>Java中严格区分大小写，长度无限制，在windows中不区分大小写，会发生覆盖</li><li>标识符不能包含==空格==</li></ul><h3 id="2-2-2-命名的规范"><a href="#2-2-2-命名的规范" class="headerlink" title="2.2.2 命名的规范"></a>2.2.2 命名的规范</h3><p>包名：多单词组成时所有字母都小写：==xxxyyyzzz==</p><p>类名、接口名：多单词组成时，所有单词的首字母大写：==XxxYyyZzz== 大驼峰</p><p><strong>变量名、方法名</strong>：多单词组成时，第一个单词首字母小写，第二个单词开始每个单词首字母大写：==xxxYyyZzz== 小驼峰</p><p><strong>常量名</strong>：所有字母都大写。多单词时每个单词用==下划线连接==：XXX_YYY_ZZZ</p><!--注意1：在起名字时，为了提高阅读性，要尽量有意义，“见名知意”。--><!--注意2：java采用unicode字符集，因此标识符也可以使用汉字声明，但是不建议使用。--><p>如果用户不遵守规范，编译与运行都不受影响</p><h2 id="2-3-变量"><a href="#2-3-变量" class="headerlink" title="2.3 变量"></a>2.3 变量</h2><h3 id="2-3-1-变量的概念"><a href="#2-3-1-变量的概念" class="headerlink" title="2.3.1 变量的概念"></a>2.3.1 变量的概念</h3><ul><li>内存中的一个存储区域</li><li>该区域的数据可以在同一类型范围内不断变化</li><li>变量是程序中最基本的存储单元。包含变量类型、变量名和存储的值</li></ul><h3 id="2-3-2变量的作用"><a href="#2-3-2变量的作用" class="headerlink" title="2.3.2变量的作用"></a>2.3.2变量的作用</h3><ul><li>用于在内存中保存数据</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*测试变量的定义变量的声明与赋值格式： 数据类型 变量名 = 变量值；*/</span><span class="token keyword">class</span> <span class="token class-name">VaribleTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> number<span class="token punctuation">;</span><span class="token comment">//变量的声明</span>        number <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//变量的赋值</span>        <span class="token comment">//变量的声明与赋值</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-3-3-变量-注意点"><a href="#2-3-3-变量-注意点" class="headerlink" title="2.3.3 变量==注意点=="></a>2.3.3 变量==注意点==</h3><ol><li>java是强类型的语言，声明的每个变量，一定要指明其变量类型 </li><li>变量一定需要在赋值之后才可以使用(java没有初始化)</li><li>变量需要先声明在赋值</li><li>变量都有其作用域，超出作用域范围后，就失效 { } </li><li>在同一个作用域范围内，不能同时存在相同的变量名</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**文档注释示例*/</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-3-4基本数据类型"><a href="#2-3-4基本数据类型" class="headerlink" title="2.3.4基本数据类型"></a>2.3.4基本数据类型</h3><h4 id="lt-1-gt-数据类型的分类"><a href="#lt-1-gt-数据类型的分类" class="headerlink" title="&lt;1&gt; 数据类型的分类"></a>&lt;1&gt; 数据类型的分类</h4><!--可以用不同的角度分--><p>按数据类型分</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B.png" alt="java的数据类型"></p><p>整型：byte\short\int\long</p><p>浮点型：float\double</p><p>字符型：char</p><p>布尔型：boolean</p><h4 id="lt-2-gt-Java整型"><a href="#lt-2-gt-Java整型" class="headerlink" title="&lt;2&gt; ==Java整型=="></a>&lt;2&gt; ==Java整型==</h4><ul><li>Java各整数类型有固定的表数范围和字段长度，不受具体OS的影响，以保证java程序的可移植性。</li><li>超过范围编译不通过</li><li>java的整型常量==默认为 int 型==，声明long型常量须后加‘l’或‘L’，一般默认加==L==</li><li>java程序中变量==通常声明为int型==除非不足以表示较大的数，才使用long，一般使用int</li></ul><table><thead><tr><th>关键字</th><th>名称</th><th>介绍</th></tr></thead><tbody><tr><td>byte</td><td>单字节类型</td><td>1个字节（8位）[-128,127]</td></tr><tr><td>short</td><td>短整型</td><td>2个字节（16位）[-2^15^,2^15^-1]</td></tr><tr><td>int</td><td>整型</td><td>4个字节（32位）[-2^31^,2^31^-1]</td></tr><tr><td>long</td><td>长整型</td><td>8个字节（64位）[-2^63^,2^63^-1]</td></tr><tr><td>char</td><td>单字符类型</td><td>2个字节（16位）</td></tr><tr><td>float</td><td>单精度浮点型</td><td>4个字节 科学计数法保留小数点6-7位+F或者f</td></tr><tr><td>double</td><td>双精度浮点型</td><td>8个字节 科学计数法表示小数点15-16位</td></tr><tr><td>boolean</td><td>布尔类型</td><td>true and false</td></tr></tbody></table><h4 id="lt-3-gt-Java浮点类型"><a href="#lt-3-gt-Java浮点类型" class="headerlink" title="&lt;3&gt; Java浮点类型"></a>&lt;3&gt; Java浮点类型</h4><p>与整数类型类似，Java 浮点类型也有固定的表数范围和字段长度，不受具体操作系统的影响。</p><p>浮点型常量有两种表示形式：</p><ul><li>十进制数形式：如：5.12       512.0f        .512   (必须有小数点）</li><li>科学计数法形式:如：5.12e2      512E2     100E-2</li></ul><p>==float==：单精度，尾数可以精确到7位有效数字。很多情况下，精度很难满足需求。   </p><p>定义float类型的变量在赋值时，需要’F’或者’f’，否则编译错误</p><p>float存储范围比long还要大，但是精度降低</p><p>double：双精度，精度是float的两倍。通常采用此类型</p><p>Java 的浮点型常量==默认为double型==，声明float型常量，须后加‘f’或‘F’</p><table><thead><tr><th><strong>类 型</strong></th><th><strong>占用存储空间</strong></th><th><strong>表数范围</strong></th></tr></thead><tbody><tr><td>单精度float</td><td>4字节</td><td>-3.403E38  ~ 3.403E38</td></tr><tr><td>双精度double</td><td>8字节</td><td>-1.798E308  ~ 1.798E308</td></tr></tbody></table><h4 id="lt-4-gt-字符类型char"><a href="#lt-4-gt-字符类型char" class="headerlink" title="&lt;4&gt; 字符类型char"></a>&lt;4&gt; 字符类型char</h4><p>char 型数据用来表示通常意义上“字符” (2字节)</p><p>Java中的所有字符都使用Unicode编码，故一个字符可以存储一个字母，一个汉字，或其他书面语的一个字符</p><p>字符型变量的三种表现形式：</p><ul><li>字符常量是用单引号==‘  ’==括起来的单个字符。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c1 <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c2 <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c3 <span class="token operator">=</span> <span class="token string">'zhong'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c4 <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span><span class="token keyword">char</span> c5 <span class="token operator">=</span> <span class="token string">'ab'</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span class="token keyword">char</span> c6 <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span><span class="token comment">//编译不通过</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>转义字符</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/java%E7%9A%84%E8%BD%AC%E4%B9%89%E5%AD%97%E7%AC%A6.png" alt="java的转义字符"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c7 <span class="token operator">=</span> <span class="token string">'\n'</span><span class="token punctuation">;</span><span class="token comment">//换行符</span><span class="token keyword">char</span> c8 <span class="token operator">=</span> <span class="token string">'\t'</span><span class="token punctuation">;</span><span class="token comment">//制表符，缩进</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>直接使用 Unicode 值来表示字符型常量：<code>\uXXXX</code>。其中，<code>XXXX</code>代表一个==十六进制整数==。如：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">\u000a <span class="token operator">=</span> \n<span class="token punctuation">;</span><span class="token comment">//char类型是可以进行运算的。因为它都对应有Unicode码。</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>u是Unicode 通过映射表进行对照</p></li></ul><h4 id="lt-5-gt-Unicode-编码"><a href="#lt-5-gt-Unicode-编码" class="headerlink" title="&lt;5&gt; Unicode 编码"></a>&lt;5&gt; Unicode 编码</h4><p>Unicode：一种编码，将世界上所有的符号都纳入其中。</p><p>每一个符号都给予一个独一无二的编码，使用 Unicode 没有乱码的问题。</p><p>Unicode 的==缺点==：</p><ul><li>Unicode 只规定了符号的二进制代码，却没有规定这个二进制代码应该如何存储：无法区别 Unicode 和 ASCII：计算机无法区分三个字节表示一个符号还是分别表示三个符号。</li><li>每个字符都用三个或者四个字节存储，浪费了存储空间。</li></ul><p>==Unicode向下兼容了ASCII码==</p><h4 id="lt-6-gt-UTF-8"><a href="#lt-6-gt-UTF-8" class="headerlink" title="&lt;6&gt; UTF-8"></a>&lt;6&gt; UTF-8</h4><p>UTF-8 是在互联网上使用最广的一种 Unicode 的实现方式。</p><p>UTF-8 是一种变长的编码方式。它可以使用 1-6 个字节表示一个符号，根据不同的符号而变化字节长度。</p><p>UTF-8的==编码规则==：</p><ul><li>对于单字节的UTF-8编码，该字节的最高位为0，其余7位用来对字符进行编码（等同于ASCII码）。</li><li>对于多字节的UTF-8编码，如果编码包含 n 个字节，那么第一个字节的前 n 位为1，第一个字节的第 n+1 位为0，该字节的剩余各位用来对字符进行编码。在第一个字节之后的所有的字节，都是==最高两位为”10”==，其余6位用来对字符进行编码。  </li></ul><h4 id="lt-7-gt-ASCII码"><a href="#lt-7-gt-ASCII码" class="headerlink" title="&lt;7&gt; ASCII码"></a>&lt;7&gt; ASCII码</h4><p>在计算机内部，所有数据都使用二进制表示</p><p>一共规定了128个字符</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//使用ASCII码对应数值</span><span class="token keyword">char</span> c9 <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span><span class="token comment">//a</span><span class="token keyword">char</span> c10 <span class="token operator">=</span> <span class="token number">65</span><span class="token punctuation">;</span><span class="token comment">//A</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="lt-8-gt-布尔类型：boolean"><a href="#lt-8-gt-布尔类型：boolean" class="headerlink" title="&lt;8&gt; 布尔类型：boolean"></a>&lt;8&gt; 布尔类型：boolean</h4><p>只有两个值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//常常在循环结构，条件判断结构中使用</span><span class="token keyword">boolean</span> bo1 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> bo2 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>bo1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"true"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"false"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-4-运算规则"><a href="#2-4-运算规则" class="headerlink" title="2.4 运算规则"></a>2.4 运算规则</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StringTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> no <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"abcdef"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str1 <span class="token operator">=</span> str <span class="token operator">+</span> <span class="token string">"xyz"</span> <span class="token operator">+</span> no<span class="token punctuation">;</span><span class="token comment">//abcdefxyz10</span>        str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//abcdefxyz10123</span>        <span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'国'</span><span class="token punctuation">;</span>                <span class="token keyword">double</span> pi <span class="token operator">=</span> <span class="token number">3.1416</span><span class="token punctuation">;</span>        str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> pi<span class="token punctuation">;</span><span class="token comment">//abcdefxyz101233.1416</span>        <span class="token keyword">boolean</span> b <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> b<span class="token punctuation">;</span>        str1 <span class="token operator">=</span> str1 <span class="token operator">+</span> c<span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"str1 = "</span> <span class="token operator">+</span> str1<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-1-数据自动类型转换默认-int-double"><a href="#2-4-1-数据自动类型转换默认-int-double" class="headerlink" title="2.4.1 数据自动类型转换默认==int double=="></a>2.4.1 数据自动类型转换默认==int double==</h3><ol><li><p>当存储范围小的数据(变量/表达式/常量)，赋值给存储范围大的变量时，自动升级为该存储范围大的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token comment">//容量大小指的不是数据类型占用空间的大小，指的的存储量的大小 long 与 float</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="mermaid">   graph TDJ(char)-->CA(byte)-->CB(short)-->C(int)C-->D(long)D-->F(float)F-->G(double)</pre><!--注意：在int之下的类型发生计算都会变成int类型--></li><li><p>当byte与byte,short与short，char与char，byte,short,char之间一起运算了，都会自动升级为int  </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span> b1 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">byte</span> b2 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">int</span> sum <span class="token operator">=</span> b1 <span class="token operator">+</span> b2<span class="token punctuation">;</span><span class="token comment">//sum为int</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>当多种基本数据类型的数据一起混合运算，会自动升级为它们中大的类型 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token comment">//97 </span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span> <span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">2.8</span><span class="token punctuation">;</span> <span class="token keyword">double</span> sum <span class="token operator">=</span> c <span class="token operator">+</span> b <span class="token operator">+</span> d<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>当基本数据类型的数据 与 String类型进行“+”拼接时，结果自动转为String类型。  </p><p>&lt;1&gt;String: 字符串，使用一对“”表示</p><p>&lt;2&gt;String s1 = “ “;内部可以声明0个，1个或者多个字符</p><p>&lt;3&gt;String只能和==8种基本数据类型==的变量做连接运算</p><p>&lt;4&gt;运算的结果只能是String类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token number">12</span> <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span> <span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"abc"</span><span class="token punctuation">;</span><span class="token class-name">String</span> s3 <span class="token operator">=</span> n1<span class="token operator">+</span>s2<span class="token punctuation">;</span><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token class-name">String</span> s4 <span class="token operator">=</span> s2 <span class="token operator">+</span> b1<span class="token punctuation">;</span><span class="token comment">//结果也是拼接上</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//abctrue</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s2<span class="token operator">+</span>n1<span class="token operator">+</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//字符串的拼接</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">rintln</span><span class="token punctuation">(</span>n1<span class="token operator">+</span>b1<span class="token operator">+</span>s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//从左到右计算，而int无法与boolean做运算，发生编译失败</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> <span class="token punctuation">(</span>b1 <span class="token operator">+</span> s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>boolean类型不和其他基本数据类型发生转换</p></li></ol><h3 id="2-4-2-强制类型转换"><a href="#2-4-2-强制类型转换" class="headerlink" title="2.4.2 强制类型转换"></a>2.4.2 强制类型转换</h3><p>当存储范围大的数据（变量、表达式、常量）赋值给存储范围小的变量时，都是需要强制类型转换 </p><p>强制类型转换，需要使用强转符==（）==</p><p>注意：可能会溢出，或者损失精度 </p><ul><li>截断</li><li>越界</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例如： </span><span class="token keyword">double</span> d <span class="token operator">=</span> <span class="token number">1.2</span><span class="token punctuation">;</span> <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>d<span class="token punctuation">;</span><span class="token comment">//强制类型转换</span><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token number">12.9F</span><span class="token punctuation">;</span><span class="token comment">//第一种精度损失</span><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>f1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//截断输出，输出结果是12</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span><span class="token comment">//第二种精度损失</span><span class="token keyword">byte</span> l2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span>num2<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>l2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出结果-128</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="mermaid">graph LRdouble-->float-->long-->int-->short-->byte-->char</pre><p>当某个数据（变量、表达式、常量）想要让它按照某个大的类型进行计算时，也 可以使用强制类型转换 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例如： </span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token keyword">double</span> shang <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span>a<span class="token operator">/</span>b<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>boolean和String都是无法通过强制类型转换为基本数据类型的值。</p><h3 id="练习"><a href="#练习" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="练习1"><a href="#练习1" class="headerlink" title="练习1"></a>练习1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//93</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">+</span><span class="token string">"\t"</span><span class="token operator">+</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正常,制表符</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'*'</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//51*</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token operator">+</span><span class="token string">'\t'</span><span class="token operator">+</span><span class="token string">'*'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//正常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习2"><a href="#练习2" class="headerlink" title="练习2"></a>练习2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">char</span> c <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span><span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> c <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//107hello</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s <span class="token operator">+</span> c <span class="token operator">+</span> num<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//helloa10</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token punctuation">(</span> c <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//10ahello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="练习3"><a href="#练习3" class="headerlink" title="练习3"></a>练习3</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//判断对错：对</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token number">3.5f</span> <span class="token operator">+</span> “”<span class="token punctuation">;</span>  <span class="token comment">//判断str2对错：对</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出：3.5</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">+</span> <span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出：7hello!</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello!"</span><span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//输出：hello!34</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span><span class="token string">"Hello!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//输出：98hello!</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello"</span> <span class="token operator">+</span> <span class="token string">'a'</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//输出：helloa1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-3-关于常量"><a href="#2-4-3-关于常量" class="headerlink" title="2.4.3 关于常量"></a>2.4.3 关于常量</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>num1 <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//对于整型常量而言，默认是int类型</span><span class="token keyword">int</span> num2 <span class="token operator">=</span> num1 <span class="token operator">+</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token comment">//结果是int类型</span><span class="token comment">//byte num2 = num1 + 30;运行不过</span><span class="token comment">//对于浮点型常量而言，默认是double类型</span><span class="token keyword">double</span> b1 <span class="token operator">=</span> b1 <span class="token operator">+</span> <span class="token number">12.3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-4-4-进制"><a href="#2-4-4-进制" class="headerlink" title="2.4.4 进制"></a>2.4.4 进制</h3><h4 id="lt-1-gt-进制的表示"><a href="#lt-1-gt-进制的表示" class="headerlink" title="&lt;1&gt;  进制的表示"></a>&lt;1&gt;  进制的表示</h4><ul><li><p>二进制(binary)：以0b或0B开头</p></li><li><p>十进制(decimal)：</p></li><li><p>八进制(octal)：以数字0开头表示。</p></li><li><p>十六进制(hex)：以0x或0X开头表示。此处的A-F不区分大小写。</p><p>如：0x21AF +1= 0X21B0</p></li></ul><h4 id="lt-2-gt-原码补码反码"><a href="#lt-2-gt-原码补码反码" class="headerlink" title="&lt;2&gt; 原码补码反码"></a>&lt;2&gt; 原码补码反码</h4><table><thead><tr><th>过程</th><th>原码</th><th>反码（除符号位取反）</th><th>补码（+1）</th></tr></thead><tbody><tr><td>1</td><td>0000 0001</td><td>0000 0001</td><td>0000 0001</td></tr><tr><td>-1</td><td>1000 0001</td><td>1111 1110</td><td>1111 1111</td></tr><tr><td></td><td></td><td></td><td>0000 0000</td></tr></tbody></table><h4 id="lt-3-gt-十进制转二进制"><a href="#lt-3-gt-十进制转二进制" class="headerlink" title="&lt;3&gt; 十进制转二进制"></a>&lt;3&gt; 十进制转二进制</h4><p>无符号数十进制数转二进制算法</p><p>十进制数重复除以2，每次的余数记录下当做二进制数位的值，直到商为0为止</p><p>举例：十进制数57转为二进制数</p><table><thead><tr><th>除法</th><th>商</th><th>余数</th></tr></thead><tbody><tr><td>57/2</td><td>28</td><td>1</td></tr><tr><td>28/2</td><td>14</td><td>0</td></tr><tr><td>14/2</td><td>7</td><td>0</td></tr><tr><td>7/2</td><td>3</td><td>1</td></tr><tr><td>3/2</td><td>1</td><td>1</td></tr><tr><td>1/2</td><td>0</td><td>1</td></tr></tbody></table><p>把余数列数字反向排列就得到了二进制数111001，由于intel存储的二进制数位数总是8或者8 的倍数，因此前面的空位补0</p><p>57的二进制数是00111001</p><h4 id="lt-4-gt-二进制转十进制"><a href="#lt-4-gt-二进制转十进制" class="headerlink" title="&lt;4&gt; 二进制转十进制"></a>&lt;4&gt; 二进制转十进制</h4><p>位权表示法</p><table><thead><tr><th>1</th><th>0</th><th>1</th><th>1</th><th>0</th><th>1</th><th>0</th><th>1</th></tr></thead><tbody><tr><td>7</td><td>6</td><td>5</td><td>4</td><td>3</td><td>2</td><td>1</td><td>0</td></tr><tr><td>1*2^7^</td><td>0*2^6^</td><td>1*2^5^</td><td>1*2^4^</td><td>0*2^3^</td><td>1*2^2^</td><td>0*2^1^</td><td>1*2^0^</td></tr></tbody></table><p>算法：位权表示法把n位无符号数二进制整数转换为十进制数（不考虑正负数）<br>$$<br>dec = (D_{n-1}*2^{n-1})+(D_{n-2}*2^{n-2})+…+(D_{1}*2^{1}+(D_{0}*2^{0}))<br>$$</p><!--n为无符号数总位数，D为无符号数的数字，dec为相应的十进制数--><h4 id="lt-5-gt-十进制转十六进制"><a href="#lt-5-gt-十进制转十六进制" class="headerlink" title="&lt;5&gt; 十进制转十六进制"></a>&lt;5&gt; 十进制转十六进制</h4><p>无符号数十进制数转十六进制数算法：</p><p>十进制数重复除以16，每次的余数记录下来作为当前十六进制数位的值</p><p>直到商为0为止</p><p>举例：十进制数422转为十六进制数</p><table><thead><tr><th>除法</th><th>商</th><th>余数</th></tr></thead><tbody><tr><td>422/16</td><td>26</td><td>6</td></tr><tr><td>26/16</td><td>1</td><td>A</td></tr><tr><td>1/16</td><td>0</td><td>1</td></tr></tbody></table><p>把余数列数字反向排列就得到了十六进制数的1A6H，由于Intel存储的二进制数位数总是8或者8的倍数，因此前面空位补0, 422的十六进制为01A6H</p><h4 id="lt-6-gt-十六进制转十进制"><a href="#lt-6-gt-十六进制转十进制" class="headerlink" title="&lt;6&gt; 十六进制转十进制"></a>&lt;6&gt; 十六进制转十进制</h4><table><thead><tr><th>1</th><th>6</th><th>A</th><th>7</th><th>9</th><th>4</th></tr></thead><tbody><tr><td>0001</td><td>0110</td><td>1010</td><td>0111</td><td>1001</td><td>0100</td></tr><tr><td>1*16^5^</td><td>6*16^4^</td><td>10*16^3^</td><td>7*16^2^</td><td>9*16^1^</td><td>4*16^0^</td></tr></tbody></table><p>算法：位权表示法把n位无符号数十六进制整数转换为十进制数（不考虑正负数）<br>$$<br>dec = (D_{n-1}*16^{n-1})+(D_{n-2}*16^{n-2})+…+(D_{1}*16^{1}+(D_{0}*16^{0}))<br>$$</p><!--n为无符号数总位数，D为无符号数的数字，dec为相应的十进制数--><h4 id="lt-7-gt-二进制转八进制"><a href="#lt-7-gt-二进制转八进制" class="headerlink" title="&lt;7&gt;二进制转八进制"></a>&lt;7&gt;二进制转八进制</h4><ul><li> 三个一位</li></ul><h4 id="lt-8-gt-二进制转16进制"><a href="#lt-8-gt-二进制转16进制" class="headerlink" title="&lt;8&gt;二进制转16进制"></a>&lt;8&gt;二进制转16进制</h4><ul><li>四个一位</li></ul><h2 id="2-5-运算符"><a href="#2-5-运算符" class="headerlink" title="2.5 运算符"></a>2.5 运算符</h2><h3 id="2-5-1-算术运算符"><a href="#2-5-1-算术运算符" class="headerlink" title="2.5.1 算术运算符"></a>2.5.1 算术运算符</h3><p>赋值运算符</p><p>比较运算符</p><p>逻辑运算符</p><table><thead><tr><th>运算符</th><th>运算</th><th>范例</th><th>结果</th></tr></thead><tbody><tr><td><strong>+</strong></td><td>正号</td><td>+ 3</td><td>3</td></tr><tr><td><strong>-</strong></td><td>负号</td><td>b = 4;  -b</td><td>-4</td></tr><tr><td><strong>+</strong></td><td>加</td><td>5 + 5</td><td>10</td></tr><tr><td><strong>-</strong></td><td>减</td><td>6 - 4</td><td>2</td></tr><tr><td>*****</td><td>乘</td><td>3 * 4</td><td>12</td></tr><tr><td><strong>/</strong></td><td>除</td><td>5 / 5</td><td>1</td></tr><tr><td><strong>%</strong></td><td>取模(取余)</td><td>7 % 5</td><td>2</td></tr><tr><td><strong>++</strong></td><td>自增（前）：先运算后取值</td><td>a = 2; b = ++a;</td><td>a = 3;b = 3</td></tr><tr><td><strong>++</strong></td><td>自增（后）：先取值后运算</td><td>a = 2; b = a++;</td><td>a = 3;b = 2</td></tr><tr><td><strong>- -</strong></td><td>自减（前）：先运算后取值</td><td>a = 2; b = –a;</td><td>a = 1;b = 1</td></tr><tr><td><strong>- -</strong></td><td>自减（后）：先取值后运算</td><td>a = 2;  b = a–;</td><td>a = 1;b = 2</td></tr><tr><td><strong>+</strong></td><td>字符串连接</td><td>“He” + ”llo”</td><td>“Hello”</td></tr></tbody></table><h4 id="除法说明"><a href="#除法说明" class="headerlink" title="除法说明"></a>除法说明</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//关于除法的一些说明</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> m1<span class="token operator">/</span>m2<span class="token punctuation">;</span><span class="token comment">//10</span><span class="token keyword">double</span> m4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">double</span><span class="token punctuation">)</span> m1<span class="token operator">/</span>m2<span class="token punctuation">;</span><span class="token comment">//2.4</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整型获得数是整型</p><p>使用强制类型转换</p><h4 id="模数符号说明"><a href="#模数符号说明" class="headerlink" title="模数符号说明"></a>模数符号说明</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//关于模数的符号的了解</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token operator">%</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//-2</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> <span class="token number">12</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">int</span> m4 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">12</span><span class="token operator">%</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//-2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>符号与被模数相同</p><h4 id="a-与-a说明"><a href="#a-与-a说明" class="headerlink" title="a++与++a说明"></a>a++与++a说明</h4><ul><li><p>（前）++ ：先自增1，在赋值</p></li><li><p>（后）++：先赋值，在自增1</p></li><li><p>–与++相同</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165531.png" alt="image-20200724111548518"></p><h3 id="2-5-2-赋值运算符"><a href="#2-5-2-赋值运算符" class="headerlink" title="2.5.2 赋值运算符"></a>2.5.2 赋值运算符</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">SetValues</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//赋值运算符：=</span>        <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> a1<span class="token punctuation">,</span>a2<span class="token punctuation">;</span>        a1 <span class="token operator">=</span> a2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//连续赋值</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token operator">+</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"b="</span><span class="token operator">+</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a1="</span><span class="token operator">+</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a2="</span><span class="token operator">+</span>a2<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> a3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">,</span> a4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a3="</span><span class="token operator">+</span>a3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a4="</span><span class="token operator">+</span>a4<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        m <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//m = m + 5</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//+= -= *= %=</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">short</span> m<span class="token punctuation">;</span>m <span class="token operator">+=</span> <span class="token number">5</span><span class="token punctuation">;</span>m <span class="token operator">=</span> m <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">//不相同</span>m <span class="token operator">=</span><span class="token punctuation">(</span><span class="token keyword">short</span><span class="token punctuation">)</span><span class="token punctuation">(</span>m<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>两者有点类似</p><p>==总结==：开发中如果需要变量自增2，建议使用：+=2，而不是使用+2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>i <span class="token operator">+=</span> <span class="token number">5.0</span><span class="token punctuation">;</span><span class="token comment">//这个相同于</span><span class="token comment">//i = (int)5.0;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"i="</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>i+=与普通的运算式明显不同，可以理解为+=的过程中，会以 i 的类型对+=之后的数发生强制类型转换。</p><h4 id="练习-1"><a href="#练习-1" class="headerlink" title="==练习=="></a>==练习==</h4><h4 id="lt-1-gt-示例1"><a href="#lt-1-gt-示例1" class="headerlink" title="&lt;1&gt; 示例1"></a>&lt;1&gt; 示例1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> n1 <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>n1 <span class="token operator">*=</span> <span class="token operator">++</span>m1<span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1="</span><span class="token operator">+</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n1="</span><span class="token operator">+</span>n1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-示例2"><a href="#lt-2-gt-示例2" class="headerlink" title="&lt;2&gt; 示例2"></a>&lt;2&gt; 示例2</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> n3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>n3 <span class="token operator">+=</span> <span class="token punctuation">(</span>n3<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//n3 = n3 + (n3++) + (++n3)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>n3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//32</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>在进行++或者–运算式，（a++) 这个整体已经自增1，但是赋值的情况下是先赋值，但是在进行四则运算的时候就不一样了。</p><h4 id="lt-3-gt-示例3"><a href="#lt-3-gt-示例3" class="headerlink" title="&lt;3&gt; 示例3"></a>&lt;3&gt; 示例3</h4><p>多项运算式的变换</p><p>从左往右依次计算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span>，j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">+=</span> k<span class="token operator">*</span> <span class="token operator">=</span> j <span class="token operator">+=</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>上述正则表达式可以进行简写j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token punctuation">(</span>k <span class="token operator">=</span> k <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token punctuation">(</span>j<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">+=</span> <span class="token operator">++</span>k <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>上述可以改写成    j <span class="token operator">=</span> j <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">++</span>k <span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> <span class="token number">0</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-5-3-比较运算符"><a href="#2-5-3-比较运算符" class="headerlink" title="2.5.3 比较运算符"></a>2.5.3 比较运算符</h3><table><thead><tr><th>运算符</th><th>运算                 范例                     结果</th></tr></thead><tbody><tr><td>==</td><td>相等于                4==3                  false</td></tr><tr><td>!=</td><td>不等于                4!=3                   true</td></tr><tr><td>&lt;</td><td>小于                   4&lt;3                     false</td></tr><tr><td>&gt;</td><td>大于                   4&gt;3                     true</td></tr><tr><td>&lt;=</td><td>小于等于           4&lt;=3                   false</td></tr><tr><td>&gt;=</td><td>大于等于            4&gt;=3                  true</td></tr><tr><td>instanceof</td><td>检查是否是类的对象    “Hello” instanceof String     true</td></tr></tbody></table><h4 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h4><p>运算的结果是布尔类型</p><p>区分赋值符号 == =</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">==</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a <span class="token operator">=</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//b</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="2-5-4-逻辑运算符"><a href="#2-5-4-逻辑运算符" class="headerlink" title="2.5.4 逻辑运算符"></a>2.5.4 逻辑运算符</h3><table><thead><tr><th><strong>a</strong></th><th><strong>b</strong></th><th><strong>a&amp;b</strong> 且true</th><th><strong>a&amp;&amp;b</strong> 且true</th><th><strong>a|b</strong>  或</th><th><strong>a||b</strong>   或</th><th><strong>!a</strong></th><th><strong>a^b</strong> 不同为true</th></tr></thead><tbody><tr><td><strong>true</strong></td><td><strong>true</strong></td><td>true</td><td>true</td><td>true</td><td>true</td><td>false</td><td>false</td></tr><tr><td><strong>true</strong></td><td><strong>false</strong></td><td>false</td><td>false</td><td>true</td><td>true</td><td>false</td><td>true</td></tr><tr><td><strong>false</strong></td><td><strong>true</strong></td><td>false</td><td>false</td><td>true</td><td>true</td><td>true</td><td>true</td></tr><tr><td><strong>false</strong></td><td><strong>false</strong></td><td>false</td><td>false</td><td>false</td><td>false</td><td>true</td><td>false</td></tr></tbody></table><p>逻辑运算符使用</p><p>&amp;逻辑与</p><p>&amp;&amp;短路与</p><h4 id="说明-1"><a href="#说明-1" class="headerlink" title="说明"></a>说明</h4><p>操作的是boolean类型变量</p><p>运算的结果也是boolean类型</p><h4 id="区分-amp-与-amp-amp"><a href="#区分-amp-与-amp-amp" class="headerlink" title="区分&amp;与&amp;&amp;"></a>区分&amp;与&amp;&amp;</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> b2 <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">int</span> m1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;</span> <span class="token punctuation">(</span>m1<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行else结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1="</span><span class="token operator">+</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b1 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>m2<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行else结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2="</span><span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b2 <span class="token operator">|</span> <span class="token punctuation">(</span>m3<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行else结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m1="</span><span class="token operator">+</span>m1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> m4 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>b2 <span class="token operator">||</span> <span class="token punctuation">(</span>m4<span class="token operator">++</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行if结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行else结构"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m2="</span><span class="token operator">+</span>m2<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&amp; 左边是false，依然执行右边</p><p>&amp;&amp;左边是false，不执行右边操作（短路）</p><p>|左边是true，依然执行右边</p><p>||左边是true，不执行右边操作（短路）</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>开发中，建议大家使用短路情况</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165538.png" alt="image-20200724111722689"></p><h3 id="2-5-5-位运算符"><a href="#2-5-5-位运算符" class="headerlink" title="2.5.5 位运算符"></a>2.5.5 位运算符</h3><table><thead><tr><th><strong>位运算符</strong></th><th></th><th></th></tr></thead><tbody><tr><td><strong>运算符</strong></td><td><strong>运算</strong></td><td><strong>范例</strong></td></tr><tr><td>&lt;&lt;</td><td>左移</td><td>3  &lt;&lt; 2 = 12 –&gt; 3<em>2</em>2=12</td></tr><tr><td>&gt;&gt;</td><td>右移</td><td>3  &gt;&gt; 1 = 1 –&gt; 3/2=1</td></tr><tr><td>&gt;&gt;&gt;</td><td>无符号右移</td><td>3  &gt;&gt;&gt; 1 = 1 –&gt; 3/2=1</td></tr><tr><td>&amp;</td><td>与运算</td><td>6  &amp; 3 = 2</td></tr><tr><td>|</td><td>或运算</td><td>6 |  3 = 7</td></tr><tr><td>^</td><td>异或运算</td><td>6 ^  3 = 5</td></tr><tr><td>~</td><td>取反运算</td><td>~6  = -7</td></tr></tbody></table><p>说明：</p><p>针对于整数，不管整数还是负数：左移一位乘以2，当最高位左移到边缘时，符号位发生了变化。</p><p>针对于整数，不管是正数还是负数，在一定范围内，只要向右移动了一位。就相当于/2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token operator">-</span><span class="token number">7</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//-4</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>无符号位移&gt;&gt;&gt;补0，用来取最小四位，如1111 0000 &gt;&gt;&gt;4 = 0000 1111</p><p>增加1.5倍的算法，使用位运算</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">10</span><span class="token operator">+</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token number">10</span><span class="token operator">+</span><span class="token number">10</span><span class="token operator">>></span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//除以2的倍数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>==练习==</p><p>如何手动实现整型数值60的二进制到十六进制的转换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//[answer]</span><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toBinaryString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">toHexString</span><span class="token punctuation">(</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">;</span><span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token operator">&amp;</span><span class="token number">15</span><span class="token punctuation">;</span><span class="token comment">//通过二进制数0000 1111，获取60二进制数的低四位</span><span class="token class-name">String</span> j <span class="token operator">=</span> <span class="token punctuation">(</span>i2 <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i2<span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">'A'</span><span class="token punctuation">)</span><span class="token operator">:</span>i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> i1<span class="token operator">>>></span><span class="token number">4</span><span class="token punctuation">;</span><span class="token comment">//无符号进位4</span><span class="token comment">//通过无符号数位移获得i1的高四位二进制数</span>i2 <span class="token operator">=</span> temp <span class="token operator">&amp;</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token class-name">String</span> k <span class="token operator">=</span> <span class="token punctuation">(</span>i2 <span class="token operator">></span> <span class="token number">9</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i2<span class="token operator">-</span><span class="token number">10</span><span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token operator">:</span>i2<span class="token operator">+</span><span class="token string">""</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token string">""</span><span class="token operator">+</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="交换两者的值"><a href="#交换两者的值" class="headerlink" title="==交换两者的值=="></a>==交换两者的值==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//方式1</span><span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">;</span>   m <span class="token operator">=</span> n<span class="token punctuation">;</span>   n <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token comment">//注意斜的是一样的</span><span class="token comment">//方式2，字符串类型不通用</span>m <span class="token operator">=</span> m <span class="token operator">+</span> n<span class="token punctuation">;</span>n <span class="token operator">=</span> m <span class="token operator">-</span> n<span class="token punctuation">;</span>m <span class="token operator">=</span> m <span class="token operator">-</span> n<span class="token punctuation">;</span><span class="token comment">//方式3，使用位运算</span>m <span class="token operator">=</span> m<span class="token operator">^</span>n<span class="token punctuation">;</span><span class="token comment">//拿出两者的不同</span>n <span class="token operator">=</span> m<span class="token operator">^</span>n<span class="token punctuation">;</span><span class="token comment">//把其中一个不同改变</span>m <span class="token operator">=</span> m<span class="token operator">^</span>n<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在使用位运算中</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">m<span class="token operator">^</span>n <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token comment">//m^n^n = m</span>a<span class="token operator">^</span>n <span class="token operator">=</span> m<span class="token punctuation">;</span><span class="token comment">//n^m^m = n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><table><thead><tr><th>int m = 4</th><th>0000 0100</th></tr></thead><tbody><tr><td>int n = 2</td><td>0000 0010</td></tr><tr><td>进行异或位运算</td><td>1111 1001</td></tr><tr><td>在与2进行异或运算</td><td>0000 0100</td></tr></tbody></table><p>可以预见，在与一个数进行两次异或运算后，会变成自己的本身</p><h3 id="2-5-6-三元运算符"><a href="#2-5-6-三元运算符" class="headerlink" title="2.5.6 三元运算符"></a>2.5.6 三元运算符</h3><p>说明：</p><ul><li>条件表达式是 boolean 类型</li><li>如果条件表达式是true，则返回表达式1</li><li>如果条件表示式是false，则返回表达式2</li></ul><p>要求表达式1和表达式2要一致</p><p>使用三元运算符的地方都可以改写为if-else</p><p>==关于三元运算符比较两者相同条件下的注意事项==：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token class-name">String</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m <span class="token operator">></span> n<span class="token punctuation">)</span><span class="token operator">?</span><span class="token string">"m大"</span><span class="token operator">:</span><span class="token string">"n大"</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token comment">//n</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在相同的条件下 n大</p><p>可以嵌套</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//求a1，a2,a3的最大值</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token punctuation">(</span>a1 <span class="token operator">></span> a2<span class="token punctuation">)</span><span class="token operator">?</span>a1<span class="token operator">:</span>a2<span class="token punctuation">;</span><span class="token keyword">int</span> max2 <span class="token operator">=</span> <span class="token punctuation">(</span>max1 <span class="token operator">></span> a3<span class="token punctuation">)</span><span class="token operator">?</span>max1<span class="token operator">:</span>a3<span class="token punctuation">;</span><span class="token keyword">int</span> max1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">></span> a2<span class="token punctuation">)</span><span class="token operator">?</span>a1<span class="token operator">:</span>a2<span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token operator">></span> a3<span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1 <span class="token operator">></span> a2<span class="token punctuation">)</span><span class="token operator">?</span>a1<span class="token operator">:</span>a2<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token operator">:</span>a3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>在能使用三元运算符的情况下建议使用三元运算符</p><p>因为三元运算符执行效率稍微高一点</p><h3 id="2-5-7-运算符的优先级"><a href="#2-5-7-运算符的优先级" class="headerlink" title="2.5.7 运算符的优先级"></a>2.5.7 运算符的优先级</h3><p>（）</p><h2 id="2-6-程序控制流程"><a href="#2-6-程序控制流程" class="headerlink" title="2.6 程序控制流程"></a>2.6 程序控制流程</h2><h3 id="2-6-0-如何获取-键入-的不同类型的数据"><a href="#2-6-0-如何获取-键入-的不同类型的数据" class="headerlink" title="==2.6.0== 如何获取==键入==的不同类型的数据"></a>==2.6.0== 如何获取==键入==的不同类型的数据</h3><p>使用Scanner来实现</p><p>操作步骤</p><ul><li>导入包</li><li>实例化Scanner</li><li>根据需要获取变量的类型，调用相关的方法即可</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">ScannerTest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//实例化</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入姓名"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个字符串</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入年龄"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> age <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个Int类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name="</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入体重"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Double</span> weight <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextDouble</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个浮点类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"wieght="</span> <span class="token operator">+</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"婚否(true/false)"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isMarried <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextBoolean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获取一个布尔类型</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isMarried？"</span> <span class="token operator">+</span> isMarried<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入您的性别"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> gender <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">char</span> chargender <span class="token operator">=</span> gender<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//获得索引为0的字符</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"gender："</span> <span class="token operator">+</span> chargender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>流程控制语句是用来控制程序中各个语句执行顺序的语句，可以把语句组合成 能完成一定功能的小逻辑模块</p><p>其流程控制方式采用结构化程序设计中规定的三种基本流程结构</p><ul><li><p>顺序结构</p></li><li><p>分支结构        </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">else</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token operator">-</span><span class="token keyword">case</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>循环结构</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">while</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="2-6-0-如何使用-equals-判断字符串相等"><a href="#2-6-0-如何使用-equals-判断字符串相等" class="headerlink" title="2.6.0 如何使用==equals==判断字符串相等"></a>2.6.0 如何使用==equals==判断字符串相等</h3></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span>height <span class="token operator">>=</span> <span class="token number">180</span> <span class="token operator">&amp;&amp;</span> wealth <span class="token operator">>=</span> <span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>isHandsome<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Dome10Equals</span><span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> input <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span> iftest <span class="token operator">=</span> input<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">boolean</span> a <span class="token operator">=</span> <span class="token string">"是"</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>iftest<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//如果字符串相等，则会返回true</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-0-如何使用-Math-random-获得随机数"><a href="#2-6-0-如何使用-Math-random-获得随机数" class="headerlink" title="2.6.0 如何使用==Math.random()==获得随机数"></a>2.6.0 如何使用==Math.random()==获得随机数</h3><p>如何获取一个随机数？</p><ol><li><p>通过调用==Math.random()==，可以获取一个[0,1)范围的内的double型的随机数</p></li><li><p>获取[10,99]范围内的随机数？<br>int number = (int)(Math.random() * 90 + 10);</p></li><li><p>获取[100,999]范围内的随机数？<br>int number = (int)(Math.random() * (999-100+1) + 100);</p></li></ol><p>总结：获取[a,b]范围的随机数的公式<br>$$<br>(int)(Math.random() * (b - a + 1) + a);<br>$$</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">90</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10,100)</span><span class="token comment">//获得三位随机数</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[100,1000)</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">91</span> <span class="token operator">+</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[10,100]</span><span class="token comment">//获得三位随机数</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token operator">-</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//[100,1000]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-1-顺序结构"><a href="#2-6-1-顺序结构" class="headerlink" title="2.6.1 顺序结构"></a>2.6.1 顺序结构</h3><p>（）</p><h3 id="2-6-2-分支语句"><a href="#2-6-2-分支语句" class="headerlink" title="2.6.2 分支语句"></a>2.6.2 分支语句</h3><p>条件表达式必须是布尔表达式（关系表达式或者逻辑表达式）、布尔变量</p><p>语句块只有一条执行语句，一对{}可以省掉，但是建议保留</p><p>if-else语句结构根据需要可以嵌套使用</p><p>当if-else结构是“多选一”时，最后的else是可选的。根据需要可以省掉</p><p>只执行一块代码，</p><p>执行完毕后，跳出当前if-else语句</p><p>if-else不能<code>80&lt;socre&lt;90</code></p><p>因为80与score相比已经是布尔型，布尔型不能跟90运算，所以报错</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Iftest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> heatBeats <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>heartBeats<span class="token operator">&lt;</span><span class="token number">60</span><span class="token operator">||</span>heartBeats<span class="token operator">></span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"you need continue test"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"体检结束"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>else根据需要来选</p><h4 id="例题1"><a href="#例题1" class="headerlink" title="例题1"></a>例题1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**岳小鹏参加Java考试，他和父亲岳不群达成承诺：如果：成绩为100分时，奖励一辆BMW；成绩为(80，99]时，奖励一台iphone xs max；当成绩为[60,80]时，奖励一个 iPad；        其它时，什么奖励也没有。请从键盘输入岳小鹏的期末成绩，并加以判断*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">//导包</span><span class="token keyword">class</span> <span class="token class-name">Demo5</span><span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>   <span class="token punctuation">&#123;</span>       <span class="token class-name">Scanner</span> grades <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入您测试得到的分数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//给用户提示</span>       <span class="token keyword">int</span> grade <span class="token operator">=</span> grades<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>grade <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Congratlations ! You get BMW*1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>grade<span class="token operator">></span><span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Congratlations ! You can get iphone xs max*1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>grade<span class="token operator">></span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Don't worry! You can get iPad*1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"What a pity! You can't get anything"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="说明-2"><a href="#说明-2" class="headerlink" title="说明"></a>说明</h4><p>如果多个表达式彼此之间是“互斥”关系，（即：没有交集），则那个条件在上，那个在下无所谓</p><p>如果多个条件表达式彼此之间是“包含”关系，则需要将条件表达式范围小的声明在条件表达式范围大的上面</p><h4 id="例题2-三个数字排序并输出"><a href="#例题2-三个数字排序并输出" class="headerlink" title="例题2 ==三个数字排序并输出=="></a>例题2 ==三个数字排序并输出==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**编写程序：由键盘输入三个整数分别存入变量num1、num2、num3，对它们进行排序(使用 if-else if-else),并且从小到大输出。*/</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>until<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>      <span class="token class-name">Scanner</span> num <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入num1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> num1 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入num2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> num2 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入num3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">int</span> num2 <span class="token operator">=</span> num<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token operator">></span>num2<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> num1<span class="token punctuation">;</span>          num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>          num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num2<span class="token operator">></span>num3<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> num2<span class="token punctuation">;</span>          num2 <span class="token operator">=</span> num3<span class="token punctuation">;</span>          num3 <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>num1<span class="token operator">></span>num2<span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>          <span class="token keyword">int</span> temp <span class="token operator">=</span> num1<span class="token punctuation">;</span>          num1 <span class="token operator">=</span> num2<span class="token punctuation">;</span>          num2 <span class="token operator">=</span> temp<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-3-分支语句2-Switch-case结构"><a href="#2-6-3-分支语句2-Switch-case结构" class="headerlink" title="2.6.3 分支语句2  Switch-case结构"></a>2.6.3 分支语句2  Switch-case结构</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> 常量<span class="token number">1</span><span class="token operator">:</span>        语句<span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> 常量<span class="token class-name">N</span><span class="token operator">:</span>        语句<span class="token class-name">N</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">default</span><span class="token operator">:</span>        语句<span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>break跳出当前switch-case结构</p><p>否则不会跳出代码块，依次执行</p><p>执行过程：根据switch中表达式的值，依次匹配各个case中的常量</p><p>当与某个常量匹配上时，就进入case中</p><p>调用case语句，执行完之后，依然会考虑继续执行器后的case中的结构，直接预见break</p><p><strong>示例</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Switchtest</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">switch</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"zreo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"one"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">default</span><span class="token operator">:</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"default"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//可写可不写</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="局限性："><a href="#局限性：" class="headerlink" title="局限性："></a>局限性：</h4><p>switch中的表达式的值可以是如下类型。类型存在限制，</p><p>比如==boolean类型==与==double类型==不能使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">byte</span><span class="token punctuation">;</span><span class="token keyword">short</span><span class="token punctuation">;</span><span class="token keyword">char</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">;</span>枚举类<span class="token punctuation">(</span>jak5<span class="token punctuation">.</span><span class="token number">0</span>新增<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">(</span>jdk7<span class="token punctuation">.</span><span class="token number">0</span>新增<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>表示范围不方便，但是可以通过<strong>除法</strong>进行判断，如示例1所示</p><p>case语句还可以进行合并，如示例1所示</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//示例1</span><span class="token comment">//对学生成绩大于60分的，输出“合格”。低于60分的，输出“不合格”</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//更加注意switch结构灵活运用</span><span class="token keyword">switch</span><span class="token punctuation">(</span>score<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"及格"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">0</span><span class="token operator">:</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"不及格"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>匹配的case通常不能太多</p><p>关于==default==默认值（相当于if-else里面的else）</p><p>可选的，位置也是灵活的</p><p>但是即使在中间插入default也是最后判断default，一般不这么书写</p><h4 id="建议-在什么情况下使用switch"><a href="#建议-在什么情况下使用switch" class="headerlink" title="==建议==在什么情况下使用switch"></a>==建议==在什么情况下使用switch</h4><p>switch-case可以完全转换为if-else，if-else不一定能够改写成switch-case。比如boolean类型Switch-case结构不能使用</p><p>如果判断的具体数值不多。而且符合byte、short、char、int、String、枚举等几种类型。</p><p>虽然两个语句都可以使用，建议使用switch语句。因为效率稍高。</p><p>其他情况：对区间判断，对结果为 boolean 类型判断，使用if，if的适用范围更广，也就是说，使用switch-case的，都可以改写成if-else。反之不成立</p><p><strong>结论</strong>：如果多个语句的相同可以自动往下走，考虑合并</p><h4 id="例题：日期与天数-Switch-case的不用break的条件"><a href="#例题：日期与天数-Switch-case的不用break的条件" class="headerlink" title="例题：日期与天数//Switch-case的不用break的条件"></a>例题：日期与天数//Switch-case的不用break的条件</h4><p>编写程序：从键盘上输入2020年的“month”和“day”，要求通过程序输出输入的日期为2020年的第几天。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo11Month</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入月份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入几月</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入日子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入几号</span><span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录总天数</span><span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">29</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>month <span class="token operator">+</span> <span class="token string">"月份"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日为本年的第"</span><span class="token operator">+</span>sumDays<span class="token operator">+</span><span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例题：判断case里面嵌套if-else判断是否为闰年"><a href="#例题：判断case里面嵌套if-else判断是否为闰年" class="headerlink" title="例题：判断case里面嵌套if-else判断是否为闰年"></a>例题：判断case里面嵌套if-else判断是否为闰年</h4><p>从键盘分别输入年、月、日，判断这一天是当年的第几天</p><!--注：判断一年是否是闰年的标准：可以被4整除，但不可被100整数||可以被400整除--><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">class</span> <span class="token class-name">Demo11Month</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入年份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> year <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入年份</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入月份"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> month <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入几月</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入日子"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> day <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输入几号</span><span class="token keyword">int</span> sumDays <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//记录总天数</span><span class="token keyword">switch</span><span class="token punctuation">(</span>month<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">5</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">30</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>year<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>year<span class="token operator">%</span><span class="token number">100</span><span class="token operator">!=</span><span class="token number">0</span><span class="token operator">||</span>year<span class="token operator">%</span><span class="token number">400</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断是否为闰年</span>                   sumDays <span class="token operator">+=</span> <span class="token number">29</span><span class="token punctuation">;</span>                 <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>sumDays <span class="token operator">+=</span> <span class="token number">28</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> <span class="token number">31</span><span class="token punctuation">;</span><span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>sumDays <span class="token operator">+=</span> day<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"今天是"</span><span class="token operator">+</span>year<span class="token operator">+</span><span class="token string">"年"</span><span class="token operator">+</span>month <span class="token operator">+</span> <span class="token string">"月"</span> <span class="token operator">+</span> day <span class="token operator">+</span> <span class="token string">"日，为本年的第"</span><span class="token operator">+</span>sumDays<span class="token operator">+</span><span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-4-循环结构1-for"><a href="#2-6-4-循环结构1-for" class="headerlink" title="2.6.4 循环结构1 for"></a>2.6.4 循环结构1 for</h3><p>反复执行特定程序</p><h4 id="循环语句的四个组成成分"><a href="#循环语句的四个组成成分" class="headerlink" title="循环语句的四个组成成分"></a>循环语句的四个组成成分</h4><ul><li>初始化部分(init_statement)</li><li>循环条件部分（test_exp)</li><li>循环体部分（body_statement)</li><li>迭代部分(alter_statement)</li></ul><h4 id="for-循环执行演示"><a href="#for-循环执行演示" class="headerlink" title="for 循环执行演示"></a>for 循环执行演示</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token function">1</span><span class="token punctuation">(</span>第一步<span class="token punctuation">)</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token function">100</span><span class="token punctuation">(</span>第二步<span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">(</span>第四步<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span>第三步<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例题-输出十行hello-world"><a href="#例题-输出十行hello-world" class="headerlink" title="例题 输出十行hello world"></a>例题 输出十行hello world</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="例题-遍历100以内的偶数"><a href="#例题-遍历100以内的偶数" class="headerlink" title="例题 遍历100以内的偶数"></a>例题 遍历100以内的偶数</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> sum<span class="token punctuation">;</span><span class="token comment">//记录总和</span><span class="token keyword">int</span> count<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>    count<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out。<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"总和为："</span><span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out。<span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"偶数的个数为："</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例题-遍历1-150倍数打印"><a href="#例题-遍历1-150倍数打印" class="headerlink" title="例题 遍历1-150倍数打印"></a>例题 遍历1-150倍数打印</h4><p>编写程序从1循环到150，并在每行打印一个值，</p><p>另外在每个3的倍数行上打印出<code>&quot;foo&quot;</code></p><p>在每个5的倍数行上打印<code>&quot;biz&quot;</code></p><p>在每个7的倍数行上打印输出<code>&quot;baz&quot;</code></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo12for</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">150</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">3</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断3</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"foo "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">5</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断5</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"biz "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">7</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断7</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"baz "</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Hello World!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="例题-计算最大-公约数-与最小公倍数"><a href="#例题-计算最大-公约数-与最小公倍数" class="headerlink" title="例题 计算最大==公约数==与最小公倍数"></a>例题 计算最大==公约数==与最小公倍数</h4><p>输入两个正整数m和n，求其最大公约数和最小公倍数。</p><p>比如：12和20的最大公约数是4，最小公倍数是60。</p><p><strong>说明：</strong> <strong>break</strong> <strong>关键字的使用</strong></p><p>总结：结束循环的方式都有哪些?</p><ol><li>循环条件中不满足，返回false</li><li>使用break关键字</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span>  <span class="token class-name">ForTest1</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>                <span class="token comment">//获取连个数的较小值</span>        <span class="token keyword">int</span> min <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token operator">?</span>n<span class="token operator">:</span>m<span class="token punctuation">;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> min<span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>m<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>n<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断最大公约数</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最大公约数："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>                        <span class="token comment">//获取两个数的较大值</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">></span>n<span class="token punctuation">)</span><span class="token operator">?</span>m<span class="token operator">:</span>n<span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> max<span class="token punctuation">;</span> i <span class="token operator">&lt;=</span>m<span class="token operator">*</span>n <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span>m<span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>i<span class="token operator">%</span>n<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//判断最小公倍数</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">printlnm</span><span class="token punctuation">(</span><span class="token string">"最小公倍数："</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-5-循环结构2：-while循环"><a href="#2-6-5-循环结构2：-while循环" class="headerlink" title="2.6.5 循环结构2： while循环"></a>2.6.5 循环结构2： while循环</h3><p>for循环和while循环是可以相互转换的</p><p>关于初始化条件部分</p><p>while循环在执行结束后</p><p>初始化条件中涉及到的变量仍然可用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WhileLoop</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>第一步<span class="token punctuation">)</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span>第二步<span class="token punctuation">)</span>            result <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">(</span>第三步<span class="token punctuation">)</span>            i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">(</span>第四步<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">=</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>while循环与for循环的i的作用域不同</p><h3 id="2-6-6-循环结构3：do-while循环"><a href="#2-6-6-循环结构3：do-while循环" class="headerlink" title="2.6.6 循环结构3：do-while循环"></a>2.6.6 循环结构3：do-while循环</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DoWhileLoop</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            result <span class="token operator">+=</span> i<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"result = "</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>说明</strong></p><p>do-while至少执行一次循环体</p><p>从事开发应用频次较低</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//遍历100以内的偶数</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> sum <span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">+=</span>i<span class="token punctuation">;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-7-嵌套循环"><a href="#2-6-7-嵌套循环" class="headerlink" title="2.6.7 嵌套循环"></a>2.6.7 嵌套循环</h3><ol><li>将一个循环结构A声明在另一个循环结构B的循环体中，则构成了嵌套循环</li></ol><p>A：内层循环</p><p>B：外层循环 </p><ol start="2"><li><p>外层循环控制行数，内层循环控制列数</p></li><li><p>如果外层循环循环次数为m次，内层循环循环次数为n次，则可以理解为内层循环的循环体可以执行m*n次</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>           <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>               <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">6</span> <span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                   <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><h3 id="2-6-8-特殊流程控制语句-break-与-continue"><a href="#2-6-8-特殊流程控制语句-break-与-continue" class="headerlink" title="2.6.8 特殊流程控制语句==(break)==与==(continue)=="></a>2.6.8 特殊流程控制语句==(break)==与==(continue)==</h3><p>使用场景</p><ul><li>break只能用于switch语句和循环语句中。</li><li>continue 只能用于循环语句中。</li></ul><p>continue：结束当次循环</p><p>break：结束当前循环 结束离break最近的for</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//break;//当前循环结束</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token comment">//本次循环结束</span>                <span class="token comment">//System.out.println("今晚迪丽热巴要约我");</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>break、continue之后不能声明其他语句，程序永远不会执行其后的语句，否则会报错。</p><h4 id="break越级结束指定标签对应的for"><a href="#break越级结束指定标签对应的for" class="headerlink" title="break越级结束指定标签对应的for"></a>break越级结束指定标签对应的for</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        label<span class="token operator">:</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">10</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">//break;//当前循环结束</span>                <span class="token keyword">continue</span> label<span class="token punctuation">;</span><span class="token comment">//本次循环结束</span>                <span class="token comment">//System.out.println("今晚迪丽热巴要约我");</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-9-循环语句无限循环-for-与-while-true"><a href="#2-6-9-循环语句无限循环-for-与-while-true" class="headerlink" title="2.6.9 循环语句无限循环==for(;;)==与==while(true)=="></a>2.6.9 循环语句无限循环==for(;;)==与==while(true)==</h3><p>从键盘读入个数不确定的整数，并且判断读入的正数与负数的个数，输入为0时结束程序</p><p>无限循环的存在的原因是并不知道循环多少次</p><p>需要根据循环体内部的某些条件来控制循环的结束</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token comment">//while(true)&#123;</span>    <span class="token class-name">Scanner</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> num <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>        positiveNumber<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>num<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span>        negativeNumber<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>       <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印"><a href="#打印" class="headerlink" title="打印**"></a>打印**</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/********************************/</span><span class="token keyword">class</span> <span class="token class-name">Demo14</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> <span class="token number">6</span> <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印倾斜"><a href="#打印倾斜" class="headerlink" title="打印倾斜**"></a>打印倾斜**</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/*****************/</span><span class="token keyword">class</span> <span class="token class-name">Demo15</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> main <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span>j <span class="token operator">&lt;=</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>类似于数轴</p><h4 id="打印倒着的"><a href="#打印倒着的" class="headerlink" title="打印倒着的**"></a>打印倒着的**</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/***** *******/</span><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印上下两种部分"><a href="#打印上下两种部分" class="headerlink" title="打印上下两种部分**"></a>打印上下两种部分**</h4><p>打印**要注意i与j的数量，分析内层j与外层循环的关系</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintStarTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">/*           i    j    *****  1    5    ****   2    4    ***    3    3    **     4    3    *      5    1   所以内层循环每次都是从j=1打印到6-i次为止         */</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">6</span><span class="token operator">-</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/*        上半部分    i   j(-)    k(*)        ----*      1    4       1        ---* *     2    3       2        --* * *    3    2       3        _* * * *   4    1       4        * * * * *  5    0       5        下半部分   i     j      k        * * * *   1     4      0        -* * *    2     3      1        --* *     3     2      2        ---*      4     1      3         */</span>        <span class="token comment">//上半部分的打印</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">5</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> i <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"######################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//下半部分的打印</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">4</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i <span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;=</span> <span class="token number">5</span><span class="token operator">-</span>i <span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"* "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-6-10-嵌套循环的-经典例题"><a href="#2-6-10-嵌套循环的-经典例题" class="headerlink" title="2.6.10 嵌套循环的==经典例题=="></a>2.6.10 嵌套循环的==经典例题==</h3><h4 id="九九乘法表"><a href="#九九乘法表" class="headerlink" title="九九乘法表"></a>九九乘法表</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">9</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  j<span class="token operator">&lt;=</span>i <span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token string">" * "</span> <span class="token operator">+</span> i <span class="token operator">+</span> <span class="token string">" = "</span> <span class="token operator">+</span>  i <span class="token operator">*</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="100以内所有的质数自然数"><a href="#100以内所有的质数自然数" class="headerlink" title="100以内所有的质数自然数"></a>100以内所有的质数自然数</h4><p>题目：100以内的所有质数</p><p>质数（或素数）：只能被1和他本身整除的自然数</p><p>比如：2, 3, 5,7,11,13,17,19,23，… 59</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//判断isFlag是否曾经被赋值为false</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//重置</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="遍历100-000以内的质数，判断执行效率，利用-毫秒数"><a href="#遍历100-000以内的质数，判断执行效率，利用-毫秒数" class="headerlink" title="遍历100 000以内的质数，判断执行效率，利用==毫秒数=="></a>遍历100 000以内的质数，判断执行效率，利用==毫秒数==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimeNumberTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">long</span> start <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">100000</span> <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//优化1 j &lt; i</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> j <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    isPrime <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//优化2</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>isPrime<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>                count<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            isPrime <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">long</span> end <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"质数个数为:"</span><span class="token operator">+</span>count<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"花费的总时间为(毫秒)："</span> <span class="token operator">+</span> <span class="token punctuation">(</span>end <span class="token operator">-</span> start<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//17298-211</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于math.sqrt的理解</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165610.png" alt="image-20200727195449007" style="zoom: 67%;" />、</p><p>对于100以内的数可以说，取半就可以判断是否存在因子，但是50*2=100，</p><p>判断了2就无需在判断50，因此判断了10之后，就无需继续往后判断</p><h1 id="第3章-数组"><a href="#第3章-数组" class="headerlink" title="第3章 数组"></a>第3章 数组</h1><h2 id="3-1-数组的概述"><a href="#3-1-数组的概述" class="headerlink" title="3.1 数组的概述"></a>3.1 数组的概述</h2><p>数组(Array)，是多个相同类型数据按一定顺序排列的集合，</p><p>并使用一个名字命名，</p><p>并通过编号的方式对这些数据进行统一管理。</p><p>数组的常见概念</p><ul><li>数组名</li><li>下标(或索引)</li><li>元素</li><li>数组的长度</li></ul><h2 id="3-2-一维数组的使用"><a href="#3-2-一维数组的使用" class="headerlink" title="3.2 一维数组的使用"></a>3.2 一维数组的使用</h2><h3 id="3-2-1数组的声明和初始化"><a href="#3-2-1数组的声明和初始化" class="headerlink" title="3.2.1数组的声明和初始化"></a>3.2.1数组的声明和初始化</h3><p>格式：数据类型 变量名 = 变量值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token comment">//声明</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> foods <span class="token punctuation">;</span><span class="token comment">//初始化</span>foods <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"拌海蜇"</span><span class="token punctuation">,</span><span class="token string">"龙须菜"</span><span class="token punctuation">,</span><span class="token string">"西湖醋鱼"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//声明并初始化</span><span class="token comment">//静态初始化：数组变量的赋值操作与数组元素的赋值操作同时进行</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> names <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">"李金鑫"</span>，<span class="token string">"刘志引"</span>，<span class="token string">"徐德三"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//可以简写为：String[] names = &#123;"李金鑫"，"刘志引"，"徐德三"&#125;;</span><span class="token comment">//动态初始化：数组变量的赋值操作与数组元素的赋值操作分开进行</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>简单整理</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">数组的声明<span class="token punctuation">;</span><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> 静态数组<span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 动态数组  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>类型推断<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组一旦初始化（不管是静态还是动态初始化，长度就已经确定了）</p><p>数组一旦初始化，(不管是静态还是动态初始化，其长度就是不可变的）</p><h4 id="错误"><a href="#错误" class="headerlink" title="错误"></a>错误</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//t[] arr = new double[5]&#123;1,2,3,4,5&#125;;</span><span class="token comment">//t[5] arr = new int[5];</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-2-2-如何调用数组的元素"><a href="#3-2-2-如何调用数组的元素" class="headerlink" title="3.2.2 如何调用数组的元素"></a>3.2.2 如何调用数组的元素</h3><p>通过角标的方式进行调用</p><p>角标从0开始</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">prices<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span>prices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">23.4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>prices[5]越界报错</p><p>out of bounds exception</p><h3 id="3-2-3-如何获得数组的长度"><a href="#3-2-3-如何获得数组的长度" class="headerlink" title="3.2.3 如何获得数组的长度"></a>3.2.3 如何获得数组的长度</h3><p>属性：length</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>prices<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="3-2-4-如何遍历数组元素"><a href="#3-2-4-如何遍历数组元素" class="headerlink" title="3.2.4  如何遍历数组元素"></a>3.2.4  如何遍历数组元素</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> names<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i <span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>names<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-2-5-数组元素的默认初始化值"><a href="#3-2-5-数组元素的默认初始化值" class="headerlink" title="3.2.5 数组元素的默认初始化值"></a>3.2.5 数组元素的默认初始化值</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">double</span><span class="token punctuation">[</span><span class="token punctuation">]</span> prices <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">double</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>price<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">12.3</span><span class="token punctuation">;</span>prices<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">24.4</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>price<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">SYstem</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以动态初始化值为例</p><table><thead><tr><th><strong>数组元素类型</strong></th><th><strong>元素默认初始值</strong></th></tr></thead><tbody><tr><td>byte</td><td>0</td></tr><tr><td>short</td><td>0</td></tr><tr><td>int</td><td>0</td></tr><tr><td>long</td><td>0L</td></tr><tr><td>float</td><td>0.0F</td></tr><tr><td>double</td><td>0.0</td></tr><tr><td>char</td><td>0 或写为:’\u0000’(表现为空)</td></tr><tr><td>boolean</td><td>false</td></tr><tr><td>引用类型</td><td>null</td></tr></tbody></table><h3 id="3-2-6-一维数组的-内存解析"><a href="#3-2-6-一维数组的-内存解析" class="headerlink" title="3.2.6 一维数组的==内存解析=="></a>3.2.6 一维数组的==内存解析==</h3><p>栈（stack）特点： 先进后出</p><p>堆（heap）</p><p>方法区</p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165616.png" alt="image-20200727163646089" style="zoom:67%;" /><p>一个方法对应一个栈针</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165620.png" alt="image-20200727195800509"></p><p>内存内的运行方式具体如图所示，在内存中，栈主要存储数组的索引，也就是数组的第一个值</p><p>然后数组的具体存储在堆中，通过赋值对栈与堆具体的数值不断更新</p><p>通过定义数组后，原来的索引失效，java会自动垃圾回收</p><p>当main函数执行完毕后，会自行发生垃圾回收</p><img src="../../../Users/%E9%87%91%E9%91%AB/Desktop/image-20200727202413804.png" alt="image-20200727202413804" style="zoom:67%;" /><h3 id="练习1-1"><a href="#练习1-1" class="headerlink" title="练习1"></a>练习1</h3><p>升景坊单间短期出租4个月，550元/月（水电煤公摊，网费35元/月），空调、卫生间、厨房齐全。屋内均是IT行业人士，喜欢安静。所以要求来租者最好是同行或者刚毕业的年轻人，爱干净、安静。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> index <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>      <span class="token class-name">String</span> tel <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>      <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> index<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            tel <span class="token operator">+=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"联系方式："</span> <span class="token operator">+</span> tel<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习2-1"><a href="#练习2-1" class="headerlink" title="练习2"></a>练习2</h3><p>从键盘读入学生成绩，找出最高分，并输出学生成绩等级。</p><ol><li>成绩&gt;=最高分-10  等级为’A’  </li><li>成绩&gt;=最高分-20  等级为’B’</li><li>成绩&gt;=最高分-30  等级为’C’  </li><li>其余            等级为’D’</li></ol><p>提示：先读入学生人数，根据人数创建int数组，存放学生成绩。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-27 21:02 * 从键盘读入学生成绩，找出最高分，并输出学生成绩等级。 * 成绩>=最高分-10    等级为’A’ * 成绩>=最高分-20    等级为’B’ * 成绩>=最高分-30    等级为’C’ * 其余                        等级为’D’ * 提示：先读入学生人数，根据人数创建int数组，存放学生成绩 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeWork3</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Scanner</span> scan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"请输入学生人数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> studentsNum <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//定义数组学生成绩</span>       <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>studentsNum<span class="token punctuation">]</span><span class="token punctuation">;</span>       <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请您输入"</span> <span class="token operator">+</span> studentsNum <span class="token operator">+</span> <span class="token string">"个成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> studentsNum<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> studentScore <span class="token operator">=</span> scan<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> studentScore<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token comment">//找出最高分</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span> <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                max <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"最高分是"</span> <span class="token operator">+</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//判断输出学生成绩</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>max <span class="token operator">-</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student "</span><span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" grade is A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>max <span class="token operator">-</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student "</span><span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" grade is B"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">></span><span class="token punctuation">(</span>max <span class="token operator">-</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student "</span><span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" grade is C"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"student "</span><span class="token operator">+</span> j <span class="token operator">+</span> <span class="token string">" score is "</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" grade is D"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-3-多维数组的使用"><a href="#3-3-多维数组的使用" class="headerlink" title="3.3 多维数组的使用"></a>3.3 多维数组的使用</h2><p>多维数组中主要讨论二维数组</p><h3 id="3-3-1-二位数组的声明和初始化"><a href="#3-3-1-二位数组的声明和初始化" class="headerlink" title="3.3.1 二位数组的声明和初始化"></a>3.3.1 二位数组的声明和初始化</h3><p>静态初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">"陈伟霆"</span><span class="token punctuation">,</span><span class="token string">"刘诗诗"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token string">"周笔畅"</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>动态初始化</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//1</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//2</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//继续定义arr4[0]第一个子数组</span>arr4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">/*与一维数组的定义类似double[] prices = new double[5];*/</span><span class="token comment">//也是正确的结构</span><span class="token keyword">int</span> arr5<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr6<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr7<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关于动态初始化2</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">arr4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//无指针异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165629.png" alt="image-20200728102930202"></p><h3 id="3-3-2-二维数组元素的调用"><a href="#3-3-2-二维数组元素的调用" class="headerlink" title="3.3.2 二维数组元素的调用"></a>3.3.2 二维数组元素的调用</h3><p>通过角标的使用调用二维数组的元素</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="3-3-3-二维数组的长度"><a href="#3-3-3-二维数组的长度" class="headerlink" title="3.3.3 二维数组的长度"></a>3.3.3 二维数组的长度</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//4，二维数组外层数组的长度</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//3, 二维数组内层数组的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-4-二维数组的遍历"><a href="#3-3-4-二维数组的遍历" class="headerlink" title="3.3.4 二维数组的遍历"></a>3.3.4 二维数组的遍历</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span> <span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length <span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span><span class="token number">0</span> <span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span><span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-5-二位数组元素的默认初始化值"><a href="#3-3-5-二位数组元素的默认初始化值" class="headerlink" title="3.3.5 二位数组元素的默认初始化值"></a>3.3.5 二位数组元素的默认初始化值</h3><p>强类型 = 赋予什么类型，使用什么类型</p><p>对于二维数组来说，约定称谓：</p><p>外层元素，比如：<code>arr1[0],arr1[1]</code></p><p>存储代表的一维数组的地址值（类型）</p><p>内层元素：比如：<code>arr1[0][1]</code> <code>arr1[1][0]</code></p><p>存储与一维数组一样</p><p>外层地址打印输出地址+</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token class-name">Ststem</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//外层数组打印输出地址</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//引用类型默认初始化类型为null</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//null</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//空指针异常</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>arr3<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr3<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-3-6-二维数组的内存解析"><a href="#3-3-6-二维数组的内存解析" class="headerlink" title="3.3.6 二维数组的内存解析"></a>3.3.6 二维数组的内存解析</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165634.png" alt="image-20200728182924337"></p><h3 id="练习2-求数组所有元素的和"><a href="#练习2-求数组所有元素的和" class="headerlink" title="==练习2== 求数组所有元素的和"></a>==练习2== 求数组所有元素的和</h3><p>获取arr数组中所有元素的和。</p><p>提示：使用for的嵌套循环即可。</p><table><thead><tr><th><strong>j</strong>       <strong>i</strong></th><th><strong>j = 0</strong></th><th><strong>j = 1</strong></th><th><strong>j = 2</strong></th><th><strong>j = 3</strong></th></tr></thead><tbody><tr><td><strong>i = 0</strong></td><td><strong>3</strong></td><td><strong>5</strong></td><td><strong>8</strong></td><td>-</td></tr><tr><td><strong>i = 1</strong></td><td><strong>12</strong></td><td><strong>9</strong></td><td><strong>-</strong></td><td><strong>-</strong></td></tr><tr><td><strong>i = 2</strong></td><td><strong>7</strong></td><td><strong>0</strong></td><td><strong>6</strong></td><td><strong>4</strong></td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 18:31 * 求数组中元素的和 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SumArrays</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//定义求和</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                sum <span class="token operator">+=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"和为："</span> <span class="token operator">+</span> sum<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习3-判断是否成立"><a href="#练习3-判断是否成立" class="headerlink" title="==练习3== 判断是否成立"></a>==练习3== 判断是否成立</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java">类型相同<span class="token punctuation">,</span>模式相同声明：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x<span class="token punctuation">,</span>y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span> 在给x<span class="token punctuation">,</span>y变量赋值以后，以下选项允许通过编译的是： a <span class="token punctuation">)</span>   x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>        nob<span class="token punctuation">)</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>        yesc<span class="token punctuation">)</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">;</span>     nod<span class="token punctuation">)</span>    x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> y<span class="token punctuation">;</span>     noe<span class="token punctuation">)</span>    y<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  yesf<span class="token punctuation">)</span>    x <span class="token operator">=</span> y<span class="token punctuation">;</span>           no提示：一维数组：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> x  或者<span class="token keyword">int</span> x<span class="token punctuation">[</span><span class="token punctuation">]</span>   二维数组：<span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y 或者  <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> y<span class="token punctuation">[</span><span class="token punctuation">]</span>  或者 <span class="token keyword">int</span>  y<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>赋值符号左右两边类型相同</p><h3 id="练习4-10行杨辉三角-二维数组"><a href="#练习4-10行杨辉三角-二维数组" class="headerlink" title="练习4 10行杨辉三角 二维数组"></a>练习4 10行杨辉三角 二维数组</h3><ol><li><p>第一行有 1 个元素, 第 n 行有 n 个元素</p></li><li><p>每一行的第一个元素和最后一个元素都是 1</p></li><li><p>从第三行开始, 对于非第一个元素和最后一个元素的元素。即：</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//从第三行开始，对于非第一个元素，数等于左上角元素+顶上元素</span>yanghui<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> yanghui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> yanghui<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165639.png" alt="image-20200728114200227"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 14:19 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">YangHuiTriangle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//定义数组形状，赋值为0</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//每一个内层数组都有i+1的元素</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//为外层赋值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//为内层赋值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//最后一个数与第一个数不需要赋值</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出数列</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-5-各不相同的彩票随机数"><a href="#练习-5-各不相同的彩票随机数" class="headerlink" title="练习 5 各不相同的彩票随机数"></a>练习 5 各不相同的彩票随机数</h3><p>创建一个长度为6的int型数组，要求数组元素的值都在1-30之间，且是随机赋值。同时，要求元素的值各不相同。 Math.random()</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 8:25 * 创建一个长度为6的int型数组， * 要求数组元素的值都在1-30之间，且是随机赋值。 * 同时，要求元素的值各不相同。 Math.random() */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ChapterPractice</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//赋值</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        i<span class="token operator">--</span><span class="token punctuation">;</span><span class="token comment">//利用i--表示返回思想</span>                        <span class="token keyword">break</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//输出</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-6-回形数"><a href="#练习-6-回形数" class="headerlink" title="练习 6 回形数"></a>练习 6 回形数</h3><p>打印一个5的回形数</p><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th></tr></thead><tbody><tr><td>16</td><td>17</td><td>18</td><td>19</td><td>6</td></tr><tr><td>15</td><td>24</td><td>25</td><td>20</td><td>7</td></tr><tr><td>14</td><td>23</td><td>22</td><td>21</td><td>8</td></tr><tr><td>13</td><td>12</td><td>11</td><td>10</td><td>9</td></tr></tbody></table><h3 id="练习7-赋值与复制"><a href="#练习7-赋值与复制" class="headerlink" title="练习7 赋值与复制"></a>练习7 赋值与复制</h3><p>使用简单数组</p><p>(1)创建一个名为ArrayTest的类，在main()方法中声明array1和array2两个变量，他们是int[]类型的数组。</p><p>(2)使用大括号{}，把array1初始化为8个素数：2,3,5,7,11,13,17,19。</p><p>(3)显示array1的内容。</p><p>(4)赋值array2变量等于array1，修改array2中的偶索引元素，使其等于索引值(如array[0]=0,array[2]=2)。打印出array1。  array2 = array1;</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">;</span>        <span class="token comment">//静态初始化8个素数</span>        arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">19</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示arr1的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//赋值arr2</span>        arr2 <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token comment">//单纯的传递地址，并没有new出新数列</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示arr2的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"显示arr1的值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果：</p><blockquote><p>显示arr1的值<br>2    3    5    7    11    13    17    19<br>显示arr2的值<br>0    3    2    7    4    13    6    19<br>显示arr1的值<br>0    3    2    7    4    13    6    19<br>Process finished with exit code 0</p></blockquote><p>可以看出arr2改变之后，arr1也进行了改变，两者赋值给予的是地址</p><p>类似于，放置快捷方式</p><p>如果是复制才可以进行真正的赋值操作</p><h4 id="数组的复制操作"><a href="#数组的复制操作" class="headerlink" title="数组的复制操作"></a>数组的复制操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//复制arr1到arr2</span>arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span>arr2<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr2<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-4-数组中涉及到的常见算法"><a href="#3-4-数组中涉及到的常见算法" class="headerlink" title="3.4 数组中涉及到的常见算法"></a>3.4 数组中涉及到的常见算法</h2><h3 id="3-4-1-数组元素的赋值（杨辉三角，回形数）"><a href="#3-4-1-数组元素的赋值（杨辉三角，回形数）" class="headerlink" title="3.4.1 数组元素的赋值（杨辉三角，回形数）"></a>3.4.1 数组元素的赋值（杨辉三角，回形数）</h3><p>见上文</p><h3 id="3-4-2-求数值的最大值，最小值，总和，平均数"><a href="#3-4-2-求数值的最大值，最小值，总和，平均数" class="headerlink" title="3.4.2 求数值的最大值，最小值，总和，平均数"></a>3.4.2 求数值的最大值，最小值，总和，平均数</h3><p>见上文</p><h3 id="3-4-3-数组的赋值、-反转-，-查找-（线性查找，二分法查找）"><a href="#3-4-3-数组的赋值、-反转-，-查找-（线性查找，二分法查找）" class="headerlink" title="3.4.3 数组的赋值、==反转==，==查找==（线性查找，二分法查找）"></a>3.4.3 数组的赋值、==反转==，==查找==（线性查找，二分法查找）</h3><h4 id="反转操作"><a href="#反转操作" class="headerlink" title="反转操作"></a>反转操作</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 19:18 * 反转数组 * int[] arr1 = new int[]&#123;3,4,5,3,6,23,6,84,4&#125;; */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ReverseArray</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//        打印数组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        method1</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//交换到一半即可，除法向上取整数，所以不用担心</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//两端交换，注意-1为最后一位索引，然后逐步往中间靠拢</span>            arr1<span class="token punctuation">[</span>arr1<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        method2</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>j <span class="token operator">=</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token operator">/</span><span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">,</span>j<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//两边同时走</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr1<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr1<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="查找操作-线性查找"><a href="#查找操作-线性查找" class="headerlink" title="查找操作-线性查找"></a>查找操作-线性查找</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 19:33 * 线性查找 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LineSearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//        boolean Flag = true;//定义判断没找到的标志</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//此处把y放在外面</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"您要找的数"</span><span class="token operator">+</span>arr3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">"的索引是"</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//                Flag = false;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token comment">//        if(Flag)&#123;</span><span class="token comment">//            System.out.println("未找到您要搜索的数值");</span><span class="token comment">//        &#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> arr3<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//若没有找到</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到您要搜索的数值"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>二分法需要在有序数组中进行查找</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 19:46 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinarySearch</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">99</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">54</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">,</span> <span class="token number">999</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> isFlag <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> <span class="token number">256</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> head <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//首索引位置</span>        <span class="token keyword">int</span> end <span class="token operator">=</span> arr4<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//尾索引位置</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>head <span class="token operator">&lt;=</span> end<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> middle <span class="token operator">=</span> <span class="token punctuation">(</span>head <span class="token operator">+</span> end<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">==</span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到指定的元素，索引为："</span> <span class="token operator">+</span> middle<span class="token punctuation">)</span><span class="token punctuation">;</span>                isFlag <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>arr4<span class="token punctuation">[</span>middle<span class="token punctuation">]</span> <span class="token operator">></span> number<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                end <span class="token operator">=</span> middle <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//arr4[middle] &lt; number</span>                head <span class="token operator">=</span> middle <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>isFlag<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到指定的元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-4-4-数组元素排序算法"><a href="#3-4-4-数组元素排序算法" class="headerlink" title="3.4.4 数组元素排序算法"></a>3.4.4 数组元素排序算法</h3><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h4><p>假设含有n个记录的序列为{R1，R2，…,Rn},</p><p>其相应的关键字序列为{K1，K2，…,Kn}。</p><p>将这些记录重新排序为{Ri1,Ri2,…,Rin},</p><p>使得相应的关键字值满足条Ki1&lt;=Ki2&lt;=…&lt;=Kin,这样的一种操作称为排序。</p><p>通常来说，排序的目的是==快速查找==。</p><h4 id="排序算法的优劣"><a href="#排序算法的优劣" class="headerlink" title="排序算法的优劣"></a>排序算法的优劣</h4><p>1.时间复杂度：分析关键字的比较次数和记录的移动次数</p><p>2.空间复杂度：分析排序算法中需要多少辅助内存</p><p>3.稳定性：若两个记录A和B的关键字值相等，但排序后A、B的先后次序保持不变，</p><p>则称这种排序算法是稳定的{4,4-1}，排完序列发现{4-1,4}称为不稳定的</p><h4 id="排序方法分类"><a href="#排序方法分类" class="headerlink" title="排序方法分类"></a>排序方法分类</h4><p>内部排序：整个排序过程不需要借助于外部存储器（如磁盘等），所有排序操作都在内存中完成。</p><p>外部排序：参与排序的数据非常多，数据量非常大，计算机无法把整个排序过程放在内存中完成，必须借助于外部存储器（如磁盘）。外部排序最常见的是多路归并排序。可以认为外部排序是由多次内部排序组成。</p><h4 id="十大内部排序方法"><a href="#十大内部排序方法" class="headerlink" title="十大内部排序方法"></a>十大内部排序方法</h4><ul><li><strong>选择排序</strong></li><li>直接选择排序、==堆排序==</li><li><strong>交换排序</strong></li><li><strong>==冒泡排序==**、</strong>==快速排序==**</li><li><strong>插入排序</strong></li><li>直接插入排序、折半插入排序、Shell排序</li><li>==归并排序==</li><li><strong>桶式排序</strong></li><li><strong>基数排序</strong></li></ul><h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="冒泡排序（会写）"><a href="#冒泡排序（会写）" class="headerlink" title="冒泡排序（会写）"></a>冒泡排序（会写）</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 16:15 * 冒泡排序 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BubbleSort</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">234</span><span class="token punctuation">,</span><span class="token number">56</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">89</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//关于length - 1 为长度</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"\t"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-5-Arrays工具类的使用"><a href="#3-5-Arrays工具类的使用" class="headerlink" title="3.5 Arrays工具类的使用"></a>3.5 Arrays工具类的使用</h2><table><thead><tr><th>1</th><th><strong>boolean</strong>  <strong>equals(int[] a,int[] b)</strong></th><th>判断两个数组是否相等。</th></tr></thead><tbody><tr><td>2</td><td><strong>String</strong>  <strong>toString(int[] a)</strong></td><td>输出数组信息。</td></tr><tr><td>3</td><td><strong>void</strong>  <strong>fill(int[]</strong> <strong>a,int</strong> <strong>val**</strong>)**</td><td>将指定值填充到数组之中。</td></tr><tr><td>4</td><td><strong>void</strong>  <strong>sort(int[] a)</strong></td><td>对数组进行排序。</td></tr><tr><td>5</td><td><strong>int</strong>  <strong>binarySearch(int[] a,int key)</strong></td><td>对排序后的数组进行二分法检索指定的值。</td></tr><tr><td>6</td><td>copyOf (int[],0,8)</td><td>复制</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Arrays</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-28 20:00 * Array工具类的使用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArraysTools</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1 <span class="token operator">==</span> arr2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false,两者地址不同</span>        <span class="token comment">//1.equals() 判断两个数组是否相等，顺序也在其中</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span>arr2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.toString()</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//打印数组的地址</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.fill()填充</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">fill</span><span class="token punctuation">(</span>arr1<span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动补充</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.sort()//快速排序</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">84</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//5.binarySearch()</span>        <span class="token comment">// 前提：数组必须有序</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span>arr3<span class="token punctuation">,</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>index <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"找到了指定元素，位置为："</span> <span class="token operator">+</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"未找到指定元素"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-6-数组使用中的常见异常"><a href="#3-6-数组使用中的常见异常" class="headerlink" title="3.6 数组使用中的常见异常"></a>3.6 数组使用中的常见异常</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * 测试数组中的常见异常 * @author shkstart * @create 2020-07-28 16:26 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ArrayExceptionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1. 数组角标越界异常：ArrayIndexOutOfBoundsException</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//0-9</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(arr[10]);//越界</span><span class="token comment">//        System.out.println(arr[-10]);//越界</span>        <span class="token comment">//2. 空指针异常：NullPointerException</span>        <span class="token comment">//情况1：</span><span class="token comment">//        int[] arr1 = new int[10];</span><span class="token comment">//        arr1 = null;</span><span class="token comment">//        System.out.println(arr1[0]);</span>        <span class="token comment">//情况2：</span><span class="token comment">//        int[][] arr2 = new int[5][];</span><span class="token comment">//        System.out.println(arr2[0][0]);</span>        <span class="token comment">//情况3：</span>        <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="第4章-面向对象编程（上）"><a href="#第4章-面向对象编程（上）" class="headerlink" title="第4章 面向对象编程（上）"></a>第4章 面向对象编程（上）</h1><h2 id="4-1面向对象与面向过程"><a href="#4-1面向对象与面向过程" class="headerlink" title="4.1面向对象与面向过程"></a>4.1面向对象与面向过程</h2><p>学些面向对象的三个主线（老师总结）</p><ul><li>Java类及类的成员：属性 方法 构造器 代码块 内部类</li><li>面向对象的三大特征： 封装 继承 多态</li><li>其他关键字：this super import package static final abstract interface</li></ul><p>面向过程与面向对象</p><p>面向过程（POP）与面向对象（OOP）</p><p>二者都是一种思想，面向对象是相对于面向过程而言的。</p><p>二者都是一种思想，面向对象是相对于面向过程而言的。面向过程，强调的是功能行为，以函数为最小单位，考虑怎么做。</p><p>面向对象，将功能封装进对象，强调具备了功能的对象，以类/对象为最小单位，考虑谁来做。</p><p>面向对象更加强调运用人类在日常的思维逻辑中采用的思想方法与原则，如抽象、分类、继承、聚合、多态等。</p><p><strong>面向对象的三大特征</strong></p><ul><li>封装 (Encapsulation)</li><li>继承 (Inheritance)</li><li>多态 (Polymorphism)</li></ul><p>面向对象：Object Oriented Programming </p><p>面向过程：Procedure Oriented Programming</p><h2 id="4-2-Java语言的基本元素-类和对象"><a href="#4-2-Java语言的基本元素-类和对象" class="headerlink" title="4.2 Java语言的基本元素 类和对象"></a>4.2 Java语言的基本元素 类和对象</h2><p>类(Class)和对象(Object)是面向对象的核心概念。、</p><h3 id="4-2-1-类与对象"><a href="#4-2-1-类与对象" class="headerlink" title="4.2.1 类与对象"></a>4.2.1 类与对象</h3><p>类：是对一类事物的描述，是抽象的、概念上的定义</p><p>对象：是实际存在的该类事物的每个个体，因而也称为实例(instance)</p><p>“<strong>万事万物皆对象</strong>”</p><p>String有两种方式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">String</span> str1 <span class="token operator">=</span> <span class="token string">"Hello"</span><span class="token punctuation">;</span><span class="token class-name">String</span> str2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>orginal<span class="token operator">:</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="4-2-2-设计类-其实就是设计类内部成员"><a href="#4-2-2-设计类-其实就是设计类内部成员" class="headerlink" title="4.2.2 设计类 其实就是设计类内部成员"></a>4.2.2 设计类 其实就是设计类内部成员</h3><p>属性：对应类中的成员变量</p><p>成员变量 = field = 域 = 字段</p><p>行为：对应类中的成员方法</p><p>方法 = 成员方法 = 函数 = 成员函数 = method</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//设计类</span><span class="token keyword">class</span> <span class="token class-name">Phone</span><span class="token punctuation">&#123;</span><span class="token comment">//类</span>    <span class="token comment">//属性</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token comment">//品牌名</span>    <span class="token keyword">double</span> price<span class="token punctuation">;</span><span class="token comment">//价格</span>    <span class="token comment">//类中的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"发出的信息为："</span> <span class="token operator">+</span> message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-3-对象的创建和使用"><a href="#4-3-对象的创建和使用" class="headerlink" title="4.3 ==对象的创建和使用=="></a>4.3 ==对象的创建和使用==</h2><p>对类的实例化 = 创建累的对象</p><p>//创建Phone的对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建Phone的对象</span>        <span class="token class-name">Phone</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"品牌名："</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", 价格为："</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//通过"对象.方法" 或 "对象.属性"的方式调用功能，完成设计</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"huawei p40 pro"</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">8000.0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"品牌名："</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">", 价格为："</span> <span class="token operator">+</span> p1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">sendMessage</span><span class="token punctuation">(</span><span class="token string">"有内鬼，停止交易！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"##########################"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//创建第二个对象</span>        <span class="token class-name">Phone</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Phone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"xiaomi 10"</span><span class="token punctuation">;</span>        <span class="token class-name">Phone</span> p3 <span class="token operator">=</span> p1<span class="token punctuation">;</span>        p3<span class="token punctuation">.</span>price <span class="token operator">=</span> <span class="token number">7000.0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>price<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>通过“对象.方法“ 或 ”对象.属性“的方式调用功能</p><p>面向对象编程思想落地的实现</p><p>步骤1：创建类，设计类的成员：属性，方法</p><p>步骤2：创建类的对象（或 类的实例化）</p><p>步骤3：调用“对象.方法”  与 “对象.属性”</p><h3 id="4-3-1-对象的内存解析"><a href="#4-3-1-对象的内存解析" class="headerlink" title="4.3.1 对象的内存解析"></a>4.3.1 对象的内存解析</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165658.png" alt="image-20200729102502319"></p><p>==内存解析== ==对象名==保存栈空间中</p><p>==对象实体== 也保存在堆空间中</p><p>对象的==属性==也保存在堆空间中</p><h3 id="4-3-2-创建类的多个对象"><a href="#4-3-2-创建类的多个对象" class="headerlink" title="4.3.2 创建类的多个对象"></a>4.3.2 创建类的多个对象</h3><p>创建类的多个对象。每个对象就拥有一套类的属性</p><p>当修改其中某一个对象的属性a，不会影响其他对象。</p><p>如果将一个对象的引用赋值给另一个对象的引用。则表示两个引用同时指向了堆空间的同一个对象实体</p><h2 id="4-4-类中的属性的声明"><a href="#4-4-类中的属性的声明" class="headerlink" title="4.4 类中的属性的声明"></a>4.4 类中的属性的声明</h2><h3 id="4-4-1-变量的分类"><a href="#4-4-1-变量的分类" class="headerlink" title="4.4.1 变量的分类"></a>4.4.1 变量的分类</h3><ul><li>   1）按数据类型来分：基本数据类型 （8种）  vs  引用数据类型（数组、类、接口）</li><li>   2）按在类中声明的位置： 成员变量   vs  局部变量</li><li><pre><code>     成员变量：直接声明在类中。</code></pre></li><li><pre><code>     局部变量：方法内、构造器内、代码块内、方法的形参、构造器的形参等</code></pre></li></ul><h3 id="4-4-2-成员变量（类中属性）与局部变量（方法内）"><a href="#4-4-2-成员变量（类中属性）与局部变量（方法内）" class="headerlink" title="4.4.2 成员变量（类中属性）与局部变量（方法内）"></a>4.4.2 成员变量（类中属性）与局部变量（方法内）</h3><p>成员变量与局部变量上文可见，直接上代码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">&#123;</span><span class="token comment">//测试类</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>gender<span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"鱼香肉丝"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"李金鑫"</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span><span class="token comment">//类</span>    <span class="token comment">//属性（或成员变量）</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">boolean</span> gender<span class="token punctuation">;</span><span class="token comment">//true:女性  false：男性</span>    <span class="token comment">//方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//food:形参。形参属于局部变量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minHour <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">//属于局部变量</span>        <span class="token keyword">int</span> maxHour <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//属于局部变量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每天睡眠建议不要少于"</span> <span class="token operator">+</span> minHour <span class="token operator">+</span> <span class="token string">",但是也不要睡的过多。建议不要超过"</span> <span class="token operator">+</span> maxHour <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="相同点："><a href="#相同点：" class="headerlink" title="相同点："></a>相同点：</h4><p>都是变量，定义的格式相同：数据类型  变量名 = 变量值</p><p>先声明，后使用</p><p>变量都有其作用域。超出作用域就失效</p><h4 id="不同点："><a href="#不同点：" class="headerlink" title="不同点："></a>不同点：</h4><p>① 关于权限修饰符的使用（了解）</p><p>成员变量声明前可以使用不同的权限修饰符进行修饰。比如：private \ 缺省 \ protected \ public</p><p>局部变量不能使用权限修饰符进行修饰。</p><p>② 关于变量赋值的说明</p><p>成员变量可以显式赋值，也可以使用默认初始化值</p><p>局部变量必须在调用之前显式赋值。因为其没有默认初始化值</p><p> 对于成员变量默认初始化值的情况：</p><ul><li>整型，默认值为：0</li><li>浮点型：默认值为：0.0</li><li>char型：默认值为：0 或 ‘\u0000’</li><li>boolean型：默认值为：false</li><li>引用数据类型：默认值为null</li></ul><p>③ 在类中声明的位置不同</p><p>成员变量：直接声明在类内部</p><p>局部变量：声明在方法内、构造器内、代码块内、方法的形参、构造器的形参等</p><p>④ 在内存结构中的位置不同</p><p>成员变量：声明在堆空间中</p><p>局部变量：声明在栈空间中</p><h2 id="4-5-类中的方法的声明"><a href="#4-5-类中的方法的声明" class="headerlink" title="4.5 类中的方法的声明"></a>4.5 类中的方法的声明</h2><h3 id="4-5-1-方法声明的整体格式"><a href="#4-5-1-方法声明的整体格式" class="headerlink" title="4.5.1 方法声明的整体格式"></a>4.5.1 方法声明的整体格式</h3><blockquote><p>权限修饰符 返回值类型 方法名（参数类型1 参数名1，参数类型2 参数名2，…）</p><p>   //方法体</p></blockquote><h4 id="说明："><a href="#说明：" class="headerlink" title="说明："></a>说明：</h4><p>&lt;1&gt; 权限修饰符：可以使用4种不同的权限修饰来修饰方法。比如：private \ 缺省 \ protected \ public</p><p>暂时大家在声明方法时，可以默认都声明为：public</p><p>可以表明结构被调用时的权限的大小</p><p>&lt;2&gt; 返回值类型 </p><ul><li><p>没有返回值，使用void表示。比如：Arrays的sort（）</p><p><code>Arrays.sort(arr)</code></p></li><li><p>有具体的返回值类型,声明了返回值类型 可以是任意的基本数据类型，或者引用数据类型</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><p>有具体的返回值类型的方法中，一定会使用<code>return + 变量/常量</code>的方法，满足具体类型的数据</p><p>有返回值必有返回类型；一定会使用return</p><h4 id="注意点："><a href="#注意点：" class="headerlink" title="注意点："></a>注意点：</h4><p>返回值会产生自动类型提升</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165705.png" alt="image-20200729113917995"></p><h3 id="4-5-2-方法名"><a href="#4-5-2-方法名" class="headerlink" title="4.5.2 方法名"></a>4.5.2 方法名</h3><p>属于标识符，命名时满足标识符的规范</p><h3 id="4-5-3-形参列表"><a href="#4-5-3-形参列表" class="headerlink" title="4.5.3 形参列表"></a>4.5.3 形参列表</h3><p>可以再声明方法时，在（）括号中存入该方法体在执行过程中必要的数据</p><p>互相之间加逗号</p><p>举例子</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//这个在调用时就不要添加形式参数</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token keyword">double</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-5-4-方法体"><a href="#4-5-4-方法体" class="headerlink" title="4.5.4 方法体"></a>4.5.4 方法体</h3><p>方法执行的结构</p><p>此外方法还可以使用一些关键字进行修饰</p><p>static </p><p>abstract</p><p>final</p><p>方法还可以抛出异常类型，异常类型见</p><p>声明方法时是否需要返回值类型，是否需要形参列表</p><p>看题目的要求</p><p>具体问题具体分析</p><h3 id="4-5-5-return-的使用"><a href="#4-5-5-return-的使用" class="headerlink" title="4.5.5 return 的使用"></a>4.5.5 return 的使用</h3><p>&lt;1&gt; 一旦执行此关键字，就结束方法的执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span><span class="token punctuation">;</span><span class="token comment">//在此处执行return之后，程序直接结束，将不会再执行下面的sout操作</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>&lt;2&gt; 在有返回值类型的方法中，使用return + 变量的结构，返回需要的数据类型对应的数据 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">45</span><span class="token punctuation">,</span><span class="token number">63</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">57</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">User</span> u1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"水煮鱼"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> years <span class="token operator">=</span> u1<span class="token punctuation">.</span><span class="token function">studyYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>years<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//12</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"############"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        u1<span class="token punctuation">.</span><span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>    <span class="token comment">//属性</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment">//方法的声明</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//food:形参。形参属于局部变量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> minHour <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span> <span class="token comment">//属于局部变量</span>        <span class="token keyword">int</span> maxHour <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//属于局部变量</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"每天睡眠建议不要少于"</span> <span class="token operator">+</span> minHour <span class="token operator">+</span> <span class="token string">",但是也不要睡的过多。建议不要超过"</span> <span class="token operator">+</span> maxHour <span class="token operator">+</span> <span class="token string">"小时"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">studyYears</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">byte</span> years <span class="token operator">=</span> <span class="token number">12</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> years<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printNumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> <span class="token number">100</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="方法可以调用方法"><a href="#方法可以调用方法" class="headerlink" title="方法可以调用方法"></a>方法可以调用方法</h4><h2 id="练习3-对象数组"><a href="#练习3-对象数组" class="headerlink" title="==练习3==对象数组"></a>==练习3==对象数组</h2><h4 id="对象数组-题目"><a href="#对象数组-题目" class="headerlink" title="==对象数组==题目"></a>==对象数组==题目</h4><p>定义类Student，包含三个属性：学号number(int)，年级state(int)，成绩score(int)。 创建20个学生对象，学号为1到20，年级和成绩都由随机数确定。</p><p>问题一：打印出3年级(state值为3）的学生信息。</p><p>问题二：使用冒泡排序按学生成绩排序，并遍历所有学生信息</p><p>提示：</p><ol><li><p>生成随机数：Math.random()，返回值类型double; </p></li><li><p>四舍五入取整：Math.round(double d)，返回值类型long。</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Practice5</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建student类型的数组</span>        <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//自己定义的类，引用型，可以给自己赋值</span>        <span class="token comment">//2.通过循环给每个数组元素赋值</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>number <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token class-name">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//打印三年级学生的信息</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>state <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"三年级的学生的成绩"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token class-name">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"学生成绩排序"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//使用冒泡排序排序学生成绩</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>score <span class="token operator">></span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>score<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token class-name">Student</span> temp <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                    stus<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    stus<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> stus<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            stus<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token class-name">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 定义学生类 */</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> number<span class="token punctuation">;</span>    <span class="token keyword">int</span> state<span class="token punctuation">;</span>    <span class="token keyword">int</span> score<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Information</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"number: "</span> <span class="token operator">+</span> number <span class="token operator">+</span> <span class="token string">" state："</span> <span class="token operator">+</span> state <span class="token operator">+</span> <span class="token string">" score："</span> <span class="token operator">+</span> score<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-6-再谈方法"><a href="#4-6-再谈方法" class="headerlink" title="4.6 再谈方法"></a>4.6 再谈方法</h2><h3 id="4-6-1-方法的重载"><a href="#4-6-1-方法的重载" class="headerlink" title="4.6.1 方法的重载"></a>4.6.1 方法的重载</h3><h4 id="重载的概念："><a href="#重载的概念：" class="headerlink" title="重载的概念："></a>重载的概念：</h4><p>在同一个类中，允许存在一个以上的同名方法，只要它们的参数个数或者参数类型不同即可</p><h4 id="重载的特点："><a href="#重载的特点：" class="headerlink" title="重载的特点："></a>重载的特点：</h4><p>与返回值类型无关，只看参数列表，且参数列表必须不同。(参数个数或参数类型)。调用时，根据方法参数列表的不同来区别。</p><p>总结：“两同一不同”：相同类中，相同方法名</p><p>参数列表不同：参数个数不同，参数的类型不同</p><p>方法的重载与权限修饰符，返回值类型，形参名都没有关系</p><p>如何确定调用了一个类的那个方法？</p><ul><li>通过方法名</li><li>通过形参列表的个数和类型</li></ul><h4 id="重载实例"><a href="#重载实例" class="headerlink" title="重载实例"></a>重载实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * @author Jinxin Li * @create 2020-07-29 20:37 * 定义三个重载方法max()， * 第一个方法求两个int值中的最大值， * 第二个方法求两个double值中的最大值， * 第三个方法求三个double值中的最大值，并分别调用三个方法。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HomeWork2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">HomeWork2</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HomeWork2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">8.7</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.7</span><span class="token punctuation">,</span> <span class="token number">10.9</span><span class="token punctuation">,</span> <span class="token number">6.8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m <span class="token operator">></span> n <span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> m <span class="token operator">></span> n <span class="token operator">?</span> m <span class="token operator">:</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">double</span> m<span class="token punctuation">,</span> <span class="token keyword">double</span> n<span class="token punctuation">,</span> <span class="token keyword">double</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span>  m <span class="token operator">></span> n <span class="token operator">?</span> <span class="token punctuation">(</span>m <span class="token operator">></span> l <span class="token operator">?</span> m <span class="token operator">:</span> l<span class="token punctuation">)</span> <span class="token operator">:</span> <span class="token punctuation">(</span>n <span class="token operator">></span> l <span class="token operator">?</span> n <span class="token operator">:</span> l<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-2-对象的使用：-匿名对象的使用"><a href="#4-6-2-对象的使用：-匿名对象的使用" class="headerlink" title="4.6.2 对象的使用：==匿名对象的使用=="></a>4.6.2 对象的使用：==匿名对象的使用==</h3><p>我们也可以不定义对象的句柄，而直接调用这个对象的方法。这样的对象叫做匿名对象。</p><p>如：<strong>new Person().shout();</strong> </p><p>使用情况</p><p>如果对一个对象只需要进行一次方法调用，那么就可以使用匿名对象。 </p><p>我们经常将==匿名对象作为实参==传递给一个方法调用。 </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-29 19:00 * 匿名调用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcealableNameTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">new</span> <span class="token class-name">CallPhone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token class-name">PhoneCalling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//匿名调用</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">CallPhone</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> <span class="token class-name">PhoneNumber</span> <span class="token operator">=</span> <span class="token number">12231</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">PhoneCalling</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">PhoneNumber</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-3-可变个数的形参"><a href="#4-6-3-可变个数的形参" class="headerlink" title="4.6.3 可变个数的形参"></a>4.6.3 可变个数的形参</h3><p>测试java中方法的可变形参的使用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token string">"普通形参的方法"</span><span class="token punctuation">.</span>sout<span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//可变形参的形式</span>    <span class="token string">"可变形参的方法"</span><span class="token punctuation">.</span>sout<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>格式：数据类型  … 参数名</p></blockquote><h4 id="说明：-1"><a href="#说明：-1" class="headerlink" title="说明："></a>说明：</h4><ul><li>在调用==可变形参==的方式时，可以给可变形参赋值的参数个数为：0个，1个，2个，…</li><li>在main函数进行调用时，优先寻找存在指定参数个数的重载方法进行代入，但是一般如果已经存在可变形参的方法，就不会继续编写其重载的其他方法</li><li>可变形参的方法在同一个类中，能够与相同方法名的多个方法构成重载</li><li>可变形参的方法a 与 参数同类型的数组的形参的方法b，不能在一个类中同时声明,不会发生重载</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//可变形参与数组</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"可变形参的方法"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> sum <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p><img src="images/image-20200731182018027.png" alt="image-20200731182018027"></p></blockquote><p>可以看到其实可变个数的形参其实在编译器中被视为数组，靠的是数组来进行处理不同个数的形参</p><ul><li>可变形参必须在参数列表的最后。（编译器不明白你少个）</li></ul><p>其实可以理解，因为在参数列表中，如果你写在前面，则编译器无法判断你写在后面的数是否属于你的可变形参的数量。</p><ul><li>可变形参要求只有一个可变形参</li></ul><h3 id="4-6-3-0-数组的println-char"><a href="#4-6-3-0-数组的println-char" class="headerlink" title="4.6.3.0 数组的println(==char[]==)"></a>4.6.3.0 数组的println(==char[]==)</h3><p>一般如果对于数组而言，数组打印的是地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrintArrayTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//地址值</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">,</span><span class="token string">'b'</span><span class="token punctuation">,</span><span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token number">0.00</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr1<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//abc</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token number">123.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"abc"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而在println中存在char[] 数组类型，println能够直接打印</p><h3 id="4-6-4-变量间的传递规则"><a href="#4-6-4-变量间的传递规则" class="headerlink" title="4.6.4 变量间的传递规则"></a>4.6.4 变量间的传递规则</h3><p><strong>基本数据类型</strong> 传递的是基本数据类型变量保存的数据值。</p><p><strong>引用数据类型</strong> 传递的是引用数据类型变量保存的地址值。</p><p>形参：方法声明时，小括号内声明的参数</p><p>实参：方法调用时，实际传递过去的参数</p><h4 id="lt-1-gt-方法的参数传递机制：值传递机制"><a href="#lt-1-gt-方法的参数传递机制：值传递机制" class="headerlink" title="&lt;1&gt; 方法的参数传递机制：值传递机制"></a>&lt;1&gt; 方法的参数传递机制：值传递机制</h4><p>交换1：方法内交换两个变量的值</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//交换两个变量的值</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">;</span>    m <span class="token operator">=</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"m = "</span> <span class="token operator">+</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"n = "</span> <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面可以看出在main方法中，直接对参数进行</p><p>交换2：调用方法，实现变量的交换</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接上述程序</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueTransferTest1</span> <span class="token punctuation">&#123;</span>    main<span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token comment">//定义新的变量</span>    valueTransferTest1 test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueTransferTest1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    test<span class="token punctuation">.</span><span class="token function">swap</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>        sout<span class="token punctuation">.</span>m<span class="token punctuation">;</span>    sout<span class="token punctuation">.</span>n<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//定义交换的方法</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp <span class="token operator">=</span> m<span class="token punctuation">;</span>    m <span class="token operator">=</span> n<span class="token punctuation">;</span>    n <span class="token operator">=</span> temp<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//结果并没有转换过来</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>可以得出在上述方法中，参数并没有被转换过来</li><li>在方法的使用中，对于基本数据类型来讲，将实参定义传入到方法中，与本来定义的变量不同，仅仅将数值传递过去，完全属于两套变量</li></ul><h3 id="例题3-方法的参数传递"><a href="#例题3-方法的参数传递" class="headerlink" title="==例题3 方法的参数传递=="></a>==例题3 方法的参数传递==</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-31 11:14 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ValueChange</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span> args<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ValueChange</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ValueChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建新对象</span>        test<span class="token punctuation">.</span><span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">first</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> v <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">25</span><span class="token punctuation">;</span>        <span class="token function">second</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">second</span><span class="token punctuation">(</span><span class="token class-name">Value</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        v<span class="token punctuation">.</span>i <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token class-name">Value</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Value</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span>i <span class="token operator">+</span> <span class="token string">" "</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Value</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">15</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165720.png" alt=" "></p><h3 id="4-6-4-对象数组-指定索引进行交换"><a href="#4-6-4-对象数组-指定索引进行交换" class="headerlink" title="4.6.4==对象数组==指定索引进行交换"></a>4.6.4==对象数组==指定索引进行交换</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**     * 交换stus数组中指定的index1和index2位置上的元素     * @param stus     * @param index1     * @param index2     */</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Student</span><span class="token punctuation">[</span><span class="token punctuation">]</span> stus<span class="token punctuation">,</span><span class="token keyword">int</span> index1<span class="token punctuation">,</span><span class="token keyword">int</span> index2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> tempStudent <span class="token operator">=</span> stus<span class="token punctuation">[</span>index1<span class="token punctuation">]</span><span class="token punctuation">;</span>        stus<span class="token punctuation">[</span>index1<span class="token punctuation">]</span> <span class="token operator">=</span> stus<span class="token punctuation">[</span>index2<span class="token punctuation">]</span><span class="token punctuation">;</span>        stus<span class="token punctuation">[</span>index2<span class="token punctuation">]</span> <span class="token operator">=</span> tempStudent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//错误的写法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token class-name">Student</span> s1<span class="token punctuation">,</span><span class="token class-name">Student</span> s2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Student</span> tempStudent <span class="token operator">=</span> s1<span class="token punctuation">;</span>        s1 <span class="token operator">=</span> s2<span class="token punctuation">;</span>        s2 <span class="token operator">=</span> tempStudent<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-6-5-递归（recursion）"><a href="#4-6-5-递归（recursion）" class="headerlink" title="4.6.5 递归（recursion）"></a>4.6.5 递归（recursion）</h3><p>一个方法体内调用它自身</p><p>递归方法：一个方法体内调用它自身。</p><ul><li>方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。</li><li>递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-07-31 11:58 * * 递归方法：一个方法体内调用它自身。 * 方法递归包含了一种隐式的循环，它会重复执行某段代码，但这种重复执行无须循环控制。 * 递归一定要向已知方向递归，否则这种递归就变成了无穷递归，类似于死循环。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RecurionTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">RecurionTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RecurionTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getSum</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">getSum1</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//计算1-100自然数的和,并返回</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>i <span class="token operator">&lt;=</span> num<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> sum<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归举例1：计算1-100自然数的和,并返回</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getSum1</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> num <span class="token operator">+</span> <span class="token function">getSum1</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归举例2:n!</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">multiply</span><span class="token punctuation">(</span><span class="token keyword">int</span> num<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>num <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> num <span class="token operator">*</span> <span class="token function">multiply</span><span class="token punctuation">(</span>num <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归举例3:已知有一个数列：f(0) = 1,f(1) = 4,f(n+2)=2*f(n+1) + f(n),</span>    <span class="token comment">//其中n是大于0的整数，求f(10)的值。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span><span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token function">f</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归举例4:已知一个数列：f(20) = 1,f(21) = 4,f(n+2) = 2*f(n+1)+f(n),</span>    <span class="token comment">//其中n是大于0的整数，求f(10)的值。</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">func</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span> <span class="token operator">*</span> <span class="token function">func</span><span class="token punctuation">(</span>n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//递归举例5：斐波那契数列(Fibonacci)</span>    <span class="token comment">//  1  1  2  3  5  8  13  21  34  55</span>    <span class="token comment">//  规律：一个数等于前两个数之和： f(n) = f(n - 1) + f(n - 2)</span>    <span class="token comment">//递归举例6：汉诺塔</span>    <span class="token comment">//递归举例7:遍历指定文件目录下的所有文件名</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">printFileName</span><span class="token punctuation">(</span><span class="token class-name">File</span> dir<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">isFile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//是文件</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dir<span class="token punctuation">.</span><span class="token function">getAbsolutePath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//是文件目录</span>            <span class="token class-name">File</span><span class="token punctuation">[</span><span class="token punctuation">]</span> files <span class="token operator">=</span> dir<span class="token punctuation">.</span><span class="token function">listFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> files<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token function">printFileName</span><span class="token punctuation">(</span>files<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//拓展：计算指定文件目录的大小、删除指定的文件目录</span>    <span class="token comment">//递归举例8:快速排序</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-7-面向对象特征一：-封装与隐藏"><a href="#4-7-面向对象特征一：-封装与隐藏" class="headerlink" title="4.7 面向对象特征一：==封装与隐藏=="></a>4.7 面向对象特征一：==封装与隐藏==</h2><p>private体现封装性</p><h3 id="4-7-1-封装性的引入"><a href="#4-7-1-封装性的引入" class="headerlink" title="4.7.1 封装性的引入"></a>4.7.1 封装性的引入</h3><p>我们在创建了类的对象以后，可以通过”对象.属性”的方式给对象的属性赋值。</p><p>此时，对象的属性的赋值需要满足相应的数据类型和取值范围。在此之外，实际问题中可能还有其他的一些限制条件。（比如：legs要求是正数、偶数、0~30）</p><p>那么该如何添加限制条件呢？</p><p>给属性提供公共（public）的setXxx()方法用于设置属性的值。在方法内，可以添加额外的限制条件。</p><p>给属性提供公共（public）的getXxx()方法用于获取属性的值。在方法内，可以添加额外的限制条件。</p><p>同时，将类中的属性xxx，设置为私有的（private）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Animal</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"大黄"</span><span class="token punctuation">;</span><span class="token comment">//        a1.age = 5;</span>        a1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        a1.legs = -4;</span>        a1<span class="token punctuation">.</span><span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(a1.legs);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a1<span class="token punctuation">.</span><span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"！！！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        a1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        a1.sleep();</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token comment">//动物类</span>    <span class="token comment">//属性</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> legs<span class="token punctuation">;</span><span class="token comment">//腿的个数</span>    <span class="token comment">//方法</span>    <span class="token comment">//给legs属性赋值的方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLegs</span><span class="token punctuation">(</span><span class="token keyword">int</span> l<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>l <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> l <span class="token operator">&lt;=</span> <span class="token number">30</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            legs <span class="token operator">=</span> l<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输入的数据不合法！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//获取legs属性值的方法</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getLegs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> legs<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//提供关于age属性的set和get方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        age <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物进食"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物休息"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span>name <span class="token operator">+</span> <span class="token string">", age = "</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", legs = "</span> <span class="token operator">+</span>legs<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-7-2-封装性的体现"><a href="#4-7-2-封装性的体现" class="headerlink" title="4.7.2 封装性的体现"></a>4.7.2 封装性的体现</h3><p>封装性的体现：体现为4种不同的权限:（从小到大）private &lt; 缺省 &lt; protected &lt; public</p><p>体现之一：私有化类的属性，提供公共的get和set方法，用于获取和设置此属性的值。</p><p>体现之二：私有化类的方法，表示此方法仅在类内部使用。不会暴露给类外使用。</p><p>体现之三：单例模式（涉及到私有化构造器）（后面讲）</p><p>通过使用4种不同的权限修饰类及类的内部结构，从而体现被修饰的结构在调用时的可见性的大小！</p><p>三 4种不同的权限修饰符：private &lt; 缺省 &lt; protected &lt; public</p><p>4种不同的权限修饰符可以用来修饰类的内部结构：属性、方法、构造器、内部类。</p><p>修饰类的话，仅能使用2种权限：缺省 、 public</p><table><thead><tr><th><strong>修饰符</strong></th><th><strong>类内部</strong></th><th><strong>同一个包</strong></th><th><strong>不同包的子类</strong></th><th><strong>同一个工程</strong></th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>(缺省)</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><h3 id="练习-Person"><a href="#练习-Person" class="headerlink" title="练习==Person=="></a>练习==Person==</h3><p>创建程序,在其中定义两个类：Person和PersonTest类。定义如下：</p><p>用setAge()设置人的合法年龄(0~130)，用getAge()返回人的年龄。</p><p>在PersonTest类中实例化Person类的对象b，</p><p>调用setAge()和getAge()方法，体会Java的封装性。</p><table><thead><tr><th>Person</th></tr></thead><tbody><tr><td>-age:int</td></tr><tr><td>+setAge(i:  int)  +getAge():  int</td></tr></tbody></table><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-31 16:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PracticeAge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            age <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-8-类的成员之三-构造器（构造方法）"><a href="#4-8-类的成员之三-构造器（构造方法）" class="headerlink" title="4.8 类的成员之三 构造器（构造方法）"></a>4.8 类的成员之三 构造器（构造方法）</h2><p>构造器的结构 修饰器+类名 不需要声明返回类型，因为不属于方法</p><h3 id="4-8-1-构造器的作用"><a href="#4-8-1-构造器的作用" class="headerlink" title="4.8.1 构造器的作用"></a>4.8.1 构造器的作用</h3><p>1.创建类的对象</p><p>2.给对象的属性初始化赋值（构造对象）</p><h3 id="4-8-2-关于构造器的说明"><a href="#4-8-2-关于构造器的说明" class="headerlink" title="4.8.2 关于构造器的说明"></a>4.8.2 关于构造器的说明</h3><p>构造器的默认权限取决于类的权限</p><p>如果没有显式声明类的构造器的话，则系统会默认提供一个空参的构造器</p><p>构造器声明格式：权限修饰符 类名（形参列表）</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>类中可以声明多个构造器，彼此之间构成重载</p><p>如果用户一旦显式的声明了类的构造器，则系统不再提供参数的构造器</p><p>类中一定会声明构造器</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在前面定义的Person类中添加构造器，利用构造器设置所有人的age属性初始值都为18。</span><span class="token keyword">package</span> <span class="token class-name">AfterClass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-07-31 16:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PracticeAge</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        b<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//声明构造器，不要返回值类型</span>        age <span class="token operator">=</span> c<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i <span class="token operator">>=</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;=</span> <span class="token number">130</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            age <span class="token operator">=</span> i<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-8-3-构造器给对象赋值的与其他赋值的先后顺序"><a href="#4-8-3-构造器给对象赋值的与其他赋值的先后顺序" class="headerlink" title="4.8.3 构造器给对象赋值的与其他赋值的先后顺序"></a>4.8.3 构造器给对象赋值的与其他赋值的先后顺序</h3><ol><li>默认赋值</li><li>显式赋值</li><li>构造器中赋值</li><li>创建了对象以后，通过“对象.属性”或者对象.方法“的方式给属性赋值</li></ol><p>赋值的先后顺序：</p><p>1,2,3,4；</p><h2 id="4-9-拓展知识-JavaBean"><a href="#4-9-拓展知识-JavaBean" class="headerlink" title="4.9 拓展知识 JavaBean"></a>4.9 拓展知识 JavaBean</h2><p>所谓javaBean，是指符合如下标准的Java类：</p><ul><li>类是公共的</li><li>有一个无参的公共的构造器</li><li>有属性，且有对应的get、set方法</li></ul><h4 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">,</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setId</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        name <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-9-1-UML类图"><a href="#4-9-1-UML类图" class="headerlink" title="4.9.1 UML类图"></a>4.9.1 UML类图</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165733.png" alt="image-20200802205312976"></p><h2 id="4-11-关键字-this-的使用"><a href="#4-11-关键字-this-的使用" class="headerlink" title="4.11 关键字==this==的使用"></a>4.11 关键字==this==的使用</h2><p>this通过<code>this.</code>可以调用当前类的属性，方法，构造器</p><h3 id="4-11-1-为什么调用构造器"><a href="#4-11-1-为什么调用构造器" class="headerlink" title="4.11.1 为什么调用构造器"></a>4.11.1 为什么调用构造器</h3><p><code>this</code></p><ol><li>通常省掉</li></ol><p>表示当前属性或方法的调用者，即当前对象或当前正在创建的对象。但是我们通常情况下都省略了此”this.”</p><ol start="2"><li>在特殊情况下，此”this.”不能省略：</li></ol><p>当方法中或构造器中定义的局部变量（包含：形参）与当前类的属性==同名==时，为了区分二者。在表示属性时，必须显式的加上”this.”,表明调用的是当前类的属性，而非局部变量。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   <span class="token keyword">this</span><span class="token punctuation">.</span>a <span class="token operator">=</span> a<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-11-2-this调用构造器的说明"><a href="#4-11-2-this调用构造器的说明" class="headerlink" title="4.11.2 this调用构造器的说明"></a>4.11.2 this调用构造器的说明</h3><h4 id="为什么要使用this调用本类的构造器"><a href="#为什么要使用this调用本类的构造器" class="headerlink" title="为什么要使用this调用本类的构造器"></a>为什么要使用this调用本类的构造器</h4><p>有时候不同构造器之间有一些代码比较冗杂，通过调用，然后添加的方式可以避免</p><blockquote><p>调用格式：this（形参列表）//形参列表与被调用构造器的形参列表相同</p></blockquote><p>① 我们可以在类的构造器中显式的声明”this(形参列表)”的方式，表示调用本类中的其他构造器。</p><p>② “this(形参列表)” 必须声明在类的构造器的首行！</p><p>③ 在一个类的构造器中，最多只能声明一个”this(形参列表)”的结构。</p><p>④ 如果一个类中声明了n个构造器，则最多有 n - 1 个构造器中可以使用”this(形参列表)”的结构。</p><h4 id="5-谁调用方法，谁是this"><a href="#5-谁调用方法，谁是this" class="headerlink" title="5.谁调用方法，谁是this"></a>5.谁调用方法，谁是this</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java">示例：纯<span class="token keyword">this</span>的应用<span class="token comment">//main</span>girl<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span>boy<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//girl引用5</span><span class="token comment">//girl对象中的方法</span><span class="token keyword">public</span>  <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Boys</span> boy<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想嫁给"</span> <span class="token operator">+</span> boy<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    boy<span class="token punctuation">.</span><span class="token function">marry</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//代表的是引用这个方法的对象 = boy.marry(girl)</span><span class="token punctuation">&#125;</span><span class="token comment">//以下boy对象中的方法</span> <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">marry</span><span class="token punctuation">(</span><span class="token class-name">Girl</span> girl<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>     <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我想娶"</span> <span class="token operator">+</span> girl<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="==示例=="></a>==示例==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PersonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        p2<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//属性</span>        <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>      <span class="token comment">//------------------------------------</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//声明创建对象过程中，必须要执行的操作</span>        <span class="token comment">//...</span>        <span class="token comment">//...</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//调用其他构造器，可以调用本类内的构造器</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//引用方法</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"name = "</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">", age = "</span> <span class="token operator">+</span> age<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="4-10-关键字-package"><a href="#4-10-关键字-package" class="headerlink" title="4.10 关键字==package=="></a>4.10 关键字==package==</h2><p>package：包</p><p> 我们编写的java类，通常都放在不同的包下。即：指名类所在的包。目的：便于管理。</p><p>使用package声明一个包，放在==java源文件的开头==。</p><p>包名，==要全部小写==属于标识符的一种。在定义时需要满足标识符的命名规则、规范、“见名知意”</p><p>每”.”一次，就代表一层文件目录。</p><p>同一个包内，不允许声明相同名的结构：类、接口。</p><p>不同的包下，可以声明相同名的结构：类、接口</p><h2 id="4-11-关键字-import"><a href="#4-11-关键字-import" class="headerlink" title="4.11 关键字 ==import=="></a>4.11 关键字 ==import==</h2><ol><li><p>置于package包声明与java类的定义之间，声明导入的结构</p></li><li><p>如果需要引入其他包下的结构（类，接口），此时需要引入import的结构</p></li></ol><p>==如果是java.lang下的结构，则此时可以省掉import java.lang下的结构==</p><ol start="3"><li><p>如果需要导入多个结构，则并列声明即可</p></li><li><p><code>java.util.*</code>指的是因为util下的所有结构（类，接口），当五个以上会自动合并</p></li><li><p>如果已经导入了a.*结构了，此时如果要使用a包的子包下的结构，则仍然需要导入a的子包。</p></li><li><p>如果类中使用了不同包下同名的类，则至少有一个需要使用全类名的方式表示</p></li></ol><p>lang包下不用导入，就可以使用</p><p>当使用包下的文件，达到五个时，会变成.*的方式，表示可以导入java.util的所有结构</p><p>子包，lang包下子包也需要导入</p><h1 id="第5章-面向对象编程（中）"><a href="#第5章-面向对象编程（中）" class="headerlink" title="第5章 面向对象编程（中）"></a>第5章 面向对象编程（中）</h1><h2 id="5-1-面向对象特征二：-继承性"><a href="#5-1-面向对象特征二：-继承性" class="headerlink" title="5.1 面向对象特征二：==继承性=="></a>5.1 面向对象特征二：==继承性==</h2><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165740.png" alt="image-20200802203033696"></p><h3 id="5-1-1-为什么要使用继承性"><a href="#5-1-1-为什么要使用继承性" class="headerlink" title="5.1.1 为什么要使用继承性"></a>5.1.1 为什么要使用继承性</h3><p>继承性减少了代码冗杂，提高了代码的复用性</p><p>有利于功能拓展</p><p>继承让类与类之间产生了练习，提供了多态的前提</p><p>注意：不要仅为了获取其他类中的一个功能而去继承</p><h3 id="5-1-2-格式"><a href="#5-1-2-格式" class="headerlink" title="5.1.2 格式"></a>5.1.2 格式</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//A : 子类 SubcClass</span><span class="token comment">//B : 父类 SuperClass 超类，基类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-1-3-具体使用说明"><a href="#5-1-3-具体使用说明" class="headerlink" title="5.1.3 具体使用说明"></a>5.1.3 具体使用说明</h3><p>子类可以根据自己的需要，额外定义自己的特征</p><p>一个父类可以生命多个子类</p><p>直接父类 间接父类 </p><p>当一个类没有显式的声明父类时。则其默认的父类为：java.lang.object类</p><p>子类不能直接访问父类中似有的private的成员变量和方法</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165745.png" alt="image-20200802203937897"></p><p>不允许有多个父类，但是可以多层继承</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165751.png" alt="image-20200802204005820"></p><h3 id="5-1-4-继承性与可变形参练习"><a href="#5-1-4-继承性与可变形参练习" class="headerlink" title="5.1.4 继承性与可变形参练习"></a>5.1.4 继承性与可变形参练习</h3><p>形参列表的写入方式是以父类形式加载的</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>practice<span class="token punctuation">.</span>afterclass</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-05 18:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InterviewTest2</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Base</span> base <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        base<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//父类方式加载形参列表</span>        <span class="token class-name">Sub</span> s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Sub</span><span class="token punctuation">)</span>base<span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">,</span> <span class="token keyword">int</span> c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"sub_2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-2-方法的重写"><a href="#5-2-方法的重写" class="headerlink" title="5.2 方法的重写"></a>5.2 方法的重写</h2><p>重载 两同一不同 参数列表不同</p><p>测试方法的重写</p><p>（override、overwrite）</p><p>子类可以更大</p><p>权限应该更大</p><p>测试方法的重写（override / overwrite）</p><h3 id="5-2-1-重写"><a href="#5-2-1-重写" class="headerlink" title="5.2.1 重写"></a>5.2.1 重写</h3><h4 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h4><p>在子类继承父类以后，子类可以对父类中同名同参数的方法进行覆盖操作。此覆盖操作，就称为方法的重写。</p><p>当创建子类对象以后，通过子类对象调用重写的父类的方法时，执行的就是子类重写父类的方法。</p><h4 id="细节要求"><a href="#细节要求" class="headerlink" title="细节要求"></a>细节要求</h4><blockquote><p>权限修饰符  返回值类型  方法名（形参列表）{}</p></blockquote><p>子类重写的方法与父类被重写的方法：</p><p>==方法名、形参列表，权限修饰符，返回类型== 相同</p><p>子类可以拥有更大的权限修饰符，且不可以重写父类中private的方法</p><p>父类被重写的方法返回值类型为引用数据类型时，子类重写的方法的返回值类型可以与父类此方法的返回值类型的相同</p><p>或是父类此方法返回值类型的子类</p><p>==属性、构造器==不存在重写的概念</p><h3 id="5-2-2-重写重载的虚拟机分配"><a href="#5-2-2-重写重载的虚拟机分配" class="headerlink" title="5.2.2 重写重载的虚拟机分配"></a>5.2.2 重写重载的虚拟机分配</h3><p>重载：编译阶段，虚拟机会根据参数的静态类型决定使用哪个重载版本（方法在实际运行时内存中的入口地址）,即静态分配</p><p>重写：当子类重新定义了父类的方法实现后，父类指针根据赋给他的不同的子类指针，动态的调用属于子类的该函数，在运行期根据子类（实际类型）确定方法的执行版本（方法在实际运行时内存中的入口地址）即动态分派。</p><h2 id="5-3-四种权限修饰符"><a href="#5-3-四种权限修饰符" class="headerlink" title="5.3 四种权限修饰符"></a>5.3 四种权限修饰符</h2><table><thead><tr><th>修饰符</th><th>类内部</th><th>同一个包</th><th>不同包的子类</th><th>同一个工程</th></tr></thead><tbody><tr><td>private</td><td>Yes</td><td></td><td></td><td></td></tr><tr><td>(缺省)</td><td>Yes</td><td>Yes</td><td></td><td></td></tr><tr><td>protected</td><td>Yes</td><td>Yes</td><td>Yes</td><td></td></tr><tr><td>public</td><td>Yes</td><td>Yes</td><td>Yes</td><td>Yes</td></tr></tbody></table><h2 id="5-4-关键字super"><a href="#5-4-关键字super" class="headerlink" title="5.4 关键字super"></a>5.4 关键字super</h2><h3 id="5-4-1-super的使用"><a href="#5-4-1-super的使用" class="headerlink" title="5.4.1 super的使用"></a>5.4.1 super的使用</h3><p>可以调用属性，方法，构造器</p><h4 id="lt-1-gt-super-调用属性-（可以理解为：父类的）"><a href="#lt-1-gt-super-调用属性-（可以理解为：父类的）" class="headerlink" title="&lt;1&gt; super 调用属性 （可以理解为：父类的）"></a>&lt;1&gt; super 调用属性 （可以理解为：父类的）</h4><p>继承之后，父类的属性也已经全被被调用过来</p><p>super和this的用法相像，this代表本类对象引用，父类代表父类的空间标识</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165757.png" alt="image-20200803104143178"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token comment">//现在当前类内寻找name，再从继承的父类中去找</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="lt-2-gt-super调用方法"><a href="#lt-2-gt-super调用方法" class="headerlink" title="&lt;2&gt; super调用方法"></a>&lt;2&gt; super调用方法</h4><p>在继承父类以后，可以在子类的方法内，通过super.属性或super.方法。调用父类中的属性方法</p><p>通常省略</p><p>显式声明的特殊情况</p><p>&lt;1&gt; 子类父类中同名属性</p><p>&lt;2&gt; 为了调用父类中被重写的方法，则需要使用 super 调用重写前的父类方法</p><h4 id="lt-3-gt-super调用构造器"><a href="#lt-3-gt-super调用构造器" class="headerlink" title="&lt;3&gt; super调用构造器"></a>&lt;3&gt; super调用构造器</h4><p>调用super构造器可以在子类构造中的默认参数里修改父类里的属性</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//父类中构造器</span> <span class="token keyword">public</span> <span class="token function">circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//子类中构造器</span><span class="token keyword">public</span> <span class="token class-name">Cylinder</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//修改了父类中的属性</span>        length <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li>this(形参列表)调用本类中重载的构造器</li><li>子类的构造器中，使用super（形参列表） 结构，表示调用父类中指定的构造器</li><li>构造器只能使用this与super之一，放在首行</li><li>当构造器首行没有显式使用this（形参列表）和super（形参列表） 默认super（）</li><li>类的构造器首行，一定会使用this或者super构造器</li><li>则最多有n-1个构造器使用了“this（形参列表）”，则剩下的一个一定使用“super”构造器。</li></ol><p>==注意== ：如果子类构造器中既未显式调用父类或者本类的构造器，且父类中又没有无参的构造器，则编译出错</p><h2 id="5-5-子类对象实例化过程"><a href="#5-5-子类对象实例化过程" class="headerlink" title="5.5 子类对象实例化过程"></a>5.5 子类对象实例化过程</h2><p>1.从结果来：体现为继承性</p><p>创建一个子类的对象时，子类中获取了父类中声明 的 属性 方法</p><p>2.从过程中：</p><p>从上往下加载类，加载所有类</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165802.png" alt="image-20200803175722803"></p><h2 id="5-6-面向对象特征三-多态性"><a href="#5-6-面向对象特征三-多态性" class="headerlink" title="5.6 面向对象特征三 ==多态性=="></a>5.6 面向对象特征三 ==多态性==</h2><p>new person类的子类的对象成为多态</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> person<span class="token punctuation">;</span><span class="token comment">//父类</span><span class="token keyword">class</span> man <span class="token keyword">extends</span> person<span class="token punctuation">;</span><span class="token comment">//子类</span>person p1 <span class="token operator">=</span> <span class="token keyword">new</span> man<span class="token punctuation">;</span><span class="token comment">//父类声明器，声明子类</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>多态性 多种形态</p><p>子类对象的多态性：父类的引用指向子类的对象，子类的对象赋给父类的引用</p><h3 id="5-6-1-多态性的说明"><a href="#5-6-1-多态性的说明" class="headerlink" title="5.6.1 多态性的说明"></a>5.6.1 多态性的说明</h3><h4 id="狭义理解多态性"><a href="#狭义理解多态性" class="headerlink" title="狭义理解多态性"></a>狭义理解多态性</h4><p>父类引用指向子类对象，调用方法时会调用子类的实现，而不是父类的实现，这叫多态性。</p><p>为什么重写属于多态性</p><p>[重写的虚拟机分配](#5.2.1 重写)</p><h4 id="广义理解多态性"><a href="#广义理解多态性" class="headerlink" title="广义理解多态性"></a>广义理解多态性</h4><p>多态性可以分为两类，即==编译时的多态性==跟==运行时的多态性==</p><p>函数重载属于编译时的多态性</p><p>子类重写方法属于运行时的多态性</p><p>严格意义对台不包括编译时多态</p><p>调用子类特有方法时，需要强转，但是一般是程序设计有问题，才会需要调用子类特有方法</p><h4 id="lt-1-gt-态的虚方法调用"><a href="#lt-1-gt-态的虚方法调用" class="headerlink" title="&lt;1&gt; 态的虚方法调用"></a>&lt;1&gt; 态的虚方法调用</h4><p>编译时只能调用父类中声明过得方法</p><p>真正执行的是，子类重写父类的方法</p><p>执行看左边 运行看右边（==注意==针对于方法）</p><p>子类中特殊的方法不能调用</p><p>可以调用子类中的重写的方法，执行的也是重写的方法</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> person<span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token keyword">void</span> <span class="token function">walk</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> man <span class="token keyword">extends</span> person<span class="token punctuation">&#123;</span>   <span class="token keyword">void</span> <span class="token function">earnmoney</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>   <span class="token annotation punctuation">@override</span>   <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token string">"eat a lot"</span><span class="token punctuation">.</span>sout   <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> test<span class="token punctuation">&#123;</span>    main<span class="token punctuation">&#123;</span>      person person1 <span class="token operator">=</span>  <span class="token keyword">new</span> man<span class="token punctuation">;</span><span class="token comment">//定义寻找方法路径</span>      person1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      person1<span class="token punctuation">.</span>earnmoney<span class="token punctuation">;</span><span class="token comment">//</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-多态性（向上转型）与-向下转型"><a href="#lt-2-gt-多态性（向上转型）与-向下转型" class="headerlink" title="&lt;2&gt; 多态性（向上转型）与 向下转型"></a>&lt;2&gt; 多态性（向上转型）与 向下转型</h4><p>向上转型，是把子类声明成父类的方法，然后通过父类调用子类中重写方法，方便程序的拓展与改用。</p><p>向下转型，是把已经把声明成父类的子类通过<code>instanceof</code>判断之后，然后使用<code>(子类类型)父类声明的子类实例</code>的方式把多态性的实例转换为原本的实例。</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165808.png" alt="image-20200804113115128"></p><h3 id="5-6-2-为什么使用多态性"><a href="#5-6-2-为什么使用多态性" class="headerlink" title="5.6.2 为什么使用多态性"></a>5.6.2 为什么使用多态性</h3><h4 id="lt-1-gt-多态性"><a href="#lt-1-gt-多态性" class="headerlink" title="&lt;1&gt; 多态性"></a>&lt;1&gt; 多态性</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-04 10:35   * * 多态性使用的举例：为什么要有多态性   */</span>   <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">&#123;</span>   <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">AnimalTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnimalTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       test<span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过调用形参的方式，new一个新的子类</span>   <span class="token punctuation">&#125;</span>   <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token class-name">Animal</span> animal<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Animal animal = new Dog()</span>       <span class="token comment">/*       方法的形参为Animal animal的引用类型，也就是说在引入的类型一般是Animal类型，但是如果引入的实例的类型是一个Animal类型的子类，就会发生多态       Animal animal = new Dog()       此时使用animal就可以调用Dog()类中的重写的animal的方法，但是不能调用Dog()类中独特的方法       若是想要调用Dog()的内部独特的方法，需要将animals向下类型转换，就是       if(animal instance of Dog())&#123;       Dog dog = (Dog)animal;       dog.shout();       此时才能调用dog类中独特的方法       &#125;           */</span>       animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       animal<span class="token punctuation">.</span><span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">//        animal.protectHome();</span>   ​    <span class="token keyword">if</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   ​        <span class="token class-name">Dog</span> dog <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>   ​        dog<span class="token punctuation">.</span><span class="token function">protectHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ​    <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>animal <span class="token keyword">instanceof</span>  <span class="token class-name">Cat</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>   ​        <span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Cat</span><span class="token punctuation">)</span>animal<span class="token punctuation">;</span>   ​        cat<span class="token punctuation">.</span><span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   ​    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span><span class="token comment">//    public void func(Dog dog)&#123;</span><span class="token comment">//        dog.eat();</span><span class="token comment">//        dog.shout();</span><span class="token comment">//    &#125;</span><span class="token comment">//</span><span class="token comment">//    public void func(Cat cat)&#123;</span><span class="token comment">//        cat.eat();</span><span class="token comment">//        cat.shout();</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物叫~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"动物进食~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"汪~汪~汪~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗吃骨头~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">protectHome</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>​        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗看家"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"喵~喵~喵~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫吃鱼~~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>​    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">catchMouse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>​        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"猫抓老鼠"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>​    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/*举例二class Account&#123;    double balance;​    public void withdraw(double amt)&#123;&#125;​    public void deposit(double amt)&#123;&#125;&#125;class CheckAccount extends Account&#123;//信用卡    double overdraft;​    public void withdraw(double amt)&#123;&#125;&#125;class SavingAccount extends Account&#123;&#125;//储蓄卡class Customer&#123;    Account acct;​    public void setAccount(Account acct)&#123; //Account acct  = new CheckAccount();​        this.acct = acct;​    &#125;&#125; */</span><span class="token comment">/*举例三数据库：mysql 、 oracle 、 sqlsever 、 db2class DataOperate&#123;​      public void addData(Connection conn,Statement st)&#123; //​         conn.do();​         st.execute();​      &#125;&#125; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-instanceof-的使用"><a href="#lt-2-gt-instanceof-的使用" class="headerlink" title="&lt;2&gt; instanceof 的使用"></a>&lt;2&gt; instanceof 的使用</h4><ul><li><p>a instanceof A：判断对象a是否是类型A的实例。如果是，返回true。否则，返回false.</p></li><li><p>如果a instanceof A返回true，则a instanceof SuperA也一定返回true.</p><p>其中，SuperA是A的父类</p></li></ul><h3 id="5-6-3-多态性练习"><a href="#5-6-3-多态性练习" class="headerlink" title="5.6.3 多态性练习"></a>5.6.3 多态性练习</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165814.png" alt="image-20200805110018431"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//父类 GeometricObject</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-05 11:01 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setColor</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>color <span class="token operator">=</span> color<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>weight <span class="token operator">=</span> weight<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//矩形子类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRectangle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> width<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> height<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyRectangle</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">,</span> <span class="token keyword">double</span> height<span class="token punctuation">,</span> <span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getWidth</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWidth</span><span class="token punctuation">(</span><span class="token keyword">double</span> width<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>width <span class="token operator">=</span> width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getHeight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token keyword">double</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> height<span class="token operator">*</span>width<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//圆形子类</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-05 11:05 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token keyword">extends</span> <span class="token class-name">GeometricObject</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token class-name">String</span> color<span class="token punctuation">,</span> <span class="token keyword">double</span> weight<span class="token punctuation">,</span> <span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>color<span class="token punctuation">,</span> weight<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">double</span> <span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Math</span><span class="token punctuation">.</span>PI<span class="token operator">*</span>radius<span class="token operator">*</span>radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-05 12:55 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> displayGeometricObject <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        displayGeometricObject testTools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">displayGeometricObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> circle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyRectangle</span> rectangle1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyRectangle</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">"white"</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        testTools<span class="token punctuation">.</span><span class="token function">disPlayArea</span><span class="token punctuation">(</span>circle1<span class="token punctuation">)</span><span class="token punctuation">;</span>        testTools<span class="token punctuation">.</span><span class="token function">disPlayArea</span><span class="token punctuation">(</span>rectangle1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circle1<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle1<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>circle1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>rectangle1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">disPlayArea</span><span class="token punctuation">(</span><span class="token class-name">GeometricObject</span> obj<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">GeometricObject</span> obj1<span class="token punctuation">,</span><span class="token class-name">GeometricObject</span> obj2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> obj1<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> obj2<span class="token punctuation">.</span><span class="token function">findArea</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    平时在一个方法内需求使用不同的父类的子类型时（比如，子类型的比较，打印），会发现你设定的参数列表都得添加实参的类型    这样当，如果同时需求多个子类型时，他们的类型各不同，就需要大量不同形参列表的方法的重载：    比如（类型1 三角形，类型2 矩形，类型3 五角形)对这个图形的面积进行打印    但是呢，我们有好多的类型图形，比如类型4 圆形，类型5 半圆形，类型6 六边形    就需要重载大量的形参列表，造成了代码的冗杂    可以直接声明父类    （父类 几何图形，父类 几何图形，父类 几何图形）    多态性：多种形态的特性，意思是父类型的引用可以指代多种形态，父类型指针可以指向其子类型对象，    将子类型归类，对其含有的共性进行引用对比，如图形的边长，面积（其中子类可以对图形的算法进行重写）    起到了拓展和延伸程序的作用，大大增加了代码可读性，减少代码冗杂     */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-7-object类的使用"><a href="#5-7-object类的使用" class="headerlink" title="5.7 object类的使用"></a>5.7 object类的使用</h2><h3 id="5-7-1-clone-的使用-未懂"><a href="#5-7-1-clone-的使用-未懂" class="headerlink" title="5.7.1 clone()的使用==未懂=="></a>5.7.1 clone()的使用==未懂==</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token comment">//Object类的clone()的使用</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CloneTest</span> <span class="token punctuation">&#123;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token class-name">Animal</span> a1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span><span class="token class-name">Animal</span> a2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Animal</span><span class="token punctuation">)</span> a1<span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始对象："</span> <span class="token operator">+</span> a1<span class="token punctuation">)</span><span class="token punctuation">;</span>a2<span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">"毛毛"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"原始对象："</span> <span class="token operator">+</span> a1<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"clone之后的对象："</span> <span class="token operator">+</span> a2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">CloneNotSupportedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token keyword">implements</span> <span class="token class-name">Cloneable</span><span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//@Override</span><span class="token comment">//public String toString() &#123;</span><span class="token comment">//return "Animal [name=" + name + "]";</span><span class="token comment">//&#125;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token class-name">Object</span> <span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">CloneNotSupportedException</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">clone</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-2-equals方法的使用"><a href="#5-7-2-equals方法的使用" class="headerlink" title="5.7.2 equals方法的使用"></a>5.7.2 equals方法的使用</h3><p>直接上实例，equals最普通用法就是比较两个字符串是否相同</p><p>==注意== <code>==</code>这个相等符判断的是字符串的地址</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//两种声明方式</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>s2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//False</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>equals原码</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> anObject<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token comment">//如果地址相同，直接相同true</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>anObject <span class="token keyword">instanceof</span> <span class="token class-name">String</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>           <span class="token class-name">String</span> anotherString <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span>anObject<span class="token punctuation">;</span>           <span class="token keyword">int</span> n <span class="token operator">=</span> value<span class="token punctuation">.</span>length<span class="token punctuation">;</span>           <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">==</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>               <span class="token keyword">char</span> v1<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> value<span class="token punctuation">;</span>               <span class="token keyword">char</span> v2<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> anotherString<span class="token punctuation">.</span>value<span class="token punctuation">;</span>               <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>               <span class="token keyword">while</span> <span class="token punctuation">(</span>n<span class="token operator">--</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                   <span class="token keyword">if</span> <span class="token punctuation">(</span>v1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> v2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                   i<span class="token operator">++</span><span class="token punctuation">;</span>               <span class="token punctuation">&#125;</span>               <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>           <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span>       <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>虽然有些地方不明白，但是可以大致分析出，具体实现靠的分析出字符串的char单个字符，逐一比较相同返回true的意思</p><p>但是在string类型中，其实是把原来的位于object中的equals()重写了。</p><p>如果没有重写Object类中的equals()。当调用equals()方法时，仍然比较的是两个</p><ul><li>   对象的地址值是否相同。（或两个对象引用是否指向了堆空间中的同一个对象）</li></ul><h4 id="lt-1-gt-重写的规则"><a href="#lt-1-gt-重写的规则" class="headerlink" title="&lt;1&gt; 重写的规则"></a>&lt;1&gt; 重写的规则</h4><p>比较两个对象的实体内容是否相同（即:对象的属性是否相同）</p><p>可以在idea中自动生成equals</p><h4 id="lt-2-gt-区别-与-equals"><a href="#lt-2-gt-区别-与-equals" class="headerlink" title="&lt;2&gt; 区别 ==  与 equals"></a>&lt;2&gt; 区别 ==  与 equals</h4><p>== 适用范围：基本与引用</p><p>equals适用引用数据类型</p><h4 id="lt-3-gt-示例-问题"><a href="#lt-3-gt-示例-问题" class="headerlink" title="&lt;3&gt; 示例==问题=="></a>&lt;3&gt; 示例==问题==</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">EqualsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Order</span> order2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1 <span class="token operator">==</span> order2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>order2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false  ---> true</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">/*    //重写Object类的equals()    //手动定义了equals()    public boolean equals(Object obj) &#123;        System.out.println("Order equals()...");        if(this == obj)&#123;            return true;        &#125;        if(obj instanceof Order)&#123;            Order order = (Order)obj;            */</span>    <span class="token comment">/*    if(this.orderId == order.orderId &amp;&amp; this.orderName.equals(order.orderName))&#123;                return true;            &#125;else&#123;                return false;            &#125;            //或者            */</span>    <span class="token comment">/*            return this.orderId == order.orderId &amp;&amp; this.orderName.equals(order.orderName);        &#125;        return false;    &#125;    */</span>    <span class="token comment">//自动重写的代码</span>      <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Order</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> orderId <span class="token operator">==</span> order<span class="token punctuation">.</span>orderId <span class="token operator">&amp;&amp;</span>                <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>orderName<span class="token punctuation">,</span> order<span class="token punctuation">.</span>orderName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//疑惑</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>手动重写要ctrl+o</p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165825.png" alt="image-20200804232841999" style="zoom:50%;" /><p>自动重写</p><p>进行向下类型转换 就是由object声明的子类型转换为本身的类型，然后根据两者的属性进行依次比较</p><h3 id="5-7-3-toString-方法的使用"><a href="#5-7-3-toString-方法的使用" class="headerlink" title="5.7.3 toString()方法的使用"></a>5.7.3 toString()方法的使用</h3><p>打印对象的引用时等同于 调用当前对象的toString的方法。</p><p>像String，包装类，file类都重写了object类中的toString方法，用于输出当前对象的实体内容</p><p>如果自定义类没有重写tostring()时，默认返回当前对象所属的类型及对象的地址值</p><p>如果我们重写，一般要求打印引用类类型的属性值</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类-------------------------------------------------</span><span class="token keyword">public</span> <span class="token keyword">class</span> toStringTest <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">1001</span><span class="token punctuation">,</span><span class="token string">"AA"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//com.atguigu.java2.Order@1540e19d -->Order[orderId = 1001, orderName = AA]</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//com.atguigu.java2.Order@1540e19d -->Order[orderId = 1001, orderName = AA]</span>        <span class="token comment">//直接打印返回的是类型与地址值</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">File</span> file1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"d:\\io\\hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>file1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//对象类---------------------------------------------------------</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Order</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> orderId<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> orderName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">,</span> <span class="token class-name">String</span> orderName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderName <span class="token operator">=</span> orderName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Order&#123;"</span> <span class="token operator">+</span>                <span class="token string">"orderId="</span> <span class="token operator">+</span> orderId <span class="token operator">+</span>                <span class="token string">", orderName='"</span> <span class="token operator">+</span> orderName <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-7-4-练习9"><a href="#5-7-4-练习9" class="headerlink" title="5.7.4 练习9"></a>5.7.4 练习9</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165831.png" alt="image-20200805191446857"></p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165836.png" alt="image-20200804234615713"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//测试类</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>inclass<span class="token punctuation">.</span>practice</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-04 15:43 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Circle</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建两个对象</span>        <span class="token class-name">Circle</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//对象类</span><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>inclass<span class="token punctuation">.</span>practice</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Objects</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-04 13:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Circle</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> color<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> weight<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>        weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        radius <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>        color <span class="token operator">=</span> <span class="token string">"white"</span><span class="token punctuation">;</span>        weight <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">equals</span><span class="token punctuation">(</span><span class="token class-name">Object</span> o<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">==</span> o<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>o <span class="token operator">==</span> <span class="token keyword">null</span> <span class="token operator">||</span> <span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> o<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> circle <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">Circle</span><span class="token punctuation">)</span> o<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">compare</span><span class="token punctuation">(</span>circle<span class="token punctuation">.</span>radius<span class="token punctuation">,</span> radius<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">hashCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Objects</span><span class="token punctuation">.</span><span class="token function">hash</span><span class="token punctuation">(</span>radius<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Circle&#123;"</span> <span class="token operator">+</span>                <span class="token string">"radius="</span> <span class="token operator">+</span> radius <span class="token operator">+</span>                <span class="token string">", color='"</span> <span class="token operator">+</span> color <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", weight="</span> <span class="token operator">+</span> weight <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-7-0-Junit单元测试类的使用"><a href="#5-7-0-Junit单元测试类的使用" class="headerlink" title="5.7.0 Junit单元测试类的使用"></a>5.7.0 Junit单元测试类的使用</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-04 16:17 * * 单元测试方法： * 一、添加jar包方式 * 1.在当前module下-new - directory。命名为：lib * 2.将 junit-4.12.jar和hamcrest-core-1.3.jar包复制到lib目录下 * 3. 选中两个jar包，右键 add as library - 选择当前的module * * 二、创建单元测试类和方法 * 1. 单元测试类要求：① 单元测试类是public的 ，并提供public权限的空参的构造器 * 2. 创建单元测试方法 *   要求：① 单元测试方法前声明有：@Test。 导包为： import org.junit.Test; *        ② 单元测试方法必须是public的、void的、没有形参的方法 * * 3. 在单元测试方法内可以定义变量、调用本类中的一般方法。 * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnitTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">+</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello,上海！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token string">"应该会比较凉快~"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token class-name">String</span> info<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"据说今晚有台风登陆。。。。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="5-8-包装类"><a href="#5-8-包装类" class="headerlink" title="5.8 包装类"></a>5.8 包装类</h2><p>针对八种基本数据类型定义相应的引用类型—包装类（封装类）</p><p>有了类的特点，就可以调用类中的方法，Java才是真正的面向对象</p><table><thead><tr><th>基本数据类型</th><th>包装类</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td>Integer</td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>boolean</td><td>Boolean</td></tr><tr><td>char</td><td>Character</td></tr></tbody></table><p>其中基本数据类型父类为number</p><p>包装类的底层</p><p>在Integer内部定了一个内部类</p><p>Integer有一个数组</p><h3 id="5-8-1-重点：掌握基本数据类型-包装类-String类之间的转换"><a href="#5-8-1-重点：掌握基本数据类型-包装类-String类之间的转换" class="headerlink" title="5.8.1 重点：掌握基本数据类型 包装类 String类之间的转换"></a>5.8.1 重点：掌握基本数据类型 包装类 String类之间的转换</h3><p>直接上实例</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165843.png" alt="image-20200804235039263"></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java3</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token comment">/** * @author Jinxin Li * @create 2020-08-04 23:52 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test00</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//基本类-->包装类</span>        <span class="token keyword">int</span> num1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//自动拆箱操作</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i1<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token class-name">Boolean</span> b2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//boolean b2 = new Boolean(b1);自动装箱，自动拆箱</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//包装类-->基本类</span>        <span class="token keyword">int</span> i2 <span class="token operator">=</span> i1<span class="token punctuation">.</span><span class="token function">intValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b3 <span class="token operator">=</span> b2<span class="token punctuation">.</span><span class="token function">booleanValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*jdk5.0 中关于基本数据类型与包装类转化时，提供了新特性：自动装箱、自动拆箱*/</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i4 <span class="token operator">=</span> i3<span class="token punctuation">;</span><span class="token comment">//自动装箱</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i4<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> i5 <span class="token operator">=</span> i4<span class="token punctuation">;</span><span class="token comment">//自动拆箱</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//包装类在前声明自动装箱，基本类型在前声明自动拆箱</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/*    基本数据类型、包装类 ---> String : 1.使用连接符  2.调用String重载的valueOf(xxx xxx)     String---> 基本数据类型、包装类：调用包装类Xxx的parseXxx(String s)方法     */</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> i1 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> i2 <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token comment">//1.使用连接符</span>        <span class="token class-name">String</span> s1 <span class="token operator">=</span> i1 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s2 <span class="token operator">=</span> i2 <span class="token operator">+</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token comment">//2.调用String重载的valueOf(xxx xxx)</span>        <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token class-name">String</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span>i1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//</span>        <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token string">"123"</span><span class="token punctuation">;</span><span class="token comment">//        s4 = "123a";//java.lang.NumberFormatException: For input string: "123a"</span><span class="token comment">//        int i3 = Integer.parseInt(s4);</span>        <span class="token keyword">int</span> i3 <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>s4<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i3 <span class="token operator">+</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"123.1"</span><span class="token punctuation">;</span>        <span class="token keyword">double</span> d1 <span class="token operator">=</span> <span class="token class-name">Double</span><span class="token punctuation">.</span><span class="token function">parseDouble</span><span class="token punctuation">(</span>s5<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>d1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"true1"</span><span class="token punctuation">;</span>        s6 <span class="token operator">=</span> <span class="token string">"TrUe"</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> b1 <span class="token operator">=</span> <span class="token class-name">Boolean</span><span class="token punctuation">.</span><span class="token function">parseBoolean</span><span class="token punctuation">(</span>s6<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-8-2-Integer缓存数组说明"><a href="#5-8-2-Integer缓存数组说明" class="headerlink" title="5.8.2 Integer缓存数组说明"></a>5.8.2 Integer缓存数组说明</h3><p>Byte/Short/Long/Character/Boolean</p><p>我们已经知道了基本类型的包装类，下面来看以下程序</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntegerTest</span> <span class="token punctuation">&#123;</span>       <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Integer</span> i <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> j <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Integer</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>i <span class="token operator">==</span> j<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>        <span class="token class-name">Integer</span> m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m <span class="token operator">==</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> x <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">Integer</span> y <span class="token operator">=</span> <span class="token number">128</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>x <span class="token operator">==</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在Integer内部定义了一个内部类IntegerCache，IntegerCache内声明并初始化了长度为256的Integer[] ， 名字为==Cache==</p><ul><li>取值范围为：new Integer(-128) 到 new Integer(127)。</li><li>当我们通过自动装箱的方式创建Integer对象时，如果对象的值在[-128,127]之间的话，则直接使用内部缓存的</li><li>Integer[]中的数据。超出此范围的话，则重新new对象。</li></ul><p>进一步，Byte \ Short \ Long \Character \ Boolean类型也类似</p><h1 id="第6章-面向对象编程（下）"><a href="#第6章-面向对象编程（下）" class="headerlink" title="第6章 面向对象编程（下）"></a>第6章 面向对象编程（下）</h1><h2 id="6-1-关键字static"><a href="#6-1-关键字static" class="headerlink" title="6.1 关键字static"></a>6.1 关键字static</h2><h3 id="6-1-1-静态变量"><a href="#6-1-1-静态变量" class="headerlink" title="6.1.1 静态变量"></a>6.1.1 静态变量</h3><p>每个对象拥有一套非静态的属性，意味着当修改一个对象的非静态属性时，不会影响其他对象此属性的值</p><p>每个对象共享类中声明的静态的属性。意味着：当通过对象修改静态属性时，会影响其他对象地调用此属性的调用的值</p><h4 id="说明-3"><a href="#说明-3" class="headerlink" title="说明"></a>说明</h4><p>类中声明的静态的属性，在内存中只有一份。</p><p>类中声明的静态的属性，存放在方法区的静态域中。</p><p>类中声明的静态的属性，随着类的加载而加载。</p><p>静态属性（或静态变量、类变量）          非静态属性（或实例变量）</p><ul><li><pre><code>类              yes                                      no</code></pre></li><li> 对象          yes                                      yes</li></ul><p>静态方法能够使用类直接调用</p><h4 id="注意"><a href="#注意" class="headerlink" title="==注意=="></a>==注意==</h4><p>在静态方法内，调用属性方法，不能调用非静态的属性跟方法</p><p>非静态的方法内能够调用静态的属性跟方法</p><p>方法的静态不用生成对象就能使用方法</p><p>工具类方法都是静态方法</p><p>属性：Math.PI </p><p>方法：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">sqrt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">binarySearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>工具类方法这类方法跟具体的对象没关系，是可以处理同类型的对象的操作，可以通过多态性处理不同类型同父类的操作</p><p>static可以修饰的结构有： 属性 方法 代码块 内部类</p><h3 id="6-1-2-属性使用static修饰"><a href="#6-1-2-属性使用static修饰" class="headerlink" title="6.1.2 属性使用static修饰"></a>6.1.2 属性使用static修饰</h3><p>类中的多个对象此属性的值是否相同、</p><p>是否需要共享此属性</p><p>类中定义的常量</p><p>全局变量也放在静态域内</p><h3 id="6-1-3-方法使用static修饰"><a href="#6-1-3-方法使用static修饰" class="headerlink" title="6.1.3 方法使用static修饰"></a>6.1.3 方法使用static修饰</h3><p>调用静态属性的方法，通常声明为静态的</p><p>工具类中的方法</p><h3 id="6-1-4-举例"><a href="#6-1-4-举例" class="headerlink" title="6.1.4 举例"></a>6.1.4 举例</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">StaticTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        System.out.println(Chinese.name);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Chinese</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"陈毅"</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">"中国"</span><span class="token punctuation">;</span>        <span class="token class-name">Chinese</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"姚明"</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">35</span><span class="token punctuation">;</span>        c2<span class="token punctuation">.</span>nation <span class="token operator">=</span> <span class="token string">"CHN"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        System.out.println(Chinese.name);</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Chinese</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        c1<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token string">"米饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//        Chinese.eat("面条");//编译不通过</span>        <span class="token comment">//main()内可以直接调用静态的方法</span>        <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">methodA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"A"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Chinese</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> nation<span class="token punctuation">;</span><span class="token comment">//国籍</span>    <span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Chinese</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token keyword">int</span> age<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    @Override</span><span class="token comment">//    public String toString() &#123;</span><span class="token comment">//        return "Chinese&#123;" +</span><span class="token comment">//                "name='" + name + '\'' +</span><span class="token comment">//                ", age=" + age +</span><span class="token comment">//                '&#125;';</span><span class="token comment">//    &#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Chinese&#123;"</span> <span class="token operator">+</span>                <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span>                <span class="token string">", nation='"</span> <span class="token operator">+</span> nation <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是一个中国人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//在静态方法内，不能调用非静态的属性、方法</span><span class="token comment">//        eat("米饭");</span><span class="token comment">//        System.out.println(name);</span>        <span class="token comment">//在静态方法内，可以调用当前类的静态结构：属性、方法。</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token class-name">String</span> food<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//非静态方法内，可以调用非静态的属性、方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name <span class="token operator">+</span> <span class="token string">"喜欢吃："</span> <span class="token operator">+</span> food<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//非静态方法内，可以调用静态的属性、方法</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>nation<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">String</span> <span class="token function">getNation</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> nation<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setNation</span><span class="token punctuation">(</span><span class="token class-name">String</span> nation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Chinese</span><span class="token punctuation">.</span>nation <span class="token operator">=</span> nation<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165854.png" alt="image-20200806103945426"></p><h3 id="6-1-5-题目：圆的测试"><a href="#6-1-5-题目：圆的测试" class="headerlink" title="6.1.5 题目：圆的测试"></a>6.1.5 题目：圆的测试</h3><p>使用全局变量记录定义圆对象的个数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-05 14:07 * * static的应用举例 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CircleTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Circle</span> c1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> c2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Circle</span> c3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token number">3.5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建的Circle对象的个数为："</span> <span class="token operator">+</span> <span class="token class-name">Circle</span><span class="token punctuation">.</span><span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Circle</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> radius<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span><span class="token comment">//自动生成id</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//初始化id的因子</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> total <span class="token operator">=</span> init<span class="token punctuation">;</span><span class="token comment">//记录创建的Circle对象的个数</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span>        total<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Circle</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Circle&#123;"</span> <span class="token operator">+</span>                <span class="token string">"radius="</span> <span class="token operator">+</span> radius <span class="token operator">+</span>                <span class="token string">", id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getRadius</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRadius</span><span class="token punctuation">(</span><span class="token keyword">double</span> radius<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>radius <span class="token operator">=</span> radius<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getTotal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> total<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题目：练习1"><a href="#题目：练习1" class="headerlink" title="题目：练习1"></a>题目：练习1</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>exer</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-05 15:31 * 编写一个类实现银行账户的概念，包含的属性有“帐号”、“密码”、“存款余额”、“利率”、“最小余额”， * 定义封装这些属性的方法。账号要自动生成。 * 编写主类，使用银行账户类，输入、输出3个储户的上述信息。 * 考虑：哪些属性可以设计成static属性。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AcountTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span> account1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span> account2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token string">"123456"</span><span class="token punctuation">,</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>account2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">setAnnualInterestRate</span><span class="token punctuation">(</span><span class="token number">0.018</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span><span class="token function">setMinBalance</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Account</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password <span class="token operator">=</span> <span class="token string">"000000"</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">double</span> balance<span class="token punctuation">;</span><span class="token comment">//余额</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> annualInterestRate<span class="token punctuation">;</span><span class="token comment">//年利率</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">double</span> minBalance<span class="token punctuation">;</span><span class="token comment">//最小余额</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> init <span class="token operator">=</span> <span class="token number">1001</span><span class="token punctuation">;</span><span class="token comment">//自动生成id的因子</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        id <span class="token operator">=</span> init<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Account</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">,</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//id = init++;</span>        <span class="token keyword">this</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getPassword</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token class-name">String</span> password<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>password <span class="token operator">=</span> password<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> balance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>balance <span class="token operator">=</span> balance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getAnnualInterestRate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setAnnualInterestRate</span><span class="token punctuation">(</span><span class="token keyword">double</span> annualInterestRate<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span>annualInterestRate <span class="token operator">=</span> annualInterestRate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> <span class="token function">getMinBalance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> minBalance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">setMinBalance</span><span class="token punctuation">(</span><span class="token keyword">double</span> minBalance<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Account</span><span class="token punctuation">.</span>minBalance <span class="token operator">=</span> minBalance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Account&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">", password='"</span> <span class="token operator">+</span> password <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span>                <span class="token string">", balance="</span> <span class="token operator">+</span> balance <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-2-单例模式"><a href="#6-2-单例模式" class="headerlink" title="6.2 单例模式"></a>6.2 单例模式</h2><p>是在大量的实践中总结和理论化之后优选的代码结构、编程风格、以及解决问题的思考方式。设计模免去我们自己再思考和摸索。</p><p>就像是经典的棋谱，不同的棋局，我们用不同的棋谱。</p><p>单例模式(或单子模式、Singleton)</p><p>保证在整个的软件系统中，对某个类只能存在一个对象实例</p><ul><li>多种设计模式</li><li>构造器私有化</li><li>内部构造器</li><li>将此属性声明为实例</li><li>使用类调用getBank方法返回构造器构造的静态对象</li></ul><p>三、实现方式：① 饿汉式  ② 懒汉式</p><p>对比：</p><p>懒汉式好：延迟对象的创建，节省内存空间。线程是不安全的。</p><p>饿汉式好：线程是安全的。</p><p>不管调用类产生对象几次，都是调用的唯一的静态的对象</p><h4 id="6-2-1-饿汉式"><a href="#6-2-1-饿汉式" class="headerlink" title="6.2.1 饿汉式"></a>6.2.1 饿汉式</h4><p>用的时候调用</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        Bank b1 = new Bank();</span><span class="token comment">//        Bank b2 = new Bank();</span>        <span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Bank</span> bank1 <span class="token operator">=</span> <span class="token class-name">Bank</span><span class="token punctuation">.</span><span class="token function">getBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>bank <span class="token operator">==</span> bank1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//饿汉式</span><span class="token keyword">class</span> <span class="token class-name">Bank</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1. 构造器私有化</span>    <span class="token keyword">private</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2. 声明并创建当前类的唯一实例，声明为private的</span>    <span class="token comment">//4. 必须将此唯一的实例声明为static的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> bank <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//3. 通过方法返回当前类的唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Bank</span> <span class="token function">getBank</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//Bank为当前类型</span>        <span class="token keyword">return</span> bank<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-2-2-懒汉式"><a href="#6-2-2-懒汉式" class="headerlink" title="6.2.2 懒汉式"></a>6.2.2 懒汉式</h4><p>声明当前类唯一实例。没有赋值</p><p>已经整好，调用返回</p><p>能不整就不整</p><p>线程不安全</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-05 14:39 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ChairMan</span> c1 <span class="token operator">=</span> <span class="token class-name">ChairMan</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">ChairMan</span> c2 <span class="token operator">=</span> <span class="token class-name">ChairMan</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c1 <span class="token operator">==</span> c2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//懒汉式</span><span class="token keyword">class</span> <span class="token class-name">ChairMan</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.构造器私有化</span>    <span class="token keyword">private</span> <span class="token class-name">ChairMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//2.声明当前类的唯一实例，声明为private的</span>    <span class="token comment">//4. 必须将此唯一的实例声明为static的</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">ChairMan</span> chairMan <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//3. 通过方法返回当前类的唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">ChairMan</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>chairMan <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            chairMan <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ChairMan</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> chairMan<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>runtime 运行时环境（不懂）</p><h2 id="6-3-main-的理解"><a href="#6-3-main-的理解" class="headerlink" title="6.3 main() 的理解"></a>6.3 main() 的理解</h2><p>main()是程序的入口</p><p>main()是一个静态的方法,形参为String[]类型</p><p>我们可以使用main()从键盘读取数据，只不过是数据的类型只能是String</p><p>main方法传数据自己写</p><p>与main函数交互方式，两种</p><p>注意拿到的都是字符串</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-05 15:44 * * main()的理解 * 1. main()是程序的入口 * 2. main()是一个静态的方法，形参为String[]类型 * 3. 我们可以使用main()从键盘读取数据，只不过数据的类型只能是String。 *     具体使用，比如：java MainDemo Tom 123 "Jerry"*/</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        System.out.println("hello");</span>        <span class="token class-name">Main</span><span class="token punctuation">.</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//类直接调用静态方法</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Main</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//静态方法可以直接使用类进行调用</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i <span class="token operator">&lt;</span> args<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            args<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"args_"</span> <span class="token operator">+</span> i<span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>args<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-4-类的成员之四-代码块（初始化块）"><a href="#6-4-类的成员之四-代码块（初始化块）" class="headerlink" title="6.4 类的成员之四 代码块（初始化块）"></a>6.4 类的成员之四 代码块（初始化块）</h2><h3 id="6-4-1-代码块只能使用static修饰。"><a href="#6-4-1-代码块只能使用static修饰。" class="headerlink" title="6.4.1 代码块只能使用static修饰。"></a>6.4.1 代码块只能使用static修饰。</h3><p>分类：静态代码块  vs  非静态代码块</p><h3 id="6-4-2-静态代码块："><a href="#6-4-2-静态代码块：" class="headerlink" title="6.4.2 静态代码块："></a>6.4.2 静态代码块：</h3><p>内部可以声明执行语句</p><p>随着类的加载而执行</p><p>由于类的加载只加载一次，所以静态代码块只执行一次。</p><p>静态代码块的执行要早于非静态代码块的执行。</p><p>作用：用于初始化类的信息：静态变量</p><p>如果多个静态代码块，则按照声明的先后顺序执行</p><p>静态代码块内，只能调动当前类的静态结构</p><h3 id="6-4-3-非静态代码块："><a href="#6-4-3-非静态代码块：" class="headerlink" title="6.4.3 非静态代码块："></a>6.4.3 非静态代码块：</h3><p>内部可以声明执行语句</p><p>随着对象的创建而执行。即：每创建一个对象，都执行一次非静态代码块</p><p>作用：用于初始化对象的信息：实例变量</p><p>如果多个非静态代码块，则按照声明的先后顺序执行</p><p>非静态代码块内，可以调动当前类的静态结构和非静态结构：属性、方法</p><p>没有名字，自动执行</p><p>静态代码块的使用</p><p>非静态代码块</p><p>静态代码块 先于非静态代码块执行</p><p>非静态代码块都能调用，但是一般不调用</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BlockTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span>info<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> p2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token class-name">String</span> info<span class="token punctuation">;</span>    <span class="token comment">//非静态代码块</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是非静态代码块2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是非静态代码块1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        age <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//静态代码块</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是静态代码块2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"我是静态代码块1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        info <span class="token operator">=</span> <span class="token string">"我是人"</span><span class="token punctuation">;</span><span class="token comment">//        eat();</span>        <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人吃饭"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人睡觉"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span><span class="token keyword">int</span> age<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-4-4-属性赋值的位置"><a href="#6-4-4-属性赋值的位置" class="headerlink" title="6.4.4 属性赋值的位置"></a>6.4.4 属性赋值的位置</h3><p>赋值的先后顺序</p><p>先加载 在调用</p><p>先有类的加载</p><p>然后进行初始化</p><p>先不执行，都加载过来</p><p>先加载属性，在赋值，默认初始化已经加载属性了</p><pre class="mermaid">graph LRA[方法区域]-->B[堆栈区]-->C[堆区]</pre><h4 id="lt-1-gt-属性可以被赋值的位置："><a href="#lt-1-gt-属性可以被赋值的位置：" class="headerlink" title="&lt;1&gt; 属性可以被赋值的位置："></a>&lt;1&gt; 属性可以被赋值的位置：</h4><p>① 默认初始化</p><p>② 显式初始化</p><p>③ 构造器中初始化</p><p>④ 创建了对象以后，通过”对象.属性” 或 “对象.方法”的方式，进行赋值</p><p>⑤ 代码块中赋值</p><h4 id="lt-2-gt-赋值的先后顺序："><a href="#lt-2-gt-赋值的先后顺序：" class="headerlink" title="&lt;2&gt; 赋值的先后顺序："></a>&lt;2&gt; 赋值的先后顺序：</h4><p>① - ② / ⑤ - ③ - ④</p><p>说明: ② 和 ⑤ 执行的先后顺序取决于声明的先后顺序。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java2</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>net<span class="token punctuation">.</span></span><span class="token class-name">SocketTimeoutException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">OrderTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Order</span> order <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Order</span> order1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>order1<span class="token punctuation">.</span>orderId<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Order</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span>        orderId <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> orderId <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Order</span><span class="token punctuation">(</span><span class="token keyword">int</span> orderId<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>orderId <span class="token operator">=</span> orderId<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-5-关键字-final"><a href="#6-5-关键字-final" class="headerlink" title="6.5 关键字 final"></a>6.5 关键字 final</h2><p>final可以用来修饰：类，方法，变量（属性，局部变量）</p><h3 id="6-5-1-final-标记的类不能被继承"><a href="#6-5-1-final-标记的类不能被继承" class="headerlink" title="6.5.1 final 标记的类不能被继承"></a>6.5.1 final 标记的类不能被继承</h3><p>要注意final类中所有成员方法都会被隐式地指定为final方法</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165909.png" alt="image-20200808230253108"></p><p>如图所示，final标记的类A，是不能被B所继承的，因为A为终态类。</p><p>在使用final修饰类的时候，要注意谨慎选择，除非这个类真的在以后不会用来继承或者出于安全的考虑，尽量不要将类设计为final类。</p><h3 id="6-5-2-final标记的方法不能被子类重写"><a href="#6-5-2-final标记的方法不能被子类重写" class="headerlink" title="6.5.2 final标记的方法不能被子类重写"></a>6.5.2 final标记的方法不能被子类重写</h3><p>使用final方法的==原因==有两个：</p><p>第一个原因是把方法锁定，以防任何继承类修改它的含义；明确禁止子类进行重写</p><p>第二个原因是效率。在早期的Java实现版本中，会将final方法转为内嵌调用。但是如果方法过于庞大，可能看不到内嵌调用带来的任何性能提升。在最近的Java版本中，不需要使用final方法进行这些优化了。</p><p>==注==：类的private方法会隐式地被指定为final方法。</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><blockquote><p>比如：String\StringBuffer\StringBuilder</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165914.png" alt="image-20200808231552477"></p><p>　　注：类的private方法会隐式地被指定为final方法。</p><h3 id="6-5-3-final修饰属性"><a href="#6-5-3-final修饰属性" class="headerlink" title="6.5.3 final修饰属性"></a>6.5.3 final修饰属性</h3><p>final修饰属性，此属性为常量，属性一旦被赋值，就不可以更改</p><p>即只能赋值一次</p><h4 id="说明-4"><a href="#说明-4" class="headerlink" title="说明"></a>说明</h4><p>Static final修饰一个属性，全局变量</p><p>比如： <code>Math.PI</code></p><p>比如：Math类中的PI</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//在游戏中</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> UP <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> DOWN <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> LEFT <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> RIGHT <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>final修饰局部变量：一旦对此局部变量进行了赋值，就不能修改此值</p><p>对于一个final变量，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能再让其指向另一个对象。</p><h3 id="6-5-4-final修饰的属性可以在那些位置赋值？"><a href="#6-5-4-final修饰的属性可以在那些位置赋值？" class="headerlink" title="6.5.4 final修饰的属性可以在那些位置赋值？"></a>6.5.4 final修饰的属性可以在那些位置赋值？</h3><h4 id="显式赋值"><a href="#显式赋值" class="headerlink" title="显式赋值"></a>显式赋值</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">final</span> <span class="token keyword">int</span> <span class="token class-name">My_num1</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="代码块可以"><a href="#代码块可以" class="headerlink" title="代码块可以"></a>代码块可以</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token punctuation">&#123;</span>NUM2 <span class="token operator">=</span><span class="token number">1</span>；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="构造器中可以"><a href="#构造器中可以" class="headerlink" title="构造器中可以"></a>构造器中可以</h4><p>可以通过构造器的形参列表进行赋值</p><p>表示此类不能被继承</p><h3 id="6-5-4-深度理解final"><a href="#6-5-4-深度理解final" class="headerlink" title="6.5.4 深度理解final"></a>6.5.4 深度理解final</h3><h4 id="lt-1-gt-final修饰的变量跟普通变量区别"><a href="#lt-1-gt-final修饰的变量跟普通变量区别" class="headerlink" title="&lt;1&gt; final修饰的变量跟普通变量区别"></a>&lt;1&gt; final修饰的变量跟普通变量区别</h4><p>final修饰的变量会被编译器当做常量来修饰</p><p>如代码，当显式赋值时（只有在编译期间能确切知道final变量值的情况下，编译器才会默认进行这样的优化），编译器会默认优化为编译器常量，而引用类与常量相等会值相等而返回true</p><p>平时两个引用型变量地址不同所有返回false</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> a <span class="token operator">=</span> <span class="token string">"hello2"</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token class-name">String</span> b <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> d <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> c <span class="token operator">=</span> b <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> e <span class="token operator">=</span> d <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//true</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">==</span> e<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//false</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-被final修饰的引用变量指向的对象内容可变么？"><a href="#lt-2-gt-被final修饰的引用变量指向的对象内容可变么？" class="headerlink" title="&lt;2&gt;被final修饰的引用变量指向的对象内容可变么？"></a>&lt;2&gt;被final修饰的引用变量指向的对象内容可变么？</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token keyword">final</span> <span class="token class-name">MyClass</span> myClass <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token operator">++</span>myClass<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可变的，final修饰引用变量，固定了引用变量的地址，可以改变指向变量内容，但是不可以new新的对象</p><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165920.png" alt="image-20200808235927608"></p><h4 id="lt-3-gt-final和static"><a href="#lt-3-gt-final和static" class="headerlink" title="&lt;3&gt; final和static"></a>&lt;3&gt; final和static</h4><p>static 是复制一份常量，在静态域中不可以更改，仅此一份</p><p>所有与其同名同类型的变量都是一个值</p><p>而final是保证单个变量不可变</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>        <span class="token class-name">MyClass</span> myClass1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">MyClass</span> myClass2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass1<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass1<span class="token punctuation">.</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass2<span class="token punctuation">.</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>myClass2<span class="token punctuation">.</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">class</span> <span class="token class-name">MyClass</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">double</span> i <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">double</span> j <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-4-gt-final固定常量不是为了方法进行修改，因为方法传参是值传递"><a href="#lt-4-gt-final固定常量不是为了方法进行修改，因为方法传参是值传递" class="headerlink" title="&lt;4&gt; final固定常量不是为了方法进行修改，因为方法传参是值传递"></a>&lt;4&gt; final固定常量不是为了方法进行修改，因为方法传参是值传递</h4><p>　关于网上流传的”当你在方法中不需要改变作为参数的对象变量时，明确使用final进行声明，会防止你无意的修改而影响到调用方法外的变量“这句话，我个人理解这样说是不恰当的。</p><h2 id="6-6-抽象类与抽象方法"><a href="#6-6-抽象类与抽象方法" class="headerlink" title="6.6 抽象类与抽象方法"></a>6.6 抽象类与抽象方法</h2><p>abstract关键字的使用</p><p>1.abstract:抽象的</p><p>2.abstract用来修饰类、方法</p><p>3.abstract修饰类：此时就是抽象类</p><p>抽象类，不可以实例化。</p><p>开发中，我们都会去提供抽象类的子类。进而创建子类的实例。</p><p>4.abstract修饰方法：即为抽象方法</p><p>抽象方法所在的类，一定是抽象类。反之，抽象类中可以没有抽象方法。</p><p>子类继承抽象的父类以后，如果==重写了抽象的父类中的所有的抽象方法，则此子类可以实例化。==</p><p>子类继承抽象的父类以后，没有重写抽象的父类中的所有的抽象方法，则此子类仍然为抽象类。</p><p>不能用abstract修饰变量、代码块、构造器</p><p>不能用abstract修饰私有方法、静态方法、final的方法，final的类</p><h3 id="6-6-1-思考"><a href="#6-6-1-思考" class="headerlink" title="6.6.1 思考"></a>6.6.1 思考</h3><h4 id="问题-lt-1-gt-：为什么抽象类不可以使用final关键字声明？"><a href="#问题-lt-1-gt-：为什么抽象类不可以使用final关键字声明？" class="headerlink" title="问题&lt;1&gt;：为什么抽象类不可以使用final关键字声明？"></a>问题&lt;1&gt;：为什么抽象类不可以使用final关键字声明？</h4><p>final标记的类不能被继承</p><h4 id="问题-lt-2-gt-：-一个抽象类中可以定义构造器吗？"><a href="#问题-lt-2-gt-：-一个抽象类中可以定义构造器吗？" class="headerlink" title="==问题&lt;2&gt;：==一个抽象类中可以定义构造器吗？"></a>==问题&lt;2&gt;：==一个抽象类中可以定义构造器吗？</h4><p>可以，用来传递参数，实现多态，让子类继承</p><h4 id="问题-lt-3-gt-：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同"><a href="#问题-lt-3-gt-：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同" class="headerlink" title="问题&lt;3&gt;：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同"></a>问题&lt;3&gt;：是否可以这样理解：抽象类就是比普通类多定义了抽象方法，除了不能直接进行类的实例化操作之外，并没有任何的不同</h4><p>狭义可以</p><h2 id="6-7-接口（interface"><a href="#6-7-接口（interface" class="headerlink" title="6.7 接口（interface)"></a>6.7 接口（interface)</h2><p>定义了一种规范</p><p>使用了interface定义接口，接口是与类并列的概念我的解释：</p><p>接口可以理解为一种特殊的类，里面全部是由<strong>全局常量</strong>和<strong>公共的抽象方法</strong>所组成。接口是解决<strong>Java</strong>无法使用多继承的一种手段，但是接口在实际中更多的作用是<strong>制定标准</strong>的。或者我们可以直接把接口理解为<strong>100%的抽象类</strong>，既接口中的方法<strong>必须全部</strong>是抽象方法。（JDK1.8之前可以这样理解）</p><h3 id="6-7-1-接口的声明"><a href="#6-7-1-接口的声明" class="headerlink" title="6.7.1 接口的声明"></a>6.7.1 接口的声明</h3><p>接口内可以</p><p>在jdk7及以前：全局变量，抽象方法</p><p>==全局变量==：public static final 可以不写</p><p>==抽象方法==：public abstract可以省掉不写</p><p>jdk8中：接口中定义静态方法、默认方法 默认方法要使用default进行定义</p><p>jdk9中：接口中定义私有方法</p><p>接口中不能定义构造器，不能实例化接口！</p><p>类与接口之间是实现(implements)关系，而且是多实现的。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token keyword">extends</span> <span class="token class-name">B</span> <span class="token keyword">implements</span> <span class="token class-name">C</span><span class="token punctuation">,</span><span class="token class-name">D</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果实现类实现了接口中声明的所有抽象方法，则此类可以实例化</p><p>如果实现类没有实现接口中声明的所有抽象方法，则此类仍为抽象类，不能实例化</p><p>接口与接口之间存在继承关系，而且是可以多继承的。</p><h3 id="6-7-2-接口的使用"><a href="#6-7-2-接口的使用" class="headerlink" title="6.7.2 接口的使用"></a>6.7.2 接口的使用</h3><p>接口，定义了一种规范，标准，接口也存在多态性</p><p>接口能够让<code>implements</code>接口的方法进行规范性写程序，可以使用多态的方式进入到形参列表声明为其实施 的接口的方法里</p><h4 id="USB的接口的题目"><a href="#USB的接口的题目" class="headerlink" title="USB的接口的题目"></a>USB的接口的题目</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>test</span><span class="token punctuation">;</span><span class="token comment">/** * usb * @author Jinxin Li * @create 2020-08-09 12:23 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> interfaceTest1 <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//1.创建对象进行传输</span>        <span class="token class-name">Computer</span> computer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Printer</span> printer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">transferDate</span><span class="token punctuation">(</span>printer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//2.匿名对象进行传输</span>        computer<span class="token punctuation">.</span><span class="token function">transferDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Flash</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Computer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">transferDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Printer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//3.直接使用接口创建对象，但是要对接口中的方法进行重写,重写之后使用大括号进行重写</span>        <span class="token class-name">USB</span> usb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"USB传输中======================="</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"USB传输结束======================"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        computer<span class="token punctuation">.</span><span class="token function">transferDate</span><span class="token punctuation">(</span>usb<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//4.传入接口的匿名实现类的匿名对象</span>        computer<span class="token punctuation">.</span><span class="token function">transferDate</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token function">USB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据传输中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token annotation punctuation">@Override</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据传输中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">interface</span> USB<span class="token punctuation">&#123;</span>    <span class="token comment">//常量：长 宽</span>    <span class="token comment">//抽象方法</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Computer</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">transferDate</span><span class="token punctuation">(</span><span class="token class-name">USB</span> usb<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//使用多态性调用不同的连接机器USB usb = new Printer()</span>        usb<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"数据传输中"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        usb<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Printer</span> <span class="token keyword">implements</span> USB<span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束打印"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Flash</span> <span class="token keyword">implements</span> USB<span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开始传输"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"结束传输"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-7-3-接口-java1-8中的新特性"><a href="#6-7-3-接口-java1-8中的新特性" class="headerlink" title="6.7.3 接口 java1.8中的新特性"></a>6.7.3 接口 java1.8中的新特性</h3><p>接口一些说法</p><h4 id="接口A"><a href="#接口A" class="headerlink" title="接口A"></a>接口A</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareA</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:北京"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//接口</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:上海"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareA:广州"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="接口B"><a href="#接口B" class="headerlink" title="接口B"></a>接口B</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">CompareB</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">default</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"CompareB:深圳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//知识点1：接口中的静态方法不能被实现类直接调用。只能通过接口来进行调用。</span>        <span class="token class-name">CompareA</span><span class="token punctuation">.</span><span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//编译不通过</span><span class="token comment">//        SubClass.method1();</span>        <span class="token comment">//知识点2：通过实现类的对象可以直接调用接口中定义的默认方法。</span>        <span class="token comment">//如果实现类重写了接口中的默认方法，则实现类对象调用的就是重写的方法</span>        <span class="token class-name">SubClass</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub1<span class="token punctuation">.</span><span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//知识点3：如果实现类实现的多个接口中，定义了同名同参数的默认方法，则实现类必须要重写</span>        <span class="token comment">//接口中的此方法。否则会出现接口冲突。</span>        sub1<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span>    <span class="token comment">//知识点4：如果子类继承的父类与实现的接口中定义了同名同参数的方法，则子类在没有重写此方法的</span>    <span class="token comment">//情况下，默认调用父类中的方法。---->类优先原则。</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">SubClass</span> sub1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sub1<span class="token punctuation">.</span><span class="token function">method4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-8-面向对象之内部类"><a href="#6-8-面向对象之内部类" class="headerlink" title="6.8 面向对象之内部类"></a>6.8 面向对象之内部类</h2><h4 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h4><p>将一个类A声明在另一个类B的内部，则构成了内部类结构</p><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>成员内部类：静态的成员内部类 非静态的成员内部类</p><p>内部类，一方面作为类：</p><p>可以定义属性、方法、构造器、代码块等</p><p>可以被final、abstract 修饰</p><h4 id="另一方面作为外部类的成员"><a href="#另一方面作为外部类的成员" class="headerlink" title="另一方面作为外部类的成员"></a>另一方面作为外部类的成员</h4><p>可以被4种权限修饰符修饰。</p><p>可以被static修饰</p><p>可以调用外部类的属性、方法等</p><h4 id="需要大家掌握的3个知识点"><a href="#需要大家掌握的3个知识点" class="headerlink" title="需要大家掌握的3个知识点"></a>需要大家掌握的3个知识点</h4><ul><li>如何创建成员内部类的对象？（静态的成员内部类、非静态的成员内部类）</li><li>在成员内部类中，如何调用外部类的结构</li><li>掌握局部内部类的常见使用场景:见 InnerClassTest1.java</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">InnerClassTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//创建静态的成员内部类的对象</span>       <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Cat</span> cat <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Cat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//创建非静态的成员内部类的对象</span>        <span class="token class-name">Person</span> p1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token class-name">Dog</span> dog <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//new p1.Dog():错误的</span>        dog<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"花花"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>dog<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"Tom"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token punctuation">;</span>    <span class="token comment">//内部类</span>    <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> name <span class="token operator">=</span> <span class="token string">"旺财"</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">info</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Person</span><span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"狗也会游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//内部类 方法内部类</span>        <span class="token keyword">class</span> AA<span class="token punctuation">&#123;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">swim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"人游泳"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-9-题目"><a href="#6-9-题目" class="headerlink" title="6.9 题目"></a>6.9 题目</h2><h1 id="第7章-异常处理"><a href="#第7章-异常处理" class="headerlink" title="第7章 异常处理"></a>第7章 异常处理</h1><h2 id="7-1-异常概述-异常体系结构"><a href="#7-1-异常概述-异常体系结构" class="headerlink" title="7.1 异常概述 异常体系结构"></a>7.1 异常概述 异常体系结构</h2><h3 id="7-1-1-异常的体系结构"><a href="#7-1-1-异常的体系结构" class="headerlink" title="7.1.1 异常的体系结构"></a>7.1.1 异常的体系结构</h3><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165932.png" alt="image-20200809172631592"></p><p> 异常：在Java语言中，将程序执行中发生的不正常情况称为“异常”。</p><p>(开发过程中的语法错误和逻辑错误不是异常)</p><p>Java程序在执行过程中所发生的异常事件可分为两类：</p><p>==Error==：Java虚拟机无法解决的严重问题。如：JVM系统内部错误、资源耗尽等严重情况。</p><p>比如：StackOverflowError和OOM。一般不编写针对性的代码进行处理。</p><p>Exception: 其它因编程错误或偶然的外在因素导致的一般性问题，可以使用针对性的代码进行处理。</p><p>例如：</p><p>空指针访问</p><p>试图读取不存在的文件</p><p>网络连接中断</p><p>数组角标越界</p><p>用户输入格式不对</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ErrorTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//        main(args);//StackOverflowError:栈溢出的错误</span>        <span class="token comment">//OutOfMemoryError: Java heap space:堆空间溢出的错误</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span> <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//1GB</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://cdn.jsdelivr.net/gh/fourgold/images/fourgold/images/img_21_01/20210127165938.png" alt="image-20200808101952194"></p><p>OutOfMemoryError堆空间溢出错误</p><p>exception可以处理 </p><h2 id="7-2-常见异常"><a href="#7-2-常见异常" class="headerlink" title="7.2 常见异常"></a>7.2 常见异常</h2><h3 id="7-2-1-异常的体系结构"><a href="#7-2-1-异常的体系结构" class="headerlink" title="7.2.1 异常的体系结构"></a>7.2.1 异常的体系结构</h3><p>java.lang.Throwable最高异常类</p><p>java.lang.Error:错误。一般不编写针对性的代码进行处理。</p><p>java.lang.Exception:异常。可以使用针对性的代码进行处理。</p><p>编译时异常：编译过程中可能出现的异常类型</p><p>运行时异常(RuntimeException)：编译过程（javac.exe）可以正常通过，运行时报出的异常。\</p><h3 id="7-2-2-常见的异常有哪些？"><a href="#7-2-2-常见的异常有哪些？" class="headerlink" title="7.2.2 常见的异常有哪些？"></a>7.2.2 常见的异常有哪些？</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Date</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExceptionTest</span> <span class="token punctuation">&#123;</span>    <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">InputMismatchException</span><span class="token operator">:</span>输入不匹配的异常    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整型数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> 数组角标越界<span class="token operator">|</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">NullPointerException</span> 空指针异常<span class="token operator">|</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        Date date = new Date();</span><span class="token comment">//        date = null;</span><span class="token comment">//        System.out.println(date.toString());</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">ArithmeticException</span><span class="token operator">:</span>算术异常<span class="token operator">|</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>            <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> m <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">ClassCastException</span>：类转换异常<span class="token operator">|</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>   <span class="token operator">--</span><span class="token operator">|</span><span class="token class-name">NumberFormatException</span><span class="token operator">:</span>数值格式化的异常<span class="token operator">|</span><span class="token operator">--</span>   <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token string">"123a"</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token class-name">Integer</span><span class="token punctuation">.</span><span class="token function">parseInt</span><span class="token punctuation">(</span>str<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token operator">==</span>######################如下的是编译时异常###############################<span class="token operator">==</span>    <span class="token operator">--</span><span class="token class-name">FileNotFoundException</span><span class="token operator">--</span>    <span class="token operator">--</span><span class="token class-name">IOException</span><span class="token operator">--</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test6</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        File file = new File("hello.txt");</span><span class="token comment">//        FileInputStream fis = new FileInputStream(file);</span><span class="token comment">//        int data = fis.read();</span><span class="token comment">//        while(data != -1)&#123;</span><span class="token comment">//            System.out.print((char)data);</span><span class="token comment">//            data = fis.read();</span><span class="token comment">//        &#125;</span><span class="token comment">//</span><span class="token comment">//        fis.close();</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//ClassNotFoundException</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test7</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//        Class clazz = Class.forName("java.lang.String");</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-3-异常处理机制"><a href="#7-3-异常处理机制" class="headerlink" title="7.3 异常处理机制"></a>7.3 异常处理机制</h2><h3 id="7-3-1-java程序的异常处理：抓抛模型"><a href="#7-3-1-java程序的异常处理：抓抛模型" class="headerlink" title="7.3.1 java程序的异常处理：抓抛模型"></a>7.3.1 java程序的异常处理：抓抛模型</h3><p>过程一：抛 （生成异常对象、并抛出）</p><p>java程序在执行过程中，一旦出现异常，就会在异常出现的位置生成一个相应异常类型的对象。</p><p>并将此对象抛出。</p><p>一旦程序出现异常，就不再执行异常之后的代码了。</p><p>生成异常对象有两种方式：① 系统自动生成  ② 使用throw + 异常对象</p><p>过程二：抓 （异常处理的过程）</p><p>可以理解为异常处理的方式。</p><h3 id="7-3-2-异常处理有两种方式"><a href="#7-3-2-异常处理有两种方式" class="headerlink" title="7.3.2 异常处理有两种方式"></a>7.3.2 异常处理有两种方式</h3><p>方式一：try-catch-finally</p><p>方式二：throws</p><h4 id="lt-1-gt-try-catch-finally-的使用格式"><a href="#lt-1-gt-try-catch-finally-的使用格式" class="headerlink" title="&lt;1&gt; ==try-catch-finally==的使用格式"></a>&lt;1&gt; ==try-catch-finally==的使用格式</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">try</span><span class="token punctuation">&#123;</span>    可能存在异常的代码<span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">1</span> 变量名<span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    异常的处理方式<span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span>异常类型<span class="token number">2</span> 变量名<span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    异常的处理方式<span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>    一定会被执行的代码<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="lt-2-gt-说明："><a href="#lt-2-gt-说明：" class="headerlink" title="&lt;2&gt; 说明："></a>&lt;2&gt; 说明：</h4><ol><li><p>finally是可选的。</p></li><li><p>将可能存在异常的代码声明在try中。一旦执行过程中出现异常，此异常对象就会抛出。进而匹配之后的catch结构</p></li><li><p>一旦与某一个catch结构匹配，进入catch的大括号中执行异常处理的代码。一旦执行完此catch结构，不再执行其后的其他catch结构。</p></li><li><p>一旦程序通过try-catch的方式处理了异常，则程序让可以继续向下执行。</p></li><li><p>如果声明了多个catch，多个catch对应异常类型不存在子父类关系的话，则哪个类型声明在上面，哪个类型声明在下面都可以。</p></li></ol><p>==如果多个catch对应异常类型满足子父类的关系，则必须将子类类型声明在父类类型的上面。==</p><ol start="6"><li>在try中声明的变量，在出了try结构以后就失效了。</li><li>try-catch-finally结构是可以嵌套使用的</li></ol><h4 id="lt-3-gt-catch中常见的异常处理的方式："><a href="#lt-3-gt-catch中常见的异常处理的方式：" class="headerlink" title="&lt;3&gt; catch中常见的异常处理的方式："></a>&lt;3&gt; catch中常见的异常处理的方式：</h4><p>① 通过打印，指名异常的类型信息</p><p>② getMessage()</p><p>③ printStackTrace()  (推荐)</p><h4 id="lt-4-gt-对于异常的处理方式"><a href="#lt-4-gt-对于异常的处理方式" class="headerlink" title="&lt;4&gt; 对于异常的处理方式"></a>&lt;4&gt; 对于异常的处理方式</h4><p>针对于编译时异常，我们必须要进行异常的处理，否则编译不通过。</p><p>我们针对编译时异常进行处理以后，相当于将一个编译时异常转变为在运行时才可能出现的异常。</p><p>==针对于运行时异常，其实我们可以不使用异常处理。==</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TryCatchFinallyTest</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//创建了一个ArrayIndexOutOfBoundsException类型的对象。</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">NullPointerException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现空指针的异常了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ArrayIndexOutOfBoundsException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//            System.out.println("出现角标越界的异常了....");</span><span class="token comment">//            System.out.println(e.getMessage());</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RuntimeException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"出现了运行时的异常了...."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Object</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">String</span> str <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">)</span> obj<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">ClassCastException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//###############针对于编译时异常来说########################</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello1.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            System.out.println("出现文件找不到的异常了....");</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            System.out.println("出现了IO的异常了...");</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">Class</span> clazz <span class="token operator">=</span> <span class="token class-name">Class</span><span class="token punctuation">.</span><span class="token function">forName</span><span class="token punctuation">(</span><span class="token string">"java.lang.String"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//。。。。</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ClassNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-4-finally的使用"><a href="#7-4-finally的使用" class="headerlink" title="7.4 finally的使用"></a>7.4 finally的使用</h3><p>finally是可选的。</p><p>将一定会被执行的代码声明在finally中</p><p>即使try、catch中存在未被处理的异常，或try、catch有return返回值结构，我们说，finally也是一定要被执行的。</p><h4 id="7-4-1-开发中哪些代码会放在finally中？"><a href="#7-4-1-开发中哪些代码会放在finally中？" class="headerlink" title="7.4.1 开发中哪些代码会放在finally中？"></a>7.4.1 开发中哪些代码会放在finally中？</h4><p>IO流、Socket、数据库连接等资源，都需要手动的关闭。那么需要保证此关闭操作一定要被执行。否则，会</p><p>出现内存泄漏。</p><p>面试题：final \ finally \ finalize的区别</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">org<span class="token punctuation">.</span>junit<span class="token punctuation">.</span></span><span class="token class-name">Test</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">FinallyTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> m <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            int[] arr = new int[10];</span><span class="token comment">//            System.out.println(arr[10]);</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello----1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello----2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span> m <span class="token operator">/</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">ArithmeticException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> num <span class="token operator">=</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span> data<span class="token punctuation">)</span><span class="token punctuation">;</span>                data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">FileNotFoundException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token comment">//必须手动关闭资源</span>            <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>fis <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                    fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Test</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"请输入一个整型数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> number <span class="token operator">=</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">finally</span><span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>scanner <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span>                scanner<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==finally执行影响力比return还要高==</p><p>==JVM垃圾回收器不能自动回收流文件==</p><h2 id="7-4-throws异常处理的机制2"><a href="#7-4-throws异常处理的机制2" class="headerlink" title="7.4 throws异常处理的机制2"></a>7.4 throws异常处理的机制2</h2><h3 id="7-4-1-如何选择处理异常的方式"><a href="#7-4-1-如何选择处理异常的方式" class="headerlink" title="7.4.1 如何选择处理异常的方式"></a>7.4.1 如何选择处理异常的方式</h3><p>在开发中，如何选择异常处理的方式</p><p>throws抛出之后当前方法不再执行</p><p>接口声明，继承接口的才能抛出</p><p>运行时异常不用特已处理，也可以抛出处理一样的</p><p>编译时异常一定要处理</p><h3 id="7-4-2-异常处理的方式二：在方法的声明处，使用：throws-异常类型"><a href="#7-4-2-异常处理的方式二：在方法的声明处，使用：throws-异常类型" class="headerlink" title="7.4.2 异常处理的方式二：在方法的声明处，使用：throws + 异常类型"></a>7.4.2 异常处理的方式二：在方法的声明处，使用：throws + 异常类型</h3><p>在方法内，执行过程中，一旦出现异常，就会生成一个指定异常类型的对象。使用“throws + 异常类型”</p><p>方式处理异常的话，就会将此异常对象抛给方法的调用者。 方法的调用者需要继续考虑如何处理异常？</p><p>比如：method1()中出现的异常，method1选择了“throws + 异常类型”的方式处理，则将异常抛给了其调用</p><p>者：method2()</p><h3 id="7-4-3-在开发中，如何选择异常处理的方式？"><a href="#7-4-3-在开发中，如何选择异常处理的方式？" class="headerlink" title="7.4.3 在开发中，如何选择异常处理的方式？"></a>7.4.3 在开发中，如何选择异常处理的方式？</h3><p>① 如果程序中涉及到一定要被执行的代码（比如：流、Socket、数据库连接等），我们需要选择</p><p>try-catch-finally方式处理异常。</p><p>② 如果父类被重写的方法声明时，没有使用throws的方式抛出异常。则子类重写的方法内部如果有异常，</p><p>只能使用try-catch-finally的方式处理，不能使用throws的方式了。</p><p>③ 如果一个方法method1()内，先后调用了另外了几个方法。比如：method2(),method3(),method4().</p><p>此时method2(),method3(),method4()是递进关系的调用。此时，method2(),method3(),method4()</p><p>中，我们选择使用throws的方式处理异常。而在method1()中统一的使用try-catch-finally的方式处理异常。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">ThrowsTest</span> test <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThrowsTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        test<span class="token punctuation">.</span><span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">try</span><span class="token punctuation">&#123;</span>            <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//            System.out.println("出现异常了");</span>        <span class="token punctuation">&#125;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method2</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span>，<span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">File</span> file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"hello.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">FileInputStream</span> fis <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FileInputStream</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>data <span class="token operator">!=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>            data <span class="token operator">=</span> fis<span class="token punctuation">.</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        fis<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="7-5-手动抛出异常"><a href="#7-5-手动抛出异常" class="headerlink" title="7.5 手动抛出异常"></a>7.5 手动抛出异常</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">File</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileInputStream</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">FileNotFoundException</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token namespace">java<span class="token punctuation">.</span>io<span class="token punctuation">.</span></span><span class="token class-name">IOException</span><span class="token punctuation">;</span><span class="token comment">/** * @author shkstart * @create 2020-08-08 15:11 * * 子类重写的方法声明的异常类型不大于父类被重写的方法声明的异常类型。 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowsTest1</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SuperClass</span> s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            s<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            e<span class="token punctuation">.</span><span class="token function">printStackTrace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">&#123;</span><span class="token comment">//        File file = new File("hello.txt");</span><span class="token comment">//        FileInputStream fis = new FileInputStream(file);</span><span class="token comment">//        int data = fis.read();</span><span class="token comment">//        while(data != -1)&#123;</span><span class="token comment">//            System.out.print((char)data);</span><span class="token comment">//            data = fis.read();</span><span class="token comment">//        &#125;</span><span class="token comment">//</span><span class="token comment">//        fis.close();</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    public void method1()&#123;</span><span class="token comment">//</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">SuperClass</span><span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">FileNotFoundException</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//    public void method1() throws IOException&#123;</span><span class="token comment">//</span><span class="token comment">//    &#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="throw的使用："><a href="#throw的使用：" class="headerlink" title="throw的使用："></a>throw的使用：</h4><p>在方法内部，可以手动的生成一个异常类的对象，并将此对象抛出。使用“throw + 异常对象”</p><p>面试题：throw 和 throws 的区别</p><p>throw: 在生成异常对象并抛出的环节使用。表示手动抛出一个new的异常对象。</p><p>写在方法内部</p><p>throws：是针对于生成异常对象并抛出之后，考虑如何处理异常的一种方式。</p><p>写在方法的声明处。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span>atguigu<span class="token punctuation">.</span>java1</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThrowTest</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">Student</span> s1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Student</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            s1<span class="token punctuation">.</span><span class="token function">regist</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1001</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//            e.printStackTrace();</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">regist</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>id <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>id <span class="token operator">=</span> id<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span><span class="token comment">//            throw new RuntimeException("输入的学号不能为0或负数");</span><span class="token comment">//            throw new Exception("输入的学号不能为0或负数");</span>            <span class="token comment">//编译不通过</span><span class="token comment">//            throw new String("输入的学号不能为0或负数");</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token string">"输入的学号不能为0或负数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//手动抛出异常</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token string">"Student&#123;"</span> <span class="token operator">+</span>                <span class="token string">"id="</span> <span class="token operator">+</span> id <span class="token operator">+</span>                <span class="token string">'&#125;'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-none"><code class="language-none"><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="7-6-用户自定义异常"><a href="#7-6-用户自定义异常" class="headerlink" title="7.6 用户自定义异常"></a>7.6 用户自定义异常</h3><p>自定义异常类</p><ol><li><p>需要继承于现有的异常体系结构。比如：继承于RuntimeException 、 Exception</p></li><li><p>需要提供一个==序列版本号==：serialVersionUID</p></li><li><p>提供重载的构造器</p></li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyException</span> <span class="token keyword">extends</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> serialVersionUID <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">338751694229948L</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token class-name">String</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">MyException</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-5-练习"><a href="#7-5-练习" class="headerlink" title="7.5 练习"></a>7.5 练习</h2><p>编译时必须处理</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>计算机基础</title>
      <link href="2018/05/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/"/>
      <url>2018/05/12/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h2 id="计算机历史"><a href="#计算机历史" class="headerlink" title="计算机历史"></a>计算机历史</h2><p>计算编程也是语言</p><p>离散数学是核心</p><p>布尔代数</p><p>编程=数据结构+算法</p><p>计算机物理：电子管（高保真，音响），晶体管（半导体，放大开关），集成电路</p><h2 id="计算机发展"><a href="#计算机发展" class="headerlink" title="计算机发展"></a>计算机发展</h2><ol><li>数手指</li><li>结绳记事</li><li>算筹</li><li>算盘</li><li>机械计算机（1642.帕斯卡，pasci）</li><li>步进计算器（1674，莱布尼茨）</li><li>差分机／分析机（1822，巴贝奇）</li><li>电子管（1906）</li><li>IBM（1924）</li><li>马克一号（1936）</li><li>1946-12.1939-图灵机</li></ol><h2 id="计算机结构"><a href="#计算机结构" class="headerlink" title="计算机结构"></a>计算机结构</h2><p>CPU：大脑，</p><p>核心指令和数据：命令和数据都是应用上的概念</p><p>算术逻辑单元ALU</p><p>控制单元CU</p><p>MM主存储器</p><p>M3-汇编</p><h2 id="计算机基本概念"><a href="#计算机基本概念" class="headerlink" title="计算机基本概念"></a>计算机基本概念</h2><p>存储器</p><p>外存储</p><p>内存：只读存储器不会消失</p><p>寄存器：位于CPU内部存储单元：存储器被划为若干个</p><p>存储单元，每个单元从0开始编号，例如一个存储器有128个单元</p><p>存储容量：最小信息单位是bit，也就是一个二进制位，8bit构成一个字节byte，128个字节存储单位是01010101</p><p>一个存储器有128个单元</p><h2 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h2><p>CPU对存储器的读写</p><ul><li>地址</li><li>控制</li><li>数据</li></ul><p>导线：总线（地址，控制，数据）传递的电信号为高低电平（01）</p><p>电平信息（机器码）</p><h2 id="总线"><a href="#总线" class="headerlink" title="总线"></a>总线</h2><p>地址总线</p><p>一个导线的稳定状态为2种，0-1</p><p>控制总线</p><p>写命令一根线，读命令一根线</p><h2 id="主板等硬件"><a href="#主板等硬件" class="headerlink" title="主板等硬件"></a>主板等硬件</h2><p>主板与器件通过总线相连</p><p>（地址总线+数据总线+控制总线）</p><p>RAM随机存储器ROM</p><p>BIOS：基本输入输出程序，开机自检系统跟自启动程序</p><p>CMOS内存微机主板上的BIOS芯片中一块可读写的RAM芯片，主要用作保存当前系统的硬件配置和操作人员的参数的设定，有后备电池供电。</p><h2 id="计算机软件发展史"><a href="#计算机软件发展史" class="headerlink" title="计算机软件发展史"></a>计算机软件发展史</h2><p>1983 C++</p><p>1991 python</p><p>1996 java</p><p>2001 java-C#</p><p>2009 Go</p><h2 id="进制与进制运算"><a href="#进制与进制运算" class="headerlink" title="进制与进制运算"></a>进制与进制运算</h2><p>每一种进制都是完美的，他自身就是一个完整的体系，可以进行各种运算</p><h2 id="二进制的简写与转换"><a href="#二进制的简写与转换" class="headerlink" title="二进制的简写与转换"></a>二进制的简写与转换</h2><p>熟练掌握二进制与十进制之间的转换</p><p>二进制转十进制的算法：位权表示法</p><p>其中B表示二进制数符号</p><p>D表示十进制数符号</p><p>H表示16进制数</p><p>十进制转二进制</p><p>不足八位要补全</p><p>十六进制转十进制</p><h2 id="数据宽度"><a href="#数据宽度" class="headerlink" title="数据宽度"></a>数据宽度</h2><p>1.计算机中的数字，是没有大小限制的，可以无限的大。但是在计算机中，由于受到硬件的制约，数据都是有长度限制的</p><p>2.’数据宽度’是内存存储单元的宽度</p><h2 id="有符号数无符号数"><a href="#有符号数无符号数" class="headerlink" title="有符号数无符号数"></a>有符号数无符号数</h2><p>有符号数</p><p>整数：最高符号位为1</p><p>负数：最高符号位为0</p><p>在前面加上0x，让人明白这是16进制的写法</p><p>简单理解就是电路有两种状态，开关操作开算作0，关算作1，这是用两个符号来记录的，就是二进制数，对应到计算机里的0或者1，在这里计算机里起了个新名字，叫做位（bite）</p><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><p>无符号编码规则：无符号数全部都是整数，是什么就存什么</p><p>有符号编码规则：最高有效位为0，是正数，最高有效位为1是负数</p><p>符号位（0,1）</p><p>减法运算换算成加法运算，效率更高</p><p>2 - 3 = 2 + （-3）</p><p>存入计算机的是补码</p><p>==总结：==</p><ul><li>正数原码存储，原码跟补码相同</li><li>负码补码存储</li><li>符号位1不参与取反</li></ul><p>转换说明</p><table><thead><tr><th></th><th>-7</th><th>F9</th></tr></thead><tbody><tr><td>原码</td><td>10000111</td><td>11111001</td></tr><tr><td>取反反码</td><td>11111000</td><td>10000110</td></tr><tr><td>+1补码</td><td>11111101//F9</td><td>10000111//-7</td></tr></tbody></table><p>计算时要用补码进行计算</p><h2 id="14布尔代数"><a href="#14布尔代数" class="headerlink" title="14布尔代数"></a>14布尔代数</h2><h3 id="与运算"><a href="#与运算" class="headerlink" title="与运算"></a>与运算</h3><p>两个位都为1时，结果为1（串联电路）</p><table><thead><tr><th></th><th>1011 0001</th></tr></thead><tbody><tr><td>and（&amp;）</td><td>1101 1000</td></tr><tr><td></td><td>1001 0000</td></tr></tbody></table><h3 id="或运算"><a href="#或运算" class="headerlink" title="或运算"></a>或运算</h3><p>只有一个为1就是1（并联电路）</p><table><thead><tr><th></th><th>1011 0001</th></tr></thead><tbody><tr><td>or（|）</td><td>1101 1000</td></tr><tr><td></td><td>1111 1001</td></tr></tbody></table><h3 id="异或运算"><a href="#异或运算" class="headerlink" title="异或运算"></a>异或运算</h3><p>不一样的时候是1，交叉并联</p><table><thead><tr><th></th><th>1011 0001</th></tr></thead><tbody><tr><td>xor(^)</td><td>1101 1000</td></tr><tr><td></td><td>0110 1001</td></tr></tbody></table><h3 id="非运算"><a href="#非运算" class="headerlink" title="非运算"></a>非运算</h3><p>0就是1 1就是0</p><table><thead><tr><th></th><th>1101 1000</th></tr></thead><tbody><tr><td>not（~）</td><td>0010 0111</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="位运算之加减乘除"><a href="#位运算之加减乘除" class="headerlink" title="位运算之加减乘除"></a>位运算之加减乘除</h3><h3 id="左移"><a href="#左移" class="headerlink" title="左移"></a>左移</h3><p>进位&lt;&lt;</p><p>各个二进制全部左移若干位，高位丢弃，低位补0</p><h3 id="右移"><a href="#右移" class="headerlink" title="右移"></a>右移</h3><p>各二进制位全部右移若干位，低位丢弃，高位补0，高位补0或者补符号位</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>C语言基础</title>
      <link href="2018/03/15/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(2%E9%81%8D)/"/>
      <url>2018/03/15/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80%E8%AF%AD%E6%B3%95(2%E9%81%8D)/</url>
      
        <content type="html"><![CDATA[<h1 id="6-创建并运行第一个C程序"><a href="#6-创建并运行第一个C程序" class="headerlink" title="6.创建并运行第一个C程序"></a>6.创建并运行第一个C程序</h1><h2 id="集成开发环境（IDE）"><a href="#集成开发环境（IDE）" class="headerlink" title="集成开发环境（IDE）"></a>集成开发环境（IDE）</h2><p>编译器/C语言中的指令-机器指令</p><p>VC6版本</p><h2 id="安装虚拟机-VC6建议学习"><a href="#安装虚拟机-VC6建议学习" class="headerlink" title="安装虚拟机+VC6建议学习"></a>安装虚拟机+VC6建议学习</h2><p>同学帮助安装</p><h2 id="编写C程序"><a href="#编写C程序" class="headerlink" title="编写C程序"></a>编写C程序</h2><p>1.创建项目，选择win32控制台项目（Win32 console Application）</p><p>文件-新建-Win32 console Application（项目名字为时间的顺序2020_06_16）</p><p>2.添加文件</p><p>文件-新建-C++ Source File-Main.cpp</p><p>3.生成项目（编译）：*.exe</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"> <span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello,World!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>F7（出现00error为程序已经创建成功）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">2020</span>_06_15<span class="token punctuation">.</span>exe <span class="token operator">-</span> <span class="token number">0</span> <span class="token function">error</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token function">warning</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4.运行项目</p><p>F5</p><p>cpp为C++文件</p><p>shift+F 程序结束</p><p>debug版本（调试版本）</p><p>release版本（发布版本） 编译器会优化掉一部分无用代码</p><h1 id="7-内存与变量"><a href="#7-内存与变量" class="headerlink" title="7.内存与变量"></a>7.内存与变量</h1><h2 id="内存的使用"><a href="#内存的使用" class="headerlink" title="内存的使用"></a>内存的使用</h2><p>内存的单位是字节（Byte） 每个字节占8个位（bit）</p><p>每个运行中的程序（进程）都有4G内存</p><p>内存的编号就是地址</p><p>内存不是<em>内存条</em>，是空头支票</p><h3 id="变量类型"><a href="#变量类型" class="headerlink" title="变量类型"></a>变量类型</h3><p>变量就是内存</p><p>变量类型就是告诉系统（编译器）我需要的内存有多大</p><p>变量名告诉系统（编译器）我需要的内存在哪里,变量名是地址的别名</p><p>值是写到内存里的数据</p><p>变量类型 变量名称 = 值；</p><p>十六进制为”%x”</p><p>十进制为”%d”</p><h3 id="数据到底存在哪里？"><a href="#数据到底存在哪里？" class="headerlink" title="数据到底存在哪里？"></a>数据到底存在哪里？</h3><p>取地址符号==&amp;==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//变量类型 变量名（就是内存编号） 变量值</span><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">short</span> y <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token comment">//打印内存中的数值</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"值为：%d-%d-%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"值为：%x-%x-%x\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="amp-符号可以帮助我们获取指定的变量的地址："><a href="#amp-符号可以帮助我们获取指定的变量的地址：" class="headerlink" title="&amp;符号可以帮助我们获取指定的变量的地址："></a>&amp;符号可以帮助我们获取指定的变量的地址：</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"变量内容为：%d-%d-%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"变量地址为：%p-%p-%p\n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="溢出范围"><a href="#溢出范围" class="headerlink" title="溢出范围"></a>溢出范围</h3><p>溢出的右移，舍弃</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> <span class="token comment">//0 - 0xFF</span><span class="token keyword">short</span> <span class="token comment">//0 - 0xFFFF</span><span class="token keyword">int</span> <span class="token comment">//0 - 0xFFFFFFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="浮点型变量的使用"><a href="#浮点型变量的使用" class="headerlink" title="浮点型变量的使用"></a>浮点型变量的使用</h3><p>每种类型的变量，存储的数据都是有范围，超过这个范围的数据，将会被计算机丢弃，如：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">float</span>  x <span class="token operator">=</span> <span class="token number">100.12f</span><span class="token punctuation">;</span><span class="token comment">//4字节，float后面跟f</span><span class="token keyword">double</span> y <span class="token operator">=</span> <span class="token number">100.1234</span><span class="token punctuation">;</span><span class="token comment">//8字节(范围很大)</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%f %lf\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//%f与%lf分别是存储float与double的形式</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.2f %.4lf\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//显示小数点后几位，.2位或者.4位定义输出的小数点位数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>变量类型</th><th>变量宽度（字节byte）16进制</th><th>存储范围</th></tr></thead><tbody><tr><td>char</td><td>1</td><td>-128~127</td></tr><tr><td>short</td><td>2</td><td>-32768~32767</td></tr><tr><td>int</td><td>4</td><td>-2147483648~2147483747</td></tr><tr><td>float</td><td>4(精度：整数+小数6-7)</td><td>-3.4·10^38~3.4·10^38</td></tr><tr><td>double</td><td>8(15-16)</td><td>-1.7·10^308~1.7·10^308</td></tr></tbody></table><h3 id="课后练习"><a href="#课后练习" class="headerlink" title="课后练习"></a>课后练习</h3><h4 id="1-如何理解内存"><a href="#1-如何理解内存" class="headerlink" title="1.如何理解内存"></a>1.如何理解内存</h4><p>一个内存为一个字节</p><h4 id="2-如何理解内存编号"><a href="#2-如何理解内存编号" class="headerlink" title="2.如何理解内存编号"></a>2.如何理解内存编号</h4><p>内存编号就是内存地址，别名就是变量名</p><h4 id="3-分别使用char、short、int、float、double申请内存，并用-printf-正确输出对应内容和地址"><a href="#3-分别使用char、short、int、float、double申请内存，并用-printf-正确输出对应内容和地址" class="headerlink" title="3.分别使用char、short、int、float、double申请内存，并用 printf 正确输出对应内容和地址"></a>3.分别使用char、short、int、float、double申请内存，并用 printf 正确输出对应内容和地址</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token keyword">float</span> e <span class="token operator">=</span> <span class="token number">50.12f</span><span class="token punctuation">;</span><span class="token keyword">double</span> f <span class="token operator">=</span> <span class="token number">3432.3423</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %f %lf\n"</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d %.2f %.4f\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x %x %x %x %x\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p %p %p %p %p\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>e<span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-为什么要使用变量"><a href="#3-为什么要使用变量" class="headerlink" title="3.为什么要使用变量"></a>3.为什么要使用变量</h2><h3 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h3><p>char   一个字节、</p><p>short 四个内存</p><p>int      八个字节</p><p>使用&amp;地址符号，获得当前地址的内存</p><p>编译器替我们是申请</p><p>内存太多，使用编号代替，一个内存的编号就是地址，一个地址里面代表一个字节，一个字节就是八个0或者1</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//变量类型 变量名字 值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">//可以放进程序里面可以放到程序外面，但是如果放进程序里面，仅仅是当前程序使用，其他程序无法使用</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放到函数里面必须有一个明确的初始值</p><p>放到函数外面称为全局变量</p><h3 id="为什么要使用变量"><a href="#为什么要使用变量" class="headerlink" title="为什么要使用变量"></a>为什么要使用变量</h3><p>变量本身是一个内存</p><p>变量的本质是容器，里面可以存储任意类型的数据</p><p>==实例==</p><p>可以根据用户输入圆的半径，计算出圆的面积。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">PI <span class="token number">3.14</span></span><span class="token comment">//定义常量</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">double</span> r<span class="token punctuation">;</span>    <span class="token keyword">double</span> s<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%lf"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//变量的地址在哪里，控制台就会读入一个数，放入r的地址。</span>    s <span class="token operator">=</span> PI<span class="token operator">*</span>r<span class="token operator">*</span>r<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%lf \n"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%.4lf\n"</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>常量是一个数，不会变化</p><p>用变量是为了临时储存数据</p><p>内存就是变量</p><h3 id="变量命名规则"><a href="#变量命名规则" class="headerlink" title="变量命名规则"></a>变量命名规则</h3><ul><li>只能由字符，数字，下划线</li><li>第一个符号不能是数字</li><li>变量名不能是关键字</li></ul><h2 id="小端存储模式"><a href="#小端存储模式" class="headerlink" title="小端存储模式"></a>小端存储模式</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span><span class="token comment">//一个字节</span><span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span><span class="token punctuation">.</span><span class="token comment">//两个字节</span><span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span><span class="token comment">//四个字节</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p,%p,%p \n"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>大端小端针对的是数据超过1个字节的存储</p><p>小端模式：数据==低位==在内存地址编号低位，数据==高位==在高位</p><p>大端模式：数据==高位==在内存地址编号低位，数据==高位==在低位</p><p>程序在断点才可以看memory</p><p>float使用二进制规范存储，将小数点变为二进制IEEE规则</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">0x12</span><span class="token punctuation">;</span>    <span class="token keyword">short</span> y <span class="token operator">=</span> <span class="token number">0x1234</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">0x12345678</span><span class="token punctuation">;</span><span class="token comment">//12 34 56 78</span>                      <span class="token comment">//0019FF28-0019FF24</span>                      <span class="token comment">//78 56 34 12</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p,%p,%p\n,"</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//断点在getchar不能看memory</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>使用小手选择断点调试</p><p>getchar()因为程序一直在运行，所以无法进行调试，需要删除掉</p><p>选择断点-把要看的变量名输入到address输入框中-查看存储的内存地址</p><h2 id="原码反码补码"><a href="#原码反码补码" class="headerlink" title="原码反码补码"></a>原码反码补码</h2><h3 id="回顾-1"><a href="#回顾-1" class="headerlink" title="回顾"></a>回顾</h3><p>如何让程序运行到某阶段的存储下来</p><p>浮点型有自己的存储规范，课堂上不涉及</p><p>当存储的12时是12,负数的时候存储的是EE</p><h3 id="原码反码补码-1"><a href="#原码反码补码-1" class="headerlink" title="原码反码补码"></a>原码反码补码</h3><p>原码：最高位为符号位，其余各位为数据本身的绝对值</p><pre class="line-numbers language-C" data-language="C"><code class="language-C">0X12 &#x3D; 0001 0010;&#x2F;&#x2F;正数，最高位0正，最高位1为负<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>反码：</p><p>==正数==：反码与原码相同</p><p>==负数==：符号位为1，其余位取反</p><p>补码：</p><p>==正数==：补码与原码相同</p><p>==负数==：符号位为1，其余位对原码取反加1</p><blockquote><p>0x12  0001 0010</p><p>原码：0001 0010</p><p>反码：0001 0010</p><p>补码：0001 0010</p><p>-0x12 EE</p><p>原码：1001 0010//符号位为1，负数</p><p>反码：1110 1101//符号位为1，取反</p><p>补码：1110 1110 //末位+1</p><p>​            E         E</p></blockquote><p><strong>计算机存储整数的时候存储补码</strong></p><h2 id="有符号数与无符号数"><a href="#有符号数与无符号数" class="headerlink" title="有符号数与无符号数"></a>有符号数与无符号数</h2><p>谁能告诉我下面的1代码表示什么？</p><table><thead><tr><th></th><th></th><th></th><th></th><th></th><th></th><th></th><th></th></tr></thead><tbody><tr><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td><td>1</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0xFFFFFFFF</span><span class="token punctuation">;</span>    <span class="token function">prinf</span><span class="token punctuation">(</span><span class="token string">"%u,%d\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==%u==：无符号数的输出标记</p><p>==%d==：有符号数的输出标记</p><p>有符号数与无符号数在存入内存的时候是相同的，比如</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> a <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//此两者在存储时是相同的，存入内存的数值都是</span><span class="token comment">//FFFF FFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span><span class="token comment">//1111 1111</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//0000 0000 1111 1111</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token comment">//1111 1111 1111 1111</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%p,%p\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==%x==：十六进制输出标记</p><p>==%p==：类似于地址，全部位输出标记</p><h3 id="有符号数与无符号数区别"><a href="#有符号数与无符号数区别" class="headerlink" title="有符号数与无符号数区别"></a>有符号数与无符号数区别</h3><ul><li>拓展的时候有差异</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> x<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">0xFF</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x\n"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>计算结果如下：</p><blockquote><p>ffffff ff//拓展成四个字节打印</p><p>fffff ff//有符号数，使用符号位进行补位</p><p>ff//无符号数</p><p>ff//无符号数</p></blockquote><ul><li>比较的时候有差异</li></ul><pre class="line-numbers language-C" data-language="C"><code class="language-C">#include &lt;stdio.h&gt;int main()&#123;    unsigned int a &#x3D; -1;    if (a&gt;1)    &#123;        printf(&quot;%p&quot;,a);    &#125;    return 0;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h3><ol><li>无论有符号数与无符号数，内存存储的方式是一样的，补码</li><li>有符号数与无符号数在使用的时候，主要的区别是：</li></ol><p>&lt;1&gt;拓展的时候</p><p>&lt;2&gt;运算的时候</p><p>只有整数才有有符号与无符号之分</p><p>浮点数另算</p><h2 id="字符与字符串"><a href="#字符与字符串" class="headerlink" title="字符与字符串"></a>字符与字符串</h2><p>单引号==’ ‘==只是单个字符</p><p>ACSII表</p><p>A-65</p><p>a-97</p><p><code>putchar()</code>只能打印一个字符,给他任何数字都会进行查表，然后输出表的对应值</p><p>转义字符 ==\a = 7==, ==\n = 10==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'H'</span><span class="token punctuation">,</span><span class="token string">'e'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'l'</span><span class="token punctuation">,</span><span class="token string">'o'</span><span class="token punctuation">,</span><span class="token string">'!'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span>buffer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>结果：因为没有0结束，会出现一些别的打印结果</p></blockquote><p>所谓字符串是以数组的形式来表示的</p><p>输出打印字符串需要见到<strong>0</strong>才能停止，当数组扩大，会自动补0</p><p>一般情况下不用指明长度，编译器会计算长度，自动补0。</p><p>==字符串的来由==</p><ul><li>字符串其实是一对字符组成的</li><li>字符就是ASCII码对应得到的</li><li>ASCII码对照的是十进制数</li><li>存入的是十进制数的二进制数</li></ul><h2 id="中文字符"><a href="#中文字符" class="headerlink" title="中文字符"></a>中文字符</h2><p>英文字符查表，中文如何操作的呢？</p><p>中文也有值，每个中文字有两个字节的占格</p><p>计算机发明之后及后面的很长一段时间，只用应用于美国及一些西方国家</p><p>我们专家把那些127之后的奇异符号们（EASCII）取消掉</p><p>规定两个大于127的数定义为汉字，字符等，全角</p><p>GB2312</p><p>Win32-unicode本质就是查表</p><h1 id="8-数组"><a href="#8-数组" class="headerlink" title="8.数组"></a>8.数组</h1><h2 id="为什么要使用数组"><a href="#为什么要使用数组" class="headerlink" title="为什么要使用数组"></a>为什么要使用数组</h2><p>数组是连续申请一些内存供应使用</p><p>数组的地址是第一个数组的地址</p><p>如果我们要存储多人的年龄</p><p>能否让编译器分配多一点的int</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> age<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//向编译器申请了40个字节的空间</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="数组的初始化"><a href="#数组的初始化" class="headerlink" title="数组的初始化"></a>数组的初始化</h3><p>整数是小端存储</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化全部为0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义时是不初始化，如：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义时直接初始化，如：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>定义时部分初始化，如：</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> age<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h3><p>越界/当你取数组中的数值时，假设数组中有10个值，age[10],值已经越界。</p><p>通过下标访问数组</p><h3 id="其他类型的数组"><a href="#其他类型的数组" class="headerlink" title="其他类型的数组"></a>其他类型的数组</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">short</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="使用watch来查看你申请得到的数组内的值"><a href="#使用watch来查看你申请得到的数组内的值" class="headerlink" title="使用watch来查看你申请得到的数组内的值"></a>使用watch来查看你申请得到的数组内的值</h3><p>查看-调试-watch-右边输入名称</p><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><ol><li>创建一个长度为10的整型数组，并为这个数组赋值(值是下标的2倍)；</li><li>将上题中数组的第一个元素与最后一个元素的值交换。</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换前：%d %d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    a <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">=</span> a<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"交换后：%d %d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h2><p>解决问题</p><table><thead><tr><th>name</th><th>math</th><th>chinese</th><th>english</th></tr></thead><tbody><tr><td>小明</td><td>89</td><td>67</td><td>67</td></tr><tr><td>小黄</td><td>73</td><td>42</td><td>65</td></tr><tr><td>小红</td><td>56</td><td>56</td><td>47</td></tr><tr><td></td><td></td><td>47</td><td>78</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token comment">//寻找</span>第x个同学，第y门课score<span class="token punctuation">[</span>x<span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span>y<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>直接告诉编译器几人几科</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//二维数组</span><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第一人第一科</span><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第二人第二科</span><span class="token keyword">int</span> score<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//第三人第三科</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>二维数组与数组在存储方式上是相同的，不同工作主要是由编译器运作，二维数组就是一维数组</p><p>修改的情况下直接修改可以</p><h3 id="二维数组的初始化形式"><a href="#二维数组的初始化形式" class="headerlink" title="二维数组的初始化形式"></a>二维数组的初始化形式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span>    <span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span>    <span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token comment">//自动分配少数补0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个维度必须指定</p><p>初始化写{0}即可</p><p>多维数组</p><h3 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">40</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">60</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">70</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">,</span><span class="token number">90</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">120</span><span class="token punctuation">,</span><span class="token number">130</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">41</span><span class="token punctuation">,</span><span class="token number">51</span><span class="token punctuation">,</span><span class="token number">61</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">81</span><span class="token punctuation">,</span><span class="token number">91</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#123;</span><span class="token number">111</span><span class="token punctuation">,</span><span class="token number">121</span><span class="token punctuation">,</span><span class="token number">131</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第几个组(x)：0,1,2</p><p>第几个人(y)：0,1,2,3</p><p>第几门课(z)：0,1,2</p><p>寻找</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span><span class="token number">1</span><span class="token operator">*</span><span class="token number">3</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="总结-2"><a href="#总结-2" class="headerlink" title="总结"></a>总结</h3><p>没有二维数组或者多维数组，本质都是一维数组</p><h1 id="9-运算符与表达式"><a href="#9-运算符与表达式" class="headerlink" title="9.运算符与表达式"></a>9.运算符与表达式</h1><h2 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h2><h3 id="什么是运算符？什么是表达式？"><a href="#什么是运算符？什么是表达式？" class="headerlink" title="什么是运算符？什么是表达式？"></a>什么是运算符？什么是表达式？</h3><p>表达式是运算符与运算与常量的之间的关系</p><blockquote><p>x+y  x-y  (x+y)(x-y)  表达式都是值</p></blockquote><p>==%%==使用两个才能显示</p><p>//++ – 单目运算符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token operator">++</span>x<span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//输出11</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>x<span class="token operator">++</span><span class="token punctuation">)</span><span class="token comment">//先参与运算，再自加</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运算符优先级别"><a href="#运算符优先级别" class="headerlink" title="运算符优先级别==()=="></a>运算符优先级别==()==</h3><p>()具有最高优先级</p><h3 id="算术表达式的结果类型"><a href="#算术表达式的结果类型" class="headerlink" title="算术表达式的结果类型"></a>算术表达式的结果类型</h3><pre class="mermaid">graph LRshort-->intchar-->intint-->unsignedunsigned-->doublefloat-->double</pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">short</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token operator">+</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>x<span class="token operator">+</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//当与int运算时会升级</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">=</span> <span class="token number">0xffffffff</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>m<span class="token operator">+</span>n<span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"表达式类型为unsigned: %d\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token comment">//有符号数与无符号数进行运算，结果是无符号数</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="位运算"><a href="#位运算" class="headerlink" title="位运算"></a>位运算</h2><h3 id="什么是位运算"><a href="#什么是位运算" class="headerlink" title="什么是位运算"></a>什么是位运算</h3><ol><li>程序中所有数在计算机内存中都是二进制的形式存储的</li><li>位运算就是直接对整数在内存中的二进制位进行操作</li></ol><h3 id="位运算能做什么"><a href="#位运算能做什么" class="headerlink" title="位运算能做什么"></a>位运算能做什么</h3><p>计算机底层相关领域：</p><p>加密解密 安全 反病毒 反外挂</p><p>位运算能够精确的对某一个位进行操作</p><h3 id="位运算有哪些"><a href="#位运算有哪些" class="headerlink" title="位运算有哪些"></a>位运算有哪些</h3><table><thead><tr><th>计算方式</th><th>计算过程</th></tr></thead><tbody><tr><td>按位与 &amp;</td><td>全部是1取1</td></tr><tr><td>按位或 |</td><td>有1取1</td></tr><tr><td>按位异或 ^</td><td>不同为1，相同为0</td></tr><tr><td>按位取反 ~</td><td>取反</td></tr><tr><td>左移 移位运算 &lt;&lt;</td><td></td></tr><tr><td>右移 移位运算 &gt;&gt;</td><td>无符号数补0，有符号数补符号位</td></tr></tbody></table><h3 id="位运算举例"><a href="#位运算举例" class="headerlink" title="位运算举例"></a>位运算举例</h3><p>如何将二进制数中的某一个位置修改为1？ //3位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">x<span class="token operator">|</span><span class="token number">4</span><span class="token comment">//修改某一个位，通过与运算</span>    <span class="token number">1010</span> <span class="token number">1010</span>    <span class="token number">0000</span> <span class="token number">0100</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token number">1010</span> <span class="token number">1110</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如何将二进制数中的某一位置修改为0； //3位</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">x<span class="token operator">&amp;</span>FB    <span class="token number">1010</span> <span class="token number">1110</span>    <span class="token number">1111</span> <span class="token number">1011</span>    <span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>    <span class="token number">1010</span> <span class="token number">1010</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习"><a href="#练习" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="1-2-8的最高效的实现方式"><a href="#1-2-8的最高效的实现方式" class="headerlink" title="1. 2*8的最高效的实现方式."></a>1. 2*8的最高效的实现方式.</h4><table><thead><tr><th>2</th><th>0000 0010</th></tr></thead><tbody><tr><td>2*8</td><td>0001 0000</td></tr></tbody></table><p>//右进位进三位</p><h4 id="2-如何通过位运算判断一个数是奇数还是偶数？"><a href="#2-如何通过位运算判断一个数是奇数还是偶数？" class="headerlink" title="2. 如何通过位运算判断一个数是奇数还是偶数？"></a>2. 如何通过位运算判断一个数是奇数还是偶数？</h4><table><thead><tr><th>3</th><th>0000 0011</th></tr></thead><tbody><tr><td>按位或 |</td><td>0000 0001</td></tr><tr><td>有1取1</td><td>0000 0011</td></tr></tbody></table><p>//相同为奇数，不同为偶数</p><h4 id="3-如何读取二进制数中的某一位的值"><a href="#3-如何读取二进制数中的某一位的值" class="headerlink" title="3. 如何读取二进制数中的某一位的值?"></a>3. 如何读取二进制数中的某一位的值?</h4><table><thead><tr><th>16</th><th>0001 0000</th></tr></thead><tbody><tr><td>16&gt;&gt;(n-1)&amp;1</td><td>0000 0001</td></tr></tbody></table><p>==取n位值==（x&gt;&gt;(n-1))&amp;1</p><h4 id="4-如何设置二进制数中的某一位的值"><a href="#4-如何设置二进制数中的某一位的值" class="headerlink" title="4. 如何设置二进制数中的某一位的值?"></a>4. 如何设置二进制数中的某一位的值?</h4><table><thead><tr><th>n修改第n位的值为1</th><th>0000 0000</th></tr></thead><tbody><tr><td>按位或| (2^n-1^)</td><td>0001 0000</td></tr><tr><td>1&lt;&lt;n-1</td><td>0001 0000</td></tr></tbody></table><table><thead><tr><th>修改第n位的值为0</th><th>0001 0000</th></tr></thead><tbody><tr><td>按位与 &amp;((2^字节长度^-1)-2^n-1^)</td><td>1110 1111</td></tr><tr><td></td><td>0000 0000</td></tr></tbody></table><p>==设置相反==<code>x^(1&lt;&lt;n-1)^</code></p><h3 id="5-设-int-a-2-int-b-5-使用位运算，交换两个变量的值，并打印。"><a href="#5-设-int-a-2-int-b-5-使用位运算，交换两个变量的值，并打印。" class="headerlink" title="5. 设 int a = 2; int b = 5; 使用位运算，交换两个变量的值，并打印。"></a>5. 设 int a = 2; int b = 5; 使用位运算，交换两个变量的值，并打印。</h3><table><thead><tr><th>2</th><th>0000 0010</th></tr></thead><tbody><tr><td>5</td><td>0000 0101</td></tr></tbody></table><p>==自己的见解==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a<span class="token operator">=</span><span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token number">1</span><span class="token punctuation">;</span>    b<span class="token operator">=</span>b <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==王者见解==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">,</span> b<span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>    b <span class="token operator">=</span> b<span class="token operator">^</span>a<span class="token punctuation">;</span>    a <span class="token operator">=</span> a<span class="token operator">^</span>b<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-使用位运算-获取-int-类型的最大值和最小值，并打印"><a href="#6-使用位运算-获取-int-类型的最大值和最小值，并打印" class="headerlink" title="6.使用位运算 获取 int 类型的最大值和最小值，并打印"></a>6.使用位运算 获取 int 类型的最大值和最小值，并打印</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span><span class="token operator">~</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="运算符种类"><a href="#运算符种类" class="headerlink" title="运算符种类"></a>运算符种类</h2><h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><p>赋值是一个动作，表达式是一个数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">x <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">8</span><span class="token punctuation">;</span>x <span class="token operator">+=</span> <span class="token number">8</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>标准运算</p><p>拓展赋值</p><h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><ol><li>什么是真（非0），假为0</li><li>关系运算符返回结果为真假</li></ol><p>关系运算符用于比较两者的关系</p><p>关系运算符也是双目运算符</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d,%d"</span><span class="token punctuation">,</span> x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span>假，为<span class="token number">0</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三目运算符"><a href="#三目运算符" class="headerlink" title="三目运算符"></a>三目运算符</h3><p>也叫条件运算符</p><p>表达式1 ？ 表达式2 ：表达式3</p><p>当表达式1为真时 整个表达式的结果为表达式2</p><p>当表达式2为真时 整个表达式的结果为表达式3</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> k <span class="token operator">=</span> x<span class="token operator">=</span>y<span class="token operator">?</span>y<span class="token operator">:</span>z<span class="token punctuation">;</span><span class="token comment">//三目运算符</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><h4 id="amp-amp-逻辑与运算，可以理解成”并且”"><a href="#amp-amp-逻辑与运算，可以理解成”并且”" class="headerlink" title="&amp;&amp;逻辑与运算，可以理解成”并且”"></a>&amp;&amp;逻辑与运算，可以理解成”并且”</h4><p>说明：</p><ol><li>当表达式1为真时，并且表达式2为真时，整个表达式的结果为真，否则为假</li><li>==短路特征==，当表达式1为假时时候，后面的表达式将不再执行</li></ol><h5 id="逻辑或-，可以理解成“或者”"><a href="#逻辑或-，可以理解成“或者”" class="headerlink" title="逻辑或||，可以理解成“或者”"></a>逻辑或||，可以理解成“或者”</h5><ol><li>当表达式1为真或者表达式2为真时，整个表达式的结果为真，否则为假</li><li>==短路特征==，当表达式1为真的时候，后面的表达式将不再执行</li></ol><h4 id="非！"><a href="#非！" class="headerlink" title="非！"></a>非！</h4><p>加在任何表达式的前面，改变表达式的值</p><h3 id="练习-1"><a href="#练习-1" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="int-x-4-int-y-7-int-z-3-用三目表达式求出三个变量中的最大值"><a href="#int-x-4-int-y-7-int-z-3-用三目表达式求出三个变量中的最大值" class="headerlink" title="int x =4; int y = 7; int z = 3;用三目表达式求出三个变量中的最大值"></a>int x =4; int y = 7; int z = 3;用三目表达式求出三个变量中的最大值</h4><p>==自己迂腐之见==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token keyword">int</span> z<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> a <span class="token operator">=</span> x<span class="token operator">></span>y<span class="token operator">?</span>x<span class="token operator">:</span>y<span class="token punctuation">;</span><span class="token keyword">int</span> b <span class="token operator">=</span> x<span class="token operator">></span>z<span class="token operator">?</span>x<span class="token operator">:</span>z<span class="token punctuation">;</span><span class="token keyword">int</span> c <span class="token operator">=</span> y<span class="token operator">></span>z<span class="token operator">?</span>y<span class="token operator">:</span>z<span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>x<span class="token operator">&amp;&amp;</span>b<span class="token operator">==</span>x<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值为x:%d"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>y<span class="token operator">&amp;&amp;</span>c<span class="token operator">==</span>y<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值为y:%d"</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"最大值为z:%d"</span><span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>==王者级别==</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>y<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">,</span>z<span class="token operator">=</span><span class="token number">7</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>x<span class="token operator">></span>y<span class="token operator">?</span><span class="token punctuation">(</span>x<span class="token operator">></span>z<span class="token operator">?</span>x<span class="token operator">:</span>z<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>y<span class="token operator">></span>z<span class="token operator">?</span>y<span class="token operator">:</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="不运行程序-说出打印结果，为什么？"><a href="#不运行程序-说出打印结果，为什么？" class="headerlink" title="不运行程序,说出打印结果，为什么？"></a>不运行程序,说出打印结果，为什么？</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x <span class="token operator">=</span> <span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>x <span class="token operator">==</span><span class="token number">60</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>60//表达式为值</p><p>1//有数为真为1</p></blockquote><h4 id="不运行程序-说出结果，并解释"><a href="#不运行程序-说出结果，并解释" class="headerlink" title="不运行程序,说出结果，并解释."></a>不运行程序,说出结果，并解释.</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">,</span>c<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>d<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">;</span>    e<span class="token operator">=</span> <span class="token punctuation">(</span>d <span class="token operator">=</span> b <span class="token operator">></span> a<span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>c <span class="token operator">=</span> a <span class="token operator">&lt;</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d\n"</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span>c<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>1 </p><p>0</p><p> 1//b&gt;a的优先级比较高</p></blockquote><h4 id="将上题中的-e-d-b-gt-a-c-a-lt-b-改为-e-d-b-gt-a-amp-amp-c-a-lt-b-说出结果-并解释"><a href="#将上题中的-e-d-b-gt-a-c-a-lt-b-改为-e-d-b-gt-a-amp-amp-c-a-lt-b-说出结果-并解释" class="headerlink" title="将上题中的 e= (d = b &gt; a) || (c = a &lt; b); 改为 e= (d = b &gt; a) &amp;&amp; (c = a &lt; b); 说出结果 并解释"></a>将上题中的 e= (d = b &gt; a) || (c = a &lt; b); 改为 e= (d = b &gt; a) &amp;&amp; (c = a &lt; b); 说出结果 并解释</h4><blockquote><p>1</p><p>1</p><p>1</p></blockquote><h1 id="10-C-语言流程控制"><a href="#10-C-语言流程控制" class="headerlink" title="10.C 语言流程控制"></a>10.C 语言流程控制</h1><p>人生选择坚持的人，虽然不一定会成功，但是一定无限接近于成功</p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><code>if</code>如果</p><p>分支语句的本质是选择</p><p>循环语句的本质是重复执行（重点是终止条件）</p><h3 id="常见循环"><a href="#常见循环" class="headerlink" title="常见循环"></a>常见循环</h3><h4 id="while：先判断，后循环，不达目的不罢休、"><a href="#while：先判断，后循环，不达目的不罢休、" class="headerlink" title="while：先判断，后循环，不达目的不罢休、"></a>while：先判断，后循环，不达目的不罢休、</h4><p>==实例==</p><p>打印99乘法表</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token comment">//核心就是i是从1-9，j每次都从1开始到与i同等大小为止</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> j<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">10</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="do-while：先执行，后判断"><a href="#do-while：先执行，后判断" class="headerlink" title="do while：先执行，后判断"></a>do while：先执行，后判断</h4><p>==实例==</p><p>计算1+2+3+…+(n-2)+(n-1)+n的值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">do</span><span class="token punctuation">&#123;</span>    sum <span class="token operator">=</span> sum <span class="token operator">+</span> i<span class="token punctuation">;</span>    i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">></span>n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="for-循环：指定生效次数"><a href="#for-循环：指定生效次数" class="headerlink" title="for 循环：指定生效次数"></a>for 循环：指定生效次数</h4><p>有1,2,3,4四个数字，能组成多少互不相同且无重复的三位数？都是多少？</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cont <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> j<span class="token operator">&lt;</span><span class="token number">5</span><span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> k<span class="token operator">++</span><span class="token punctuation">)</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> j<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i <span class="token operator">!=</span> k<span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>j <span class="token operator">!=</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token punctuation">&#123;</span>                    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d\n"</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>                    cont<span class="token operator">++</span>                <span class="token punctuation">&#125;</span>               <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"共计%d"</span><span class="token punctuation">,</span>cont<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="if-语句"><a href="#if-语句" class="headerlink" title="if 语句"></a>if 语句</h2><h3 id="1-如何控制程序的流程？"><a href="#1-如何控制程序的流程？" class="headerlink" title="1.如何控制程序的流程？"></a>1.如何控制程序的流程？</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">56</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">>=</span><span class="token number">68</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-if语句"><a href="#2-if语句" class="headerlink" title="2.if语句"></a>2.if语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>表达式x<span class="token punctuation">)</span><span class="token comment">//表达式可以是任何类型</span>    语句y<span class="token punctuation">;</span><span class="token comment">//当表达式x为真（非零）时，执行语句y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>一行里可以写很多语句</p><p>分支语句/无论条件如何，只有一个分支运行，只走一条线</p><p>可以精简代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">68</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不及格\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">70</span><span class="token punctuation">)</span><span class="token comment">//范围可以精简</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">80</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以嵌套</p><h3 id="练习-2"><a href="#练习-2" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="1-输入三个整数x-y-z，请把这三个数由小到大输出。"><a href="#1-输入三个整数x-y-z，请把这三个数由小到大输出。" class="headerlink" title="1.输入三个整数x,y,z，请把这三个数由小到大输出。"></a>1.输入三个整数x,y,z，请把这三个数由小到大输出。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">swap</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>a<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span>    temp <span class="token operator">=</span> <span class="token operator">*</span>a<span class="token punctuation">;</span>     <span class="token operator">*</span>a <span class="token operator">=</span> <span class="token operator">*</span>b<span class="token punctuation">;</span>    <span class="token operator">*</span>b <span class="token operator">=</span> temp<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> temp<span class="token punctuation">;</span><span class="token comment">//精妙三者排序</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>y<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">></span>z<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>x<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">></span>z<span class="token punctuation">)</span><span class="token function">swap</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d %d"</span><span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>      <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-判断某一年是否是闰年。"><a href="#2-判断某一年是否是闰年。" class="headerlink" title="2.判断某一年是否是闰年。"></a>2.判断某一年是否是闰年。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d年是闰年"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d年不是闰年"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3-一个5位数，判断它是不是回文数。即12321是-回文数-，个位与万位相同，十位与千位相同。（精）"><a href="#3-一个5位数，判断它是不是回文数。即12321是-回文数-，个位与万位相同，十位与千位相同。（精）" class="headerlink" title="3.一个5位数，判断它是不是回文数。即12321是==回文数==，个位与万位相同，十位与千位相同。（精）"></a>3.一个5位数，判断它是不是回文数。即12321是==回文数==，个位与万位相同，十位与千位相同。（精）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> a<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token operator">/</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>a<span class="token operator">/</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token operator">==</span><span class="token punctuation">(</span>a<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">10</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"是回文数\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不是回文数\n"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4-从键盘接收一个字符，如果是小写字母，就输出对应的大写字母。如果是大写字母，输出对应的小写字母。"><a href="#4-从键盘接收一个字符，如果是小写字母，就输出对应的大写字母。如果是大写字母，输出对应的小写字母。" class="headerlink" title="4.从键盘接收一个字符，如果是小写字母，就输出对应的大写字母。如果是大写字母，输出对应的小写字母。"></a>4.从键盘接收一个字符，如果是小写字母，就输出对应的大写字母。如果是大写字母，输出对应的小写字母。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> c<span class="token punctuation">;</span>    c <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//scang("%d",c)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">65</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c <span class="token operator">&lt;</span> <span class="token number">91</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>c<span class="token operator">+</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>c<span class="token operator">&lt;</span><span class="token number">123</span><span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span>c<span class="token operator">-</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"请重新输入"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>5.不运行程序，说出下面程序执行的结果</p><p>程序 1：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">80</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">>=</span> <span class="token number">80</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello World! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello Bcdaren! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"GoodBye! \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Hello World！</p></blockquote><p>程序 2：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> x <span class="token operator">=</span><span class="token number">2</span> <span class="token punctuation">,</span>y <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">,</span>z <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">int</span> n<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x <span class="token operator">>=</span> y<span class="token punctuation">)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>z <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">)</span>        n <span class="token operator">=</span> x <span class="token operator">+</span> y <span class="token operator">+</span> z<span class="token punctuation">;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>    n <span class="token operator">=</span> x <span class="token operator">*</span> y <span class="token operator">*</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">;</span>、<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>24</p></blockquote><h4 id="6-将-三目表达式转换成-if-else-表达式。-（a-gt-b）-a-gt-c-a-c-b-gt-c-b-c"><a href="#6-将-三目表达式转换成-if-else-表达式。-（a-gt-b）-a-gt-c-a-c-b-gt-c-b-c" class="headerlink" title="6.将 三目表达式转换成 if else 表达式。 （a &gt; b）? (a &gt; c ? a : c):(b &gt; c ? b : c);"></a>6.将 三目表达式转换成 if else 表达式。 （a &gt; b）? (a &gt; c ? a : c):(b &gt; c ? b : c);</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>b<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">></span>c<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>b<span class="token operator">></span>c<span class="token punctuation">)</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="7-输入三角形的三条边长，求三角形的周长和面积，判断构成的三角形是何种三角形（正三角形，等腰三角形，直角三角形），若不能构成三角形，输出提示。"><a href="#7-输入三角形的三条边长，求三角形的周长和面积，判断构成的三角形是何种三角形（正三角形，等腰三角形，直角三角形），若不能构成三角形，输出提示。" class="headerlink" title="7.输入三角形的三条边长，求三角形的周长和面积，判断构成的三角形是何种三角形（正三角形，等腰三角形，直角三角形），若不能构成三角形，输出提示。"></a>7.输入三角形的三条边长，求三角形的周长和面积，判断构成的三角形是何种三角形（正三角形，等腰三角形，直角三角形），若不能构成三角形，输出提示。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token punctuation">,</span>b<span class="token punctuation">,</span>c<span class="token punctuation">,</span>l<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>a<span class="token punctuation">,</span><span class="token operator">&amp;</span>b<span class="token punctuation">,</span><span class="token operator">&amp;</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token operator">+</span>b<span class="token operator">&lt;</span>c<span class="token operator">||</span>a<span class="token operator">+</span>c<span class="token operator">&lt;</span>b<span class="token operator">||</span>b<span class="token operator">+</span>c<span class="token operator">&lt;</span>a<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"不能构成三角形"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span>    <span class="token punctuation">&#123;</span>           l <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">+</span> c<span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">&amp;&amp;</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"正三角形\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">==</span>b<span class="token operator">||</span>b<span class="token operator">==</span>c<span class="token operator">||</span>a<span class="token operator">==</span>c<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"等腰三角形\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token operator">+</span>b<span class="token operator">*</span>b<span class="token operator">==</span>c<span class="token operator">*</span>c<span class="token operator">||</span>a<span class="token operator">*</span>a <span class="token operator">==</span> b<span class="token operator">*</span>b <span class="token operator">+</span> c<span class="token operator">*</span>c <span class="token operator">||</span>a<span class="token operator">*</span>a <span class="token operator">+</span> b<span class="token operator">*</span>b <span class="token operator">==</span> c<span class="token operator">*</span>c<span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"直角三角形\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"普通三角形\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>l<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(注： int x ; scanf(“%d”,&amp;x); // 表示从键盘接受一个整数，存入变量 x 中)</p><h2 id="switch语句"><a href="#switch语句" class="headerlink" title="switch语句"></a>switch语句</h2><h3 id="1-switch语句"><a href="#1-switch语句" class="headerlink" title="1.switch语句"></a>1.switch语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">switch</span><span class="token punctuation">(</span>表达式x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> 常量N<span class="token punctuation">;</span><span class="token comment">//字符也可以，字符也是常量。会转换成ACSII码</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> 常量N<span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>说明：</p><p>&lt;1&gt; 表达式x必须是整数类型</p><p>&lt;2&gt;  M K 必须是常量</p></blockquote><h3 id="switch语句的特点"><a href="#switch语句的特点" class="headerlink" title="switch语句的特点"></a>switch语句的特点</h3><ol><li>见到break才结束，case1忘记写，则继续执行下面的操作，直到break才退出switch语句</li><li>没有匹配的表达式，会执行default分支，如果没有defaulit分支，则直接跳过switch语句，如果不需要default。</li><li>default分支可以放在任何位置，不是必须放在最后</li><li>分支可以合并</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"case1执行了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>    <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//条件可以合并</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="与if…else语句的区别"><a href="#与if…else语句的区别" class="headerlink" title="与if…else语句的区别"></a>与if…else语句的区别</h3><p>如果分支多，效率高//4</p><p>if…else语句适合判断区间，而switch不适合</p><h3 id="练习-3"><a href="#练习-3" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="键盘输入-年-月-日，计算这一天是这一年的第几天"><a href="#键盘输入-年-月-日，计算这一天是这一年的第几天" class="headerlink" title="键盘输入 年 月 日，计算这一天是这一年的第几天"></a>键盘输入 年 月 日，计算这一天是这一年的第几天</h4><table><thead><tr><th>1</th><th>2</th><th>3</th><th>4</th><th>5</th><th>6</th><th>7</th><th>8</th><th>9</th><th>10</th><th>11</th><th>12</th></tr></thead><tbody><tr><td>30</td><td>28/29</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td><td>30</td></tr><tr><td>1</td><td>-2</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>1</td><td>0</td><td>1</td></tr><tr><td>0</td><td>1</td><td>-1</td><td>0</td><td>0</td><td>1</td><td>1</td><td>2</td><td>3</td><td>3</td><td>4</td><td>4</td></tr></tbody></table><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> y<span class="token punctuation">,</span>m<span class="token punctuation">,</span>d<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d%d%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>y<span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">,</span><span class="token operator">&amp;</span>d<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> today<span class="token punctuation">;</span>    today <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">30</span><span class="token operator">+</span>d<span class="token punctuation">;</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            today<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>            today<span class="token operator">-=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">6</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">7</span><span class="token operator">:</span>            today<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">8</span><span class="token operator">:</span>            today<span class="token operator">+=</span><span class="token number">2</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">9</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">10</span><span class="token operator">:</span>            today<span class="token operator">+=</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">11</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">12</span><span class="token operator">:</span>            today<span class="token operator">+=</span><span class="token number">4</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>y<span class="token operator">%</span><span class="token number">4</span><span class="token operator">==</span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>m<span class="token operator">></span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        today <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"今天是第%d天"</span><span class="token punctuation">,</span>today<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="单步调试"><a href="#单步调试" class="headerlink" title="单步调试"></a>单步调试</h2><p>一步一步执行调试</p><p>设置断点F9,取消断点F9</p><p>F5启动程序</p><p>shift+F5停止程序</p><p>F5单步走</p><h2 id="while语句"><a href="#while语句" class="headerlink" title="while语句"></a>while语句</h2><h3 id="1-while表达式"><a href="#1-while表达式" class="headerlink" title="1.while表达式"></a>1.while表达式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">while</span><span class="token punctuation">(</span>表达式）      <span class="token punctuation">&#123;</span>          <span class="token comment">//代码;</span>      <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-while语句举例"><a href="#2-while语句举例" class="headerlink" title="2.while语句举例"></a>2.while语句举例</h3><h4 id="输出1000行“hello-world”"><a href="#输出1000行“hello-world”" class="headerlink" title="输出1000行“hello world”"></a>输出1000行“hello world”</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token number">100</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"hello world\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="输出数组"><a href="#输出数组" class="headerlink" title="输出数组"></a>输出数组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>断点只能写在有语句的地方</p><h4 id="为数组的成员赋值-值得电容为下标-2：arr-i-i-2"><a href="#为数组的成员赋值-值得电容为下标-2：arr-i-i-2" class="headerlink" title="为数组的成员赋值,值得电容为下标*2：arr[i] = i * 2;"></a>为数组的成员赋值,值得电容为下标*2：arr[i] = i * 2;</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength  <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="打印一个数组成员的值（只打印值大于10的）"><a href="#打印一个数组成员的值（只打印值大于10的）" class="headerlink" title="打印一个数组成员的值（只打印值大于10的）"></a>打印一个数组成员的值（只打印值大于10的）</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength  <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span>nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span><span class="token number">10</span><span class="token punctuation">)</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用-冒泡算法-比较排列数组"><a href="#使用-冒泡算法-比较排列数组" class="headerlink" title="使用==冒泡算法==比较排列数组"></a>使用==冒泡算法==比较排列数组</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span>k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">int</span> temp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">while</span> <span class="token punctuation">(</span>k<span class="token operator">&lt;</span><span class="token punctuation">(</span>nlength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//控制循环次数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span><span class="token punctuation">(</span>nlength<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//元素比较，交换</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            temp <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            arr<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//代码要运行六次</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用continue打印数组偶数"><a href="#使用continue打印数组偶数" class="headerlink" title="使用continue打印数组偶数"></a>使用continue打印数组偶数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token number">53</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;</span> nlength<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-4"><a href="#练习-4" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="1-求-1-到-m-间所有奇数的和"><a href="#1-求-1-到-m-间所有奇数的和" class="headerlink" title="1.求 1 到 m 间所有奇数的和"></a>1.求 1 到 m 间所有奇数的和</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m<span class="token punctuation">;</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span><span class="token operator">&amp;</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span>m<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span>sum <span class="token operator">+=</span> i<span class="token punctuation">;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>sum<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-求两个数的最大公约数和最小公倍数"><a href="#2-求两个数的最大公约数和最小公倍数" class="headerlink" title="2.求两个数的最大公约数和最小公倍数"></a>2.求两个数的最大公约数和最小公倍数</h4><h4 id="3-从键盘循环接收字符串，并统计字母，空格，数字及其他字符的个数-回车结束"><a href="#3-从键盘循环接收字符串，并统计字母，空格，数字及其他字符的个数-回车结束" class="headerlink" title="3.从键盘循环接收字符串，并统计字母，空格，数字及其他字符的个数,回车结束"></a>3.从键盘循环接收字符串，并统计字母，空格，数字及其他字符的个数,回车结束</h4><h4 id="4-猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾就多吃了一个。第二天早上又将剩下的桃子吃了一半，还是不过瘾又多吃了一个。以后每天都吃前一天剩下的一半再加一个。到第-10-天刚好剩一个。问猴子第一天摘了多少个桃子？"><a href="#4-猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾就多吃了一个。第二天早上又将剩下的桃子吃了一半，还是不过瘾又多吃了一个。以后每天都吃前一天剩下的一半再加一个。到第-10-天刚好剩一个。问猴子第一天摘了多少个桃子？" class="headerlink" title="4.猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾就多吃了一个。第二天早上又将剩下的桃子吃了一半，还是不过瘾又多吃了一个。以后每天都吃前一天剩下的一半再加一个。到第 10 天刚好剩一个。问猴子第一天摘了多少个桃子？"></a>4.猴子第一天摘下若干个桃子，当即吃了一半，还不过瘾就多吃了一个。第二天早上又将剩下的桃子吃了一半，还是不过瘾又多吃了一个。以后每天都吃前一天剩下的一半再加一个。到第 10 天刚好剩一个。问猴子第一天摘了多少个桃子？</h4><h4 id="5-打印-9-9-乘法表"><a href="#5-打印-9-9-乘法表" class="headerlink" title="5.打印 9*9 乘法表"></a>5.打印 9*9 乘法表</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> i<span class="token punctuation">,</span>j<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>i<span class="token operator">&lt;=</span><span class="token number">9</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span>i<span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d*%d=%d "</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span>j<span class="token punctuation">,</span>i<span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">;</span>            j<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        i<span class="token operator">++</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="6-请用-while-循环打印如下图案"><a href="#6-请用-while-循环打印如下图案" class="headerlink" title="6.请用 while 循环打印如下图案"></a>6.请用 while 循环打印如下图案</h4><p>1</p><p>2 3</p><p>4 5 6</p><p>7 8 9 10</p><p>11 12 13 14 15</p><h4 id="7-小芳的妈妈每天给她-2-5-元，她都会存起来，但是每当这一天是存钱的第-5-天时或者-5-的倍数的话，她都会花去-6-元钱。请问，经过多少天小芳才可以存到-100-元。"><a href="#7-小芳的妈妈每天给她-2-5-元，她都会存起来，但是每当这一天是存钱的第-5-天时或者-5-的倍数的话，她都会花去-6-元钱。请问，经过多少天小芳才可以存到-100-元。" class="headerlink" title="7.小芳的妈妈每天给她 2.5 元，她都会存起来，但是每当这一天是存钱的第 5 天时或者 5 的倍数的话，她都会花去 6 元钱。请问，经过多少天小芳才可以存到 100 元。"></a>7.小芳的妈妈每天给她 2.5 元，她都会存起来，但是每当这一天是存钱的第 5 天时或者 5 的倍数的话，她都会花去 6 元钱。请问，经过多少天小芳才可以存到 100 元。</h4><h4 id="8-使用-while-循环，拼接两个字符串。"><a href="#8-使用-while-循环，拼接两个字符串。" class="headerlink" title="8.使用 while 循环，拼接两个字符串。"></a>8.使用 while 循环，拼接两个字符串。</h4><h2 id="do…while语句"><a href="#do…while语句" class="headerlink" title="do…while语句"></a>do…while语句</h2><h3 id="1-do…while语句"><a href="#1-do…while语句" class="headerlink" title="1.do…while语句"></a>1.do…while语句</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">do</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>表达式x<span class="token punctuation">)</span>；<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>执行do{}里面的代码</li><li>判断表达式x是否为真，为真时继续</li></ol><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">,</span><span class="token number">34</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">12</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//不成立也会成立</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>i <span class="token operator">&lt;</span> nlength<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//1时不断执行</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>至少会执行一次，所以，通常用来实现</p><p>做到…直到…为止</p><p>举例：</p><p>从键盘上输入字符，并显示，直到输入TAB为止</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> cInput<span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        cInput <span class="token operator">=</span> <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%c\n"</span><span class="token punctuation">,</span>cInput<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">getchar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cInput <span class="token operator">!=</span> <span class="token string">'\t'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-5"><a href="#练习-5" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="1-求-1～100-之间数的每位数的乘积大于每位数的和的数"><a href="#1-求-1～100-之间数的每位数的乘积大于每位数的和的数" class="headerlink" title="1.求 1～100 之间数的每位数的乘积大于每位数的和的数"></a>1.求 1～100 之间数的每位数的乘积大于每位数的和的数</h4><h4 id="2-输入一批非-0-数，直到输入-0-时为止，计算其中奇数的平均值和偶数的乘积。"><a href="#2-输入一批非-0-数，直到输入-0-时为止，计算其中奇数的平均值和偶数的乘积。" class="headerlink" title="==2.==输入一批非 0 数，直到输入 0 时为止，计算其中奇数的平均值和偶数的乘积。"></a>==2.==输入一批非 0 数，直到输入 0 时为止，计算其中奇数的平均值和偶数的乘积。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> cInput<span class="token punctuation">;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>b<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>        <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>cInput<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cInput<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            b <span class="token operator">=</span> b<span class="token operator">*</span>cInput<span class="token punctuation">;</span>        <span class="token keyword">else</span>        <span class="token punctuation">&#123;</span>            a<span class="token operator">+=</span>cInput<span class="token punctuation">;</span>            i<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>       <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span>cInput <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> av <span class="token operator">=</span> a<span class="token operator">/</span>i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d\n"</span><span class="token punctuation">,</span>av<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.计算 PI/4 = 1 - 1/3 + 1/5 - 1/7 +…，直到最后一项小于 10 负 6 次方。</p><p>4.编程将所有“水仙花数”打印出来，并打印其总个数。 “水仙花数”是一个 各个位立方之和等于该整数的三位数</p><p>5.验证“角谷猜想”， 判断给定的一个自然数，若为偶数除以 2，若为奇数则乘 3 加 1，得到一个新的自然数后按照上面的法则继续演算，一直到结果变为 1，并且将每一步的运算过程和得到的新的自然数显示出来。</p><p>6.百鸡问题：一只公鸡值 5 元，一只母鸡值 3 元，而 1 元可买 3 只小鸡。现有 100 元钱，想买 100 只鸡。问可买公鸡、母鸡、小鸡各几只？</p><p>7.编程实现：某人想将手中一张面值 100 元的人民币换成 5 元（可单换 20 张）、1 元（可单</p><p>换 100 张）和 0.5 元（可单换 200 张）面值的票子，但要求 100 元换以上的零钱共 100 张，</p><p>且要求每种不少于 1 张，共有多少种兑换方法。</p><p>8.韩信点兵：韩信才智过人，从不直接清点自己军队的人数，只要让士兵先后以三人一排、</p><p>五人一排、七人一排地变换队形，而他每次只掠一眼队伍的排尾就知道总人数了。输入 3</p><p>个非负整数 a，b，c，表示每种队形排尾的人数（a &lt; 3，b &lt; 5，c &lt; 7），输出总人数的最小值</p><p>（或报告无解）。已知总人数不小于 10，不超过 100。</p><p>9.一辆卡车违反交通规则，撞人后逃逸。现场有三位目击证人，但都没有记住车号，只记下</p><p>车号的一些特征。甲说：牌照的前两位数字是相同的。乙说：牌照的后两位数字是相同的，</p><p>但是和前两位不同。丙说;四位的车号刚好是一个整数的平方（四位车牌号&gt;999）。请用以上</p><p>线索求出车号。</p><p>\10. 有一对兔子，从出生后的第三个月起每个月都生一对兔子。小兔子长到三个月以后每个</p><p>月都生一对兔子。小兔子长到第三个月以后每个月又生一对兔子。假设所有的兔子都不死，</p><p>问 30 个月内每个月的兔子总数是多少。</p><p>11.如果整数 A 的全部因子（包括 1，不包括 A 本身）之和等于 B,且整数 B 的全部因子（包</p><p>括 1，不包括 B 本身）之和等于 A。则将 A 和 B 称为亲密数。求 3000 以内的全部亲密数。</p><h2 id="for语句"><a href="#for语句" class="headerlink" title="for语句"></a>for语句</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">31</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="函数-1"><a href="#函数-1" class="headerlink" title="函数"></a>函数</h2><h3 id="1-什么是函数"><a href="#1-什么是函数" class="headerlink" title="1.什么是函数"></a>1.什么是函数</h3><p>函数就是一系列指令的集合，可以完成某一些特定的功能</p><h3 id="2-函数定义的格式"><a href="#2-函数定义的格式" class="headerlink" title="2.函数定义的格式"></a>2.函数定义的格式</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c">返回类型 函数名<span class="token punctuation">(</span>参数列表<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    函数体；<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>说明：</p><ol><li>函数名：字母，数字和下划线的组合</li><li>参数列表:：可以没有，可以有多个，中间用“，”隔开：int x，int y。</li><li>返回值类型：函数结果的类型，可以没有void。</li><li>函数体：也可以是函数的具体实现</li></ol><h3 id="3-有参数有返回值的函数"><a href="#3-有参数有返回值的函数" class="headerlink" title="3.有参数有返回值的函数"></a>3.有参数有返回值的函数</h3><p>编写一个函数，能够对任意两个整数实现加法操作，并且返回结果</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span><span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">//占位符，int是返回类型,形式参数</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> z<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>避免编写相同的代码</p><h3 id="练习-6"><a href="#练习-6" class="headerlink" title="==练习=="></a>==练习==</h3><p>1.编写一个函数，求两个数的最大公约数并返回。</p><p>2.编写一个函数，求一个 int 类型数组所有成员的平均值，并输出数组中最接近平均值的成</p><p>员。</p><p>3.实现一个函数判断 year 是不是润年，是返回 1，不是返回 0。</p><p>4.实现一个函数，判断参数是不是素数，是返回 1，不是返回 0。</p><p>5.编写一个函数，可以将字符串 2 合并到字符串 1 中。</p><p>6.编写一个函数，打印 x*x 乘法表 x 为参数。</p><p>7.编写一个函数， int fun(int a,int b, int c);如果三个数相等返回 1，其中两个数相等返回 0，其他情况返回-1</p><p>8.编写一个函数,输出 x 以内所有的素数，x 为参数</p><p>9.一函数，输入一行字符，将此字符串中最长的单词输出，单词间以空格分隔。</p><p>10.定义一个函数，使给定的二维数组（3×3）转置，即行列转换，并输出转换前和转换后的数据。</p><h2 id="函数的灵活使用"><a href="#函数的灵活使用" class="headerlink" title="函数的灵活使用"></a>函数的灵活使用</h2><h3 id="1-函数的嵌套调用"><a href="#1-函数的嵌套调用" class="headerlink" title="1.函数的嵌套调用"></a>1.函数的嵌套调用</h3><p>函数声明有返回类型，必须使return进行返回</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>    <span class="token keyword">return</span> r<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Plus2</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span><span class="token keyword">int</span> b<span class="token punctuation">,</span><span class="token keyword">int</span> c<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">Plus</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> m <span class="token operator">=</span> <span class="token function">Plus</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> m<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//函数嵌套太多不好</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-函数可以作为表达式来使用"><a href="#2-函数可以作为表达式来使用" class="headerlink" title="2.函数可以作为表达式来使用"></a>2.函数可以作为表达式来使用</h3><p>输出某一个数组的素数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//判断某个数是否为素数，是1不是0</span><span class="token keyword">int</span> <span class="token function">IsPrime</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">%</span>i <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i<span class="token operator">&lt;</span>n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">IsPrime</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">//将函数直接作为表达式来使用</span>        <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-for循环的理解"><a href="#3-for循环的理解" class="headerlink" title="3.for循环的理解"></a>3.for循环的理解</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">Fu1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu1....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">u2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu2....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">Fu3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu3....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Fu4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Fu4....."</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>Fu1<span class="token punctuation">;</span>Fu2<span class="token operator">:</span>Fu3<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        Fu4<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数有返回值，就是一个值</p><h3 id="4-函数结束的标识"><a href="#4-函数结束的标识" class="headerlink" title="4.函数结束的标识"></a>4.函数结束的标识</h3><p>一个函数只能执行一次return</p><p>return 可以写多个，但只能执行一次</p><p>建议大家定义一个变量<code>r</code>定义返回结果</p><p>然后最后<code>return r</code></p><h2 id="函数的参数传递"><a href="#函数的参数传递" class="headerlink" title="函数的参数传递"></a>函数的参数传递</h2><h3 id="1-有参函数的调用"><a href="#1-有参函数的调用" class="headerlink" title="1.有参函数的调用"></a>1.有参函数的调用</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">Plus</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token comment">//形式参数，占位符</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x<span class="token operator">+</span>y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">Plus</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">//实参</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-值传递"><a href="#2-值传递" class="headerlink" title="2.值传递"></a>2.值传递</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token function">Fun</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//只能传递值</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-将数组作为参数传递"><a href="#3-将数组作为参数传递" class="headerlink" title="3.将数组作为参数传递"></a>3.将数组作为参数传递</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> arr<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> nlength <span class="token operator">=</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">/</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nlength<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n-----------------------\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Fun</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>j<span class="token operator">&lt;</span>nlength<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d "</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组作为参数传值的时候，是把当前数组的地址，是通过地址进行传递</p><p>int类型作为参数传递的时候传递的是值</p><h2 id="变量的作用范围"><a href="#变量的作用范围" class="headerlink" title="变量的作用范围"></a>变量的作用范围</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span><span class="token comment">//全局变量</span><span class="token keyword">void</span> <span class="token function">Fn1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">200</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">Fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>全局变量与局部变量</p><h3 id="总结-3"><a href="#总结-3" class="headerlink" title="总结"></a>总结</h3><h2 id="函数的递归调用"><a href="#函数的递归调用" class="headerlink" title="函数的递归调用"></a>函数的递归调用</h2><h3 id="1-函数自己调用自己"><a href="#1-函数自己调用自己" class="headerlink" title="1.函数自己调用自己"></a>1.函数自己调用自己</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">void</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"执行了\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><table><thead><tr><th>代码</th><th>内存</th><th></th></tr></thead><tbody><tr><td></td><td>栈</td><td>函数运行时所使用的内存称为栈</td></tr><tr><td></td><td>当程序用完之后依然没有使用栈内存，会报错</td><td>函数执行完会释放内存</td></tr></tbody></table><p>什么是栈溢出</p><h3 id="2-递归的经典应用"><a href="#2-递归的经典应用" class="headerlink" title="2.递归的经典应用"></a>2.递归的经典应用</h3><h4 id="1-求n的阶乘"><a href="#1-求n的阶乘" class="headerlink" title="1.求n的阶乘"></a>1.求n的阶乘</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">==</span><span class="token number">1</span><span class="token operator">||</span>n<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> n<span class="token punctuation">;</span>    <span class="token keyword">return</span> n<span class="token operator">*</span><span class="token function">Fn</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-斐波那栔数列：0-1-1-2-3-5-8-13…"><a href="#2-斐波那栔数列：0-1-1-2-3-5-8-13…" class="headerlink" title="2.斐波那栔数列：0,1,1,2,3,5,8,13…"></a>2.斐波那栔数列：0,1,1,2,3,5,8,13…</h4><p>求给定的x给y的值（y = Fn(x)）</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token keyword">int</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">Fn</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token function">Fn</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> r <span class="token operator">=</span> <span class="token function">Fn</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d"</span><span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结-4"><a href="#总结-4" class="headerlink" title="总结"></a>总结</h3><p>尽量不要使用，递归非常浪费内存</p><h1 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h1><h2 id="结构体的使用"><a href="#结构体的使用" class="headerlink" title="结构体的使用"></a>结构体的使用</h2><h3 id="1-引出问题"><a href="#1-引出问题" class="headerlink" title="1.引出问题"></a>1.引出问题</h3><p>当你需要一个容器能够存储1个字节，怎么做？//char</p><p>当你需要一个容器能够存储4个字节，你会怎么做?//int arr[10]</p><p>数组解决不了 成员之间类型不一样的问题</p><p>游戏角色</p><table><thead><tr><th>生命</th><th>魔法</th><th>技能</th><th>经验</th><th>血量</th><th>等级</th><th>移动速度</th></tr></thead><tbody><tr><td>int</td><td>int</td><td>int</td><td>int</td><td>int</td><td>int</td><td>float</td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="2-结构体类型的定义"><a href="#2-结构体类型的定义" class="headerlink" title="2.结构体类型的定义"></a>2.结构体类型的定义</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//先定义类型 == int/float/double</span><span class="token keyword">struct</span> <span class="token class-name">stPoint</span><span class="token comment">//看成声明一种类型</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//此时不占用内存空间</span><span class="token comment">//定义类型的变量</span><span class="token keyword">struct</span> <span class="token class-name">stPoint</span> point<span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stPoint point <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//初始化</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> 类型名<span class="token punctuation">&#123;</span>    <span class="token comment">//可以定义多种类型</span>    <span class="token keyword">int</span> a<span class="token punctuation">;</span>    <span class="token keyword">int</span> b<span class="token punctuation">;</span>    <span class="token keyword">float</span> c<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体在定义时要字节对齐</p><p>比如都是char，会自动扩充至int</p><h3 id="3-结构体赋值"><a href="#3-结构体赋值" class="headerlink" title="3.结构体赋值"></a>3.结构体赋值</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//单独赋值</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stStudent studen <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//单独赋值</span>    student<span class="token punctuation">.</span>stucode <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>stuSex <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>stuName<span class="token punctuation">,</span><span class="token string">"编程达人"</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="4-如何读写变量中的值"><a href="#4-如何读写变量中的值" class="headerlink" title="4.如何读写变量中的值"></a>4.如何读写变量中的值</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stStudent studen <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//单独赋值</span>    student<span class="token punctuation">.</span>stucode <span class="token operator">=</span> <span class="token number">101</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>stuAge <span class="token operator">=</span> <span class="token number">18</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>stuSex <span class="token operator">=</span> <span class="token string">'M'</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>stuName<span class="token punctuation">,</span><span class="token string">"编程达人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> x <span class="token operator">=</span> student<span class="token punctuation">.</span>stucode<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buffer<span class="token punctuation">,</span>student<span class="token punctuation">.</span>stuName<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体的大小未必是整体大小</p><h3 id="练习-7"><a href="#练习-7" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="1-为什么要定义结构体类型？"><a href="#1-为什么要定义结构体类型？" class="headerlink" title="1.为什么要定义结构体类型？"></a>1.为什么要定义结构体类型？</h4><p>当数组内的类型不一样时，定义结构体类型</p><h4 id="2-结构体类型可以在函数里定义吗？"><a href="#2-结构体类型可以在函数里定义吗？" class="headerlink" title="2.结构体类型可以在函数里定义吗？"></a>2.结构体类型可以在函数里定义吗？</h4><p>可以，但是要赋值，否则会出现乱码</p><h3 id="3-代码这么写，有错误么"><a href="#3-代码这么写，有错误么" class="headerlink" title="3.代码这么写，有错误么"></a>3.代码这么写，有错误么</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">Person</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"itcast"</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> age<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>有错误</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">strcpy</span><span class="token punctuation">(</span>Person<span class="token punctuation">.</span>name<span class="token punctuation">,</span><span class="token string">"itcast"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="4-申请几个结构体变量，分别用视频中的方法对它赋值。"><a href="#4-申请几个结构体变量，分别用视频中的方法对它赋值。" class="headerlink" title="4.申请几个结构体变量，分别用视频中的方法对它赋值。"></a>4.申请几个结构体变量，分别用视频中的方法对它赋值。</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Books</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> type<span class="token punctuation">;</span>    <span class="token keyword">char</span> name<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> author<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Book_ID<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Books</span> Book <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">"typora"</span><span class="token punctuation">,</span><span class="token string">"tom"</span><span class="token punctuation">,</span><span class="token number">123123</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>Book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>Book<span class="token punctuation">.</span>author<span class="token punctuation">,</span><span class="token string">"tony"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s "</span><span class="token punctuation">,</span>Book<span class="token punctuation">.</span>author<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-定义结构体Student，包含成员姓名，年龄，身高，嵌套包含结构体Score-。定义结构体Score-包含成员-数学，语文，英语，三科成绩。申请结构体Student变量，对其成员赋值后打印输出至控制台。"><a href="#5-定义结构体Student，包含成员姓名，年龄，身高，嵌套包含结构体Score-。定义结构体Score-包含成员-数学，语文，英语，三科成绩。申请结构体Student变量，对其成员赋值后打印输出至控制台。" class="headerlink" title="5.定义结构体Student，包含成员姓名，年龄，身高，嵌套包含结构体Score,。定义结构体Score,包含成员 数学，语文，英语，三科成绩。申请结构体Student变量，对其成员赋值后打印输出至控制台。"></a>5.定义结构体Student，包含成员姓名，年龄，身高，嵌套包含结构体Score,。定义结构体Score,包含成员 数学，语文，英语，三科成绩。申请结构体Student变量，对其成员赋值后打印输出至控制台。</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Scores</span><span class="token comment">//声明类型</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Math<span class="token punctuation">;</span>    <span class="token keyword">int</span> Chinese<span class="token punctuation">;</span>    <span class="token keyword">int</span> English<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">Students</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> Name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> Age<span class="token punctuation">;</span>    <span class="token keyword">float</span> Height<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">Scores</span> score<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">struct</span> <span class="token class-name">Students</span> student <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"Tom"</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">176</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>Math <span class="token operator">=</span> <span class="token number">67</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>Chinese <span class="token operator">=</span> <span class="token number">78</span><span class="token punctuation">;</span>    student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>English <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"Tony"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>Math<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>score<span class="token punctuation">.</span>English<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span>student<span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>6.定义一个结构体表示点的 x，y 坐标，依次读入三个正整形坐标值，输出三个点构成的三角形面积</p><p>用到头文件#include&lt;math.h&gt;用到开方函数 sqrt().</p><p>7.在全局定义的结构体和在局部定义的结构体有什么区别？</p><p>8.</p><p>&lt;1&gt;编写一函数，计算两个日期之间的时间差，并将其值返回。</p><p>日期以年、月、日表示。“时间差”以天数表示。注意考虑日期之间的闰年。</p><p>函数的输入参数为日期 1 和日期 2,函数的返回值为时间差，单位为天数。</p><p>&lt;2&gt;编写一程序，在主函数中输入两个日期,调用上述函数计算两个日期之间的时间差，并将结果输出。</p><h2 id="结构体的其他特征"><a href="#结构体的其他特征" class="headerlink" title="结构体的其他特征"></a>结构体的其他特征</h2><h3 id="1-结构体参数传递"><a href="#1-结构体参数传递" class="headerlink" title="1.结构体参数传递"></a>1.结构体参数传递</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">MyPrint</span><span class="token punctuation">(</span>stPoint point<span class="token punctuation">)</span><span class="token comment">//结构体也可以变量，你可以用其他任何地方当返回值</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d %d \n"</span><span class="token punctuation">,</span>point<span class="token punctuation">.</span>x<span class="token punctuation">,</span>point<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结构体参数为int/char/float/double等基本类型时，传递的是值，是在复制内容</p><p>参数为数组类型时，传递的是地址</p><h3 id="2-结构体赋值"><a href="#2-结构体赋值" class="headerlink" title="2.结构体赋值"></a>2.结构体赋值</h3><p>允许p=p2，结构类型相同</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">stPoint p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>p1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>p2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span>；p1 <span class="token operator">=</span> p2；<span class="token comment">//赋值</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="3-不推荐的写法"><a href="#3-不推荐的写法" class="headerlink" title="3.不推荐的写法"></a>3.不推荐的写法</h3><ol><li>匿名结构体</li><li>直接定义变量</li></ol><h2 id="结构体数组"><a href="#结构体数组" class="headerlink" title="结构体数组"></a>结构体数组</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token comment">//定义结构体类型</span><span class="token keyword">struct</span> <span class="token class-name">stStudent</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> Code<span class="token punctuation">;</span>    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    stStudent student<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token operator">=</span>    <span class="token punctuation">&#123;</span>        <span class="token punctuation">&#123;</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token string">"zhang san"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token string">"li si"</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span><span class="token number">103</span><span class="token punctuation">,</span><span class="token string">"wang wu"</span><span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//如何定义一个结构体类型的数组</span>    <span class="token comment">//调用</span>    <span class="token keyword">int</span> x <span class="token operator">=</span> student<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span>student<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//改</span>    student<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>Code <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>code<span class="token punctuation">,</span><span class="token string">"sda"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="练习-8"><a href="#练习-8" class="headerlink" title="==练习=="></a>==练习==</h3><h4 id="精简学生信息管理系统。"><a href="#精简学生信息管理系统。" class="headerlink" title="精简学生信息管理系统。"></a>精简学生信息管理系统。</h4><p>&lt;1&gt;定义结构体包含如下信息:学生姓名，性别，语文数学英语成绩。</p><p>&lt;2&gt;设某班有20个学生，请实现以下功能：</p><p>1.可以录入学生信息。</p><p>2.可以删除学生信息。</p><p>3.可以查找学生信息。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">students</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> Name<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> gender<span class="token punctuation">;</span>    <span class="token keyword">int</span> math<span class="token punctuation">;</span>    <span class="token keyword">int</span> chinese<span class="token punctuation">;</span>    <span class="token keyword">int</span> english<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">struct</span> <span class="token class-name">students</span> student<span class="token punctuation">[</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">20</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">strcpy</span><span class="token punctuation">(</span>student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>Name<span class="token punctuation">,</span><span class="token string">"张三"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>math <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>        student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>english <span class="token operator">=</span> <span class="token number">87</span><span class="token punctuation">;</span>        student<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>chinese <span class="token operator">=</span> <span class="token number">97</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h1><h2 id="指针类型-1"><a href="#指针类型-1" class="headerlink" title="指针类型"></a>指针类型</h2><h3 id="1-定义带-的类型的变量"><a href="#1-定义带-的类型的变量" class="headerlink" title="1.定义带*的类型的变量"></a>1.定义带*的类型的变量</h3><table><thead><tr><th>char        x;</th><th>char*        x;</th></tr></thead><tbody><tr><td>short        y;</td><td>short*       y;</td></tr><tr><td>int            z;</td><td>int*            z;</td></tr><tr><td>float         f;</td><td>float*         f;</td></tr><tr><td>double    d;</td><td>double*    d;</td></tr><tr><td>student    st;</td><td>student*    st;</td></tr></tbody></table><h4 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h4><p>1.带有*变量类型的标准写法：变量类型 * 变量名</p><p>2.任何类型都可以带 * 加上以后就是新的类型，统称为“指针类型”</p><p>3.*可以是任意多                                                                     </p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span><span class="token operator">*</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span><span class="token operator">*</span> y<span class="token punctuation">;</span>    Point<span class="token operator">*</span> point<span class="token punctuation">;</span>    x <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//指针类型的赋值</span>    point <span class="token operator">=</span> <span class="token punctuation">(</span>Point<span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针的本质是类型</p><p>指针本质类型的4个字节</p><h3 id="指针类型的运算"><a href="#指针类型的运算" class="headerlink" title="指针类型的运算"></a>指针类型的运算</h3><p>++</p><p>–</p><p>运算幅度是类型砍掉一个类型之后的类型宽度</p><p>总结：</p><p>1.不带 * 类型的变量，++ 或者 – 都是加 1或者减1</p><p>2.带<em>类型的变量，++或者–新增（减少）的数量是去掉一个</em>后变量的宽度</p><p>指针类型的变量宽度永远是4字节</p><p>还可以跟整数做运算</p><h2 id="指针类型的使用"><a href="#指针类型的使用" class="headerlink" title="指针类型的使用"></a>指针类型的使用</h2><p>任何一个变量都加 * 变为新的类型</p><p>指针类型</p><table><thead><tr><th>内存4GB</th><th></th></tr></thead><tbody><tr><td>BYTE</td><td>0</td></tr><tr><td>内容-12345</td><td>1(当前内存的编号，代号不需要存储)</td></tr><tr><td></td><td>2</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td>…</td><td></td></tr><tr><td></td><td>0xFFFFFFFF</td></tr></tbody></table><h3 id="1-取地址符-amp"><a href="#1-取地址符-amp" class="headerlink" title="1.取地址符&amp;"></a>1.取地址符&amp;</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">inlcude</span> <span class="token expression"><span class="token operator">&lt;</span>stdio<span class="token punctuation">.</span>h<span class="token operator">></span></span></span><span class="token keyword">struct</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> a <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token comment">//&amp;a char*</span>    <span class="token keyword">short</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//&amp;b short*</span>    <span class="token keyword">int</span> c <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">//&amp;c int8</span>    Point p <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//&amp;d point*</span>        <span class="token keyword">char</span><span class="token operator">*</span> pa <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token number">0x12FF7c</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> x <span class="token operator">=</span> <span class="token operator">*</span>pa<span class="token punctuation">;</span><span class="token comment">//指针变量</span>    <span class="token operator">*</span>pa <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d \n"</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>    pa<span class="token operator">-></span>x <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>    pa<span class="token operator">-></span>y <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token function">printf9</span><span class="token punctuation">(</span><span class="token string">"%d %d \n"</span><span class="token punctuation">,</span> pa<span class="token operator">-></span>x<span class="token punctuation">,</span>pa<span class="token operator">-></span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>指针: 间接引用运算符 *</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">nurse <span class="token operator">=</span> <span class="token number">22</span><span class="token punctuation">;</span>ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>nurse<span class="token punctuation">;</span>val <span class="token operator">=</span> <span class="token operator">*</span>ptr<span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>变量也有两个属性:地址和值。地址就是变量在计算机内部的名称</p><p>许多程序中，地址都归计算机管，对程序员隐藏。然而在C中，可以通过&amp;运算符访问地址，通过*运算符获得地址上的值。</p><p>简而言之，普通变量把值作为基本量，把地址作为通过&amp;运算符获得的派生量，而指针变量把地址作为基本量，把值作为通过*运算符获得的派生量。</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>有时需要把数组设置为只读，这样程序只能从数组中检索值。不能把新值写入数组，要创建只读数组，应该用const声明数组</p><h1 id="动态申请内存"><a href="#动态申请内存" class="headerlink" title="动态申请内存"></a>动态申请内存</h1><h2 id="1-引出问题-1"><a href="#1-引出问题-1" class="headerlink" title="1.引出问题"></a>1.引出问题</h2><p>如果我在程序编译的时候，我并不知道存多少</p><h2 id="2-内存管理"><a href="#2-内存管理" class="headerlink" title="2.内存管理"></a>2.内存管理</h2><p>代码区</p><p>全局变量区</p><p>常量区</p><p>栈（参数局部变量）</p><p>堆</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">struct</span> <span class="token class-name">Student</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> x<span class="token punctuation">;</span>    <span class="token keyword">int</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//int</span>    <span class="token keyword">int</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token operator">*</span><span class="token punctuation">)</span>malloc<span class="token punctuation">&#123;</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//(int*)强制类型转换</span>    <span class="token keyword">char</span><span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>malloc<span class="token punctuation">&#123;</span><span class="token number">200</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//申请结构体</span>    Student<span class="token operator">*</span> p <span class="token operator">=</span> <span class="token punctuation">(</span>Student<span class="token operator">*</span><span class="token punctuation">)</span><span class="token function">malloc</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token operator">*</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>Student<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">free</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//释放掉内存</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文件类型"><a href="#文件类型" class="headerlink" title="文件类型"></a>文件类型</h3><table><thead><tr><th>堆内存</th><th>有人帮你记录</th></tr></thead><tbody><tr><td>1-5int</td><td>Begin-Bigin+5</td></tr><tr><td>2-8int</td><td>Begin-Bigin+8</td></tr><tr><td>3-9int</td><td>Begin-Begin+9</td></tr></tbody></table><p>会出现碎片</p><p>导致出现一个空白的内存</p><p>整个堆空间有一部分用了，有一部分没用，整个内存没有连续，当你申请一个较大内存的时候</p><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ol><li>如果申请成功，则会返回地址，返回成功才能使用</li><li>malloc申请的内存，必须使用free释放掉</li><li>free之后，将指针置空，避免出现野指针…</li></ol><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><h2 id="1-什么是文件？为什么要使用文件？"><a href="#1-什么是文件？为什么要使用文件？" class="headerlink" title="1.什么是文件？为什么要使用文件？"></a>1.什么是文件？为什么要使用文件？</h2><p>用于永久存储数据</p><h2 id="2-文件的特点"><a href="#2-文件的特点" class="headerlink" title="2.文件的特点"></a>2.文件的特点</h2><p>1.文件名</p><p>2.文件路径</p><p>3.文件大小</p><p>4.文件属性：只读、可读可写，隐藏</p><h3 id="文件类型-1"><a href="#文件类型-1" class="headerlink" title="文件类型"></a>文件类型</h3><p>文本文件</p><p>二进制文件</p><h2 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h2><h3 id="1-C语言中由于操作文件的相关函数"><a href="#1-C语言中由于操作文件的相关函数" class="headerlink" title="1.C语言中由于操作文件的相关函数"></a>1.C语言中由于操作文件的相关函数</h3><p>头文件</p><p>#include &lt;stdio.h&gt;</p><p>相关函数</p><p>fopen、fclose、fread、fwrite、fseek等</p><p>文件操作流程</p><p>第一步：打开文件</p><p>第二步：处理文件</p><p>第三步：关闭文件</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;windows.h></span></span><span class="token keyword">void</span> <span class="token function">TestWriterfile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//1.打开文件，2.向文件中写数据，3.关闭文件</span>    <span class="token keyword">char</span> szPath<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"C:\\Test.txt"</span><span class="token punctuation">;</span>    FILE<span class="token operator">*</span> pFile <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>        <span class="token keyword">char</span> szBuffer<span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//创建缓冲区</span>        pFile <span class="token operator">=</span> <span class="token function">fopen</span><span class="token punctuation">(</span>szPath<span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//wb,如果文件不存在，创建一个新的文件，如果文件存在则清零</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>pFile <span class="token operator">==</span> <span class="token constant">NULL</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件打开失败 \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//从文件中写数据</span>    <span class="token function">memset</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token keyword">sizeof</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">,</span><span class="token string">"China"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    nWrite <span class="token operator">=</span> <span class="token function">fwrite</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>szBuffer<span class="token punctuation">)</span><span class="token punctuation">,</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//一次多少，写多少个，写入文件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>nWrite <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件写入失败"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//关闭文件</span>    <span class="token function">fclose</span><span class="token punctuation">(</span>pFile<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">TestWritefile</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="预处理之宏定义"><a href="#预处理之宏定义" class="headerlink" title="预处理之宏定义"></a>预处理之宏定义</h1><h2 id="什么是预处理"><a href="#什么是预处理" class="headerlink" title="什么是预处理"></a>什么是预处理</h2><p>预处理一般是指在程序源代码被转换为二进制代码之前，由预处理器对程序源代码文本进行处理，处理后的结果再由编译器进一步编译。</p><p>预处理功能主要包括宏定义，文件包含，条件编译三部分</p><p>宏定义不能加分号</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">NAME </span><span class="token string">"编程达人"</span><span class="token comment">//可以替换字符串，0,1，可以替换任何东西不会管你原来是什么</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token number">1</span> TRUE</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token number">0</span> FALSE</span></span><span class="token keyword">int</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span><span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s \n"</span><span class="token punctuation">,</span><span class="token string">"编程达人"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>宏定义可以替换任何东西</p><h2 id="宏定义"><a href="#宏定义" class="headerlink" title="宏定义"></a>宏定义</h2><p>带参数的宏</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression">NAME </span><span class="token string">"编程达人"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token expression"><span class="token function">MAX</span><span class="token punctuation">(</span>A<span class="token punctuation">,</span>B<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">></span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">?</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token operator">:</span><span class="token punctuation">(</span>B<span class="token punctuation">)</span><span class="token punctuation">)</span></span><span class="token comment">//会被原封不动的替换成你设置的样子，其中要注意空格的位置，在MAX与（A.B)之间不能加空格，否则会出错</span></span><span class="token keyword">void</span> <span class="token function">Fun</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">MAX</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span> argc<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="注意事项-1"><a href="#注意事项-1" class="headerlink" title="==注意事项=="></a>==注意事项==</h3><ol><li>只做字符序列的替换工作，不做任何语法的检查，在编译前处理</li><li>宏名标识符与圆括号之间不允许存在空格</li><li>为了避免出错，宏定义中要给形参加上括号</li><li>多行声明时，回车前要加上字符==’&#39;==,即==”[enter]”==，注意字符</li><li>==” \ “==后要紧跟回车键，中间不能有空格或其他字符</li><li>末尾不要分号</li></ol><h2 id="条件编译"><a href="#条件编译" class="headerlink" title="条件编译"></a>条件编译</h2><p>条件编译就是可以选择，那些代码需要编译，那些代码不需要编译、</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
